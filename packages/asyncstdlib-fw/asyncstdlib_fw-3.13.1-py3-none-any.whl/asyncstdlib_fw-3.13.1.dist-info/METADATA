Metadata-Version: 2.1
Name: asyncstdlib-fw
Version: 3.13.1
Keywords: async,enumerate,itertools,builtins,functools,contextlib
Author-Email: =?utf-8?b?TWF4IEvDvGhu?= <maxfischer2781@gmail.com>
License: MIT License
         
         Copyright (c) 2019 - 2024 Max KÃ¼hn
         
         Permission is hereby granted, free of charge, to any person obtaining a copy
         of this software and associated documentation files (the "Software"), to deal
         in the Software without restriction, including without limitation the rights
         to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
         copies of the Software, and to permit persons to whom the Software is
         furnished to do so, subject to the following conditions:
         
         The above copyright notice and this permission notice shall be included in all
         copies or substantial portions of the Software.
         
         THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
         IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
         FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
         AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
         LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
         OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
         SOFTWARE.
         
Classifier: Development Status :: 5 - Production/Stable
Classifier: Framework :: AsyncIO
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Project-URL: Documentation, https://asyncstdlib.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/maxfischer2781/asyncstdlib
Requires-Python: >=3.8
Provides-Extra: test
Requires-Dist: pytest; extra == "test"
Requires-Dist: flake8; extra == "test"
Requires-Dist: flake8-bugbear; extra == "test"
Requires-Dist: black; implementation_name == "cpython" and extra == "test"
Requires-Dist: coverage; extra == "test"
Requires-Dist: pytest-cov; extra == "test"
Requires-Dist: flake8-2020; extra == "test"
Requires-Dist: mypy; implementation_name == "cpython" and extra == "test"
Provides-Extra: typetest
Requires-Dist: mypy; implementation_name == "cpython" and extra == "typetest"
Requires-Dist: pyright; extra == "typetest"
Requires-Dist: typing-extensions; extra == "typetest"
Provides-Extra: doc
Requires-Dist: sphinx; extra == "doc"
Requires-Dist: sphinxcontrib-trio; extra == "doc"
Description-Content-Type: text/x-rst

================================================
``asyncstdlib`` -- the missing ``async`` toolbox
================================================

.. image:: https://readthedocs.org/projects/asyncstdlib/badge/?version=latest
    :target: http://asyncstdlib.readthedocs.io/en/latest/?badge=latest
    :alt: Documentation Status

.. image:: https://img.shields.io/pypi/v/asyncstdlib.svg
    :alt: Available on PyPI
    :target: https://pypi.python.org/pypi/asyncstdlib/

.. image:: https://anaconda.org/conda-forge/asyncstdlib/badges/version.svg
    :alt: Available on Conda-Forge
    :target: https://anaconda.org/conda-forge/asyncstdlib

.. image:: https://img.shields.io/github/license/maxfischer2781/asyncstdlib.svg
    :alt: License
    :target: https://github.com/maxfischer2781/asyncstdlib/blob/master/LICENSE

.. image:: https://badges.gitter.im/maxfischer2781/asyncstdlib.svg
    :target: https://gitter.im/maxfischer2781/asyncstdlib?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge
    :alt: Development Chat

The ``asyncstdlib`` library re-implements functions and classes of the Python
standard library to make them compatible with ``async`` callables, iterables
and context managers.
It is fully agnostic to ``async`` event loops and seamlessly works with
``asyncio``, third-party libraries such as ``trio``, as well as
any custom ``async`` event loop.

* Full set of ``async`` versions of advantageous standard library helpers,
  such as ``zip``, ``map``, ``enumerate``, ``functools.reduce``,
  ``itertools.tee``, ``itertools.groupby`` and many others.
* Safe handling of ``async`` iterators to ensure prompt cleanup, as well as
  various helpers to simplify safely using custom ``async`` iterators.
* Small but powerful toolset to seamlessly integrate existing sync code
  into ``async`` programs and libraries.

Check out the `documentation`_ to get started or take a look around.

.. _documentation: http://asyncstdlib.readthedocs.io/