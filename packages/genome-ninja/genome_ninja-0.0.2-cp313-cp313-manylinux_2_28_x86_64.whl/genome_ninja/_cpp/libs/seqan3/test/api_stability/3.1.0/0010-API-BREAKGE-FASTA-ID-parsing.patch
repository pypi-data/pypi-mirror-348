From 50f7a76f13399faafd1c44e94ad01e5d34cc663d Mon Sep 17 00:00:00 2001
From: Simon Gene Gottlieb <simon@gottliebtfreitag.de>
Date: Tue, 26 Oct 2021 10:37:46 +0200
Subject: [PATCH 10/12] [API] [BREAKGE] FASTA ID parsing

---
 .../sequence_file_input_aminoacid.cpp         |  6 +-
 .../sequence_file_input_auto_ref.cpp          |  6 +-
 .../sequence_file_input_custom_fields.cpp     |  6 +-
 .../sequence_file_input_decomposed.cpp        |  6 +-
 .../sequence_file_input_file_view.cpp         |  6 +-
 .../sequence_file_input_istringstream.cpp     |  6 +-
 .../sequence_file_input_record_iter.cpp       |  6 +-
 .../sequence_file_input_record_move.cpp       |  6 +-
 .../sequence_file_input_return_record.cpp     |  6 +-
 ...ence_file_input_template_specification.cpp |  6 +-
 .../sequence_file_input_trait_overwrite.cpp   |  6 +-
 .../sequence_file_format_fasta_test.cpp       | 74 +++++++++----------
 .../sequence_file_input_test.cpp              | 10 +--
 .../sequence_file_integration_test.cpp        | 57 ++++++++++----
 .../sequence_file_output_test.cpp             | 10 ++-
 15 files changed, 123 insertions(+), 94 deletions(-)

diff --git a/test/snippet/io/sequence_file/sequence_file_input_aminoacid.cpp b/test/snippet/io/sequence_file/sequence_file_input_aminoacid.cpp
index a3a26153b..7b6238244 100644
--- a/test/snippet/io/sequence_file/sequence_file_input_aminoacid.cpp
+++ b/test/snippet/io/sequence_file/sequence_file_input_aminoacid.cpp
@@ -2,11 +2,11 @@
 
 #include <seqan3/io/sequence_file/input.hpp>
 
-auto input = R"(> TEST1
+auto input = R"(>TEST1
 ACGT
-> Test2
+>Test2
 AGGCTGA
-> Test3
+>Test3
 GGAGTATAATATATATATATATAT)";
 
 int main()
diff --git a/test/snippet/io/sequence_file/sequence_file_input_auto_ref.cpp b/test/snippet/io/sequence_file/sequence_file_input_auto_ref.cpp
index a496f8c35..b429f7cad 100644
--- a/test/snippet/io/sequence_file/sequence_file_input_auto_ref.cpp
+++ b/test/snippet/io/sequence_file/sequence_file_input_auto_ref.cpp
@@ -4,11 +4,11 @@
 
 #include <seqan3/io/sequence_file/input.hpp>
 
-auto input = R"(> TEST1
+auto input = R"(>TEST1
 ACGT
-> Test2
+>Test2
 AGGCTGA
-> Test3
+>Test3
 GGAGTATAATATATATATATATAT)";
 
 int main()
diff --git a/test/snippet/io/sequence_file/sequence_file_input_custom_fields.cpp b/test/snippet/io/sequence_file/sequence_file_input_custom_fields.cpp
index c6e06f416..345011f49 100644
--- a/test/snippet/io/sequence_file/sequence_file_input_custom_fields.cpp
+++ b/test/snippet/io/sequence_file/sequence_file_input_custom_fields.cpp
@@ -4,11 +4,11 @@
 #include <seqan3/core/debug_stream.hpp>
 #include <seqan3/io/sequence_file/input.hpp>
 
-auto input = R"(> TEST1
+auto input = R"(>TEST1
 ACGT
-> Test2
+>Test2
 AGGCTGA
-> Test3
+>Test3
 GGAGTATAATATATATATATATAT)";
 
 int main()
diff --git a/test/snippet/io/sequence_file/sequence_file_input_decomposed.cpp b/test/snippet/io/sequence_file/sequence_file_input_decomposed.cpp
index aaf3495bc..9f62d1780 100644
--- a/test/snippet/io/sequence_file/sequence_file_input_decomposed.cpp
+++ b/test/snippet/io/sequence_file/sequence_file_input_decomposed.cpp
@@ -1,11 +1,11 @@
 #include <seqan3/core/debug_stream.hpp>
 #include <seqan3/io/sequence_file/input.hpp>
 
-auto input = R"(> TEST1
+auto input = R"(>TEST1
 ACGT
-> Test2
+>Test2
 AGGCTGA
-> Test3
+>Test3
 GGAGTATAATATATATATATATAT)";
 
 int main()
diff --git a/test/snippet/io/sequence_file/sequence_file_input_file_view.cpp b/test/snippet/io/sequence_file/sequence_file_input_file_view.cpp
index 7ae438bbf..567c22c07 100644
--- a/test/snippet/io/sequence_file/sequence_file_input_file_view.cpp
+++ b/test/snippet/io/sequence_file/sequence_file_input_file_view.cpp
@@ -4,11 +4,11 @@
 #include <seqan3/io/sequence_file/input.hpp>
 #include <seqan3/std/ranges>
 
-auto input = R"(> TEST1
+auto input = R"(>TEST1
 ACGT
-> Test2
+>Test2
 AGGCTGA
-> Test3
+>Test3
 GGAGTATAATATATATATATATAT)";
 
 int main()
diff --git a/test/snippet/io/sequence_file/sequence_file_input_istringstream.cpp b/test/snippet/io/sequence_file/sequence_file_input_istringstream.cpp
index b03cba40a..86d2cded0 100644
--- a/test/snippet/io/sequence_file/sequence_file_input_istringstream.cpp
+++ b/test/snippet/io/sequence_file/sequence_file_input_istringstream.cpp
@@ -3,11 +3,11 @@
 
 #include <seqan3/io/sequence_file/input.hpp>
 
-auto input = R"(> TEST1
+auto input = R"(>TEST1
 ACGT
-> Test2
+>Test2
 AGGCTGA
-> Test3
+>Test3
 GGAGTATAATATATATATATATAT)";
 
 int main()
diff --git a/test/snippet/io/sequence_file/sequence_file_input_record_iter.cpp b/test/snippet/io/sequence_file/sequence_file_input_record_iter.cpp
index 6506213f4..5d1451296 100644
--- a/test/snippet/io/sequence_file/sequence_file_input_record_iter.cpp
+++ b/test/snippet/io/sequence_file/sequence_file_input_record_iter.cpp
@@ -3,11 +3,11 @@
 #include <seqan3/core/debug_stream.hpp>
 #include <seqan3/io/sequence_file/input.hpp>
 
-auto input = R"(> TEST1
+auto input = R"(>TEST1
 ACGT
-> Test2
+>Test2
 AGGCTGA
-> Test3
+>Test3
 GGAGTATAATATATATATATATAT)";
 
 int main()
diff --git a/test/snippet/io/sequence_file/sequence_file_input_record_move.cpp b/test/snippet/io/sequence_file/sequence_file_input_record_move.cpp
index 123f62dc9..3d034c876 100644
--- a/test/snippet/io/sequence_file/sequence_file_input_record_move.cpp
+++ b/test/snippet/io/sequence_file/sequence_file_input_record_move.cpp
@@ -3,11 +3,11 @@
 
 #include <seqan3/io/sequence_file/input.hpp>
 
-auto input = R"(> TEST1
+auto input = R"(>TEST1
 ACGT
-> Test2
+>Test2
 AGGCTGA
-> Test3
+>Test3
 GGAGTATAATATATATATATATAT)";
 
 int main()
diff --git a/test/snippet/io/sequence_file/sequence_file_input_return_record.cpp b/test/snippet/io/sequence_file/sequence_file_input_return_record.cpp
index 8d81ea488..2d451dfbd 100644
--- a/test/snippet/io/sequence_file/sequence_file_input_return_record.cpp
+++ b/test/snippet/io/sequence_file/sequence_file_input_return_record.cpp
@@ -2,11 +2,11 @@
 
 #include <seqan3/io/sequence_file/input.hpp>
 
-auto input = R"(> TEST1
+auto input = R"(>TEST1
 ACGT
-> Test2
+>Test2
 AGGCTGA
-> Test3
+>Test3
 GGAGTATAATATATATATATATAT)";
 
 int main()
diff --git a/test/snippet/io/sequence_file/sequence_file_input_template_specification.cpp b/test/snippet/io/sequence_file/sequence_file_input_template_specification.cpp
index 26d415c9c..531291dab 100644
--- a/test/snippet/io/sequence_file/sequence_file_input_template_specification.cpp
+++ b/test/snippet/io/sequence_file/sequence_file_input_template_specification.cpp
@@ -4,11 +4,11 @@
 #include <seqan3/utility/type_list/type_list.hpp>
 
 // ... input had amino acid sequences
-auto input = R"(> TEST1
+auto input = R"(>TEST1
 FQTWE
-> Test2
+>Test2
 KYRTW
-> Test3
+>Test3
 EEYQTWEEFARAAEKLYLTDPMKV)";
 
 int main()
diff --git a/test/snippet/io/sequence_file/sequence_file_input_trait_overwrite.cpp b/test/snippet/io/sequence_file/sequence_file_input_trait_overwrite.cpp
index 4589bb9c6..5712c743d 100644
--- a/test/snippet/io/sequence_file/sequence_file_input_trait_overwrite.cpp
+++ b/test/snippet/io/sequence_file/sequence_file_input_trait_overwrite.cpp
@@ -4,11 +4,11 @@
 #include <seqan3/alphabet/nucleotide/dna4.hpp>
 #include <seqan3/io/sequence_file/input.hpp>
 
-auto input = R"(> TEST1
+auto input = R"(>TEST1
 ACGT
-> Test2
+>Test2
 AGGCTGA
-> Test3
+>Test3
 GGAGTATAATATATATATATATAT)";
 
 struct my_traits : seqan3::sequence_file_input_default_traits_dna
diff --git a/test/unit/io/sequence_file/sequence_file_format_fasta_test.cpp b/test/unit/io/sequence_file/sequence_file_format_fasta_test.cpp
index 2396530a7..776f55d8f 100644
--- a/test/unit/io/sequence_file/sequence_file_format_fasta_test.cpp
+++ b/test/unit/io/sequence_file/sequence_file_format_fasta_test.cpp
@@ -21,32 +21,32 @@ struct sequence_file_read<seqan3::format_fasta> : public sequence_file_data
 {
     std::string standard_input
     {
-        "> ID1\n"
+        ">ID1\n"
         "ACGTTTTTTTTTTTTTTT\n"
-        "> ID2\n"
+        ">ID2\n"
         "ACGTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT\n"
-        "> ID3 lala\n"
+        ">ID3 lala\n"
         "ACGTTTA\n"
     };
 
     std::string illegal_alphabet_character_input
     {
-        "> ID1\n"
+        ">ID1\n"
         "ACGPTTTTTTTTTTTTTT\n"
-        "> ID2\n"
+        ">ID2\n"
         "ACGTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT\n"
-        "> ID3 lala\n"
+        ">ID3 lala\n"
         "ACGTTTA\n"
     };
 
     std::string standard_output
     {
-        "> ID1\n"
+        ">ID1\n"
         "ACGTTTTTTTTTTTTTTT\n"
-        "> ID2\n"
+        ">ID2\n"
         "ACGTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT\nTT\n"
         //                                             linebreak inserted after 80 char  ^
-        "> ID3 lala\n"
+        ">ID3 lala\n"
         "ACGTTTA\n"
     };
 
@@ -96,11 +96,11 @@ TEST_F(read, newline_before_eof)
 {
     std::string input
     {
-        "> ID1\n"
+        ">ID1\n"
         "ACGTTTTTTTTTTTTTTT\n"
-        "> ID2\n"
+        ">ID2\n"
         "ACGTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT\n"
-        "> ID3 lala\n"
+        ">ID3 lala\n"
         "ACGTTTA"
     };
     do_read_test(input);
@@ -124,12 +124,12 @@ TEST_F(read, whitespace_in_seq)
 {
     std::string input
     {
-        "> ID1\n"
+        ">ID1\n"
         "ACGTTTT\n\nTTTTTTTTTTT\n"
         "\n"
-        "> ID2\n"
+        ">ID2\n"
         "ACGTTTT\t\tTTTTTTTTTTT\t\nTTTTTTTTTTT\vTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT\rTTTTTTTTTTTTTTTTT\n"
-        "> ID3 lala\n"
+        ">ID3 lala\n"
         "ACGT\fTTA\n"
     };
     do_read_test(input);
@@ -139,12 +139,12 @@ TEST_F(read, digits_in_seq)
 {
     std::string input
     {
-        "> ID1\n"
+        ">ID1\n"
         "10  ACGTTTTTTTTTTTTTTT\n"
-        "> ID2\n"
+        ">ID2\n"
         "  80 ACGTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT  900"
         "1000 TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT\n"
-        "> ID3 lala\n"
+        ">ID3 lala\n"
         "ACGT9T5T2A\n"
     };
     do_read_test(input);
@@ -169,12 +169,12 @@ TEST_F(read, mixed_issues)
 {
     std::string input
     {
-        "> ID1\n"
+        ">ID1\n"
         "ACGTTTT\n\nTTTTTTTTTTT\n"
         "\n"
         ";ID2\n"
         "ACGTTTT\t75\tTTTTTTTTTTT\t\nTTTTTTTTTTT9\vTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT\rTTTTTTTTTTTTTTTTT\n"
-        "> ID3 lala\n"
+        ">ID3 lala\n"
         "ACGT\fTTA"
     };
     do_read_test(input);
@@ -248,12 +248,12 @@ TEST_F(write, options_letters_per_line)
 
     std::string comp
     {
-        "> TEST 1\n"
+        ">TEST 1\n"
         "ACGT\n"
-        "> Test2\n"
+        ">Test2\n"
         "AGGCTGN\nAGGCTGN\nAGGCTGN\nAGGCTGN\nAGGCTGN\nAGGCTGN\nAGGCTGN\nAGGCTGN\nAGGCTGN\nAGGCTGN\nAGGCTGN\nAGGCTGN\n"
         "AGGCTGN\n"
-        "> Test3\n"
+        ">Test3\n"
         "GGAGTAT\nAATATAT\nATATATA\nTAT\n"
     };
 
@@ -268,12 +268,12 @@ TEST_F(write, options_legacy_id_marker)
 
     std::string comp
     {
-        "; TEST 1\n"
+        ";TEST 1\n"
         "ACGT\n"
-        "; Test2\n"
+        ";Test2\n"
         "AGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGG\nCTGNAGGCTGN\n"
         //                                             linebreak inserted after 80 char  ^
-        "; Test3\n"
+        ";Test3\n"
         "GGAGTATAATATATATATATATAT\n"
     };
 
@@ -284,16 +284,16 @@ TEST_F(write, options_legacy_id_marker)
 
 TEST_F(write, options_blank_before_id)
 {
-    options.fasta_blank_before_id = false;
+    options.fasta_blank_before_id = true;
 
     std::string comp
     {
-        ">TEST 1\n"
+        "> TEST 1\n"
         "ACGT\n"
-        ">Test2\n"
+        "> Test2\n"
         "AGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGG\nCTGNAGGCTGN\n"
         //                                             linebreak inserted after 80 char  ^
-        ">Test3\n"
+        "> Test3\n"
         "GGAGTATAATATATATATATATAT\n"
     };
 
@@ -308,12 +308,12 @@ TEST_F(write, options_add_carriage_return)
 
     std::string comp
     {
-        "> TEST 1\r\n"
+        ">TEST 1\r\n"
         "ACGT\r\n"
-        "> Test2\r\n"
+        ">Test2\r\n"
         "AGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGG\r\nCTGNAGGCTGN\r\n"
         //                                             linebreak inserted after 80 char  ^
-        "> Test3\r\n"
+        ">Test3\r\n"
         "GGAGTATAATATATATATATATAT\r\n"
     };
 
@@ -325,18 +325,18 @@ TEST_F(write, options_add_carriage_return)
 TEST_F(write, options_all)
 {
     options.add_carriage_return = true;
-    options.fasta_blank_before_id = false;
+    options.fasta_blank_before_id = true;
     options.fasta_legacy_id_marker = true;
     options.fasta_letters_per_line = 21;
 
     std::string comp
     {
-        ";TEST 1\r\n"
+        "; TEST 1\r\n"
         "ACGT\r\n"
-        ";Test2\r\n"
+        "; Test2\r\n"
         "AGGCTGNAGGCTGNAGGCTGN\r\nAGGCTGNAGGCTGNAGGCTGN\r\nAGGCTGNAGGCTGNAGGCTGN\r\nAGGCTGNAGGCTGNAGGCTGN\r\n"
         "AGGCTGN\r\n"
-        ";Test3\r\n"
+        "; Test3\r\n"
         "GGAGTATAATATATATATATA\r\nTAT\r\n"
     };
     do_write_test();
diff --git a/test/unit/io/sequence_file/sequence_file_input_test.cpp b/test/unit/io/sequence_file/sequence_file_input_test.cpp
index ff98b21d3..39ac7ad97 100644
--- a/test/unit/io/sequence_file/sequence_file_input_test.cpp
+++ b/test/unit/io/sequence_file/sequence_file_input_test.cpp
@@ -35,11 +35,11 @@ struct sequence_file_input_f : public ::testing::Test
 {
     std::string input
     {
-        "> TEST 1\n"
+        ">TEST 1\n"
         "ACGT\n"
         ">Test2\n"
         "AGGCTGN\n"
-        "> Test3\n"
+        ">Test3\n"
         "GGAGTATAATATATATATATATAT\n"
     };
 
@@ -264,11 +264,11 @@ TEST_F(sequence_file_input_f, record_reading_custom_options)
 {
     std::istringstream istream{std::string
     {
-        "> ID1 lala\n"
+        ">ID1 lala\n"
         "ACGTTTTTTTTTTTTTTT\n"
-        "> ID2\n"
+        ">ID2\n"
         "ACGTTTTTTT\n"
-        "> ID3 lala\n"
+        ">ID3 lala\n"
         "ACGTTTA\n"
     }};
 
diff --git a/test/unit/io/sequence_file/sequence_file_integration_test.cpp b/test/unit/io/sequence_file/sequence_file_integration_test.cpp
index 7af12b300..755e58fb1 100644
--- a/test/unit/io/sequence_file/sequence_file_integration_test.cpp
+++ b/test/unit/io/sequence_file/sequence_file_integration_test.cpp
@@ -21,19 +21,19 @@ TEST(rows, assign_sequence_files)
     {
         ">TEST 1\n"
         "ACGT\n"
-        "> Test2\n"
+        ">Test2\n"
         "AGGCTGN AGGCTGN AGGCTGN AGGCTGN AGGCTGN AGGCTGN AGGCTGN AGGCTGN AGGCTGN AGGCTGN AGGCTGN AGGCTGN AGGCTGN\n\n"
-        "> Test3\n"
+        ">Test3\n"
         "GGAGTATAATATATATATATATAT\n"
     };
 
     std::string const output_comp
     {
-        "> TEST 1\n"
+        ">TEST 1\n"
         "ACGT\n"
-        "> Test2\n"
+        ">Test2\n"
         "AGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGN\n"
-        "> Test3\n"
+        ">Test3\n"
         "GGAGTATAATATATATATATATAT\n"
     };
 
@@ -47,15 +47,42 @@ TEST(rows, assign_sequence_files)
     EXPECT_EQ(reinterpret_cast<std::ostringstream&>(fout.get_stream()).str(), output_comp);
 }
 
-TEST(integration, assign_sequence_file_pipes)
+TEST(rows, assign_sequence_files_read_blanks)
 {
     std::string const input
     {
-        "> TEST1\n"
+        ">TEST 1\n"
         "ACGT\n"
         "> Test2\n"
+        "AGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGN\n"
+        ">  Test3\n"
+        "GGAGTATAATATATATATATATAT\n"
+    };
+
+    std::string const expected_output = input;
+
+    seqan3::sequence_file_input fin{std::istringstream{input}, seqan3::format_fasta{}};
+    fin.options.fasta_ignore_blanks_before_id = false;
+
+    seqan3::sequence_file_output fout{std::ostringstream{}, seqan3::format_fasta{}};
+    fout.options.fasta_letters_per_line = 0;
+
+    fout = fin;
+
+    fout.get_stream().flush();
+    std::string const output = reinterpret_cast<std::ostringstream&>(fout.get_stream()).str();
+    EXPECT_EQ(output, expected_output);
+}
+
+TEST(integration, assign_sequence_file_pipes)
+{
+    std::string const input
+    {
+        ">TEST1\n"
+        "ACGT\n"
+        ">Test2\n"
         "AGGCTGNAGGCTGAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGN\n"
-        "> Test3\n"
+        ">Test3\n"
         "GGAGTATAATATATATATATATAT\n"
     };
 
@@ -75,19 +102,19 @@ TEST(integration, view)
 {
     std::string const input
     {
-        "> TEST1\n"
+        ">TEST1\n"
         "ACGT\n"
-        "> Test2\n"
+        ">Test2\n"
         "AGGCTGNAGGCTGAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGN\n"
-        "> Test3\n"
+        ">Test3\n"
         "GGAGTATAATATATATATATATAT\n"
     };
 
     std::string const output
     {
-        "> TEST1\n"
+        ">TEST1\n"
         "ACGT\n"
-        "> Test2\n"
+        ">Test2\n"
         "AGGCTGNAGGCTGAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGN\n"
     };
 
@@ -124,9 +151,9 @@ TEST(integration, convert_fastq_to_fasta)
 
     std::string const fasta_out
     {
-        "> ID1\n"
+        ">ID1\n"
         "ACGTT\n"
-        "> ID2\n"
+        ">ID2\n"
         "TATTA\n"
     };
 
diff --git a/test/unit/io/sequence_file/sequence_file_output_test.cpp b/test/unit/io/sequence_file/sequence_file_output_test.cpp
index 48fe4bbad..ed9aa0347 100644
--- a/test/unit/io/sequence_file/sequence_file_output_test.cpp
+++ b/test/unit/io/sequence_file/sequence_file_output_test.cpp
@@ -45,11 +45,11 @@ std::vector<std::string> ids
 
 std::string const output_comp
 {
-    "> TEST 1\n"
+    ">TEST 1\n"
     "ACGT\n"
-    "> Test2\n"
+    ">Test2\n"
     "AGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGN\n"
-    "> Test3\n"
+    ">Test3\n"
     "GGAGTATAATATATATATATATAT\n"
 };
 
@@ -347,7 +347,7 @@ TEST(row, different_fields_in_record_and_file)
 
     std::string const expected_out
     {
-        "> Test2\n"
+        ">Test2\n"
         "AGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGG\n"
         "CTGNAGGCTGN\n"
     };
@@ -420,6 +420,7 @@ std::string compression_by_filename_impl([[maybe_unused]]seqan3::test::tmp_filen
 {
     {
         seqan3::sequence_file_output fout{filename.get_path()};
+        fout.options.fasta_blank_before_id = true;
         fout.options.fasta_letters_per_line = 0;
 
         for (size_t i = 0; i < 3; ++i)
@@ -446,6 +447,7 @@ template <typename comp_stream_t>
 void compression_by_stream_impl(comp_stream_t & stream)
 {
     seqan3::sequence_file_output fout{stream, seqan3::format_fasta{}};
+    fout.options.fasta_blank_before_id = true;
     fout.options.fasta_letters_per_line = 0;
 
     for (size_t i = 0; i < 3; ++i)
-- 
2.34.1

