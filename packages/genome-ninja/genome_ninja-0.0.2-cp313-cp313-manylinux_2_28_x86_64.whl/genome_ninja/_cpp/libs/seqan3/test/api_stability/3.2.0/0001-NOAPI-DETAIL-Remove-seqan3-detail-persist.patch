From d21a78ee5ea3b422fa845f871d9c0fa4e2fbb8d0 Mon Sep 17 00:00:00 2001
From: Enrico Seiler <enrico.seiler@hotmail.de>
Date: Thu, 20 Oct 2022 14:58:05 +0200
Subject: [PATCH 1/7] [NOAPI] [DETAIL] Remove seqan3::detail::persist

---
 test/snippet/core/detail/persist_view.cpp     |  37 ------
 .../pairwise/alignment_result_test.cpp        |  10 +-
 .../algorithm_executor_blocking_test.cpp      |   6 +-
 test/unit/core/detail/CMakeLists.txt          |   1 -
 test/unit/core/detail/persist_view_test.cpp   | 108 ------------------
 .../sequence_file_integration_test.cpp        |   6 +-
 test/unit/search/search_collection_test.cpp   |   6 +-
 test/unit/search/search_test.cpp              |   6 +-
 test/unit/utility/views/repeat_n_test.cpp     |   1 -
 test/unit/utility/views/repeat_test.cpp       |   1 -
 .../utility/views/single_pass_input_test.cpp  |  20 ++--
 11 files changed, 24 insertions(+), 178 deletions(-)
 delete mode 100644 test/snippet/core/detail/persist_view.cpp
 delete mode 100644 test/unit/core/detail/persist_view_test.cpp

diff --git a/test/snippet/core/detail/persist_view.cpp b/test/snippet/core/detail/persist_view.cpp
deleted file mode 100644
index e05d68333..000000000
--- a/test/snippet/core/detail/persist_view.cpp
+++ /dev/null
@@ -1,37 +0,0 @@
-#include <seqan3/alphabet/nucleotide/dna4.hpp>
-#include <seqan3/alphabet/views/to_char.hpp>
-#include <seqan3/core/detail/persist_view.hpp>
-
-// P2415R2 makes our persist view superfluous.
-// It's implemented in GCC 12 and can be detected by checking __cpp_lib_ranges.
-// P2415R2 allows binding of rvalues with std::views::owning_view and also adapts
-// std::views::all to return an owning_view when applicable.
-#if defined(__cpp_lib_ranges) && (__cpp_lib_ranges < 202110L)
-#    define SEQAN3_STL_HAS_OWNING_VIEW 0
-#else
-#    define SEQAN3_STL_HAS_OWNING_VIEW 1
-#endif
-
-int main()
-{
-    using namespace seqan3::literals;
-
-    // explicitly create an l-value of our dna vector:
-    auto vec = "ACGT"_dna4;
-    [[maybe_unused]] auto v = vec | seqan3::views::to_char;
-
-    // using seqan3::detail::persist you can bind the temporary directly:
-#if !SEQAN3_STL_HAS_OWNING_VIEW
-    [[maybe_unused]] auto v2 = "ACGT"_dna4 | seqan3::detail::persist | seqan3::views::to_char;
-#else
-    [[maybe_unused]] auto v2 = "ACGT"_dna4 | seqan3::views::to_char;
-#endif
-
-    // note that seqan3::detail::persist must follow immediately after the temporary,
-    // thus the function notation might be more intuitive:
-#if !SEQAN3_STL_HAS_OWNING_VIEW
-    [[maybe_unused]] auto v3 = seqan3::detail::persist("ACGT"_dna4) | seqan3::views::to_char;
-#else
-    [[maybe_unused]] auto v3 = seqan3::views::to_char("ACGT"_dna4);
-#endif
-}
diff --git a/test/unit/alignment/pairwise/alignment_result_test.cpp b/test/unit/alignment/pairwise/alignment_result_test.cpp
index 0dfffdd61..af99f7f40 100644
--- a/test/unit/alignment/pairwise/alignment_result_test.cpp
+++ b/test/unit/alignment/pairwise/alignment_result_test.cpp
@@ -19,7 +19,7 @@
 #include <seqan3/alphabet/nucleotide/dna4.hpp>
 #include <seqan3/alphabet/nucleotide/rna5.hpp>
 #include <seqan3/alphabet/views/to_char.hpp>
-#include <seqan3/core/detail/persist_view.hpp>
+#include <seqan3/core/detail/all_view.hpp>
 #include <seqan3/core/detail/template_inspection.hpp>
 #include <seqan3/test/expect_range_eq.hpp>
 #include <seqan3/test/expect_same_type.hpp>
@@ -209,14 +209,14 @@ TYPED_TEST(alignment_result_test, alignment)
     if constexpr (seqan3::tuple_like<alignment_t>)
     {
         seqan3::alignment_result<TypeParam> tmp{TypeParam{1u, 2u, 0, {10ul, 10ul}, {0ul, 0ul}, {seq, seq}}};
-        EXPECT_RANGE_EQ(std::get<0>(tmp.alignment()) | seqan3::detail::persist | seqan3::views::to_char, "AT-C--A"sv);
-        EXPECT_RANGE_EQ(std::get<1>(tmp.alignment()) | seqan3::detail::persist | seqan3::views::to_char, "AT-C--A"sv);
+        EXPECT_RANGE_EQ(std::get<0>(tmp.alignment()) | seqan3::detail::all | seqan3::views::to_char, "AT-C--A"sv);
+        EXPECT_RANGE_EQ(std::get<1>(tmp.alignment()) | seqan3::detail::all | seqan3::views::to_char, "AT-C--A"sv);
     }
     else
     {
         seqan3::alignment_result<TypeParam> tmp{TypeParam{1u, 2u, 0, {10ul, 10ul}, {0ul, 0ul}, {seq, seq}}};
-        EXPECT_RANGE_EQ(tmp.alignment()[0] | seqan3::detail::persist | seqan3::views::to_char, "AT-C--A"sv);
-        EXPECT_RANGE_EQ(tmp.alignment()[1] | seqan3::detail::persist | seqan3::views::to_char, "AT-C--A"sv);
+        EXPECT_RANGE_EQ(tmp.alignment()[0] | seqan3::detail::all | seqan3::views::to_char, "AT-C--A"sv);
+        EXPECT_RANGE_EQ(tmp.alignment()[1] | seqan3::detail::all | seqan3::views::to_char, "AT-C--A"sv);
     }
 }
 
diff --git a/test/unit/core/algorithm/detail/algorithm_executor_blocking_test.cpp b/test/unit/core/algorithm/detail/algorithm_executor_blocking_test.cpp
index 0c47ccd3c..fd70df5e5 100644
--- a/test/unit/core/algorithm/detail/algorithm_executor_blocking_test.cpp
+++ b/test/unit/core/algorithm/detail/algorithm_executor_blocking_test.cpp
@@ -12,7 +12,7 @@
 #include <string>
 
 #include <seqan3/core/algorithm/detail/algorithm_executor_blocking.hpp>
-#include <seqan3/core/detail/persist_view.hpp>
+#include <seqan3/core/detail/all_view.hpp>
 #include <seqan3/test/pretty_printing.hpp>
 #include <seqan3/utility/views/zip.hpp>
 
@@ -175,11 +175,11 @@ TYPED_TEST(algorithm_executor_blocking_test, lvalue_sequence_pairs)
 
 TYPED_TEST(algorithm_executor_blocking_test, rvalue_sequence_pairs_view)
 {
-    using persist_pairs_t = decltype(this->sequence_pairs | seqan3::detail::persist);
+    using persist_pairs_t = decltype(this->sequence_pairs | seqan3::detail::all);
     using algorithm_t = typename algorithm_type_for_input<persist_pairs_t>::type;
     using executor_t = seqan3::detail::algorithm_executor_blocking<persist_pairs_t, algorithm_t, size_t, TypeParam>;
 
-    executor_t exec{this->sequence_pairs | seqan3::detail::persist,
+    executor_t exec{this->sequence_pairs | seqan3::detail::all,
                     algorithm_t{dummy_algorithm{}},
                     0u,
                     this->execution_handler()};
diff --git a/test/unit/core/detail/CMakeLists.txt b/test/unit/core/detail/CMakeLists.txt
index 3e8f39c7c..598c7d052 100644
--- a/test/unit/core/detail/CMakeLists.txt
+++ b/test/unit/core/detail/CMakeLists.txt
@@ -1,7 +1,6 @@
 seqan3_test (debug_stream_type_tuple_alignment_test.cpp)
 seqan3_test (deferred_crtp_base_test.cpp)
 seqan3_test (iterator_traits_test.cpp)
-seqan3_test (persist_view_test.cpp)
 seqan3_test (strong_type_debug_stream_test.cpp)
 seqan3_test (strong_type_test.cpp)
 seqan3_test (template_inspection_test.cpp)
diff --git a/test/unit/core/detail/persist_view_test.cpp b/test/unit/core/detail/persist_view_test.cpp
deleted file mode 100644
index 53423c7f4..000000000
--- a/test/unit/core/detail/persist_view_test.cpp
+++ /dev/null
@@ -1,108 +0,0 @@
-// -----------------------------------------------------------------------------------------------------
-// Copyright (c) 2006-2022, Knut Reinert & Freie Universität Berlin
-// Copyright (c) 2016-2022, Knut Reinert & MPI für molekulare Genetik
-// This file may be used, modified and/or redistributed under the terms of the 3-clause BSD-License
-// shipped with this file and also available at: https://github.com/seqan/seqan3/blob/master/LICENSE.md
-// -----------------------------------------------------------------------------------------------------
-
-#include <gtest/gtest.h>
-
-#include <concepts>
-#include <iostream>
-#include <ranges>
-#include <string>
-
-#include <seqan3/core/detail/persist_view.hpp>
-#include <seqan3/test/expect_range_eq.hpp>
-#include <seqan3/utility/range/concept.hpp>
-
-// ============================================================================
-//  test templates
-// ============================================================================
-
-TEST(view_persist, delegate_to_view_all)
-{
-    using namespace std::literals;
-
-    std::string vec{"foo"};
-
-    // pipe notation
-    auto v = vec | seqan3::detail::persist;
-    EXPECT_RANGE_EQ("foo"sv, v);
-
-    // function notation
-    EXPECT_RANGE_EQ("foo"sv, seqan3::detail::persist(vec));
-
-    // combinability
-    EXPECT_RANGE_EQ("fo"sv, vec | seqan3::detail::persist | std::views::take(2));
-    EXPECT_RANGE_EQ("of"sv, vec | std::views::reverse | seqan3::detail::persist | std::views::drop(1));
-
-    // store combined
-    auto a1 = seqan3::detail::persist | std::views::take(2);
-    EXPECT_RANGE_EQ("fo"sv, vec | a1);
-}
-
-TEST(view_persist, wrap_temporary)
-{
-    using namespace std::literals;
-
-    // pipe notation
-    EXPECT_RANGE_EQ("foo"sv, std::string{"foo"} | seqan3::detail::persist);
-
-    // function notation
-    EXPECT_RANGE_EQ("foo"sv, seqan3::detail::persist(std::string{"foo"}));
-
-    // combinability
-    EXPECT_RANGE_EQ("fo"sv, std::string{"foo"} | seqan3::detail::persist | std::views::take(2));
-    EXPECT_RANGE_EQ("o"sv,
-                    std::string{"foo"} | seqan3::detail::persist
-                        | std::views::filter(
-                            [](char const chr)
-                            {
-                                return chr == 'o';
-                            })
-                        | std::views::take(1));
-}
-
-TEST(view_persist, const)
-{
-    using namespace std::literals;
-
-    // inner const
-    using t = std::string const;
-    EXPECT_RANGE_EQ("foo"sv, t{"foo"} | seqan3::detail::persist);
-
-    // outer const
-    auto const & v2 = std::string{"foo"} | seqan3::detail::persist;
-    EXPECT_RANGE_EQ("foo"sv, v2);
-
-    // inner + outer const
-    using t = std::string const;
-    auto const & v3 = t{"foo"} | seqan3::detail::persist;
-    EXPECT_RANGE_EQ("foo"sv, v3);
-}
-
-TEST(view_persist, concepts)
-{
-    EXPECT_TRUE(std::ranges::input_range<decltype(std::string{"foo"})>);
-    EXPECT_TRUE(std::ranges::forward_range<decltype(std::string{"foo"})>);
-    EXPECT_TRUE(std::ranges::bidirectional_range<decltype(std::string{"foo"})>);
-    EXPECT_TRUE(std::ranges::random_access_range<decltype(std::string{"foo"})>);
-    EXPECT_FALSE(std::ranges::view<decltype(std::string{"foo"})>);
-    EXPECT_TRUE(std::ranges::sized_range<decltype(std::string{"foo"})>);
-    EXPECT_TRUE(std::ranges::common_range<decltype(std::string{"foo"})>);
-    EXPECT_TRUE(seqan3::const_iterable_range<decltype(std::string{"foo"})>);
-    EXPECT_TRUE((std::ranges::output_range<decltype(std::string{"foo"}), char>));
-
-    auto v1 = std::string{"foo"} | seqan3::detail::persist;
-
-    EXPECT_TRUE(std::ranges::input_range<decltype(v1)>);
-    EXPECT_TRUE(std::ranges::forward_range<decltype(v1)>);
-    EXPECT_TRUE(std::ranges::bidirectional_range<decltype(v1)>);
-    EXPECT_TRUE(std::ranges::random_access_range<decltype(v1)>);
-    EXPECT_TRUE(std::ranges::view<decltype(v1)>);
-    EXPECT_TRUE(std::ranges::sized_range<decltype(v1)>);
-    EXPECT_TRUE(std::ranges::common_range<decltype(v1)>);
-    EXPECT_TRUE(seqan3::const_iterable_range<decltype(v1)>);
-    EXPECT_TRUE((std::ranges::output_range<decltype(v1), char>));
-}
diff --git a/test/unit/io/sequence_file/sequence_file_integration_test.cpp b/test/unit/io/sequence_file/sequence_file_integration_test.cpp
index 3a53ef915..18e3eab26 100644
--- a/test/unit/io/sequence_file/sequence_file_integration_test.cpp
+++ b/test/unit/io/sequence_file/sequence_file_integration_test.cpp
@@ -10,7 +10,7 @@
 #include <iterator>
 #include <sstream>
 
-#include <seqan3/core/detail/persist_view.hpp>
+#include <seqan3/core/detail/all_view.hpp>
 #include <seqan3/io/sequence_file/input.hpp>
 #include <seqan3/io/sequence_file/output.hpp>
 #include <seqan3/test/tmp_filename.hpp>
@@ -104,11 +104,11 @@ TEST(integration, view)
                              "AGGCTGNAGGCTGAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGNAGGCTGN\n"};
 
     // valid without assignment?
-    seqan3::sequence_file_input{std::istringstream{input}, seqan3::format_fasta{}} | seqan3::detail::persist
+    seqan3::sequence_file_input{std::istringstream{input}, seqan3::format_fasta{}} | seqan3::detail::all
         | std::views::take(2) | seqan3::sequence_file_output{std::ostringstream{}, seqan3::format_fasta{}};
 
     // valid with assignment and check contents
-    auto fout = seqan3::sequence_file_input{std::istringstream{input}, seqan3::format_fasta{}} | seqan3::detail::persist
+    auto fout = seqan3::sequence_file_input{std::istringstream{input}, seqan3::format_fasta{}} | seqan3::detail::all
               | std::views::take(2) | seqan3::sequence_file_output{std::ostringstream{}, seqan3::format_fasta{}};
 
     fout.get_stream().flush();
diff --git a/test/unit/search/search_collection_test.cpp b/test/unit/search/search_collection_test.cpp
index c64622509..2dbfafe53 100644
--- a/test/unit/search/search_collection_test.cpp
+++ b/test/unit/search/search_collection_test.cpp
@@ -14,7 +14,7 @@
 #include <seqan3/alphabet/quality/phred42.hpp>
 #include <seqan3/alphabet/quality/qualified.hpp>
 #include <seqan3/core/debug_stream/tuple.hpp>
-#include <seqan3/core/detail/persist_view.hpp>
+#include <seqan3/core/detail/all_view.hpp>
 #include <seqan3/search/fm_index/bi_fm_index.hpp>
 #include <seqan3/search/fm_index/fm_index.hpp>
 #include <seqan3/search/search.hpp>
@@ -27,13 +27,13 @@ using seqan3::operator""_phred42;
 
 using namespace std::string_literals;
 
-auto ref_id_and_position = seqan3::detail::persist
+auto ref_id_and_position = seqan3::detail::all
                          | std::views::transform(
                                [](auto && res)
                                {
                                    return std::make_pair(res.reference_id(), res.reference_begin_position());
                                });
-auto query_id = seqan3::detail::persist
+auto query_id = seqan3::detail::all
               | std::views::transform(
                     [](auto && res)
                     {
diff --git a/test/unit/search/search_test.cpp b/test/unit/search/search_test.cpp
index 644103ed0..a9eea1c2b 100644
--- a/test/unit/search/search_test.cpp
+++ b/test/unit/search/search_test.cpp
@@ -13,7 +13,7 @@
 #include <seqan3/alphabet/nucleotide/dna4.hpp>
 #include <seqan3/alphabet/quality/phred42.hpp>
 #include <seqan3/alphabet/quality/qualified.hpp>
-#include <seqan3/core/detail/persist_view.hpp>
+#include <seqan3/core/detail/all_view.hpp>
 #include <seqan3/search/configuration/hit.hpp>
 #include <seqan3/search/configuration/max_error.hpp>
 #include <seqan3/search/configuration/on_result.hpp>
@@ -29,13 +29,13 @@ using seqan3::operator""_phred42;
 
 using namespace std::string_literals;
 
-auto position = seqan3::detail::persist
+auto position = seqan3::detail::all
               | std::views::transform(
                     [](auto && res)
                     {
                         return res.reference_begin_position();
                     });
-auto query_id = seqan3::detail::persist
+auto query_id = seqan3::detail::all
               | std::views::transform(
                     [](auto && res)
                     {
diff --git a/test/unit/utility/views/repeat_n_test.cpp b/test/unit/utility/views/repeat_n_test.cpp
index bc727082e..c914aa44d 100644
--- a/test/unit/utility/views/repeat_n_test.cpp
+++ b/test/unit/utility/views/repeat_n_test.cpp
@@ -11,7 +11,6 @@
 #include <ranges>
 
 #include <seqan3/core/detail/iterator_traits.hpp>
-#include <seqan3/core/detail/persist_view.hpp>
 #include <seqan3/core/range/type_traits.hpp>
 #include <seqan3/test/expect_range_eq.hpp>
 #include <seqan3/utility/views/repeat_n.hpp>
diff --git a/test/unit/utility/views/repeat_test.cpp b/test/unit/utility/views/repeat_test.cpp
index 7a4aee8e7..708aefe5e 100644
--- a/test/unit/utility/views/repeat_test.cpp
+++ b/test/unit/utility/views/repeat_test.cpp
@@ -11,7 +11,6 @@
 #include <ranges>
 
 #include <seqan3/core/detail/iterator_traits.hpp>
-#include <seqan3/core/detail/persist_view.hpp>
 #include <seqan3/core/range/type_traits.hpp>
 #include <seqan3/test/expect_range_eq.hpp>
 #include <seqan3/test/expect_same_type.hpp>
diff --git a/test/unit/utility/views/single_pass_input_test.cpp b/test/unit/utility/views/single_pass_input_test.cpp
index d143d3dde..29dcd5fd3 100644
--- a/test/unit/utility/views/single_pass_input_test.cpp
+++ b/test/unit/utility/views/single_pass_input_test.cpp
@@ -11,7 +11,7 @@
 #include <type_traits>
 #include <vector>
 
-#include <seqan3/core/detail/persist_view.hpp>
+#include <seqan3/core/detail/all_view.hpp>
 #include <seqan3/test/expect_same_type.hpp>
 #include <seqan3/utility/views/single_pass_input.hpp>
 
@@ -54,7 +54,6 @@ public:
 // add all <out_rng,in_rng> pairs here.
 using underlying_range_types = ::testing::Types<std::vector<char>,
                                                 std::vector<int>,
-                                                std::vector<char> const,
                                                 std::ranges::basic_istream_view<char, char, std::char_traits<char>>,
                                                 std::ranges::basic_istream_view<int, char, std::char_traits<char>>>;
 
@@ -62,8 +61,7 @@ TYPED_TEST_SUITE(single_pass_input, underlying_range_types, );
 
 TYPED_TEST(single_pass_input, view_concept)
 {
-    using rng_t = decltype(std::declval<TypeParam &>() | std::views::all);
-    using view_t = seqan3::detail::single_pass_input_view<rng_t>;
+    using view_t = seqan3::detail::single_pass_input_view<seqan3::detail::all_t<TypeParam &>>;
     EXPECT_TRUE((std::derived_from<view_t, std::ranges::view_interface<view_t>>));
     EXPECT_TRUE((std::sentinel_for<std::ranges::sentinel_t<view_t>, std::ranges::iterator_t<view_t>>));
     EXPECT_TRUE(std::ranges::range<view_t>);
@@ -117,8 +115,7 @@ TYPED_TEST(single_pass_input, deduction_guide_view)
 
 TYPED_TEST(single_pass_input, view_construction)
 {
-    using rng_t = decltype(std::declval<TypeParam>() | seqan3::detail::persist);
-    using view_t = seqan3::detail::single_pass_input_view<rng_t>;
+    using view_t = seqan3::detail::single_pass_input_view<seqan3::detail::all_t<TypeParam>>;
     EXPECT_TRUE(std::is_default_constructible_v<view_t>);
     EXPECT_TRUE(std::is_copy_constructible_v<view_t>);
     EXPECT_TRUE(std::is_move_constructible_v<view_t>);
@@ -132,7 +129,7 @@ TYPED_TEST(single_pass_input, view_construction)
     }
 
     { // from view
-        [[maybe_unused]] seqan3::detail::single_pass_input_view v{TypeParam{this->data} | seqan3::detail::persist};
+        [[maybe_unused]] seqan3::detail::single_pass_input_view v{TypeParam{this->data} | seqan3::detail::all};
     }
 }
 
@@ -183,16 +180,14 @@ TYPED_TEST(single_pass_input, view_iterate)
 
 TYPED_TEST(single_pass_input, iterator_concepts)
 {
-    using view_type =
-        seqan3::detail::single_pass_input_view<decltype(std::declval<TypeParam>() | seqan3::detail::persist)>;
+    using view_type = seqan3::detail::single_pass_input_view<seqan3::detail::all_t<TypeParam>>;
     EXPECT_TRUE((std::input_iterator<std::ranges::iterator_t<view_type>>));
     EXPECT_FALSE((std::forward_iterator<std::ranges::iterator_t<view_type>>));
 }
 
 TYPED_TEST(single_pass_input, iterator_construction)
 {
-    using view_type =
-        seqan3::detail::single_pass_input_view<decltype(std::declval<TypeParam>() | seqan3::detail::persist)>;
+    using view_type = seqan3::detail::single_pass_input_view<seqan3::detail::all_t<TypeParam>>;
     using iterator_type = std::ranges::iterator_t<view_type>;
     EXPECT_TRUE(std::is_default_constructible_v<iterator_type>);
     EXPECT_TRUE(std::is_copy_constructible_v<iterator_type>);
@@ -297,8 +292,7 @@ TYPED_TEST(single_pass_input, iterator_neq_comparison)
 
 TYPED_TEST(single_pass_input, sentinel_concepts)
 {
-    using view_type =
-        seqan3::detail::single_pass_input_view<decltype(std::declval<TypeParam>() | seqan3::detail::persist)>;
+    using view_type = seqan3::detail::single_pass_input_view<seqan3::detail::all_t<TypeParam>>;
     using iterator_type = std::ranges::iterator_t<view_type>;
     using sentinel_type = std::ranges::sentinel_t<view_type>;
 
-- 
2.41.0

