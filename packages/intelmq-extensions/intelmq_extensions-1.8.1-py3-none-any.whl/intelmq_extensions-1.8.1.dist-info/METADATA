Metadata-Version: 2.4
Name: intelmq_extensions
Version: 1.8.1
Summary: Additional bots for IntelMQ
Author: CERT.at Data & Development Team
License: AGPLv3
Project-URL: Repository, https://github.com/certat/intelmq-extensions
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: rt<3.0.0,>=1.0.9
Requires-Dist: mergedeep
Requires-Dist: intelmq
Requires-Dist: tabulate>=0.7.5
Requires-Dist: psycopg2-binary
Requires-Dist: netaddr>=0.7.14
Requires-Dist: python-termstyle>=0.1.10
Requires-Dist: importlib_metadata; python_version < "3.8"
Provides-Extra: dev
Requires-Dist: pytest; extra == "dev"
Requires-Dist: tox>=4; extra == "dev"
Requires-Dist: ruff; extra == "dev"
Requires-Dist: isort; extra == "dev"
Requires-Dist: flake8; extra == "dev"
Requires-Dist: requests-mock; extra == "dev"
Requires-Dist: freezegun; extra == "dev"
Dynamic: license-file
Dynamic: requires-dist

# IntelMQ Extensions

This project collects customized bots used primary by CERT.at.

## Usage

Install the package on the machine. Then, it's enough to just declare the bot's module
pointing to this package, e.g. `intelmq_extensions.bots.collectors.xmpp`



## Running tests

This package comes with test runners configured using `tox`. To use them:

```bash

    tox -elint  # run code style checks
    tox -epy310  # run simple unittests against Python 3.10

    # For running all unittests, including connecting to external services / database
    # use on of the following:
    tox -efull  # assuming you run redis, postgres etc. on your own
    tox -efull-with-docker  # this will use docker compose to provision services for tests;
                            # please note it uses default ports

    # You can pass arguments to the pytest, e.g. to run a specific test:
    tox -efull-with-docker -- intelmq_extensions/tests/bots/experts/squelcher/test_expert.py::TestSquelcherExpertBot::test_address_match1

```
