# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from .get_v1entities_developer_entities_response_entities_item import GetV1EntitiesDeveloperEntitiesResponseEntitiesItem


class GetV1EntitiesDeveloperEntitiesResponse(UniversalBaseModel):
    entities: typing.Optional[typing.List[GetV1EntitiesDeveloperEntitiesResponseEntitiesItem]] = None
    next_cursor: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="nextCursor")] = pydantic.Field(
        default=None
    )
    """
    Cursor for fetching the next page of results
    """

    has_more: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="hasMore")] = pydantic.Field(
        default=None
    )
    """
    Whether more results are available
    """

    total_count: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="totalCount")] = pydantic.Field(
        default=None
    )
    """
    Total number of entities returned in this response
    """

    warning: typing.Optional[str] = pydantic.Field(default=None)
    """
    Warning message if results were truncated
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
