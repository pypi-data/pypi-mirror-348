# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetAdminAwsCredentialsResult',
    'AwaitableGetAdminAwsCredentialsResult',
    'get_admin_aws_credentials',
    'get_admin_aws_credentials_output',
]

@pulumi.output_type
class GetAdminAwsCredentialsResult:
    """
    A collection of values returned by getAdminAwsCredentials.
    """
    def __init__(__self__, access_key_id=None, console_url=None, id=None, region=None, secret_access_key=None, session_token=None):
        if access_key_id and not isinstance(access_key_id, str):
            raise TypeError("Expected argument 'access_key_id' to be a str")
        pulumi.set(__self__, "access_key_id", access_key_id)
        if console_url and not isinstance(console_url, str):
            raise TypeError("Expected argument 'console_url' to be a str")
        pulumi.set(__self__, "console_url", console_url)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if secret_access_key and not isinstance(secret_access_key, str):
            raise TypeError("Expected argument 'secret_access_key' to be a str")
        pulumi.set(__self__, "secret_access_key", secret_access_key)
        if session_token and not isinstance(session_token, str):
            raise TypeError("Expected argument 'session_token' to be a str")
        pulumi.set(__self__, "session_token", session_token)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> str:
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter(name="consoleUrl")
    def console_url(self) -> str:
        return pulumi.get(self, "console_url")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> str:
        return pulumi.get(self, "secret_access_key")

    @property
    @pulumi.getter(name="sessionToken")
    def session_token(self) -> str:
        return pulumi.get(self, "session_token")


class AwaitableGetAdminAwsCredentialsResult(GetAdminAwsCredentialsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAdminAwsCredentialsResult(
            access_key_id=self.access_key_id,
            console_url=self.console_url,
            id=self.id,
            region=self.region,
            secret_access_key=self.secret_access_key,
            session_token=self.session_token)


def get_admin_aws_credentials(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAdminAwsCredentialsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('duplocloud:index/getAdminAwsCredentials:getAdminAwsCredentials', __args__, opts=opts, typ=GetAdminAwsCredentialsResult).value

    return AwaitableGetAdminAwsCredentialsResult(
        access_key_id=pulumi.get(__ret__, 'access_key_id'),
        console_url=pulumi.get(__ret__, 'console_url'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        secret_access_key=pulumi.get(__ret__, 'secret_access_key'),
        session_token=pulumi.get(__ret__, 'session_token'))
def get_admin_aws_credentials_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAdminAwsCredentialsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('duplocloud:index/getAdminAwsCredentials:getAdminAwsCredentials', __args__, opts=opts, typ=GetAdminAwsCredentialsResult)
    return __ret__.apply(lambda __response__: GetAdminAwsCredentialsResult(
        access_key_id=pulumi.get(__response__, 'access_key_id'),
        console_url=pulumi.get(__response__, 'console_url'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        secret_access_key=pulumi.get(__response__, 'secret_access_key'),
        session_token=pulumi.get(__response__, 'session_token')))
