# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['PlanKmsArgs', 'PlanKms']

@pulumi.input_type
class PlanKmsArgs:
    def __init__(__self__, *,
                 kms_arn: pulumi.Input[str],
                 kms_id: pulumi.Input[str],
                 kms_name: pulumi.Input[str],
                 plan_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a PlanKms resource.
        :param pulumi.Input[str] plan_id: The ID of the plan to configure.
        """
        pulumi.set(__self__, "kms_arn", kms_arn)
        pulumi.set(__self__, "kms_id", kms_id)
        pulumi.set(__self__, "kms_name", kms_name)
        pulumi.set(__self__, "plan_id", plan_id)

    @property
    @pulumi.getter(name="kmsArn")
    def kms_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kms_arn")

    @kms_arn.setter
    def kms_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "kms_arn", value)

    @property
    @pulumi.getter(name="kmsId")
    def kms_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kms_id")

    @kms_id.setter
    def kms_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "kms_id", value)

    @property
    @pulumi.getter(name="kmsName")
    def kms_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kms_name")

    @kms_name.setter
    def kms_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "kms_name", value)

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> pulumi.Input[str]:
        """
        The ID of the plan to configure.
        """
        return pulumi.get(self, "plan_id")

    @plan_id.setter
    def plan_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "plan_id", value)


@pulumi.input_type
class _PlanKmsState:
    def __init__(__self__, *,
                 kms_arn: Optional[pulumi.Input[str]] = None,
                 kms_id: Optional[pulumi.Input[str]] = None,
                 kms_name: Optional[pulumi.Input[str]] = None,
                 plan_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering PlanKms resources.
        :param pulumi.Input[str] plan_id: The ID of the plan to configure.
        """
        if kms_arn is not None:
            pulumi.set(__self__, "kms_arn", kms_arn)
        if kms_id is not None:
            pulumi.set(__self__, "kms_id", kms_id)
        if kms_name is not None:
            pulumi.set(__self__, "kms_name", kms_name)
        if plan_id is not None:
            pulumi.set(__self__, "plan_id", plan_id)

    @property
    @pulumi.getter(name="kmsArn")
    def kms_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kms_arn")

    @kms_arn.setter
    def kms_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_arn", value)

    @property
    @pulumi.getter(name="kmsId")
    def kms_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kms_id")

    @kms_id.setter
    def kms_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_id", value)

    @property
    @pulumi.getter(name="kmsName")
    def kms_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kms_name")

    @kms_name.setter
    def kms_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_name", value)

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the plan to configure.
        """
        return pulumi.get(self, "plan_id")

    @plan_id.setter
    def plan_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plan_id", value)


class PlanKms(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 kms_arn: Optional[pulumi.Input[str]] = None,
                 kms_id: Optional[pulumi.Input[str]] = None,
                 kms_name: Optional[pulumi.Input[str]] = None,
                 plan_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        `PlanKms` manages the list of kms avaialble to a plan in Duplo.

        This resource allows you take control of individual plan kms for a specific plan.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_duplocloud as duplocloud

        myplan = duplocloud.PlanKms("myplan",
            plan_id="plan-name",
            kms_id="kms-id",
            kms_arn="kms-arn",
            kms_name="kms-name")
        ```

        ## Import

        Example: Importing an existing WAF instance

         - *PLAN_ID* is the plan name

         - *KMS_NAME* is the name of the KMS

        ```sh
        $ pulumi import duplocloud:index/planKms:PlanKms myplan *PLAN_ID*/kms/*KMS_NAME*
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] plan_id: The ID of the plan to configure.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PlanKmsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        `PlanKms` manages the list of kms avaialble to a plan in Duplo.

        This resource allows you take control of individual plan kms for a specific plan.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_duplocloud as duplocloud

        myplan = duplocloud.PlanKms("myplan",
            plan_id="plan-name",
            kms_id="kms-id",
            kms_arn="kms-arn",
            kms_name="kms-name")
        ```

        ## Import

        Example: Importing an existing WAF instance

         - *PLAN_ID* is the plan name

         - *KMS_NAME* is the name of the KMS

        ```sh
        $ pulumi import duplocloud:index/planKms:PlanKms myplan *PLAN_ID*/kms/*KMS_NAME*
        ```

        :param str resource_name: The name of the resource.
        :param PlanKmsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PlanKmsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 kms_arn: Optional[pulumi.Input[str]] = None,
                 kms_id: Optional[pulumi.Input[str]] = None,
                 kms_name: Optional[pulumi.Input[str]] = None,
                 plan_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PlanKmsArgs.__new__(PlanKmsArgs)

            if kms_arn is None and not opts.urn:
                raise TypeError("Missing required property 'kms_arn'")
            __props__.__dict__["kms_arn"] = kms_arn
            if kms_id is None and not opts.urn:
                raise TypeError("Missing required property 'kms_id'")
            __props__.__dict__["kms_id"] = kms_id
            if kms_name is None and not opts.urn:
                raise TypeError("Missing required property 'kms_name'")
            __props__.__dict__["kms_name"] = kms_name
            if plan_id is None and not opts.urn:
                raise TypeError("Missing required property 'plan_id'")
            __props__.__dict__["plan_id"] = plan_id
        super(PlanKms, __self__).__init__(
            'duplocloud:index/planKms:PlanKms',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            kms_arn: Optional[pulumi.Input[str]] = None,
            kms_id: Optional[pulumi.Input[str]] = None,
            kms_name: Optional[pulumi.Input[str]] = None,
            plan_id: Optional[pulumi.Input[str]] = None) -> 'PlanKms':
        """
        Get an existing PlanKms resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] plan_id: The ID of the plan to configure.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PlanKmsState.__new__(_PlanKmsState)

        __props__.__dict__["kms_arn"] = kms_arn
        __props__.__dict__["kms_id"] = kms_id
        __props__.__dict__["kms_name"] = kms_name
        __props__.__dict__["plan_id"] = plan_id
        return PlanKms(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="kmsArn")
    def kms_arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "kms_arn")

    @property
    @pulumi.getter(name="kmsId")
    def kms_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "kms_id")

    @property
    @pulumi.getter(name="kmsName")
    def kms_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "kms_name")

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> pulumi.Output[str]:
        """
        The ID of the plan to configure.
        """
        return pulumi.get(self, "plan_id")

