# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPlanKmsKeyResult',
    'AwaitableGetPlanKmsKeyResult',
    'get_plan_kms_key',
    'get_plan_kms_key_output',
]

@pulumi.output_type
class GetPlanKmsKeyResult:
    """
    A collection of values returned by getPlanKmsKey.
    """
    def __init__(__self__, datas=None, id=None, plan_id=None):
        if datas and not isinstance(datas, list):
            raise TypeError("Expected argument 'datas' to be a list")
        pulumi.set(__self__, "datas", datas)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if plan_id and not isinstance(plan_id, str):
            raise TypeError("Expected argument 'plan_id' to be a str")
        pulumi.set(__self__, "plan_id", plan_id)

    @property
    @pulumi.getter
    def datas(self) -> Sequence['outputs.GetPlanKmsKeyDataResult']:
        return pulumi.get(self, "datas")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> str:
        """
        The ID of the plan to configure.
        """
        return pulumi.get(self, "plan_id")


class AwaitableGetPlanKmsKeyResult(GetPlanKmsKeyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPlanKmsKeyResult(
            datas=self.datas,
            id=self.id,
            plan_id=self.plan_id)


def get_plan_kms_key(plan_id: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPlanKmsKeyResult:
    """
    `PlanKms` manages the list of kms avaialble to a plan in Duplo.

    This resource allows you take control of individual plan kms for a specific plan.


    :param str plan_id: The ID of the plan to configure.
    """
    __args__ = dict()
    __args__['planId'] = plan_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('duplocloud:index/getPlanKmsKey:getPlanKmsKey', __args__, opts=opts, typ=GetPlanKmsKeyResult).value

    return AwaitableGetPlanKmsKeyResult(
        datas=pulumi.get(__ret__, 'datas'),
        id=pulumi.get(__ret__, 'id'),
        plan_id=pulumi.get(__ret__, 'plan_id'))
def get_plan_kms_key_output(plan_id: Optional[pulumi.Input[str]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPlanKmsKeyResult]:
    """
    `PlanKms` manages the list of kms avaialble to a plan in Duplo.

    This resource allows you take control of individual plan kms for a specific plan.


    :param str plan_id: The ID of the plan to configure.
    """
    __args__ = dict()
    __args__['planId'] = plan_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('duplocloud:index/getPlanKmsKey:getPlanKmsKey', __args__, opts=opts, typ=GetPlanKmsKeyResult)
    return __ret__.apply(lambda __response__: GetPlanKmsKeyResult(
        datas=pulumi.get(__response__, 'datas'),
        id=pulumi.get(__response__, 'id'),
        plan_id=pulumi.get(__response__, 'plan_id')))
