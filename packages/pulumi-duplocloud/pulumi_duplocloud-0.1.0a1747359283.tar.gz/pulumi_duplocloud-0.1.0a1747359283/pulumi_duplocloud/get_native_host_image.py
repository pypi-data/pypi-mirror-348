# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetNativeHostImageResult',
    'AwaitableGetNativeHostImageResult',
    'get_native_host_image',
    'get_native_host_image_output',
]

@pulumi.output_type
class GetNativeHostImageResult:
    """
    A collection of values returned by getNativeHostImage.
    """
    def __init__(__self__, arch=None, id=None, image_id=None, is_kubernetes=None, k8s_version=None, name=None, os=None, region=None, tags=None, tenant_id=None, username=None):
        if arch and not isinstance(arch, str):
            raise TypeError("Expected argument 'arch' to be a str")
        pulumi.set(__self__, "arch", arch)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image_id and not isinstance(image_id, str):
            raise TypeError("Expected argument 'image_id' to be a str")
        pulumi.set(__self__, "image_id", image_id)
        if is_kubernetes and not isinstance(is_kubernetes, bool):
            raise TypeError("Expected argument 'is_kubernetes' to be a bool")
        pulumi.set(__self__, "is_kubernetes", is_kubernetes)
        if k8s_version and not isinstance(k8s_version, str):
            raise TypeError("Expected argument 'k8s_version' to be a str")
        pulumi.set(__self__, "k8s_version", k8s_version)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if os and not isinstance(os, str):
            raise TypeError("Expected argument 'os' to be a str")
        pulumi.set(__self__, "os", os)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def arch(self) -> str:
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> str:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="isKubernetes")
    def is_kubernetes(self) -> bool:
        return pulumi.get(self, "is_kubernetes")

    @property
    @pulumi.getter(name="k8sVersion")
    def k8s_version(self) -> str:
        return pulumi.get(self, "k8s_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def os(self) -> str:
        return pulumi.get(self, "os")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNativeHostImageTagResult']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The tenant ID
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


class AwaitableGetNativeHostImageResult(GetNativeHostImageResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNativeHostImageResult(
            arch=self.arch,
            id=self.id,
            image_id=self.image_id,
            is_kubernetes=self.is_kubernetes,
            k8s_version=self.k8s_version,
            name=self.name,
            os=self.os,
            region=self.region,
            tags=self.tags,
            tenant_id=self.tenant_id,
            username=self.username)


def get_native_host_image(arch: Optional[str] = None,
                          is_kubernetes: Optional[bool] = None,
                          name: Optional[str] = None,
                          tenant_id: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNativeHostImageResult:
    """
    `get_native_host_image` retrieves details of a specific image for a given tenant.


    :param str tenant_id: The tenant ID
    """
    __args__ = dict()
    __args__['arch'] = arch
    __args__['isKubernetes'] = is_kubernetes
    __args__['name'] = name
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('duplocloud:index/getNativeHostImage:getNativeHostImage', __args__, opts=opts, typ=GetNativeHostImageResult).value

    return AwaitableGetNativeHostImageResult(
        arch=pulumi.get(__ret__, 'arch'),
        id=pulumi.get(__ret__, 'id'),
        image_id=pulumi.get(__ret__, 'image_id'),
        is_kubernetes=pulumi.get(__ret__, 'is_kubernetes'),
        k8s_version=pulumi.get(__ret__, 'k8s_version'),
        name=pulumi.get(__ret__, 'name'),
        os=pulumi.get(__ret__, 'os'),
        region=pulumi.get(__ret__, 'region'),
        tags=pulumi.get(__ret__, 'tags'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'),
        username=pulumi.get(__ret__, 'username'))
def get_native_host_image_output(arch: Optional[pulumi.Input[Optional[str]]] = None,
                                 is_kubernetes: Optional[pulumi.Input[Optional[bool]]] = None,
                                 name: Optional[pulumi.Input[Optional[str]]] = None,
                                 tenant_id: Optional[pulumi.Input[str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNativeHostImageResult]:
    """
    `get_native_host_image` retrieves details of a specific image for a given tenant.


    :param str tenant_id: The tenant ID
    """
    __args__ = dict()
    __args__['arch'] = arch
    __args__['isKubernetes'] = is_kubernetes
    __args__['name'] = name
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('duplocloud:index/getNativeHostImage:getNativeHostImage', __args__, opts=opts, typ=GetNativeHostImageResult)
    return __ret__.apply(lambda __response__: GetNativeHostImageResult(
        arch=pulumi.get(__response__, 'arch'),
        id=pulumi.get(__response__, 'id'),
        image_id=pulumi.get(__response__, 'image_id'),
        is_kubernetes=pulumi.get(__response__, 'is_kubernetes'),
        k8s_version=pulumi.get(__response__, 'k8s_version'),
        name=pulumi.get(__response__, 'name'),
        os=pulumi.get(__response__, 'os'),
        region=pulumi.get(__response__, 'region'),
        tags=pulumi.get(__response__, 'tags'),
        tenant_id=pulumi.get(__response__, 'tenant_id'),
        username=pulumi.get(__response__, 'username')))
