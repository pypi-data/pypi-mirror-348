# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetTenantSecretResult',
    'AwaitableGetTenantSecretResult',
    'get_tenant_secret',
    'get_tenant_secret_output',
]

@pulumi.output_type
class GetTenantSecretResult:
    """
    A collection of values returned by getTenantSecret.
    """
    def __init__(__self__, arn=None, first_match=None, id=None, name=None, name_suffix=None, rotation_enabled=None, tags=None, tenant_id=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if first_match and not isinstance(first_match, bool):
            raise TypeError("Expected argument 'first_match' to be a bool")
        pulumi.set(__self__, "first_match", first_match)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if name_suffix and not isinstance(name_suffix, str):
            raise TypeError("Expected argument 'name_suffix' to be a str")
        pulumi.set(__self__, "name_suffix", name_suffix)
        if rotation_enabled and not isinstance(rotation_enabled, bool):
            raise TypeError("Expected argument 'rotation_enabled' to be a bool")
        pulumi.set(__self__, "rotation_enabled", rotation_enabled)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter
    def arn(self) -> str:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="firstMatch")
    def first_match(self) -> Optional[bool]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "first_match")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> str:
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter(name="rotationEnabled")
    def rotation_enabled(self) -> bool:
        return pulumi.get(self, "rotation_enabled")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetTenantSecretTagResult']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        return pulumi.get(self, "tenant_id")


class AwaitableGetTenantSecretResult(GetTenantSecretResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTenantSecretResult(
            arn=self.arn,
            first_match=self.first_match,
            id=self.id,
            name=self.name,
            name_suffix=self.name_suffix,
            rotation_enabled=self.rotation_enabled,
            tags=self.tags,
            tenant_id=self.tenant_id)


def get_tenant_secret(arn: Optional[str] = None,
                      first_match: Optional[bool] = None,
                      name: Optional[str] = None,
                      name_suffix: Optional[str] = None,
                      tenant_id: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTenantSecretResult:
    """
    ## Example Usage


    :param bool first_match: Defaults to `true`.
    """
    __args__ = dict()
    __args__['arn'] = arn
    __args__['firstMatch'] = first_match
    __args__['name'] = name
    __args__['nameSuffix'] = name_suffix
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('duplocloud:index/getTenantSecret:getTenantSecret', __args__, opts=opts, typ=GetTenantSecretResult).value

    return AwaitableGetTenantSecretResult(
        arn=pulumi.get(__ret__, 'arn'),
        first_match=pulumi.get(__ret__, 'first_match'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        name_suffix=pulumi.get(__ret__, 'name_suffix'),
        rotation_enabled=pulumi.get(__ret__, 'rotation_enabled'),
        tags=pulumi.get(__ret__, 'tags'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'))
def get_tenant_secret_output(arn: Optional[pulumi.Input[Optional[str]]] = None,
                             first_match: Optional[pulumi.Input[Optional[bool]]] = None,
                             name: Optional[pulumi.Input[Optional[str]]] = None,
                             name_suffix: Optional[pulumi.Input[Optional[str]]] = None,
                             tenant_id: Optional[pulumi.Input[str]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTenantSecretResult]:
    """
    ## Example Usage


    :param bool first_match: Defaults to `true`.
    """
    __args__ = dict()
    __args__['arn'] = arn
    __args__['firstMatch'] = first_match
    __args__['name'] = name
    __args__['nameSuffix'] = name_suffix
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('duplocloud:index/getTenantSecret:getTenantSecret', __args__, opts=opts, typ=GetTenantSecretResult)
    return __ret__.apply(lambda __response__: GetTenantSecretResult(
        arn=pulumi.get(__response__, 'arn'),
        first_match=pulumi.get(__response__, 'first_match'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        name_suffix=pulumi.get(__response__, 'name_suffix'),
        rotation_enabled=pulumi.get(__response__, 'rotation_enabled'),
        tags=pulumi.get(__response__, 'tags'),
        tenant_id=pulumi.get(__response__, 'tenant_id')))
