# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetAwsLaunchTemplateResult',
    'AwaitableGetAwsLaunchTemplateResult',
    'get_aws_launch_template',
    'get_aws_launch_template_output',
]

@pulumi.output_type
class GetAwsLaunchTemplateResult:
    """
    A collection of values returned by getAwsLaunchTemplate.
    """
    def __init__(__self__, ami=None, default_version=None, id=None, instance_type=None, latest_version=None, name=None, tenant_id=None, version=None, version_description=None):
        if ami and not isinstance(ami, str):
            raise TypeError("Expected argument 'ami' to be a str")
        pulumi.set(__self__, "ami", ami)
        if default_version and not isinstance(default_version, str):
            raise TypeError("Expected argument 'default_version' to be a str")
        pulumi.set(__self__, "default_version", default_version)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_type and not isinstance(instance_type, str):
            raise TypeError("Expected argument 'instance_type' to be a str")
        pulumi.set(__self__, "instance_type", instance_type)
        if latest_version and not isinstance(latest_version, str):
            raise TypeError("Expected argument 'latest_version' to be a str")
        pulumi.set(__self__, "latest_version", latest_version)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)
        if version_description and not isinstance(version_description, str):
            raise TypeError("Expected argument 'version_description' to be a str")
        pulumi.set(__self__, "version_description", version_description)

    @property
    @pulumi.getter
    def ami(self) -> str:
        return pulumi.get(self, "ami")

    @property
    @pulumi.getter(name="defaultVersion")
    def default_version(self) -> str:
        return pulumi.get(self, "default_version")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="latestVersion")
    def latest_version(self) -> str:
        return pulumi.get(self, "latest_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Any of the existing version of the launch template
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionDescription")
    def version_description(self) -> str:
        return pulumi.get(self, "version_description")


class AwaitableGetAwsLaunchTemplateResult(GetAwsLaunchTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAwsLaunchTemplateResult(
            ami=self.ami,
            default_version=self.default_version,
            id=self.id,
            instance_type=self.instance_type,
            latest_version=self.latest_version,
            name=self.name,
            tenant_id=self.tenant_id,
            version=self.version,
            version_description=self.version_description)


def get_aws_launch_template(name: Optional[str] = None,
                            tenant_id: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAwsLaunchTemplateResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('duplocloud:index/getAwsLaunchTemplate:getAwsLaunchTemplate', __args__, opts=opts, typ=GetAwsLaunchTemplateResult).value

    return AwaitableGetAwsLaunchTemplateResult(
        ami=pulumi.get(__ret__, 'ami'),
        default_version=pulumi.get(__ret__, 'default_version'),
        id=pulumi.get(__ret__, 'id'),
        instance_type=pulumi.get(__ret__, 'instance_type'),
        latest_version=pulumi.get(__ret__, 'latest_version'),
        name=pulumi.get(__ret__, 'name'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'),
        version=pulumi.get(__ret__, 'version'),
        version_description=pulumi.get(__ret__, 'version_description'))
def get_aws_launch_template_output(name: Optional[pulumi.Input[str]] = None,
                                   tenant_id: Optional[pulumi.Input[str]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAwsLaunchTemplateResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('duplocloud:index/getAwsLaunchTemplate:getAwsLaunchTemplate', __args__, opts=opts, typ=GetAwsLaunchTemplateResult)
    return __ret__.apply(lambda __response__: GetAwsLaunchTemplateResult(
        ami=pulumi.get(__response__, 'ami'),
        default_version=pulumi.get(__response__, 'default_version'),
        id=pulumi.get(__response__, 'id'),
        instance_type=pulumi.get(__response__, 'instance_type'),
        latest_version=pulumi.get(__response__, 'latest_version'),
        name=pulumi.get(__response__, 'name'),
        tenant_id=pulumi.get(__response__, 'tenant_id'),
        version=pulumi.get(__response__, 'version'),
        version_description=pulumi.get(__response__, 'version_description')))
