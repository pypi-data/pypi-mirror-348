# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetAzureStorageAccountKeyResult',
    'AwaitableGetAzureStorageAccountKeyResult',
    'get_azure_storage_account_key',
    'get_azure_storage_account_key_output',
]

@pulumi.output_type
class GetAzureStorageAccountKeyResult:
    """
    A collection of values returned by getAzureStorageAccountKey.
    """
    def __init__(__self__, id=None, key_name=None, key_value=None, storage_account_name=None, tenant_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key_name and not isinstance(key_name, str):
            raise TypeError("Expected argument 'key_name' to be a str")
        pulumi.set(__self__, "key_name", key_name)
        if key_value and not isinstance(key_value, str):
            raise TypeError("Expected argument 'key_value' to be a str")
        pulumi.set(__self__, "key_value", key_value)
        if storage_account_name and not isinstance(storage_account_name, str):
            raise TypeError("Expected argument 'storage_account_name' to be a str")
        pulumi.set(__self__, "storage_account_name", storage_account_name)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> str:
        return pulumi.get(self, "key_name")

    @property
    @pulumi.getter(name="keyValue")
    def key_value(self) -> str:
        return pulumi.get(self, "key_value")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> str:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        return pulumi.get(self, "tenant_id")


class AwaitableGetAzureStorageAccountKeyResult(GetAzureStorageAccountKeyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAzureStorageAccountKeyResult(
            id=self.id,
            key_name=self.key_name,
            key_value=self.key_value,
            storage_account_name=self.storage_account_name,
            tenant_id=self.tenant_id)


def get_azure_storage_account_key(storage_account_name: Optional[str] = None,
                                  tenant_id: Optional[str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAzureStorageAccountKeyResult:
    """
    `get_azure_storage_account_key` retrieves a azure storage account key in Duplo.
    """
    __args__ = dict()
    __args__['storageAccountName'] = storage_account_name
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('duplocloud:index/getAzureStorageAccountKey:getAzureStorageAccountKey', __args__, opts=opts, typ=GetAzureStorageAccountKeyResult).value

    return AwaitableGetAzureStorageAccountKeyResult(
        id=pulumi.get(__ret__, 'id'),
        key_name=pulumi.get(__ret__, 'key_name'),
        key_value=pulumi.get(__ret__, 'key_value'),
        storage_account_name=pulumi.get(__ret__, 'storage_account_name'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'))
def get_azure_storage_account_key_output(storage_account_name: Optional[pulumi.Input[str]] = None,
                                         tenant_id: Optional[pulumi.Input[str]] = None,
                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAzureStorageAccountKeyResult]:
    """
    `get_azure_storage_account_key` retrieves a azure storage account key in Duplo.
    """
    __args__ = dict()
    __args__['storageAccountName'] = storage_account_name
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('duplocloud:index/getAzureStorageAccountKey:getAzureStorageAccountKey', __args__, opts=opts, typ=GetAzureStorageAccountKeyResult)
    return __ret__.apply(lambda __response__: GetAzureStorageAccountKeyResult(
        id=pulumi.get(__response__, 'id'),
        key_name=pulumi.get(__response__, 'key_name'),
        key_value=pulumi.get(__response__, 'key_value'),
        storage_account_name=pulumi.get(__response__, 'storage_account_name'),
        tenant_id=pulumi.get(__response__, 'tenant_id')))
