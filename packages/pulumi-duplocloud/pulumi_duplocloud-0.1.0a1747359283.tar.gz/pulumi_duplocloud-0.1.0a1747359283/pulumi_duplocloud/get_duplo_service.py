# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetDuploServiceResult',
    'AwaitableGetDuploServiceResult',
    'get_duplo_service',
    'get_duplo_service_output',
]

@pulumi.output_type
class GetDuploServiceResult:
    """
    A collection of values returned by getDuploService.
    """
    def __init__(__self__, agent_platform=None, allocation_tags=None, any_host_allowed=None, cloud=None, cloud_creds_from_k8s_service_account=None, commands=None, docker_image=None, domain=None, extra_config=None, force_stateful_set=None, fqdn=None, fqdn_ex=None, hpa_specs=None, id=None, is_daemonset=None, is_unique_k8s_node_required=None, lb_synced_deployment=None, name=None, other_docker_config=None, other_docker_host_config=None, parent_domain=None, replica_collocation_allowed=None, replicas=None, replicas_matching_asg_name=None, should_spread_across_zones=None, tags=None, tenant_id=None, volumes=None):
        if agent_platform and not isinstance(agent_platform, int):
            raise TypeError("Expected argument 'agent_platform' to be a int")
        pulumi.set(__self__, "agent_platform", agent_platform)
        if allocation_tags and not isinstance(allocation_tags, str):
            raise TypeError("Expected argument 'allocation_tags' to be a str")
        pulumi.set(__self__, "allocation_tags", allocation_tags)
        if any_host_allowed and not isinstance(any_host_allowed, bool):
            raise TypeError("Expected argument 'any_host_allowed' to be a bool")
        pulumi.set(__self__, "any_host_allowed", any_host_allowed)
        if cloud and not isinstance(cloud, int):
            raise TypeError("Expected argument 'cloud' to be a int")
        pulumi.set(__self__, "cloud", cloud)
        if cloud_creds_from_k8s_service_account and not isinstance(cloud_creds_from_k8s_service_account, bool):
            raise TypeError("Expected argument 'cloud_creds_from_k8s_service_account' to be a bool")
        pulumi.set(__self__, "cloud_creds_from_k8s_service_account", cloud_creds_from_k8s_service_account)
        if commands and not isinstance(commands, list):
            raise TypeError("Expected argument 'commands' to be a list")
        pulumi.set(__self__, "commands", commands)
        if docker_image and not isinstance(docker_image, str):
            raise TypeError("Expected argument 'docker_image' to be a str")
        pulumi.set(__self__, "docker_image", docker_image)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if extra_config and not isinstance(extra_config, str):
            raise TypeError("Expected argument 'extra_config' to be a str")
        pulumi.set(__self__, "extra_config", extra_config)
        if force_stateful_set and not isinstance(force_stateful_set, bool):
            raise TypeError("Expected argument 'force_stateful_set' to be a bool")
        pulumi.set(__self__, "force_stateful_set", force_stateful_set)
        if fqdn and not isinstance(fqdn, str):
            raise TypeError("Expected argument 'fqdn' to be a str")
        pulumi.set(__self__, "fqdn", fqdn)
        if fqdn_ex and not isinstance(fqdn_ex, str):
            raise TypeError("Expected argument 'fqdn_ex' to be a str")
        pulumi.set(__self__, "fqdn_ex", fqdn_ex)
        if hpa_specs and not isinstance(hpa_specs, str):
            raise TypeError("Expected argument 'hpa_specs' to be a str")
        pulumi.set(__self__, "hpa_specs", hpa_specs)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_daemonset and not isinstance(is_daemonset, bool):
            raise TypeError("Expected argument 'is_daemonset' to be a bool")
        pulumi.set(__self__, "is_daemonset", is_daemonset)
        if is_unique_k8s_node_required and not isinstance(is_unique_k8s_node_required, bool):
            raise TypeError("Expected argument 'is_unique_k8s_node_required' to be a bool")
        pulumi.set(__self__, "is_unique_k8s_node_required", is_unique_k8s_node_required)
        if lb_synced_deployment and not isinstance(lb_synced_deployment, bool):
            raise TypeError("Expected argument 'lb_synced_deployment' to be a bool")
        pulumi.set(__self__, "lb_synced_deployment", lb_synced_deployment)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if other_docker_config and not isinstance(other_docker_config, str):
            raise TypeError("Expected argument 'other_docker_config' to be a str")
        pulumi.set(__self__, "other_docker_config", other_docker_config)
        if other_docker_host_config and not isinstance(other_docker_host_config, str):
            raise TypeError("Expected argument 'other_docker_host_config' to be a str")
        pulumi.set(__self__, "other_docker_host_config", other_docker_host_config)
        if parent_domain and not isinstance(parent_domain, str):
            raise TypeError("Expected argument 'parent_domain' to be a str")
        pulumi.set(__self__, "parent_domain", parent_domain)
        if replica_collocation_allowed and not isinstance(replica_collocation_allowed, bool):
            raise TypeError("Expected argument 'replica_collocation_allowed' to be a bool")
        pulumi.set(__self__, "replica_collocation_allowed", replica_collocation_allowed)
        if replicas and not isinstance(replicas, int):
            raise TypeError("Expected argument 'replicas' to be a int")
        pulumi.set(__self__, "replicas", replicas)
        if replicas_matching_asg_name and not isinstance(replicas_matching_asg_name, str):
            raise TypeError("Expected argument 'replicas_matching_asg_name' to be a str")
        pulumi.set(__self__, "replicas_matching_asg_name", replicas_matching_asg_name)
        if should_spread_across_zones and not isinstance(should_spread_across_zones, bool):
            raise TypeError("Expected argument 'should_spread_across_zones' to be a bool")
        pulumi.set(__self__, "should_spread_across_zones", should_spread_across_zones)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)
        if volumes and not isinstance(volumes, str):
            raise TypeError("Expected argument 'volumes' to be a str")
        pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter(name="agentPlatform")
    def agent_platform(self) -> int:
        return pulumi.get(self, "agent_platform")

    @property
    @pulumi.getter(name="allocationTags")
    def allocation_tags(self) -> str:
        return pulumi.get(self, "allocation_tags")

    @property
    @pulumi.getter(name="anyHostAllowed")
    def any_host_allowed(self) -> bool:
        return pulumi.get(self, "any_host_allowed")

    @property
    @pulumi.getter
    def cloud(self) -> int:
        return pulumi.get(self, "cloud")

    @property
    @pulumi.getter(name="cloudCredsFromK8sServiceAccount")
    def cloud_creds_from_k8s_service_account(self) -> bool:
        return pulumi.get(self, "cloud_creds_from_k8s_service_account")

    @property
    @pulumi.getter
    def commands(self) -> Sequence[str]:
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter(name="dockerImage")
    def docker_image(self) -> str:
        return pulumi.get(self, "docker_image")

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        The service domain (whichever fqdn_ex or fqdn which is non empty)
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="extraConfig")
    def extra_config(self) -> str:
        return pulumi.get(self, "extra_config")

    @property
    @pulumi.getter(name="forceStatefulSet")
    def force_stateful_set(self) -> bool:
        return pulumi.get(self, "force_stateful_set")

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        """
        The fully qualified domain associated with the service
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="fqdnEx")
    def fqdn_ex(self) -> str:
        """
        External fully qualified domain associated with the service
        """
        return pulumi.get(self, "fqdn_ex")

    @property
    @pulumi.getter(name="hpaSpecs")
    def hpa_specs(self) -> str:
        return pulumi.get(self, "hpa_specs")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDaemonset")
    def is_daemonset(self) -> bool:
        return pulumi.get(self, "is_daemonset")

    @property
    @pulumi.getter(name="isUniqueK8sNodeRequired")
    def is_unique_k8s_node_required(self) -> bool:
        """
        Whether or not the replicas must be scheduled on separate Kubernetes nodes.  Only supported on Kubernetes.
        """
        return pulumi.get(self, "is_unique_k8s_node_required")

    @property
    @pulumi.getter(name="lbSyncedDeployment")
    def lb_synced_deployment(self) -> bool:
        return pulumi.get(self, "lb_synced_deployment")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="otherDockerConfig")
    def other_docker_config(self) -> str:
        return pulumi.get(self, "other_docker_config")

    @property
    @pulumi.getter(name="otherDockerHostConfig")
    def other_docker_host_config(self) -> str:
        return pulumi.get(self, "other_docker_host_config")

    @property
    @pulumi.getter(name="parentDomain")
    def parent_domain(self) -> str:
        """
        The service's parent domain
        """
        return pulumi.get(self, "parent_domain")

    @property
    @pulumi.getter(name="replicaCollocationAllowed")
    def replica_collocation_allowed(self) -> bool:
        return pulumi.get(self, "replica_collocation_allowed")

    @property
    @pulumi.getter
    def replicas(self) -> int:
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter(name="replicasMatchingAsgName")
    def replicas_matching_asg_name(self) -> str:
        return pulumi.get(self, "replicas_matching_asg_name")

    @property
    @pulumi.getter(name="shouldSpreadAcrossZones")
    def should_spread_across_zones(self) -> bool:
        """
        Whether or not the replicas must be spread across availability zones.  Only supported on Kubernetes.
        """
        return pulumi.get(self, "should_spread_across_zones")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDuploServiceTagResult']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def volumes(self) -> str:
        return pulumi.get(self, "volumes")


class AwaitableGetDuploServiceResult(GetDuploServiceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDuploServiceResult(
            agent_platform=self.agent_platform,
            allocation_tags=self.allocation_tags,
            any_host_allowed=self.any_host_allowed,
            cloud=self.cloud,
            cloud_creds_from_k8s_service_account=self.cloud_creds_from_k8s_service_account,
            commands=self.commands,
            docker_image=self.docker_image,
            domain=self.domain,
            extra_config=self.extra_config,
            force_stateful_set=self.force_stateful_set,
            fqdn=self.fqdn,
            fqdn_ex=self.fqdn_ex,
            hpa_specs=self.hpa_specs,
            id=self.id,
            is_daemonset=self.is_daemonset,
            is_unique_k8s_node_required=self.is_unique_k8s_node_required,
            lb_synced_deployment=self.lb_synced_deployment,
            name=self.name,
            other_docker_config=self.other_docker_config,
            other_docker_host_config=self.other_docker_host_config,
            parent_domain=self.parent_domain,
            replica_collocation_allowed=self.replica_collocation_allowed,
            replicas=self.replicas,
            replicas_matching_asg_name=self.replicas_matching_asg_name,
            should_spread_across_zones=self.should_spread_across_zones,
            tags=self.tags,
            tenant_id=self.tenant_id,
            volumes=self.volumes)


def get_duplo_service(name: Optional[str] = None,
                      tenant_id: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDuploServiceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('duplocloud:index/getDuploService:getDuploService', __args__, opts=opts, typ=GetDuploServiceResult).value

    return AwaitableGetDuploServiceResult(
        agent_platform=pulumi.get(__ret__, 'agent_platform'),
        allocation_tags=pulumi.get(__ret__, 'allocation_tags'),
        any_host_allowed=pulumi.get(__ret__, 'any_host_allowed'),
        cloud=pulumi.get(__ret__, 'cloud'),
        cloud_creds_from_k8s_service_account=pulumi.get(__ret__, 'cloud_creds_from_k8s_service_account'),
        commands=pulumi.get(__ret__, 'commands'),
        docker_image=pulumi.get(__ret__, 'docker_image'),
        domain=pulumi.get(__ret__, 'domain'),
        extra_config=pulumi.get(__ret__, 'extra_config'),
        force_stateful_set=pulumi.get(__ret__, 'force_stateful_set'),
        fqdn=pulumi.get(__ret__, 'fqdn'),
        fqdn_ex=pulumi.get(__ret__, 'fqdn_ex'),
        hpa_specs=pulumi.get(__ret__, 'hpa_specs'),
        id=pulumi.get(__ret__, 'id'),
        is_daemonset=pulumi.get(__ret__, 'is_daemonset'),
        is_unique_k8s_node_required=pulumi.get(__ret__, 'is_unique_k8s_node_required'),
        lb_synced_deployment=pulumi.get(__ret__, 'lb_synced_deployment'),
        name=pulumi.get(__ret__, 'name'),
        other_docker_config=pulumi.get(__ret__, 'other_docker_config'),
        other_docker_host_config=pulumi.get(__ret__, 'other_docker_host_config'),
        parent_domain=pulumi.get(__ret__, 'parent_domain'),
        replica_collocation_allowed=pulumi.get(__ret__, 'replica_collocation_allowed'),
        replicas=pulumi.get(__ret__, 'replicas'),
        replicas_matching_asg_name=pulumi.get(__ret__, 'replicas_matching_asg_name'),
        should_spread_across_zones=pulumi.get(__ret__, 'should_spread_across_zones'),
        tags=pulumi.get(__ret__, 'tags'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'),
        volumes=pulumi.get(__ret__, 'volumes'))
def get_duplo_service_output(name: Optional[pulumi.Input[str]] = None,
                             tenant_id: Optional[pulumi.Input[str]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDuploServiceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('duplocloud:index/getDuploService:getDuploService', __args__, opts=opts, typ=GetDuploServiceResult)
    return __ret__.apply(lambda __response__: GetDuploServiceResult(
        agent_platform=pulumi.get(__response__, 'agent_platform'),
        allocation_tags=pulumi.get(__response__, 'allocation_tags'),
        any_host_allowed=pulumi.get(__response__, 'any_host_allowed'),
        cloud=pulumi.get(__response__, 'cloud'),
        cloud_creds_from_k8s_service_account=pulumi.get(__response__, 'cloud_creds_from_k8s_service_account'),
        commands=pulumi.get(__response__, 'commands'),
        docker_image=pulumi.get(__response__, 'docker_image'),
        domain=pulumi.get(__response__, 'domain'),
        extra_config=pulumi.get(__response__, 'extra_config'),
        force_stateful_set=pulumi.get(__response__, 'force_stateful_set'),
        fqdn=pulumi.get(__response__, 'fqdn'),
        fqdn_ex=pulumi.get(__response__, 'fqdn_ex'),
        hpa_specs=pulumi.get(__response__, 'hpa_specs'),
        id=pulumi.get(__response__, 'id'),
        is_daemonset=pulumi.get(__response__, 'is_daemonset'),
        is_unique_k8s_node_required=pulumi.get(__response__, 'is_unique_k8s_node_required'),
        lb_synced_deployment=pulumi.get(__response__, 'lb_synced_deployment'),
        name=pulumi.get(__response__, 'name'),
        other_docker_config=pulumi.get(__response__, 'other_docker_config'),
        other_docker_host_config=pulumi.get(__response__, 'other_docker_host_config'),
        parent_domain=pulumi.get(__response__, 'parent_domain'),
        replica_collocation_allowed=pulumi.get(__response__, 'replica_collocation_allowed'),
        replicas=pulumi.get(__response__, 'replicas'),
        replicas_matching_asg_name=pulumi.get(__response__, 'replicas_matching_asg_name'),
        should_spread_across_zones=pulumi.get(__response__, 'should_spread_across_zones'),
        tags=pulumi.get(__response__, 'tags'),
        tenant_id=pulumi.get(__response__, 'tenant_id'),
        volumes=pulumi.get(__response__, 'volumes')))
