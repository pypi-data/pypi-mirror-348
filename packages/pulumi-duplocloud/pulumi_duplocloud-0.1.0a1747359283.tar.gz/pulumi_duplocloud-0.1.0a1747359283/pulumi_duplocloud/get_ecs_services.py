# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetEcsServicesResult',
    'AwaitableGetEcsServicesResult',
    'get_ecs_services',
    'get_ecs_services_output',
]

@pulumi.output_type
class GetEcsServicesResult:
    """
    A collection of values returned by getEcsServices.
    """
    def __init__(__self__, id=None, services=None, tenant_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if services and not isinstance(services, list):
            raise TypeError("Expected argument 'services' to be a list")
        pulumi.set(__self__, "services", services)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def services(self) -> Sequence['outputs.GetEcsServicesServiceResult']:
        return pulumi.get(self, "services")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        return pulumi.get(self, "tenant_id")


class AwaitableGetEcsServicesResult(GetEcsServicesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEcsServicesResult(
            id=self.id,
            services=self.services,
            tenant_id=self.tenant_id)


def get_ecs_services(tenant_id: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEcsServicesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('duplocloud:index/getEcsServices:getEcsServices', __args__, opts=opts, typ=GetEcsServicesResult).value

    return AwaitableGetEcsServicesResult(
        id=pulumi.get(__ret__, 'id'),
        services=pulumi.get(__ret__, 'services'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'))
def get_ecs_services_output(tenant_id: Optional[pulumi.Input[str]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEcsServicesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('duplocloud:index/getEcsServices:getEcsServices', __args__, opts=opts, typ=GetEcsServicesResult)
    return __ret__.apply(lambda __response__: GetEcsServicesResult(
        id=pulumi.get(__response__, 'id'),
        services=pulumi.get(__response__, 'services'),
        tenant_id=pulumi.get(__response__, 'tenant_id')))
