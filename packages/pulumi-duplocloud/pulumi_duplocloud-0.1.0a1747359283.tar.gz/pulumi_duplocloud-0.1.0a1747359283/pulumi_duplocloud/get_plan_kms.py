# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetPlanKmsResult',
    'AwaitableGetPlanKmsResult',
    'get_plan_kms',
    'get_plan_kms_output',
]

@pulumi.output_type
class GetPlanKmsResult:
    """
    A collection of values returned by getPlanKms.
    """
    def __init__(__self__, id=None, kms_arn=None, kms_id=None, kms_name=None, plan_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kms_arn and not isinstance(kms_arn, str):
            raise TypeError("Expected argument 'kms_arn' to be a str")
        pulumi.set(__self__, "kms_arn", kms_arn)
        if kms_id and not isinstance(kms_id, str):
            raise TypeError("Expected argument 'kms_id' to be a str")
        pulumi.set(__self__, "kms_id", kms_id)
        if kms_name and not isinstance(kms_name, str):
            raise TypeError("Expected argument 'kms_name' to be a str")
        pulumi.set(__self__, "kms_name", kms_name)
        if plan_id and not isinstance(plan_id, str):
            raise TypeError("Expected argument 'plan_id' to be a str")
        pulumi.set(__self__, "plan_id", plan_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="kmsArn")
    def kms_arn(self) -> str:
        return pulumi.get(self, "kms_arn")

    @property
    @pulumi.getter(name="kmsId")
    def kms_id(self) -> str:
        return pulumi.get(self, "kms_id")

    @property
    @pulumi.getter(name="kmsName")
    def kms_name(self) -> str:
        return pulumi.get(self, "kms_name")

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> str:
        """
        The ID of the plan to configure.
        """
        return pulumi.get(self, "plan_id")


class AwaitableGetPlanKmsResult(GetPlanKmsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPlanKmsResult(
            id=self.id,
            kms_arn=self.kms_arn,
            kms_id=self.kms_id,
            kms_name=self.kms_name,
            plan_id=self.plan_id)


def get_plan_kms(kms_name: Optional[str] = None,
                 plan_id: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPlanKmsResult:
    """
    `PlanKms` manages the list of kms avaialble to a plan in Duplo.

    This resource allows you take control of individual plan kms for a specific plan.


    :param str plan_id: The ID of the plan to configure.
    """
    __args__ = dict()
    __args__['kmsName'] = kms_name
    __args__['planId'] = plan_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('duplocloud:index/getPlanKms:getPlanKms', __args__, opts=opts, typ=GetPlanKmsResult).value

    return AwaitableGetPlanKmsResult(
        id=pulumi.get(__ret__, 'id'),
        kms_arn=pulumi.get(__ret__, 'kms_arn'),
        kms_id=pulumi.get(__ret__, 'kms_id'),
        kms_name=pulumi.get(__ret__, 'kms_name'),
        plan_id=pulumi.get(__ret__, 'plan_id'))
def get_plan_kms_output(kms_name: Optional[pulumi.Input[str]] = None,
                        plan_id: Optional[pulumi.Input[str]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPlanKmsResult]:
    """
    `PlanKms` manages the list of kms avaialble to a plan in Duplo.

    This resource allows you take control of individual plan kms for a specific plan.


    :param str plan_id: The ID of the plan to configure.
    """
    __args__ = dict()
    __args__['kmsName'] = kms_name
    __args__['planId'] = plan_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('duplocloud:index/getPlanKms:getPlanKms', __args__, opts=opts, typ=GetPlanKmsResult)
    return __ret__.apply(lambda __response__: GetPlanKmsResult(
        id=pulumi.get(__response__, 'id'),
        kms_arn=pulumi.get(__response__, 'kms_arn'),
        kms_id=pulumi.get(__response__, 'kms_id'),
        kms_name=pulumi.get(__response__, 'kms_name'),
        plan_id=pulumi.get(__response__, 'plan_id')))
