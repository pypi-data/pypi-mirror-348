# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetTenantAwsRegionResult',
    'AwaitableGetTenantAwsRegionResult',
    'get_tenant_aws_region',
    'get_tenant_aws_region_output',
]

@pulumi.output_type
class GetTenantAwsRegionResult:
    """
    A collection of values returned by getTenantAwsRegion.
    """
    def __init__(__self__, aws_region=None, id=None, tenant_id=None):
        if aws_region and not isinstance(aws_region, str):
            raise TypeError("Expected argument 'aws_region' to be a str")
        pulumi.set(__self__, "aws_region", aws_region)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="awsRegion")
    def aws_region(self) -> str:
        return pulumi.get(self, "aws_region")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        return pulumi.get(self, "tenant_id")


class AwaitableGetTenantAwsRegionResult(GetTenantAwsRegionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTenantAwsRegionResult(
            aws_region=self.aws_region,
            id=self.id,
            tenant_id=self.tenant_id)


def get_tenant_aws_region(tenant_id: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTenantAwsRegionResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('duplocloud:index/getTenantAwsRegion:getTenantAwsRegion', __args__, opts=opts, typ=GetTenantAwsRegionResult).value

    return AwaitableGetTenantAwsRegionResult(
        aws_region=pulumi.get(__ret__, 'aws_region'),
        id=pulumi.get(__ret__, 'id'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'))
def get_tenant_aws_region_output(tenant_id: Optional[pulumi.Input[str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTenantAwsRegionResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('duplocloud:index/getTenantAwsRegion:getTenantAwsRegion', __args__, opts=opts, typ=GetTenantAwsRegionResult)
    return __ret__.apply(lambda __response__: GetTenantAwsRegionResult(
        aws_region=pulumi.get(__response__, 'aws_region'),
        id=pulumi.get(__response__, 'id'),
        tenant_id=pulumi.get(__response__, 'tenant_id')))
