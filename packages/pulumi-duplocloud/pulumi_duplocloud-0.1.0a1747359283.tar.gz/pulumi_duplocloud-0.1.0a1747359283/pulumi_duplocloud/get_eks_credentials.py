# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetEksCredentialsResult',
    'AwaitableGetEksCredentialsResult',
    'get_eks_credentials',
    'get_eks_credentials_output',
]

@pulumi.output_type
class GetEksCredentialsResult:
    """
    A collection of values returned by getEksCredentials.
    """
    def __init__(__self__, ca_certificate_data=None, endpoint=None, id=None, name=None, plan_id=None, region=None, token=None, version=None):
        if ca_certificate_data and not isinstance(ca_certificate_data, str):
            raise TypeError("Expected argument 'ca_certificate_data' to be a str")
        pulumi.set(__self__, "ca_certificate_data", ca_certificate_data)
        if endpoint and not isinstance(endpoint, str):
            raise TypeError("Expected argument 'endpoint' to be a str")
        pulumi.set(__self__, "endpoint", endpoint)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if plan_id and not isinstance(plan_id, str):
            raise TypeError("Expected argument 'plan_id' to be a str")
        pulumi.set(__self__, "plan_id", plan_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if token and not isinstance(token, str):
            raise TypeError("Expected argument 'token' to be a str")
        pulumi.set(__self__, "token", token)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="caCertificateData")
    def ca_certificate_data(self) -> str:
        return pulumi.get(self, "ca_certificate_data")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> str:
        return pulumi.get(self, "plan_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def token(self) -> str:
        return pulumi.get(self, "token")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


class AwaitableGetEksCredentialsResult(GetEksCredentialsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEksCredentialsResult(
            ca_certificate_data=self.ca_certificate_data,
            endpoint=self.endpoint,
            id=self.id,
            name=self.name,
            plan_id=self.plan_id,
            region=self.region,
            token=self.token,
            version=self.version)


def get_eks_credentials(plan_id: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEksCredentialsResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_duplocloud as duplocloud

    credential = duplocloud.get_eks_credentials(plan_id="non-prod")
    pulumi.export("credentialValue", {
        "caCertificateData": credential.ca_certificate_data,
        "endpoint": credential.endpoint,
        "name": credential.name,
        "version": credential.version,
        "region": credential.region,
        "token": credential.token,
    })
    ```
    """
    __args__ = dict()
    __args__['planId'] = plan_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('duplocloud:index/getEksCredentials:getEksCredentials', __args__, opts=opts, typ=GetEksCredentialsResult).value

    return AwaitableGetEksCredentialsResult(
        ca_certificate_data=pulumi.get(__ret__, 'ca_certificate_data'),
        endpoint=pulumi.get(__ret__, 'endpoint'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        plan_id=pulumi.get(__ret__, 'plan_id'),
        region=pulumi.get(__ret__, 'region'),
        token=pulumi.get(__ret__, 'token'),
        version=pulumi.get(__ret__, 'version'))
def get_eks_credentials_output(plan_id: Optional[pulumi.Input[str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEksCredentialsResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_duplocloud as duplocloud

    credential = duplocloud.get_eks_credentials(plan_id="non-prod")
    pulumi.export("credentialValue", {
        "caCertificateData": credential.ca_certificate_data,
        "endpoint": credential.endpoint,
        "name": credential.name,
        "version": credential.version,
        "region": credential.region,
        "token": credential.token,
    })
    ```
    """
    __args__ = dict()
    __args__['planId'] = plan_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('duplocloud:index/getEksCredentials:getEksCredentials', __args__, opts=opts, typ=GetEksCredentialsResult)
    return __ret__.apply(lambda __response__: GetEksCredentialsResult(
        ca_certificate_data=pulumi.get(__response__, 'ca_certificate_data'),
        endpoint=pulumi.get(__response__, 'endpoint'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        plan_id=pulumi.get(__response__, 'plan_id'),
        region=pulumi.get(__response__, 'region'),
        token=pulumi.get(__response__, 'token'),
        version=pulumi.get(__response__, 'version')))
