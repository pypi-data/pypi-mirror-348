# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetGcpFirestoreResult',
    'AwaitableGetGcpFirestoreResult',
    'get_gcp_firestore',
    'get_gcp_firestore_output',
]

@pulumi.output_type
class GetGcpFirestoreResult:
    """
    A collection of values returned by getGcpFirestore.
    """
    def __init__(__self__, app_engine_integration_mode=None, concurrency_mode=None, earliest_version_time=None, enable_delete_protection=None, enable_point_in_time_recovery=None, etag=None, id=None, location_id=None, name=None, tenant_id=None, type=None, uid=None, version_retention_period=None):
        if app_engine_integration_mode and not isinstance(app_engine_integration_mode, str):
            raise TypeError("Expected argument 'app_engine_integration_mode' to be a str")
        pulumi.set(__self__, "app_engine_integration_mode", app_engine_integration_mode)
        if concurrency_mode and not isinstance(concurrency_mode, str):
            raise TypeError("Expected argument 'concurrency_mode' to be a str")
        pulumi.set(__self__, "concurrency_mode", concurrency_mode)
        if earliest_version_time and not isinstance(earliest_version_time, str):
            raise TypeError("Expected argument 'earliest_version_time' to be a str")
        pulumi.set(__self__, "earliest_version_time", earliest_version_time)
        if enable_delete_protection and not isinstance(enable_delete_protection, bool):
            raise TypeError("Expected argument 'enable_delete_protection' to be a bool")
        pulumi.set(__self__, "enable_delete_protection", enable_delete_protection)
        if enable_point_in_time_recovery and not isinstance(enable_point_in_time_recovery, bool):
            raise TypeError("Expected argument 'enable_point_in_time_recovery' to be a bool")
        pulumi.set(__self__, "enable_point_in_time_recovery", enable_point_in_time_recovery)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location_id and not isinstance(location_id, str):
            raise TypeError("Expected argument 'location_id' to be a str")
        pulumi.set(__self__, "location_id", location_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if uid and not isinstance(uid, str):
            raise TypeError("Expected argument 'uid' to be a str")
        pulumi.set(__self__, "uid", uid)
        if version_retention_period and not isinstance(version_retention_period, str):
            raise TypeError("Expected argument 'version_retention_period' to be a str")
        pulumi.set(__self__, "version_retention_period", version_retention_period)

    @property
    @pulumi.getter(name="appEngineIntegrationMode")
    def app_engine_integration_mode(self) -> str:
        return pulumi.get(self, "app_engine_integration_mode")

    @property
    @pulumi.getter(name="concurrencyMode")
    def concurrency_mode(self) -> str:
        return pulumi.get(self, "concurrency_mode")

    @property
    @pulumi.getter(name="earliestVersionTime")
    def earliest_version_time(self) -> str:
        return pulumi.get(self, "earliest_version_time")

    @property
    @pulumi.getter(name="enableDeleteProtection")
    def enable_delete_protection(self) -> bool:
        """
        Delete protection prevents accidental deletion of firestore.
        """
        return pulumi.get(self, "enable_delete_protection")

    @property
    @pulumi.getter(name="enablePointInTimeRecovery")
    def enable_point_in_time_recovery(self) -> bool:
        """
        Restores data to a specific moment in time, enhancing data protection and recovery capabilities.
        """
        return pulumi.get(self, "enable_point_in_time_recovery")

    @property
    @pulumi.getter
    def etag(self) -> str:
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> str:
        """
        Location for firestore
        """
        return pulumi.get(self, "location_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The full name of the firestore.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The GUID of the tenant that the firestore will be created in.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Firestore type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uid(self) -> str:
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="versionRetentionPeriod")
    def version_retention_period(self) -> str:
        return pulumi.get(self, "version_retention_period")


class AwaitableGetGcpFirestoreResult(GetGcpFirestoreResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGcpFirestoreResult(
            app_engine_integration_mode=self.app_engine_integration_mode,
            concurrency_mode=self.concurrency_mode,
            earliest_version_time=self.earliest_version_time,
            enable_delete_protection=self.enable_delete_protection,
            enable_point_in_time_recovery=self.enable_point_in_time_recovery,
            etag=self.etag,
            id=self.id,
            location_id=self.location_id,
            name=self.name,
            tenant_id=self.tenant_id,
            type=self.type,
            uid=self.uid,
            version_retention_period=self.version_retention_period)


def get_gcp_firestore(name: Optional[str] = None,
                      tenant_id: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGcpFirestoreResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_duplocloud as duplocloud

    app = duplocloud.get_gcp_firestore(tenant_id="tenant_id",
        name="name")
    pulumi.export("out", {
        "name": app.name,
        "type": app.type,
        "locationId": app.location_id,
        "enableDeleteProtection": app.enable_delete_protection,
        "enablePointInTimeRecovery": app.enable_point_in_time_recovery,
        "etag": app.etag,
        "uid": app.uid,
        "versionRetentionPeriod": app.version_retention_period,
        "earliestVersionTime": app.earliest_version_time,
        "concurrencyMode": app.concurrency_mode,
        "appEngineIntegrationMode": app.app_engine_integration_mode,
    })
    ```


    :param str name: The full name of the firestore.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
    :param str tenant_id: The GUID of the tenant that the firestore will be created in.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('duplocloud:index/getGcpFirestore:getGcpFirestore', __args__, opts=opts, typ=GetGcpFirestoreResult).value

    return AwaitableGetGcpFirestoreResult(
        app_engine_integration_mode=pulumi.get(__ret__, 'app_engine_integration_mode'),
        concurrency_mode=pulumi.get(__ret__, 'concurrency_mode'),
        earliest_version_time=pulumi.get(__ret__, 'earliest_version_time'),
        enable_delete_protection=pulumi.get(__ret__, 'enable_delete_protection'),
        enable_point_in_time_recovery=pulumi.get(__ret__, 'enable_point_in_time_recovery'),
        etag=pulumi.get(__ret__, 'etag'),
        id=pulumi.get(__ret__, 'id'),
        location_id=pulumi.get(__ret__, 'location_id'),
        name=pulumi.get(__ret__, 'name'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'),
        type=pulumi.get(__ret__, 'type'),
        uid=pulumi.get(__ret__, 'uid'),
        version_retention_period=pulumi.get(__ret__, 'version_retention_period'))
def get_gcp_firestore_output(name: Optional[pulumi.Input[str]] = None,
                             tenant_id: Optional[pulumi.Input[str]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGcpFirestoreResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_duplocloud as duplocloud

    app = duplocloud.get_gcp_firestore(tenant_id="tenant_id",
        name="name")
    pulumi.export("out", {
        "name": app.name,
        "type": app.type,
        "locationId": app.location_id,
        "enableDeleteProtection": app.enable_delete_protection,
        "enablePointInTimeRecovery": app.enable_point_in_time_recovery,
        "etag": app.etag,
        "uid": app.uid,
        "versionRetentionPeriod": app.version_retention_period,
        "earliestVersionTime": app.earliest_version_time,
        "concurrencyMode": app.concurrency_mode,
        "appEngineIntegrationMode": app.app_engine_integration_mode,
    })
    ```


    :param str name: The full name of the firestore.  Duplo will add a prefix to the name.  You can retrieve the full name from the `fullname` attribute.
    :param str tenant_id: The GUID of the tenant that the firestore will be created in.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('duplocloud:index/getGcpFirestore:getGcpFirestore', __args__, opts=opts, typ=GetGcpFirestoreResult)
    return __ret__.apply(lambda __response__: GetGcpFirestoreResult(
        app_engine_integration_mode=pulumi.get(__response__, 'app_engine_integration_mode'),
        concurrency_mode=pulumi.get(__response__, 'concurrency_mode'),
        earliest_version_time=pulumi.get(__response__, 'earliest_version_time'),
        enable_delete_protection=pulumi.get(__response__, 'enable_delete_protection'),
        enable_point_in_time_recovery=pulumi.get(__response__, 'enable_point_in_time_recovery'),
        etag=pulumi.get(__response__, 'etag'),
        id=pulumi.get(__response__, 'id'),
        location_id=pulumi.get(__response__, 'location_id'),
        name=pulumi.get(__response__, 'name'),
        tenant_id=pulumi.get(__response__, 'tenant_id'),
        type=pulumi.get(__response__, 'type'),
        uid=pulumi.get(__response__, 'uid'),
        version_retention_period=pulumi.get(__response__, 'version_retention_period')))
