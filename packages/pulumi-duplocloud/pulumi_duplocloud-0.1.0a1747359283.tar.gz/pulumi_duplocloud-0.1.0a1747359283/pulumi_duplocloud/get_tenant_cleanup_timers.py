# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetTenantCleanupTimersResult',
    'AwaitableGetTenantCleanupTimersResult',
    'get_tenant_cleanup_timers',
    'get_tenant_cleanup_timers_output',
]

@pulumi.output_type
class GetTenantCleanupTimersResult:
    """
    A collection of values returned by getTenantCleanupTimers.
    """
    def __init__(__self__, expiry_time=None, id=None, pause_time=None, tenant_id=None):
        if expiry_time and not isinstance(expiry_time, str):
            raise TypeError("Expected argument 'expiry_time' to be a str")
        pulumi.set(__self__, "expiry_time", expiry_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if pause_time and not isinstance(pause_time, str):
            raise TypeError("Expected argument 'pause_time' to be a str")
        pulumi.set(__self__, "pause_time", pause_time)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="expiryTime")
    def expiry_time(self) -> str:
        """
        The expiry time of the tenant.
        """
        return pulumi.get(self, "expiry_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="pauseTime")
    def pause_time(self) -> str:
        """
        The time to pause the tenant.
        """
        return pulumi.get(self, "pause_time")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The GUID of the tenant that the cleanup timers will be created in.
        """
        return pulumi.get(self, "tenant_id")


class AwaitableGetTenantCleanupTimersResult(GetTenantCleanupTimersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTenantCleanupTimersResult(
            expiry_time=self.expiry_time,
            id=self.id,
            pause_time=self.pause_time,
            tenant_id=self.tenant_id)


def get_tenant_cleanup_timers(tenant_id: Optional[str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTenantCleanupTimersResult:
    """
    Use this data source to access information about an existing resource.

    :param str tenant_id: The GUID of the tenant that the cleanup timers will be created in.
    """
    __args__ = dict()
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('duplocloud:index/getTenantCleanupTimers:getTenantCleanupTimers', __args__, opts=opts, typ=GetTenantCleanupTimersResult).value

    return AwaitableGetTenantCleanupTimersResult(
        expiry_time=pulumi.get(__ret__, 'expiry_time'),
        id=pulumi.get(__ret__, 'id'),
        pause_time=pulumi.get(__ret__, 'pause_time'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'))
def get_tenant_cleanup_timers_output(tenant_id: Optional[pulumi.Input[str]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTenantCleanupTimersResult]:
    """
    Use this data source to access information about an existing resource.

    :param str tenant_id: The GUID of the tenant that the cleanup timers will be created in.
    """
    __args__ = dict()
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('duplocloud:index/getTenantCleanupTimers:getTenantCleanupTimers', __args__, opts=opts, typ=GetTenantCleanupTimersResult)
    return __ret__.apply(lambda __response__: GetTenantCleanupTimersResult(
        expiry_time=pulumi.get(__response__, 'expiry_time'),
        id=pulumi.get(__response__, 'id'),
        pause_time=pulumi.get(__response__, 'pause_time'),
        tenant_id=pulumi.get(__response__, 'tenant_id')))
