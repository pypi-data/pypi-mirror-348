# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPlanResult',
    'AwaitableGetPlanResult',
    'get_plan',
    'get_plan_output',
]

@pulumi.output_type
class GetPlanResult:
    """
    A collection of values returned by getPlan.
    """
    def __init__(__self__, account_id=None, availability_zones=None, capabilities=None, certificates=None, cloud=None, cloud_config=None, configs=None, id=None, images=None, kms_keys=None, kubernetes_configs=None, metadatas=None, plan_id=None, private_subnet_ids=None, public_subnet_ids=None, region=None, vpc_id=None, waf_infos=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if availability_zones and not isinstance(availability_zones, list):
            raise TypeError("Expected argument 'availability_zones' to be a list")
        pulumi.set(__self__, "availability_zones", availability_zones)
        if capabilities and not isinstance(capabilities, dict):
            raise TypeError("Expected argument 'capabilities' to be a dict")
        pulumi.set(__self__, "capabilities", capabilities)
        if certificates and not isinstance(certificates, list):
            raise TypeError("Expected argument 'certificates' to be a list")
        pulumi.set(__self__, "certificates", certificates)
        if cloud and not isinstance(cloud, int):
            raise TypeError("Expected argument 'cloud' to be a int")
        pulumi.set(__self__, "cloud", cloud)
        if cloud_config and not isinstance(cloud_config, dict):
            raise TypeError("Expected argument 'cloud_config' to be a dict")
        pulumi.set(__self__, "cloud_config", cloud_config)
        if configs and not isinstance(configs, list):
            raise TypeError("Expected argument 'configs' to be a list")
        pulumi.set(__self__, "configs", configs)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if images and not isinstance(images, list):
            raise TypeError("Expected argument 'images' to be a list")
        pulumi.set(__self__, "images", images)
        if kms_keys and not isinstance(kms_keys, list):
            raise TypeError("Expected argument 'kms_keys' to be a list")
        pulumi.set(__self__, "kms_keys", kms_keys)
        if kubernetes_configs and not isinstance(kubernetes_configs, list):
            raise TypeError("Expected argument 'kubernetes_configs' to be a list")
        pulumi.set(__self__, "kubernetes_configs", kubernetes_configs)
        if metadatas and not isinstance(metadatas, list):
            raise TypeError("Expected argument 'metadatas' to be a list")
        pulumi.set(__self__, "metadatas", metadatas)
        if plan_id and not isinstance(plan_id, str):
            raise TypeError("Expected argument 'plan_id' to be a str")
        pulumi.set(__self__, "plan_id", plan_id)
        if private_subnet_ids and not isinstance(private_subnet_ids, list):
            raise TypeError("Expected argument 'private_subnet_ids' to be a list")
        pulumi.set(__self__, "private_subnet_ids", private_subnet_ids)
        if public_subnet_ids and not isinstance(public_subnet_ids, list):
            raise TypeError("Expected argument 'public_subnet_ids' to be a list")
        pulumi.set(__self__, "public_subnet_ids", public_subnet_ids)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)
        if waf_infos and not isinstance(waf_infos, list):
            raise TypeError("Expected argument 'waf_infos' to be a list")
        pulumi.set(__self__, "waf_infos", waf_infos)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Sequence[str]:
        return pulumi.get(self, "availability_zones")

    @property
    @pulumi.getter
    def capabilities(self) -> Mapping[str, bool]:
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter
    def certificates(self) -> Sequence['outputs.GetPlanCertificateResult']:
        return pulumi.get(self, "certificates")

    @property
    @pulumi.getter
    def cloud(self) -> int:
        return pulumi.get(self, "cloud")

    @property
    @pulumi.getter(name="cloudConfig")
    def cloud_config(self) -> Mapping[str, str]:
        return pulumi.get(self, "cloud_config")

    @property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.GetPlanConfigResult']:
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def images(self) -> Sequence['outputs.GetPlanImageResult']:
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="kmsKeys")
    def kms_keys(self) -> Sequence['outputs.GetPlanKmsKeyResult']:
        return pulumi.get(self, "kms_keys")

    @property
    @pulumi.getter(name="kubernetesConfigs")
    def kubernetes_configs(self) -> Sequence['outputs.GetPlanKubernetesConfigResult']:
        return pulumi.get(self, "kubernetes_configs")

    @property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetPlanMetadataResult']:
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> str:
        return pulumi.get(self, "plan_id")

    @property
    @pulumi.getter(name="privateSubnetIds")
    def private_subnet_ids(self) -> Sequence[str]:
        return pulumi.get(self, "private_subnet_ids")

    @property
    @pulumi.getter(name="publicSubnetIds")
    def public_subnet_ids(self) -> Sequence[str]:
        return pulumi.get(self, "public_subnet_ids")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="wafInfos")
    def waf_infos(self) -> Sequence['outputs.GetPlanWafInfoResult']:
        return pulumi.get(self, "waf_infos")


class AwaitableGetPlanResult(GetPlanResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPlanResult(
            account_id=self.account_id,
            availability_zones=self.availability_zones,
            capabilities=self.capabilities,
            certificates=self.certificates,
            cloud=self.cloud,
            cloud_config=self.cloud_config,
            configs=self.configs,
            id=self.id,
            images=self.images,
            kms_keys=self.kms_keys,
            kubernetes_configs=self.kubernetes_configs,
            metadatas=self.metadatas,
            plan_id=self.plan_id,
            private_subnet_ids=self.private_subnet_ids,
            public_subnet_ids=self.public_subnet_ids,
            region=self.region,
            vpc_id=self.vpc_id,
            waf_infos=self.waf_infos)


def get_plan(plan_id: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPlanResult:
    """
    `get_plan` retrieves details of a plan in Duplo.
    """
    __args__ = dict()
    __args__['planId'] = plan_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('duplocloud:index/getPlan:getPlan', __args__, opts=opts, typ=GetPlanResult).value

    return AwaitableGetPlanResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        availability_zones=pulumi.get(__ret__, 'availability_zones'),
        capabilities=pulumi.get(__ret__, 'capabilities'),
        certificates=pulumi.get(__ret__, 'certificates'),
        cloud=pulumi.get(__ret__, 'cloud'),
        cloud_config=pulumi.get(__ret__, 'cloud_config'),
        configs=pulumi.get(__ret__, 'configs'),
        id=pulumi.get(__ret__, 'id'),
        images=pulumi.get(__ret__, 'images'),
        kms_keys=pulumi.get(__ret__, 'kms_keys'),
        kubernetes_configs=pulumi.get(__ret__, 'kubernetes_configs'),
        metadatas=pulumi.get(__ret__, 'metadatas'),
        plan_id=pulumi.get(__ret__, 'plan_id'),
        private_subnet_ids=pulumi.get(__ret__, 'private_subnet_ids'),
        public_subnet_ids=pulumi.get(__ret__, 'public_subnet_ids'),
        region=pulumi.get(__ret__, 'region'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'),
        waf_infos=pulumi.get(__ret__, 'waf_infos'))
def get_plan_output(plan_id: Optional[pulumi.Input[str]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPlanResult]:
    """
    `get_plan` retrieves details of a plan in Duplo.
    """
    __args__ = dict()
    __args__['planId'] = plan_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('duplocloud:index/getPlan:getPlan', __args__, opts=opts, typ=GetPlanResult)
    return __ret__.apply(lambda __response__: GetPlanResult(
        account_id=pulumi.get(__response__, 'account_id'),
        availability_zones=pulumi.get(__response__, 'availability_zones'),
        capabilities=pulumi.get(__response__, 'capabilities'),
        certificates=pulumi.get(__response__, 'certificates'),
        cloud=pulumi.get(__response__, 'cloud'),
        cloud_config=pulumi.get(__response__, 'cloud_config'),
        configs=pulumi.get(__response__, 'configs'),
        id=pulumi.get(__response__, 'id'),
        images=pulumi.get(__response__, 'images'),
        kms_keys=pulumi.get(__response__, 'kms_keys'),
        kubernetes_configs=pulumi.get(__response__, 'kubernetes_configs'),
        metadatas=pulumi.get(__response__, 'metadatas'),
        plan_id=pulumi.get(__response__, 'plan_id'),
        private_subnet_ids=pulumi.get(__response__, 'private_subnet_ids'),
        public_subnet_ids=pulumi.get(__response__, 'public_subnet_ids'),
        region=pulumi.get(__response__, 'region'),
        vpc_id=pulumi.get(__response__, 'vpc_id'),
        waf_infos=pulumi.get(__response__, 'waf_infos')))
