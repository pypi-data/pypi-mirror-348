# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'AsgProfileMetadataArgs',
    'AsgProfileMetadataArgsDict',
    'AsgProfileMinionTagArgs',
    'AsgProfileMinionTagArgsDict',
    'AsgProfileNetworkInterfaceArgs',
    'AsgProfileNetworkInterfaceArgsDict',
    'AsgProfileNetworkInterfaceMetadataArgs',
    'AsgProfileNetworkInterfaceMetadataArgsDict',
    'AsgProfileTagArgs',
    'AsgProfileTagArgsDict',
    'AsgProfileTaintArgs',
    'AsgProfileTaintArgsDict',
    'AsgProfileVolumeArgs',
    'AsgProfileVolumeArgsDict',
    'AwsApigatewayEventIntegrationArgs',
    'AwsApigatewayEventIntegrationArgsDict',
    'AwsAppautoscalingPolicyStepScalingPolicyConfigurationArgs',
    'AwsAppautoscalingPolicyStepScalingPolicyConfigurationArgsDict',
    'AwsAppautoscalingPolicyStepScalingPolicyConfigurationStepAdjustmentArgs',
    'AwsAppautoscalingPolicyStepScalingPolicyConfigurationStepAdjustmentArgsDict',
    'AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationArgs',
    'AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationArgsDict',
    'AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationArgs',
    'AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationArgsDict',
    'AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationDimensionArgs',
    'AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationDimensionArgsDict',
    'AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecificationArgs',
    'AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecificationArgsDict',
    'AwsBatchComputeEnvironmentComputeResourcesArgs',
    'AwsBatchComputeEnvironmentComputeResourcesArgsDict',
    'AwsBatchComputeEnvironmentComputeResourcesEc2ConfigurationArgs',
    'AwsBatchComputeEnvironmentComputeResourcesEc2ConfigurationArgsDict',
    'AwsBatchComputeEnvironmentComputeResourcesLaunchTemplateArgs',
    'AwsBatchComputeEnvironmentComputeResourcesLaunchTemplateArgsDict',
    'AwsBatchJobDefinitionRetryStrategyArgs',
    'AwsBatchJobDefinitionRetryStrategyArgsDict',
    'AwsBatchJobDefinitionRetryStrategyEvaluateOnExitArgs',
    'AwsBatchJobDefinitionRetryStrategyEvaluateOnExitArgsDict',
    'AwsBatchJobDefinitionTimeoutArgs',
    'AwsBatchJobDefinitionTimeoutArgsDict',
    'AwsBatchSchedulingPolicyFairSharePolicyArgs',
    'AwsBatchSchedulingPolicyFairSharePolicyArgsDict',
    'AwsBatchSchedulingPolicyFairSharePolicyShareDistributionArgs',
    'AwsBatchSchedulingPolicyFairSharePolicyShareDistributionArgsDict',
    'AwsCloudfrontDistributionCustomErrorResponseArgs',
    'AwsCloudfrontDistributionCustomErrorResponseArgsDict',
    'AwsCloudfrontDistributionDefaultCacheBehaviorArgs',
    'AwsCloudfrontDistributionDefaultCacheBehaviorArgsDict',
    'AwsCloudfrontDistributionDefaultCacheBehaviorForwardedValuesArgs',
    'AwsCloudfrontDistributionDefaultCacheBehaviorForwardedValuesArgsDict',
    'AwsCloudfrontDistributionDefaultCacheBehaviorForwardedValuesCookiesArgs',
    'AwsCloudfrontDistributionDefaultCacheBehaviorForwardedValuesCookiesArgsDict',
    'AwsCloudfrontDistributionDefaultCacheBehaviorFunctionAssociationArgs',
    'AwsCloudfrontDistributionDefaultCacheBehaviorFunctionAssociationArgsDict',
    'AwsCloudfrontDistributionDefaultCacheBehaviorLambdaFunctionAssociationArgs',
    'AwsCloudfrontDistributionDefaultCacheBehaviorLambdaFunctionAssociationArgsDict',
    'AwsCloudfrontDistributionLoggingConfigArgs',
    'AwsCloudfrontDistributionLoggingConfigArgsDict',
    'AwsCloudfrontDistributionOrderedCacheBehaviorArgs',
    'AwsCloudfrontDistributionOrderedCacheBehaviorArgsDict',
    'AwsCloudfrontDistributionOrderedCacheBehaviorForwardedValuesArgs',
    'AwsCloudfrontDistributionOrderedCacheBehaviorForwardedValuesArgsDict',
    'AwsCloudfrontDistributionOrderedCacheBehaviorForwardedValuesCookiesArgs',
    'AwsCloudfrontDistributionOrderedCacheBehaviorForwardedValuesCookiesArgsDict',
    'AwsCloudfrontDistributionOrderedCacheBehaviorFunctionAssociationArgs',
    'AwsCloudfrontDistributionOrderedCacheBehaviorFunctionAssociationArgsDict',
    'AwsCloudfrontDistributionOrderedCacheBehaviorLambdaFunctionAssociationArgs',
    'AwsCloudfrontDistributionOrderedCacheBehaviorLambdaFunctionAssociationArgsDict',
    'AwsCloudfrontDistributionOriginArgs',
    'AwsCloudfrontDistributionOriginArgsDict',
    'AwsCloudfrontDistributionOriginCustomHeaderArgs',
    'AwsCloudfrontDistributionOriginCustomHeaderArgsDict',
    'AwsCloudfrontDistributionOriginCustomOriginConfigArgs',
    'AwsCloudfrontDistributionOriginCustomOriginConfigArgsDict',
    'AwsCloudfrontDistributionOriginGroupArgs',
    'AwsCloudfrontDistributionOriginGroupArgsDict',
    'AwsCloudfrontDistributionOriginGroupFailoverCriteriaArgs',
    'AwsCloudfrontDistributionOriginGroupFailoverCriteriaArgsDict',
    'AwsCloudfrontDistributionOriginGroupMemberArgs',
    'AwsCloudfrontDistributionOriginGroupMemberArgsDict',
    'AwsCloudfrontDistributionOriginOriginShieldArgs',
    'AwsCloudfrontDistributionOriginOriginShieldArgsDict',
    'AwsCloudfrontDistributionOriginS3OriginConfigArgs',
    'AwsCloudfrontDistributionOriginS3OriginConfigArgsDict',
    'AwsCloudfrontDistributionRestrictionsArgs',
    'AwsCloudfrontDistributionRestrictionsArgsDict',
    'AwsCloudfrontDistributionRestrictionsGeoRestrictionArgs',
    'AwsCloudfrontDistributionRestrictionsGeoRestrictionArgsDict',
    'AwsCloudfrontDistributionViewerCertificateArgs',
    'AwsCloudfrontDistributionViewerCertificateArgsDict',
    'AwsCloudwatchEventRuleTagArgs',
    'AwsCloudwatchEventRuleTagArgsDict',
    'AwsCloudwatchMetricAlarmDimensionArgs',
    'AwsCloudwatchMetricAlarmDimensionArgsDict',
    'AwsDynamodbTableV2AttributeArgs',
    'AwsDynamodbTableV2AttributeArgsDict',
    'AwsDynamodbTableV2GlobalSecondaryIndexArgs',
    'AwsDynamodbTableV2GlobalSecondaryIndexArgsDict',
    'AwsDynamodbTableV2KeySchemaArgs',
    'AwsDynamodbTableV2KeySchemaArgsDict',
    'AwsDynamodbTableV2LocalSecondaryIndexArgs',
    'AwsDynamodbTableV2LocalSecondaryIndexArgsDict',
    'AwsDynamodbTableV2ServerSideEncryptionArgs',
    'AwsDynamodbTableV2ServerSideEncryptionArgsDict',
    'AwsDynamodbTableV2TagArgs',
    'AwsDynamodbTableV2TagArgsDict',
    'AwsDynamodbTableV2TtlArgs',
    'AwsDynamodbTableV2TtlArgsDict',
    'AwsEfsFileSystemLifecyclePolicyArgs',
    'AwsEfsFileSystemLifecyclePolicyArgsDict',
    'AwsEfsFileSystemMountTargetArgs',
    'AwsEfsFileSystemMountTargetArgsDict',
    'AwsEfsFileSystemTagArgs',
    'AwsEfsFileSystemTagArgsDict',
    'AwsEfsLifecyclePolicyLifecyclePolicyArgs',
    'AwsEfsLifecyclePolicyLifecyclePolicyArgsDict',
    'AwsElasticsearchClusterConfigArgs',
    'AwsElasticsearchClusterConfigArgsDict',
    'AwsElasticsearchClusterConfigColdStorageOptionsArgs',
    'AwsElasticsearchClusterConfigColdStorageOptionsArgsDict',
    'AwsElasticsearchEbsOptionArgs',
    'AwsElasticsearchEbsOptionArgsDict',
    'AwsElasticsearchEncryptAtRestArgs',
    'AwsElasticsearchEncryptAtRestArgsDict',
    'AwsElasticsearchSnapshotOptionArgs',
    'AwsElasticsearchSnapshotOptionArgsDict',
    'AwsElasticsearchVpcOptionArgs',
    'AwsElasticsearchVpcOptionArgsDict',
    'AwsHostMetadataArgs',
    'AwsHostMetadataArgsDict',
    'AwsHostMinionTagArgs',
    'AwsHostMinionTagArgsDict',
    'AwsHostNetworkInterfaceArgs',
    'AwsHostNetworkInterfaceArgsDict',
    'AwsHostNetworkInterfaceMetadataArgs',
    'AwsHostNetworkInterfaceMetadataArgsDict',
    'AwsHostTagArgs',
    'AwsHostTagArgsDict',
    'AwsHostTaintArgs',
    'AwsHostTaintArgsDict',
    'AwsHostVolumeArgs',
    'AwsHostVolumeArgsDict',
    'AwsLambdaFunctionDeadLetterConfigArgs',
    'AwsLambdaFunctionDeadLetterConfigArgsDict',
    'AwsLambdaFunctionEnvironmentArgs',
    'AwsLambdaFunctionEnvironmentArgsDict',
    'AwsLambdaFunctionEventConfigDestinationConfigArgs',
    'AwsLambdaFunctionEventConfigDestinationConfigArgsDict',
    'AwsLambdaFunctionEventConfigDestinationConfigOnFailureArgs',
    'AwsLambdaFunctionEventConfigDestinationConfigOnFailureArgsDict',
    'AwsLambdaFunctionEventConfigDestinationConfigOnSuccessArgs',
    'AwsLambdaFunctionEventConfigDestinationConfigOnSuccessArgsDict',
    'AwsLambdaFunctionImageConfigArgs',
    'AwsLambdaFunctionImageConfigArgsDict',
    'AwsLambdaFunctionTracingConfigArgs',
    'AwsLambdaFunctionTracingConfigArgsDict',
    'AwsLbListenerRuleActionArgs',
    'AwsLbListenerRuleActionArgsDict',
    'AwsLbListenerRuleActionAuthenticateCognitoArgs',
    'AwsLbListenerRuleActionAuthenticateCognitoArgsDict',
    'AwsLbListenerRuleActionAuthenticateOidcArgs',
    'AwsLbListenerRuleActionAuthenticateOidcArgsDict',
    'AwsLbListenerRuleActionFixedResponseArgs',
    'AwsLbListenerRuleActionFixedResponseArgsDict',
    'AwsLbListenerRuleActionForwardArgs',
    'AwsLbListenerRuleActionForwardArgsDict',
    'AwsLbListenerRuleActionForwardStickinessArgs',
    'AwsLbListenerRuleActionForwardStickinessArgsDict',
    'AwsLbListenerRuleActionForwardTargetGroupArgs',
    'AwsLbListenerRuleActionForwardTargetGroupArgsDict',
    'AwsLbListenerRuleActionRedirectArgs',
    'AwsLbListenerRuleActionRedirectArgsDict',
    'AwsLbListenerRuleConditionArgs',
    'AwsLbListenerRuleConditionArgsDict',
    'AwsLbListenerRuleConditionHostHeaderArgs',
    'AwsLbListenerRuleConditionHostHeaderArgsDict',
    'AwsLbListenerRuleConditionHttpHeaderArgs',
    'AwsLbListenerRuleConditionHttpHeaderArgsDict',
    'AwsLbListenerRuleConditionHttpRequestMethodArgs',
    'AwsLbListenerRuleConditionHttpRequestMethodArgsDict',
    'AwsLbListenerRuleConditionPathPatternArgs',
    'AwsLbListenerRuleConditionPathPatternArgsDict',
    'AwsLbListenerRuleConditionQueryStringArgs',
    'AwsLbListenerRuleConditionQueryStringArgsDict',
    'AwsLbListenerRuleConditionSourceIpArgs',
    'AwsLbListenerRuleConditionSourceIpArgsDict',
    'AwsLbListenerRuleTagArgs',
    'AwsLbListenerRuleTagArgsDict',
    'AwsLbTargetGroupHealthCheckArgs',
    'AwsLbTargetGroupHealthCheckArgsDict',
    'AwsLoadBalancerListenerCertificateArgs',
    'AwsLoadBalancerListenerCertificateArgsDict',
    'AwsLoadBalancerListenerDefaultActionArgs',
    'AwsLoadBalancerListenerDefaultActionArgsDict',
    'AwsLoadBalancerTagArgs',
    'AwsLoadBalancerTagArgsDict',
    'AwsMwaaEnvironmentLastUpdatedArgs',
    'AwsMwaaEnvironmentLastUpdatedArgsDict',
    'AwsMwaaEnvironmentLastUpdatedErrorArgs',
    'AwsMwaaEnvironmentLastUpdatedErrorArgsDict',
    'AwsMwaaEnvironmentLoggingConfigurationArgs',
    'AwsMwaaEnvironmentLoggingConfigurationArgsDict',
    'AwsMwaaEnvironmentLoggingConfigurationDagProcessingLogsArgs',
    'AwsMwaaEnvironmentLoggingConfigurationDagProcessingLogsArgsDict',
    'AwsMwaaEnvironmentLoggingConfigurationSchedulerLogsArgs',
    'AwsMwaaEnvironmentLoggingConfigurationSchedulerLogsArgsDict',
    'AwsMwaaEnvironmentLoggingConfigurationTaskLogsArgs',
    'AwsMwaaEnvironmentLoggingConfigurationTaskLogsArgsDict',
    'AwsMwaaEnvironmentLoggingConfigurationWebserverLogsArgs',
    'AwsMwaaEnvironmentLoggingConfigurationWebserverLogsArgsDict',
    'AwsMwaaEnvironmentLoggingConfigurationWorkerLogsArgs',
    'AwsMwaaEnvironmentLoggingConfigurationWorkerLogsArgsDict',
    'AwsSqsQueueDeadLetterQueueConfigurationArgs',
    'AwsSqsQueueDeadLetterQueueConfigurationArgsDict',
    'AwsTargetGroupAttributesAttributeArgs',
    'AwsTargetGroupAttributesAttributeArgsDict',
    'AwsTimestreamwriteDatabaseAllTagArgs',
    'AwsTimestreamwriteDatabaseAllTagArgsDict',
    'AwsTimestreamwriteDatabaseTagArgs',
    'AwsTimestreamwriteDatabaseTagArgsDict',
    'AwsTimestreamwriteTableAllTagArgs',
    'AwsTimestreamwriteTableAllTagArgsDict',
    'AwsTimestreamwriteTableMagneticStoreWritePropertiesArgs',
    'AwsTimestreamwriteTableMagneticStoreWritePropertiesArgsDict',
    'AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgs',
    'AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgsDict',
    'AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgs',
    'AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgsDict',
    'AwsTimestreamwriteTableRetentionPropertiesArgs',
    'AwsTimestreamwriteTableRetentionPropertiesArgsDict',
    'AwsTimestreamwriteTableTagArgs',
    'AwsTimestreamwriteTableTagArgsDict',
    'AzureAvailabilitySetVirtualMachineArgs',
    'AzureAvailabilitySetVirtualMachineArgsDict',
    'AzureK8NodePoolNodeLabelArgs',
    'AzureK8NodePoolNodeLabelArgsDict',
    'AzureK8NodePoolScalePriorityArgs',
    'AzureK8NodePoolScalePriorityArgsDict',
    'AzureMssqlDatabaseSkuArgs',
    'AzureMssqlDatabaseSkuArgsDict',
    'AzureMssqlElasticpoolSkuArgs',
    'AzureMssqlElasticpoolSkuArgsDict',
    'AzurePrivateEndpointPrivateLinkServiceConnectionArgs',
    'AzurePrivateEndpointPrivateLinkServiceConnectionArgsDict',
    'AzureVaultBackupPolicyBackupArgs',
    'AzureVaultBackupPolicyBackupArgsDict',
    'AzureVaultBackupPolicyRetentionDailyArgs',
    'AzureVaultBackupPolicyRetentionDailyArgsDict',
    'AzureVaultBackupPolicyRetentionMonthlyArgs',
    'AzureVaultBackupPolicyRetentionMonthlyArgsDict',
    'AzureVaultBackupPolicyRetentionWeeklyArgs',
    'AzureVaultBackupPolicyRetentionWeeklyArgsDict',
    'AzureVaultBackupPolicyRetentionYearlyArgs',
    'AzureVaultBackupPolicyRetentionYearlyArgsDict',
    'AzureVirtualMachineMinionTagArgs',
    'AzureVirtualMachineMinionTagArgsDict',
    'AzureVirtualMachineScaleSetBootDiagnosticsArgs',
    'AzureVirtualMachineScaleSetBootDiagnosticsArgsDict',
    'AzureVirtualMachineScaleSetExtensionArgs',
    'AzureVirtualMachineScaleSetExtensionArgsDict',
    'AzureVirtualMachineScaleSetIdentityArgs',
    'AzureVirtualMachineScaleSetIdentityArgsDict',
    'AzureVirtualMachineScaleSetNetworkProfileArgs',
    'AzureVirtualMachineScaleSetNetworkProfileArgsDict',
    'AzureVirtualMachineScaleSetNetworkProfileDnsSettingsArgs',
    'AzureVirtualMachineScaleSetNetworkProfileDnsSettingsArgsDict',
    'AzureVirtualMachineScaleSetNetworkProfileIpConfigurationArgs',
    'AzureVirtualMachineScaleSetNetworkProfileIpConfigurationArgsDict',
    'AzureVirtualMachineScaleSetNetworkProfileIpConfigurationPublicIpAddressConfigurationArgs',
    'AzureVirtualMachineScaleSetNetworkProfileIpConfigurationPublicIpAddressConfigurationArgsDict',
    'AzureVirtualMachineScaleSetOsProfileArgs',
    'AzureVirtualMachineScaleSetOsProfileArgsDict',
    'AzureVirtualMachineScaleSetOsProfileLinuxConfigArgs',
    'AzureVirtualMachineScaleSetOsProfileLinuxConfigArgsDict',
    'AzureVirtualMachineScaleSetOsProfileLinuxConfigSshKeyArgs',
    'AzureVirtualMachineScaleSetOsProfileLinuxConfigSshKeyArgsDict',
    'AzureVirtualMachineScaleSetOsProfileSecretArgs',
    'AzureVirtualMachineScaleSetOsProfileSecretArgsDict',
    'AzureVirtualMachineScaleSetOsProfileSecretVaultCertificateArgs',
    'AzureVirtualMachineScaleSetOsProfileSecretVaultCertificateArgsDict',
    'AzureVirtualMachineScaleSetOsProfileWindowsConfigArgs',
    'AzureVirtualMachineScaleSetOsProfileWindowsConfigArgsDict',
    'AzureVirtualMachineScaleSetOsProfileWindowsConfigAdditionalUnattendConfigArgs',
    'AzureVirtualMachineScaleSetOsProfileWindowsConfigAdditionalUnattendConfigArgsDict',
    'AzureVirtualMachineScaleSetOsProfileWindowsConfigWinrmArgs',
    'AzureVirtualMachineScaleSetOsProfileWindowsConfigWinrmArgsDict',
    'AzureVirtualMachineScaleSetPlanArgs',
    'AzureVirtualMachineScaleSetPlanArgsDict',
    'AzureVirtualMachineScaleSetRollingUpgradePolicyArgs',
    'AzureVirtualMachineScaleSetRollingUpgradePolicyArgsDict',
    'AzureVirtualMachineScaleSetSkuArgs',
    'AzureVirtualMachineScaleSetSkuArgsDict',
    'AzureVirtualMachineScaleSetStorageProfileDataDiskArgs',
    'AzureVirtualMachineScaleSetStorageProfileDataDiskArgsDict',
    'AzureVirtualMachineScaleSetStorageProfileImageReferenceArgs',
    'AzureVirtualMachineScaleSetStorageProfileImageReferenceArgsDict',
    'AzureVirtualMachineScaleSetStorageProfileOsDiskArgs',
    'AzureVirtualMachineScaleSetStorageProfileOsDiskArgsDict',
    'AzureVirtualMachineTagArgs',
    'AzureVirtualMachineTagArgsDict',
    'AzureVirtualMachineVolumeArgs',
    'AzureVirtualMachineVolumeArgsDict',
    'AzureVmMaintenanceConfigurationWindowArgs',
    'AzureVmMaintenanceConfigurationWindowArgsDict',
    'ByohTagArgs',
    'ByohTagArgsDict',
    'DuploServiceLbconfigsLbconfigArgs',
    'DuploServiceLbconfigsLbconfigArgsDict',
    'DuploServiceLbconfigsLbconfigExtraSelectorLabelArgs',
    'DuploServiceLbconfigsLbconfigExtraSelectorLabelArgsDict',
    'DuploServiceLbconfigsLbconfigHealthCheckArgs',
    'DuploServiceLbconfigsLbconfigHealthCheckArgsDict',
    'DuploServiceTagArgs',
    'DuploServiceTagArgsDict',
    'EcacheInstanceLogDeliveryConfigurationArgs',
    'EcacheInstanceLogDeliveryConfigurationArgsDict',
    'EcsServiceCapacityProviderStrategyArgs',
    'EcsServiceCapacityProviderStrategyArgsDict',
    'EcsServiceLoadBalancerArgs',
    'EcsServiceLoadBalancerArgsDict',
    'EcsServiceLoadBalancerHealthCheckConfigArgs',
    'EcsServiceLoadBalancerHealthCheckConfigArgsDict',
    'EcsTaskDefinitionInferenceAcceleratorArgs',
    'EcsTaskDefinitionInferenceAcceleratorArgsDict',
    'EcsTaskDefinitionPlacementConstraintArgs',
    'EcsTaskDefinitionPlacementConstraintArgsDict',
    'EcsTaskDefinitionProxyConfigurationArgs',
    'EcsTaskDefinitionProxyConfigurationArgsDict',
    'EcsTaskDefinitionRequiresAttributeArgs',
    'EcsTaskDefinitionRequiresAttributeArgsDict',
    'EcsTaskDefinitionRuntimePlatformArgs',
    'EcsTaskDefinitionRuntimePlatformArgsDict',
    'EcsTaskDefinitionTagArgs',
    'EcsTaskDefinitionTagArgsDict',
    'GcpCloudFunctionEventTriggerArgs',
    'GcpCloudFunctionEventTriggerArgsDict',
    'GcpCloudFunctionHttpsTriggerArgs',
    'GcpCloudFunctionHttpsTriggerArgsDict',
    'GcpInfraMaintenanceWindowExclusionArgs',
    'GcpInfraMaintenanceWindowExclusionArgsDict',
    'GcpInfraMaintenanceWindowRecurringWindowArgs',
    'GcpInfraMaintenanceWindowRecurringWindowArgsDict',
    'GcpInfraSecurityRulePortsAndProtocolArgs',
    'GcpInfraSecurityRulePortsAndProtocolArgsDict',
    'GcpNodePoolAcceleratorArgs',
    'GcpNodePoolAcceleratorArgsDict',
    'GcpNodePoolAcceleratorGpuDriverInstallationConfigArgs',
    'GcpNodePoolAcceleratorGpuDriverInstallationConfigArgsDict',
    'GcpNodePoolAcceleratorGpuSharingConfigArgs',
    'GcpNodePoolAcceleratorGpuSharingConfigArgsDict',
    'GcpNodePoolLinuxNodeConfigArgs',
    'GcpNodePoolLinuxNodeConfigArgsDict',
    'GcpNodePoolNodePoolLoggingConfigArgs',
    'GcpNodePoolNodePoolLoggingConfigArgsDict',
    'GcpNodePoolTaintArgs',
    'GcpNodePoolTaintArgsDict',
    'GcpNodePoolUpgradeSettingArgs',
    'GcpNodePoolUpgradeSettingArgsDict',
    'GcpNodePoolUpgradeSettingBlueGreenSettingArgs',
    'GcpNodePoolUpgradeSettingBlueGreenSettingArgsDict',
    'GcpNodePoolUpgradeSettingBlueGreenSettingStandardRolloutPolicyArgs',
    'GcpNodePoolUpgradeSettingBlueGreenSettingStandardRolloutPolicyArgsDict',
    'GcpSchedulerJobAppEngineTargetArgs',
    'GcpSchedulerJobAppEngineTargetArgsDict',
    'GcpSchedulerJobAppEngineTargetRoutingArgs',
    'GcpSchedulerJobAppEngineTargetRoutingArgsDict',
    'GcpSchedulerJobHttpTargetArgs',
    'GcpSchedulerJobHttpTargetArgsDict',
    'GcpSchedulerJobHttpTargetOauthTokenArgs',
    'GcpSchedulerJobHttpTargetOauthTokenArgsDict',
    'GcpSchedulerJobHttpTargetOidcTokenArgs',
    'GcpSchedulerJobHttpTargetOidcTokenArgsDict',
    'GcpSchedulerJobPubsubTargetArgs',
    'GcpSchedulerJobPubsubTargetArgsDict',
    'GcpStorageBucketV2DefaultEncryptionArgs',
    'GcpStorageBucketV2DefaultEncryptionArgsDict',
    'GcpTenantSecurityRulePortsAndProtocolArgs',
    'GcpTenantSecurityRulePortsAndProtocolArgsDict',
    'InfrastructureAllSettingArgs',
    'InfrastructureAllSettingArgsDict',
    'InfrastructureCustomDataArgs',
    'InfrastructureCustomDataArgsDict',
    'InfrastructureOnpremCustomDataArgs',
    'InfrastructureOnpremCustomDataArgsDict',
    'InfrastructureOnpremEksConfigArgs',
    'InfrastructureOnpremEksConfigArgsDict',
    'InfrastructurePrivateSubnetArgs',
    'InfrastructurePrivateSubnetArgsDict',
    'InfrastructurePrivateSubnetTagArgs',
    'InfrastructurePrivateSubnetTagArgsDict',
    'InfrastructurePublicSubnetArgs',
    'InfrastructurePublicSubnetArgsDict',
    'InfrastructurePublicSubnetTagArgs',
    'InfrastructurePublicSubnetTagArgsDict',
    'InfrastructureSecurityGroupArgs',
    'InfrastructureSecurityGroupArgsDict',
    'InfrastructureSecurityGroupRuleArgs',
    'InfrastructureSecurityGroupRuleArgsDict',
    'InfrastructureSettingArgs',
    'InfrastructureSettingArgsDict',
    'InfrastructureSettingCustomDataArgs',
    'InfrastructureSettingCustomDataArgsDict',
    'InfrastructureSettingSettingArgs',
    'InfrastructureSettingSettingArgsDict',
    'K8HelmReleaseChartArgs',
    'K8HelmReleaseChartArgsDict',
    'K8IngressLbconfigArgs',
    'K8IngressLbconfigArgsDict',
    'K8IngressRuleArgs',
    'K8IngressRuleArgsDict',
    'K8IngressTlArgs',
    'K8IngressTlArgsDict',
    'K8PersistentVolumeClaimSpecArgs',
    'K8PersistentVolumeClaimSpecArgsDict',
    'K8PersistentVolumeClaimSpecResourcesArgs',
    'K8PersistentVolumeClaimSpecResourcesArgsDict',
    'K8SecretProviderClassSecretObjectArgs',
    'K8SecretProviderClassSecretObjectArgsDict',
    'K8SecretProviderClassSecretObjectDataArgs',
    'K8SecretProviderClassSecretObjectDataArgsDict',
    'K8StorageClassAllowedTopologiesArgs',
    'K8StorageClassAllowedTopologiesArgsDict',
    'K8StorageClassAllowedTopologiesMatchLabelExpressionArgs',
    'K8StorageClassAllowedTopologiesMatchLabelExpressionArgsDict',
    'K8sCronJobMetadataArgs',
    'K8sCronJobMetadataArgsDict',
    'K8sCronJobSpecArgs',
    'K8sCronJobSpecArgsDict',
    'K8sCronJobSpecJobTemplateArgs',
    'K8sCronJobSpecJobTemplateArgsDict',
    'K8sCronJobSpecJobTemplateMetadataArgs',
    'K8sCronJobSpecJobTemplateMetadataArgsDict',
    'K8sCronJobSpecJobTemplateSpecArgs',
    'K8sCronJobSpecJobTemplateSpecArgsDict',
    'K8sCronJobSpecJobTemplateSpecSelectorArgs',
    'K8sCronJobSpecJobTemplateSpecSelectorArgsDict',
    'K8sCronJobSpecJobTemplateSpecSelectorMatchExpressionArgs',
    'K8sCronJobSpecJobTemplateSpecSelectorMatchExpressionArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateMetadataArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateMetadataArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromConfigMapRefArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromConfigMapRefArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromSecretRefArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromSecretRefArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromConfigMapKeyRefArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromConfigMapKeyRefArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromFieldRefArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromFieldRefArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromResourceFieldRefArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromResourceFieldRefArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromSecretKeyRefArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromSecretKeyRefArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecycleArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecycleArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartExecArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartExecArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGetArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGetArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeaderArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeaderArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartTcpSocketArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartTcpSocketArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopExecArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopExecArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGetArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGetArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeaderArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeaderArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopTcpSocketArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopTcpSocketArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeExecArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeExecArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeGrpcArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeGrpcArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGetArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGetArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeaderArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeaderArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeTcpSocketArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeTcpSocketArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerPortArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerPortArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeExecArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeExecArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeGrpcArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeGrpcArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGetArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGetArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeaderArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeaderArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeTcpSocketArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeTcpSocketArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerResourcesArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerResourcesArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextCapabilitiesArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextCapabilitiesArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeLinuxOptionsArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeLinuxOptionsArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeccompProfileArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeccompProfileArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeExecArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeExecArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeGrpcArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeGrpcArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGetArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGetArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGetHttpHeaderArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGetHttpHeaderArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeTcpSocketArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeTcpSocketArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerVolumeMountArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecContainerVolumeMountArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfigArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfigArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfigOptionArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfigOptionArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecHostAliasArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecHostAliasArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecImagePullSecretArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecImagePullSecretArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromConfigMapRefArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromConfigMapRefArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromSecretRefArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromSecretRefArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRefArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRefArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromFieldRefArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromFieldRefArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromResourceFieldRefArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromResourceFieldRefArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromSecretKeyRefArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromSecretKeyRefArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecycleArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecycleArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartExecArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartExecArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGetArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGetArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeaderArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeaderArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartTcpSocketArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartTcpSocketArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopExecArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopExecArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGetArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGetArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeaderArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeaderArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopTcpSocketArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopTcpSocketArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeExecArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeExecArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeGrpcArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeGrpcArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGetArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGetArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeaderArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeaderArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeTcpSocketArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeTcpSocketArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerPortArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerPortArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeExecArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeExecArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeGrpcArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeGrpcArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGetArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGetArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeaderArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeaderArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeTcpSocketArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeTcpSocketArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerResourcesArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerResourcesArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextCapabilitiesArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextCapabilitiesArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeLinuxOptionsArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeLinuxOptionsArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeccompProfileArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeccompProfileArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeExecArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeExecArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeGrpcArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeGrpcArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGetArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGetArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeaderArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeaderArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeTcpSocketArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeTcpSocketArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerVolumeMountArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerVolumeMountArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecReadinessGateArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecReadinessGateArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeLinuxOptionsArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeLinuxOptionsArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeccompProfileArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeccompProfileArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSysctlArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSysctlArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecTolerationArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecTolerationArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelectorArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelectorArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpressionArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpressionArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAwsElasticBlockStoreArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAwsElasticBlockStoreArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureDiskArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureDiskArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureFileArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureFileArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFsArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFsArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFsSecretRefArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFsSecretRefArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCinderArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCinderArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMapArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMapArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMapItemArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMapItemArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsiArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsiArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsiNodePublishSecretRefArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsiNodePublishSecretRefArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemFieldRefArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemFieldRefArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemResourceFieldRefArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemResourceFieldRefArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEmptyDirArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEmptyDirArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadataArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadataArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResourcesArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResourcesArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFcArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFcArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolumeArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolumeArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolumeSecretRefArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolumeSecretRefArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlockerArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlockerArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGcePersistentDiskArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGcePersistentDiskArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGitRepoArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGitRepoArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGlusterfsArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGlusterfsArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeHostPathArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeHostPathArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeIscsiArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeIscsiArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeLocalArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeLocalArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeNfsArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeNfsArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumePersistentVolumeClaimArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumePersistentVolumeClaimArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumePhotonPersistentDiskArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumePhotonPersistentDiskArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMapArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMapArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMapItemArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMapItemArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRefArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRefArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRefArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRefArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecretArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecretArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecretItemArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecretItemArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceServiceAccountTokenArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceServiceAccountTokenArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeQuobyteArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeQuobyteArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbdArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbdArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbdSecretRefArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbdSecretRefArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecretArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecretArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecretItemArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecretItemArgsDict',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeVsphereVolumeArgs',
    'K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeVsphereVolumeArgsDict',
    'K8sJobMetadataArgs',
    'K8sJobMetadataArgsDict',
    'K8sJobSpecArgs',
    'K8sJobSpecArgsDict',
    'K8sJobSpecSelectorArgs',
    'K8sJobSpecSelectorArgsDict',
    'K8sJobSpecSelectorMatchExpressionArgs',
    'K8sJobSpecSelectorMatchExpressionArgsDict',
    'K8sJobSpecTemplateArgs',
    'K8sJobSpecTemplateArgsDict',
    'K8sJobSpecTemplateMetadataArgs',
    'K8sJobSpecTemplateMetadataArgsDict',
    'K8sJobSpecTemplateSpecArgs',
    'K8sJobSpecTemplateSpecArgsDict',
    'K8sJobSpecTemplateSpecAffinityArgs',
    'K8sJobSpecTemplateSpecAffinityArgsDict',
    'K8sJobSpecTemplateSpecAffinityNodeAffinityArgs',
    'K8sJobSpecTemplateSpecAffinityNodeAffinityArgsDict',
    'K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs',
    'K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict',
    'K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs',
    'K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgsDict',
    'K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionArgs',
    'K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionArgsDict',
    'K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs',
    'K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict',
    'K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermArgs',
    'K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermArgsDict',
    'K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionArgs',
    'K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionArgsDict',
    'K8sJobSpecTemplateSpecAffinityPodAffinityArgs',
    'K8sJobSpecTemplateSpecAffinityPodAffinityArgsDict',
    'K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs',
    'K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict',
    'K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs',
    'K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict',
    'K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs',
    'K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict',
    'K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgs',
    'K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgsDict',
    'K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs',
    'K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict',
    'K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs',
    'K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict',
    'K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgs',
    'K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgsDict',
    'K8sJobSpecTemplateSpecAffinityPodAntiAffinityArgs',
    'K8sJobSpecTemplateSpecAffinityPodAntiAffinityArgsDict',
    'K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs',
    'K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict',
    'K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs',
    'K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict',
    'K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs',
    'K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict',
    'K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgs',
    'K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgsDict',
    'K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs',
    'K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict',
    'K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs',
    'K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict',
    'K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgs',
    'K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgsDict',
    'K8sJobSpecTemplateSpecContainerArgs',
    'K8sJobSpecTemplateSpecContainerArgsDict',
    'K8sJobSpecTemplateSpecContainerEnvArgs',
    'K8sJobSpecTemplateSpecContainerEnvArgsDict',
    'K8sJobSpecTemplateSpecContainerEnvFromArgs',
    'K8sJobSpecTemplateSpecContainerEnvFromArgsDict',
    'K8sJobSpecTemplateSpecContainerEnvFromConfigMapRefArgs',
    'K8sJobSpecTemplateSpecContainerEnvFromConfigMapRefArgsDict',
    'K8sJobSpecTemplateSpecContainerEnvFromSecretRefArgs',
    'K8sJobSpecTemplateSpecContainerEnvFromSecretRefArgsDict',
    'K8sJobSpecTemplateSpecContainerEnvValueFromArgs',
    'K8sJobSpecTemplateSpecContainerEnvValueFromArgsDict',
    'K8sJobSpecTemplateSpecContainerEnvValueFromConfigMapKeyRefArgs',
    'K8sJobSpecTemplateSpecContainerEnvValueFromConfigMapKeyRefArgsDict',
    'K8sJobSpecTemplateSpecContainerEnvValueFromFieldRefArgs',
    'K8sJobSpecTemplateSpecContainerEnvValueFromFieldRefArgsDict',
    'K8sJobSpecTemplateSpecContainerEnvValueFromResourceFieldRefArgs',
    'K8sJobSpecTemplateSpecContainerEnvValueFromResourceFieldRefArgsDict',
    'K8sJobSpecTemplateSpecContainerEnvValueFromSecretKeyRefArgs',
    'K8sJobSpecTemplateSpecContainerEnvValueFromSecretKeyRefArgsDict',
    'K8sJobSpecTemplateSpecContainerLifecycleArgs',
    'K8sJobSpecTemplateSpecContainerLifecycleArgsDict',
    'K8sJobSpecTemplateSpecContainerLifecyclePostStartArgs',
    'K8sJobSpecTemplateSpecContainerLifecyclePostStartArgsDict',
    'K8sJobSpecTemplateSpecContainerLifecyclePostStartExecArgs',
    'K8sJobSpecTemplateSpecContainerLifecyclePostStartExecArgsDict',
    'K8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGetArgs',
    'K8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGetArgsDict',
    'K8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeaderArgs',
    'K8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeaderArgsDict',
    'K8sJobSpecTemplateSpecContainerLifecyclePostStartTcpSocketArgs',
    'K8sJobSpecTemplateSpecContainerLifecyclePostStartTcpSocketArgsDict',
    'K8sJobSpecTemplateSpecContainerLifecyclePreStopArgs',
    'K8sJobSpecTemplateSpecContainerLifecyclePreStopArgsDict',
    'K8sJobSpecTemplateSpecContainerLifecyclePreStopExecArgs',
    'K8sJobSpecTemplateSpecContainerLifecyclePreStopExecArgsDict',
    'K8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGetArgs',
    'K8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGetArgsDict',
    'K8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeaderArgs',
    'K8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeaderArgsDict',
    'K8sJobSpecTemplateSpecContainerLifecyclePreStopTcpSocketArgs',
    'K8sJobSpecTemplateSpecContainerLifecyclePreStopTcpSocketArgsDict',
    'K8sJobSpecTemplateSpecContainerLivenessProbeArgs',
    'K8sJobSpecTemplateSpecContainerLivenessProbeArgsDict',
    'K8sJobSpecTemplateSpecContainerLivenessProbeExecArgs',
    'K8sJobSpecTemplateSpecContainerLivenessProbeExecArgsDict',
    'K8sJobSpecTemplateSpecContainerLivenessProbeGrpcArgs',
    'K8sJobSpecTemplateSpecContainerLivenessProbeGrpcArgsDict',
    'K8sJobSpecTemplateSpecContainerLivenessProbeHttpGetArgs',
    'K8sJobSpecTemplateSpecContainerLivenessProbeHttpGetArgsDict',
    'K8sJobSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeaderArgs',
    'K8sJobSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeaderArgsDict',
    'K8sJobSpecTemplateSpecContainerLivenessProbeTcpSocketArgs',
    'K8sJobSpecTemplateSpecContainerLivenessProbeTcpSocketArgsDict',
    'K8sJobSpecTemplateSpecContainerPortArgs',
    'K8sJobSpecTemplateSpecContainerPortArgsDict',
    'K8sJobSpecTemplateSpecContainerReadinessProbeArgs',
    'K8sJobSpecTemplateSpecContainerReadinessProbeArgsDict',
    'K8sJobSpecTemplateSpecContainerReadinessProbeExecArgs',
    'K8sJobSpecTemplateSpecContainerReadinessProbeExecArgsDict',
    'K8sJobSpecTemplateSpecContainerReadinessProbeGrpcArgs',
    'K8sJobSpecTemplateSpecContainerReadinessProbeGrpcArgsDict',
    'K8sJobSpecTemplateSpecContainerReadinessProbeHttpGetArgs',
    'K8sJobSpecTemplateSpecContainerReadinessProbeHttpGetArgsDict',
    'K8sJobSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeaderArgs',
    'K8sJobSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeaderArgsDict',
    'K8sJobSpecTemplateSpecContainerReadinessProbeTcpSocketArgs',
    'K8sJobSpecTemplateSpecContainerReadinessProbeTcpSocketArgsDict',
    'K8sJobSpecTemplateSpecContainerResourcesArgs',
    'K8sJobSpecTemplateSpecContainerResourcesArgsDict',
    'K8sJobSpecTemplateSpecContainerSecurityContextArgs',
    'K8sJobSpecTemplateSpecContainerSecurityContextArgsDict',
    'K8sJobSpecTemplateSpecContainerSecurityContextCapabilitiesArgs',
    'K8sJobSpecTemplateSpecContainerSecurityContextCapabilitiesArgsDict',
    'K8sJobSpecTemplateSpecContainerSecurityContextSeLinuxOptionsArgs',
    'K8sJobSpecTemplateSpecContainerSecurityContextSeLinuxOptionsArgsDict',
    'K8sJobSpecTemplateSpecContainerSecurityContextSeccompProfileArgs',
    'K8sJobSpecTemplateSpecContainerSecurityContextSeccompProfileArgsDict',
    'K8sJobSpecTemplateSpecContainerStartupProbeArgs',
    'K8sJobSpecTemplateSpecContainerStartupProbeArgsDict',
    'K8sJobSpecTemplateSpecContainerStartupProbeExecArgs',
    'K8sJobSpecTemplateSpecContainerStartupProbeExecArgsDict',
    'K8sJobSpecTemplateSpecContainerStartupProbeGrpcArgs',
    'K8sJobSpecTemplateSpecContainerStartupProbeGrpcArgsDict',
    'K8sJobSpecTemplateSpecContainerStartupProbeHttpGetArgs',
    'K8sJobSpecTemplateSpecContainerStartupProbeHttpGetArgsDict',
    'K8sJobSpecTemplateSpecContainerStartupProbeHttpGetHttpHeaderArgs',
    'K8sJobSpecTemplateSpecContainerStartupProbeHttpGetHttpHeaderArgsDict',
    'K8sJobSpecTemplateSpecContainerStartupProbeTcpSocketArgs',
    'K8sJobSpecTemplateSpecContainerStartupProbeTcpSocketArgsDict',
    'K8sJobSpecTemplateSpecContainerVolumeMountArgs',
    'K8sJobSpecTemplateSpecContainerVolumeMountArgsDict',
    'K8sJobSpecTemplateSpecDnsConfigArgs',
    'K8sJobSpecTemplateSpecDnsConfigArgsDict',
    'K8sJobSpecTemplateSpecDnsConfigOptionArgs',
    'K8sJobSpecTemplateSpecDnsConfigOptionArgsDict',
    'K8sJobSpecTemplateSpecHostAliasArgs',
    'K8sJobSpecTemplateSpecHostAliasArgsDict',
    'K8sJobSpecTemplateSpecImagePullSecretArgs',
    'K8sJobSpecTemplateSpecImagePullSecretArgsDict',
    'K8sJobSpecTemplateSpecInitContainerArgs',
    'K8sJobSpecTemplateSpecInitContainerArgsDict',
    'K8sJobSpecTemplateSpecInitContainerEnvArgs',
    'K8sJobSpecTemplateSpecInitContainerEnvArgsDict',
    'K8sJobSpecTemplateSpecInitContainerEnvFromArgs',
    'K8sJobSpecTemplateSpecInitContainerEnvFromArgsDict',
    'K8sJobSpecTemplateSpecInitContainerEnvFromConfigMapRefArgs',
    'K8sJobSpecTemplateSpecInitContainerEnvFromConfigMapRefArgsDict',
    'K8sJobSpecTemplateSpecInitContainerEnvFromSecretRefArgs',
    'K8sJobSpecTemplateSpecInitContainerEnvFromSecretRefArgsDict',
    'K8sJobSpecTemplateSpecInitContainerEnvValueFromArgs',
    'K8sJobSpecTemplateSpecInitContainerEnvValueFromArgsDict',
    'K8sJobSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRefArgs',
    'K8sJobSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRefArgsDict',
    'K8sJobSpecTemplateSpecInitContainerEnvValueFromFieldRefArgs',
    'K8sJobSpecTemplateSpecInitContainerEnvValueFromFieldRefArgsDict',
    'K8sJobSpecTemplateSpecInitContainerEnvValueFromResourceFieldRefArgs',
    'K8sJobSpecTemplateSpecInitContainerEnvValueFromResourceFieldRefArgsDict',
    'K8sJobSpecTemplateSpecInitContainerEnvValueFromSecretKeyRefArgs',
    'K8sJobSpecTemplateSpecInitContainerEnvValueFromSecretKeyRefArgsDict',
    'K8sJobSpecTemplateSpecInitContainerLifecycleArgs',
    'K8sJobSpecTemplateSpecInitContainerLifecycleArgsDict',
    'K8sJobSpecTemplateSpecInitContainerLifecyclePostStartArgs',
    'K8sJobSpecTemplateSpecInitContainerLifecyclePostStartArgsDict',
    'K8sJobSpecTemplateSpecInitContainerLifecyclePostStartExecArgs',
    'K8sJobSpecTemplateSpecInitContainerLifecyclePostStartExecArgsDict',
    'K8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGetArgs',
    'K8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGetArgsDict',
    'K8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeaderArgs',
    'K8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeaderArgsDict',
    'K8sJobSpecTemplateSpecInitContainerLifecyclePostStartTcpSocketArgs',
    'K8sJobSpecTemplateSpecInitContainerLifecyclePostStartTcpSocketArgsDict',
    'K8sJobSpecTemplateSpecInitContainerLifecyclePreStopArgs',
    'K8sJobSpecTemplateSpecInitContainerLifecyclePreStopArgsDict',
    'K8sJobSpecTemplateSpecInitContainerLifecyclePreStopExecArgs',
    'K8sJobSpecTemplateSpecInitContainerLifecyclePreStopExecArgsDict',
    'K8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGetArgs',
    'K8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGetArgsDict',
    'K8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeaderArgs',
    'K8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeaderArgsDict',
    'K8sJobSpecTemplateSpecInitContainerLifecyclePreStopTcpSocketArgs',
    'K8sJobSpecTemplateSpecInitContainerLifecyclePreStopTcpSocketArgsDict',
    'K8sJobSpecTemplateSpecInitContainerLivenessProbeArgs',
    'K8sJobSpecTemplateSpecInitContainerLivenessProbeArgsDict',
    'K8sJobSpecTemplateSpecInitContainerLivenessProbeExecArgs',
    'K8sJobSpecTemplateSpecInitContainerLivenessProbeExecArgsDict',
    'K8sJobSpecTemplateSpecInitContainerLivenessProbeGrpcArgs',
    'K8sJobSpecTemplateSpecInitContainerLivenessProbeGrpcArgsDict',
    'K8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGetArgs',
    'K8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGetArgsDict',
    'K8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeaderArgs',
    'K8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeaderArgsDict',
    'K8sJobSpecTemplateSpecInitContainerLivenessProbeTcpSocketArgs',
    'K8sJobSpecTemplateSpecInitContainerLivenessProbeTcpSocketArgsDict',
    'K8sJobSpecTemplateSpecInitContainerPortArgs',
    'K8sJobSpecTemplateSpecInitContainerPortArgsDict',
    'K8sJobSpecTemplateSpecInitContainerReadinessProbeArgs',
    'K8sJobSpecTemplateSpecInitContainerReadinessProbeArgsDict',
    'K8sJobSpecTemplateSpecInitContainerReadinessProbeExecArgs',
    'K8sJobSpecTemplateSpecInitContainerReadinessProbeExecArgsDict',
    'K8sJobSpecTemplateSpecInitContainerReadinessProbeGrpcArgs',
    'K8sJobSpecTemplateSpecInitContainerReadinessProbeGrpcArgsDict',
    'K8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGetArgs',
    'K8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGetArgsDict',
    'K8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeaderArgs',
    'K8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeaderArgsDict',
    'K8sJobSpecTemplateSpecInitContainerReadinessProbeTcpSocketArgs',
    'K8sJobSpecTemplateSpecInitContainerReadinessProbeTcpSocketArgsDict',
    'K8sJobSpecTemplateSpecInitContainerResourcesArgs',
    'K8sJobSpecTemplateSpecInitContainerResourcesArgsDict',
    'K8sJobSpecTemplateSpecInitContainerSecurityContextArgs',
    'K8sJobSpecTemplateSpecInitContainerSecurityContextArgsDict',
    'K8sJobSpecTemplateSpecInitContainerSecurityContextCapabilitiesArgs',
    'K8sJobSpecTemplateSpecInitContainerSecurityContextCapabilitiesArgsDict',
    'K8sJobSpecTemplateSpecInitContainerSecurityContextSeLinuxOptionsArgs',
    'K8sJobSpecTemplateSpecInitContainerSecurityContextSeLinuxOptionsArgsDict',
    'K8sJobSpecTemplateSpecInitContainerSecurityContextSeccompProfileArgs',
    'K8sJobSpecTemplateSpecInitContainerSecurityContextSeccompProfileArgsDict',
    'K8sJobSpecTemplateSpecInitContainerStartupProbeArgs',
    'K8sJobSpecTemplateSpecInitContainerStartupProbeArgsDict',
    'K8sJobSpecTemplateSpecInitContainerStartupProbeExecArgs',
    'K8sJobSpecTemplateSpecInitContainerStartupProbeExecArgsDict',
    'K8sJobSpecTemplateSpecInitContainerStartupProbeGrpcArgs',
    'K8sJobSpecTemplateSpecInitContainerStartupProbeGrpcArgsDict',
    'K8sJobSpecTemplateSpecInitContainerStartupProbeHttpGetArgs',
    'K8sJobSpecTemplateSpecInitContainerStartupProbeHttpGetArgsDict',
    'K8sJobSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeaderArgs',
    'K8sJobSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeaderArgsDict',
    'K8sJobSpecTemplateSpecInitContainerStartupProbeTcpSocketArgs',
    'K8sJobSpecTemplateSpecInitContainerStartupProbeTcpSocketArgsDict',
    'K8sJobSpecTemplateSpecInitContainerVolumeMountArgs',
    'K8sJobSpecTemplateSpecInitContainerVolumeMountArgsDict',
    'K8sJobSpecTemplateSpecReadinessGateArgs',
    'K8sJobSpecTemplateSpecReadinessGateArgsDict',
    'K8sJobSpecTemplateSpecSecurityContextArgs',
    'K8sJobSpecTemplateSpecSecurityContextArgsDict',
    'K8sJobSpecTemplateSpecSecurityContextSeLinuxOptionsArgs',
    'K8sJobSpecTemplateSpecSecurityContextSeLinuxOptionsArgsDict',
    'K8sJobSpecTemplateSpecSecurityContextSeccompProfileArgs',
    'K8sJobSpecTemplateSpecSecurityContextSeccompProfileArgsDict',
    'K8sJobSpecTemplateSpecSecurityContextSysctlArgs',
    'K8sJobSpecTemplateSpecSecurityContextSysctlArgsDict',
    'K8sJobSpecTemplateSpecTolerationArgs',
    'K8sJobSpecTemplateSpecTolerationArgsDict',
    'K8sJobSpecTemplateSpecTopologySpreadConstraintArgs',
    'K8sJobSpecTemplateSpecTopologySpreadConstraintArgsDict',
    'K8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelectorArgs',
    'K8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelectorArgsDict',
    'K8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpressionArgs',
    'K8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpressionArgsDict',
    'K8sJobSpecTemplateSpecVolumeArgs',
    'K8sJobSpecTemplateSpecVolumeArgsDict',
    'K8sJobSpecTemplateSpecVolumeAwsElasticBlockStoreArgs',
    'K8sJobSpecTemplateSpecVolumeAwsElasticBlockStoreArgsDict',
    'K8sJobSpecTemplateSpecVolumeAzureDiskArgs',
    'K8sJobSpecTemplateSpecVolumeAzureDiskArgsDict',
    'K8sJobSpecTemplateSpecVolumeAzureFileArgs',
    'K8sJobSpecTemplateSpecVolumeAzureFileArgsDict',
    'K8sJobSpecTemplateSpecVolumeCephFsArgs',
    'K8sJobSpecTemplateSpecVolumeCephFsArgsDict',
    'K8sJobSpecTemplateSpecVolumeCephFsSecretRefArgs',
    'K8sJobSpecTemplateSpecVolumeCephFsSecretRefArgsDict',
    'K8sJobSpecTemplateSpecVolumeCinderArgs',
    'K8sJobSpecTemplateSpecVolumeCinderArgsDict',
    'K8sJobSpecTemplateSpecVolumeConfigMapArgs',
    'K8sJobSpecTemplateSpecVolumeConfigMapArgsDict',
    'K8sJobSpecTemplateSpecVolumeConfigMapItemArgs',
    'K8sJobSpecTemplateSpecVolumeConfigMapItemArgsDict',
    'K8sJobSpecTemplateSpecVolumeCsiArgs',
    'K8sJobSpecTemplateSpecVolumeCsiArgsDict',
    'K8sJobSpecTemplateSpecVolumeCsiNodePublishSecretRefArgs',
    'K8sJobSpecTemplateSpecVolumeCsiNodePublishSecretRefArgsDict',
    'K8sJobSpecTemplateSpecVolumeDownwardApiArgs',
    'K8sJobSpecTemplateSpecVolumeDownwardApiArgsDict',
    'K8sJobSpecTemplateSpecVolumeDownwardApiItemArgs',
    'K8sJobSpecTemplateSpecVolumeDownwardApiItemArgsDict',
    'K8sJobSpecTemplateSpecVolumeDownwardApiItemFieldRefArgs',
    'K8sJobSpecTemplateSpecVolumeDownwardApiItemFieldRefArgsDict',
    'K8sJobSpecTemplateSpecVolumeDownwardApiItemResourceFieldRefArgs',
    'K8sJobSpecTemplateSpecVolumeDownwardApiItemResourceFieldRefArgsDict',
    'K8sJobSpecTemplateSpecVolumeEmptyDirArgs',
    'K8sJobSpecTemplateSpecVolumeEmptyDirArgsDict',
    'K8sJobSpecTemplateSpecVolumeEphemeralArgs',
    'K8sJobSpecTemplateSpecVolumeEphemeralArgsDict',
    'K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateArgs',
    'K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateArgsDict',
    'K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadataArgs',
    'K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadataArgsDict',
    'K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecArgs',
    'K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecArgsDict',
    'K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResourcesArgs',
    'K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResourcesArgsDict',
    'K8sJobSpecTemplateSpecVolumeFcArgs',
    'K8sJobSpecTemplateSpecVolumeFcArgsDict',
    'K8sJobSpecTemplateSpecVolumeFlexVolumeArgs',
    'K8sJobSpecTemplateSpecVolumeFlexVolumeArgsDict',
    'K8sJobSpecTemplateSpecVolumeFlexVolumeSecretRefArgs',
    'K8sJobSpecTemplateSpecVolumeFlexVolumeSecretRefArgsDict',
    'K8sJobSpecTemplateSpecVolumeFlockerArgs',
    'K8sJobSpecTemplateSpecVolumeFlockerArgsDict',
    'K8sJobSpecTemplateSpecVolumeGcePersistentDiskArgs',
    'K8sJobSpecTemplateSpecVolumeGcePersistentDiskArgsDict',
    'K8sJobSpecTemplateSpecVolumeGitRepoArgs',
    'K8sJobSpecTemplateSpecVolumeGitRepoArgsDict',
    'K8sJobSpecTemplateSpecVolumeGlusterfsArgs',
    'K8sJobSpecTemplateSpecVolumeGlusterfsArgsDict',
    'K8sJobSpecTemplateSpecVolumeHostPathArgs',
    'K8sJobSpecTemplateSpecVolumeHostPathArgsDict',
    'K8sJobSpecTemplateSpecVolumeIscsiArgs',
    'K8sJobSpecTemplateSpecVolumeIscsiArgsDict',
    'K8sJobSpecTemplateSpecVolumeLocalArgs',
    'K8sJobSpecTemplateSpecVolumeLocalArgsDict',
    'K8sJobSpecTemplateSpecVolumeNfsArgs',
    'K8sJobSpecTemplateSpecVolumeNfsArgsDict',
    'K8sJobSpecTemplateSpecVolumePersistentVolumeClaimArgs',
    'K8sJobSpecTemplateSpecVolumePersistentVolumeClaimArgsDict',
    'K8sJobSpecTemplateSpecVolumePhotonPersistentDiskArgs',
    'K8sJobSpecTemplateSpecVolumePhotonPersistentDiskArgsDict',
    'K8sJobSpecTemplateSpecVolumeProjectedArgs',
    'K8sJobSpecTemplateSpecVolumeProjectedArgsDict',
    'K8sJobSpecTemplateSpecVolumeProjectedSourceArgs',
    'K8sJobSpecTemplateSpecVolumeProjectedSourceArgsDict',
    'K8sJobSpecTemplateSpecVolumeProjectedSourceConfigMapArgs',
    'K8sJobSpecTemplateSpecVolumeProjectedSourceConfigMapArgsDict',
    'K8sJobSpecTemplateSpecVolumeProjectedSourceConfigMapItemArgs',
    'K8sJobSpecTemplateSpecVolumeProjectedSourceConfigMapItemArgsDict',
    'K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiArgs',
    'K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiArgsDict',
    'K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemArgs',
    'K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemArgsDict',
    'K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRefArgs',
    'K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRefArgsDict',
    'K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRefArgs',
    'K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRefArgsDict',
    'K8sJobSpecTemplateSpecVolumeProjectedSourceSecretArgs',
    'K8sJobSpecTemplateSpecVolumeProjectedSourceSecretArgsDict',
    'K8sJobSpecTemplateSpecVolumeProjectedSourceSecretItemArgs',
    'K8sJobSpecTemplateSpecVolumeProjectedSourceSecretItemArgsDict',
    'K8sJobSpecTemplateSpecVolumeProjectedSourceServiceAccountTokenArgs',
    'K8sJobSpecTemplateSpecVolumeProjectedSourceServiceAccountTokenArgsDict',
    'K8sJobSpecTemplateSpecVolumeQuobyteArgs',
    'K8sJobSpecTemplateSpecVolumeQuobyteArgsDict',
    'K8sJobSpecTemplateSpecVolumeRbdArgs',
    'K8sJobSpecTemplateSpecVolumeRbdArgsDict',
    'K8sJobSpecTemplateSpecVolumeRbdSecretRefArgs',
    'K8sJobSpecTemplateSpecVolumeRbdSecretRefArgsDict',
    'K8sJobSpecTemplateSpecVolumeSecretArgs',
    'K8sJobSpecTemplateSpecVolumeSecretArgsDict',
    'K8sJobSpecTemplateSpecVolumeSecretItemArgs',
    'K8sJobSpecTemplateSpecVolumeSecretItemArgsDict',
    'K8sJobSpecTemplateSpecVolumeVsphereVolumeArgs',
    'K8sJobSpecTemplateSpecVolumeVsphereVolumeArgsDict',
    'OciContainerengineNodePoolInitialNodeLabelArgs',
    'OciContainerengineNodePoolInitialNodeLabelArgsDict',
    'OciContainerengineNodePoolNodeArgs',
    'OciContainerengineNodePoolNodeArgsDict',
    'OciContainerengineNodePoolNodeConfigDetailsArgs',
    'OciContainerengineNodePoolNodeConfigDetailsArgsDict',
    'OciContainerengineNodePoolNodeConfigDetailsPlacementConfigArgs',
    'OciContainerengineNodePoolNodeConfigDetailsPlacementConfigArgsDict',
    'OciContainerengineNodePoolNodeShapeConfigArgs',
    'OciContainerengineNodePoolNodeShapeConfigArgsDict',
    'OciContainerengineNodePoolNodeSourceDetailsArgs',
    'OciContainerengineNodePoolNodeSourceDetailsArgsDict',
    'OtherAgentsAgentArgs',
    'OtherAgentsAgentArgsDict',
    'PlanCertificatesCertificateArgs',
    'PlanCertificatesCertificateArgsDict',
    'PlanConfigsConfigArgs',
    'PlanConfigsConfigArgsDict',
    'PlanImagesImageArgs',
    'PlanImagesImageArgsDict',
    'PlanImagesImageTagArgs',
    'PlanImagesImageTagArgsDict',
    'PlanKmsV2KmArgs',
    'PlanKmsV2KmArgsDict',
    'PlanKmsV2KmsKeyArgs',
    'PlanKmsV2KmsKeyArgsDict',
    'PlanSettingsAllMetadataArgs',
    'PlanSettingsAllMetadataArgsDict',
    'PlanSettingsDnsSettingArgs',
    'PlanSettingsDnsSettingArgsDict',
    'PlanSettingsMetadataArgs',
    'PlanSettingsMetadataArgsDict',
    'PlanWafV2WafArgs',
    'PlanWafV2WafArgsDict',
    'RdsInstancePerformanceInsightsArgs',
    'RdsInstancePerformanceInsightsArgsDict',
    'RdsInstanceV2ScalingConfigurationArgs',
    'RdsInstanceV2ScalingConfigurationArgsDict',
    'RdsReadReplicaPerformanceInsightsArgs',
    'RdsReadReplicaPerformanceInsightsArgsDict',
    'RdsReadReplicaV2ScalingConfigurationArgs',
    'RdsReadReplicaV2ScalingConfigurationArgsDict',
    'S3BucketDefaultEncryptionArgs',
    'S3BucketDefaultEncryptionArgsDict',
    'S3BucketReplicationRuleArgs',
    'S3BucketReplicationRuleArgsDict',
    'S3BucketTagArgs',
    'S3BucketTagArgsDict',
    'TenantConfigMetadataArgs',
    'TenantConfigMetadataArgsDict',
    'TenantConfigSettingArgs',
    'TenantConfigSettingArgsDict',
    'TenantPolicyArgs',
    'TenantPolicyArgsDict',
    'TenantSecretTagArgs',
    'TenantSecretTagArgsDict',
    'TenantTagArgs',
    'TenantTagArgsDict',
    'GetGcpNodePoolAcceleratorArgs',
    'GetGcpNodePoolAcceleratorArgsDict',
    'GetGcpNodePoolAcceleratorGpuDriverInstallationConfigArgs',
    'GetGcpNodePoolAcceleratorGpuDriverInstallationConfigArgsDict',
    'GetGcpNodePoolAcceleratorGpuSharingConfigArgs',
    'GetGcpNodePoolAcceleratorGpuSharingConfigArgsDict',
    'GetGcpNodePoolTaintArgs',
    'GetGcpNodePoolTaintArgsDict',
    'GetK8sCronJobMetadataArgs',
    'GetK8sCronJobMetadataArgsDict',
    'GetK8sJobMetadataArgs',
    'GetK8sJobMetadataArgsDict',
]

MYPY = False

if not MYPY:
    class AsgProfileMetadataArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    AsgProfileMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AsgProfileMetadataArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AsgProfileMinionTagArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    AsgProfileMinionTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AsgProfileMinionTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AsgProfileNetworkInterfaceArgsDict(TypedDict):
        associate_public_ip: NotRequired[pulumi.Input[bool]]
        """
        Whether or not to associate a public IP with the newly created ENI.  Cannot be specified if `network_interface_id` is specified.
        """
        device_index: NotRequired[pulumi.Input[int]]
        """
        The device index to pass to AWS for attaching the ENI.  Starts at zero.
        """
        groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        metadatas: NotRequired[pulumi.Input[Sequence[pulumi.Input['AsgProfileNetworkInterfaceMetadataArgsDict']]]]
        network_interface_id: NotRequired[pulumi.Input[str]]
        """
        The ID of an ENI to attach to this host.  Cannot be specified if `subnet_id` or `associate_public_ip` is specified.
        """
        subnet_id: NotRequired[pulumi.Input[str]]
        """
        The ID of a subnet in which to create a new ENI.  Cannot be specified if `network_interface_id` is specified.
        """
elif False:
    AsgProfileNetworkInterfaceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AsgProfileNetworkInterfaceArgs:
    def __init__(__self__, *,
                 associate_public_ip: Optional[pulumi.Input[bool]] = None,
                 device_index: Optional[pulumi.Input[int]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['AsgProfileNetworkInterfaceMetadataArgs']]]] = None,
                 network_interface_id: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] associate_public_ip: Whether or not to associate a public IP with the newly created ENI.  Cannot be specified if `network_interface_id` is specified.
        :param pulumi.Input[int] device_index: The device index to pass to AWS for attaching the ENI.  Starts at zero.
        :param pulumi.Input[str] network_interface_id: The ID of an ENI to attach to this host.  Cannot be specified if `subnet_id` or `associate_public_ip` is specified.
        :param pulumi.Input[str] subnet_id: The ID of a subnet in which to create a new ENI.  Cannot be specified if `network_interface_id` is specified.
        """
        if associate_public_ip is not None:
            pulumi.set(__self__, "associate_public_ip", associate_public_ip)
        if device_index is not None:
            pulumi.set(__self__, "device_index", device_index)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if network_interface_id is not None:
            pulumi.set(__self__, "network_interface_id", network_interface_id)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="associatePublicIp")
    def associate_public_ip(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to associate a public IP with the newly created ENI.  Cannot be specified if `network_interface_id` is specified.
        """
        return pulumi.get(self, "associate_public_ip")

    @associate_public_ip.setter
    def associate_public_ip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "associate_public_ip", value)

    @property
    @pulumi.getter(name="deviceIndex")
    def device_index(self) -> Optional[pulumi.Input[int]]:
        """
        The device index to pass to AWS for attaching the ENI.  Starts at zero.
        """
        return pulumi.get(self, "device_index")

    @device_index.setter
    def device_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "device_index", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AsgProfileNetworkInterfaceMetadataArgs']]]]:
        return pulumi.get(self, "metadatas")

    @metadatas.setter
    def metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AsgProfileNetworkInterfaceMetadataArgs']]]]):
        pulumi.set(self, "metadatas", value)

    @property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of an ENI to attach to this host.  Cannot be specified if `subnet_id` or `associate_public_ip` is specified.
        """
        return pulumi.get(self, "network_interface_id")

    @network_interface_id.setter
    def network_interface_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_interface_id", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of a subnet in which to create a new ENI.  Cannot be specified if `network_interface_id` is specified.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)


if not MYPY:
    class AsgProfileNetworkInterfaceMetadataArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    AsgProfileNetworkInterfaceMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AsgProfileNetworkInterfaceMetadataArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AsgProfileTagArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    AsgProfileTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AsgProfileTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AsgProfileTaintArgsDict(TypedDict):
        effect: pulumi.Input[str]
        """
        Update strategy of the node. Effect types <br>      - NoSchedule<br>     - PreferNoSchedule<br>     - NoExecute
        """
        key: pulumi.Input[str]
        value: NotRequired[pulumi.Input[str]]
elif False:
    AsgProfileTaintArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AsgProfileTaintArgs:
    def __init__(__self__, *,
                 effect: pulumi.Input[str],
                 key: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] effect: Update strategy of the node. Effect types <br>      - NoSchedule<br>     - PreferNoSchedule<br>     - NoExecute
        """
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> pulumi.Input[str]:
        """
        Update strategy of the node. Effect types <br>      - NoSchedule<br>     - PreferNoSchedule<br>     - NoExecute
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: pulumi.Input[str]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AsgProfileVolumeArgsDict(TypedDict):
        iops: NotRequired[pulumi.Input[int]]
        name: NotRequired[pulumi.Input[str]]
        size: NotRequired[pulumi.Input[int]]
        volume_id: NotRequired[pulumi.Input[str]]
        volume_type: NotRequired[pulumi.Input[str]]
elif False:
    AsgProfileVolumeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AsgProfileVolumeArgs:
    def __init__(__self__, *,
                 iops: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 volume_id: Optional[pulumi.Input[str]] = None,
                 volume_type: Optional[pulumi.Input[str]] = None):
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)

    @property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iops", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_id", value)

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "volume_type")

    @volume_type.setter
    def volume_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_type", value)


if not MYPY:
    class AwsApigatewayEventIntegrationArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Integration input's type. Valid values are `HTTP` (for HTTP backends), `MOCK` (not calling any real backend), `AWS` (for AWS services), `AWS_PROXY` (for Lambda proxy integration) and `HTTP_PROXY` (for HTTP proxy integration).
        """
        uri: pulumi.Input[str]
        """
        Input's URI. Required if type is `AWS`, `AWS_PROXY`, `HTTP` or `HTTP_PROXY`. For AWS integrations, the URI should be of the form `arn:aws:apigateway:{region}:{subdomain.service|service}:{path|action}/{service_api}`. `region`, `subdomain` and `service` are used to determine the right endpoint.
        """
        timeout: NotRequired[pulumi.Input[int]]
        """
        Custom timeout between 50 and 300,000 milliseconds.
        """
elif False:
    AwsApigatewayEventIntegrationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsApigatewayEventIntegrationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 uri: pulumi.Input[str],
                 timeout: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] type: Integration input's type. Valid values are `HTTP` (for HTTP backends), `MOCK` (not calling any real backend), `AWS` (for AWS services), `AWS_PROXY` (for Lambda proxy integration) and `HTTP_PROXY` (for HTTP proxy integration).
        :param pulumi.Input[str] uri: Input's URI. Required if type is `AWS`, `AWS_PROXY`, `HTTP` or `HTTP_PROXY`. For AWS integrations, the URI should be of the form `arn:aws:apigateway:{region}:{subdomain.service|service}:{path|action}/{service_api}`. `region`, `subdomain` and `service` are used to determine the right endpoint.
        :param pulumi.Input[int] timeout: Custom timeout between 50 and 300,000 milliseconds.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uri", uri)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Integration input's type. Valid values are `HTTP` (for HTTP backends), `MOCK` (not calling any real backend), `AWS` (for AWS services), `AWS_PROXY` (for Lambda proxy integration) and `HTTP_PROXY` (for HTTP proxy integration).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Input[str]:
        """
        Input's URI. Required if type is `AWS`, `AWS_PROXY`, `HTTP` or `HTTP_PROXY`. For AWS integrations, the URI should be of the form `arn:aws:apigateway:{region}:{subdomain.service|service}:{path|action}/{service_api}`. `region`, `subdomain` and `service` are used to determine the right endpoint.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Custom timeout between 50 and 300,000 milliseconds.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)


if not MYPY:
    class AwsAppautoscalingPolicyStepScalingPolicyConfigurationArgsDict(TypedDict):
        adjustment_type: NotRequired[pulumi.Input[str]]
        """
        Specifies whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.
        """
        cooldown: NotRequired[pulumi.Input[int]]
        """
        The amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
        """
        metric_aggregation_type: NotRequired[pulumi.Input[str]]
        """
        The aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
        """
        min_adjustment_magnitude: NotRequired[pulumi.Input[int]]
        """
        The minimum number to adjust your scalable dimension as a result of a scaling activity. If the adjustment type is PercentChangeInCapacity, the scaling policy changes the scalable dimension of the scalable target by this amount.
        """
        step_adjustments: NotRequired[pulumi.Input[Sequence[pulumi.Input['AwsAppautoscalingPolicyStepScalingPolicyConfigurationStepAdjustmentArgsDict']]]]
        """
        A set of adjustments that manage scaling.
        """
elif False:
    AwsAppautoscalingPolicyStepScalingPolicyConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsAppautoscalingPolicyStepScalingPolicyConfigurationArgs:
    def __init__(__self__, *,
                 adjustment_type: Optional[pulumi.Input[str]] = None,
                 cooldown: Optional[pulumi.Input[int]] = None,
                 metric_aggregation_type: Optional[pulumi.Input[str]] = None,
                 min_adjustment_magnitude: Optional[pulumi.Input[int]] = None,
                 step_adjustments: Optional[pulumi.Input[Sequence[pulumi.Input['AwsAppautoscalingPolicyStepScalingPolicyConfigurationStepAdjustmentArgs']]]] = None):
        """
        :param pulumi.Input[str] adjustment_type: Specifies whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.
        :param pulumi.Input[int] cooldown: The amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
        :param pulumi.Input[str] metric_aggregation_type: The aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
        :param pulumi.Input[int] min_adjustment_magnitude: The minimum number to adjust your scalable dimension as a result of a scaling activity. If the adjustment type is PercentChangeInCapacity, the scaling policy changes the scalable dimension of the scalable target by this amount.
        :param pulumi.Input[Sequence[pulumi.Input['AwsAppautoscalingPolicyStepScalingPolicyConfigurationStepAdjustmentArgs']]] step_adjustments: A set of adjustments that manage scaling.
        """
        if adjustment_type is not None:
            pulumi.set(__self__, "adjustment_type", adjustment_type)
        if cooldown is not None:
            pulumi.set(__self__, "cooldown", cooldown)
        if metric_aggregation_type is not None:
            pulumi.set(__self__, "metric_aggregation_type", metric_aggregation_type)
        if min_adjustment_magnitude is not None:
            pulumi.set(__self__, "min_adjustment_magnitude", min_adjustment_magnitude)
        if step_adjustments is not None:
            pulumi.set(__self__, "step_adjustments", step_adjustments)

    @property
    @pulumi.getter(name="adjustmentType")
    def adjustment_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.
        """
        return pulumi.get(self, "adjustment_type")

    @adjustment_type.setter
    def adjustment_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adjustment_type", value)

    @property
    @pulumi.getter
    def cooldown(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
        """
        return pulumi.get(self, "cooldown")

    @cooldown.setter
    def cooldown(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cooldown", value)

    @property
    @pulumi.getter(name="metricAggregationType")
    def metric_aggregation_type(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
        """
        return pulumi.get(self, "metric_aggregation_type")

    @metric_aggregation_type.setter
    def metric_aggregation_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_aggregation_type", value)

    @property
    @pulumi.getter(name="minAdjustmentMagnitude")
    def min_adjustment_magnitude(self) -> Optional[pulumi.Input[int]]:
        """
        The minimum number to adjust your scalable dimension as a result of a scaling activity. If the adjustment type is PercentChangeInCapacity, the scaling policy changes the scalable dimension of the scalable target by this amount.
        """
        return pulumi.get(self, "min_adjustment_magnitude")

    @min_adjustment_magnitude.setter
    def min_adjustment_magnitude(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_adjustment_magnitude", value)

    @property
    @pulumi.getter(name="stepAdjustments")
    def step_adjustments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AwsAppautoscalingPolicyStepScalingPolicyConfigurationStepAdjustmentArgs']]]]:
        """
        A set of adjustments that manage scaling.
        """
        return pulumi.get(self, "step_adjustments")

    @step_adjustments.setter
    def step_adjustments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AwsAppautoscalingPolicyStepScalingPolicyConfigurationStepAdjustmentArgs']]]]):
        pulumi.set(self, "step_adjustments", value)


if not MYPY:
    class AwsAppautoscalingPolicyStepScalingPolicyConfigurationStepAdjustmentArgsDict(TypedDict):
        scaling_adjustment: pulumi.Input[int]
        """
        The number of members by which to scale, when the adjustment bounds are breached.
        """
        metric_interval_lower_bound: NotRequired[pulumi.Input[str]]
        """
        The lower bound for the difference between the alarm threshold and the CloudWatch metric.
        """
        metric_interval_upper_bound: NotRequired[pulumi.Input[str]]
        """
        The upper bound for the difference between the alarm threshold and the CloudWatch metric.
        """
elif False:
    AwsAppautoscalingPolicyStepScalingPolicyConfigurationStepAdjustmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsAppautoscalingPolicyStepScalingPolicyConfigurationStepAdjustmentArgs:
    def __init__(__self__, *,
                 scaling_adjustment: pulumi.Input[int],
                 metric_interval_lower_bound: Optional[pulumi.Input[str]] = None,
                 metric_interval_upper_bound: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] scaling_adjustment: The number of members by which to scale, when the adjustment bounds are breached.
        :param pulumi.Input[str] metric_interval_lower_bound: The lower bound for the difference between the alarm threshold and the CloudWatch metric.
        :param pulumi.Input[str] metric_interval_upper_bound: The upper bound for the difference between the alarm threshold and the CloudWatch metric.
        """
        pulumi.set(__self__, "scaling_adjustment", scaling_adjustment)
        if metric_interval_lower_bound is not None:
            pulumi.set(__self__, "metric_interval_lower_bound", metric_interval_lower_bound)
        if metric_interval_upper_bound is not None:
            pulumi.set(__self__, "metric_interval_upper_bound", metric_interval_upper_bound)

    @property
    @pulumi.getter(name="scalingAdjustment")
    def scaling_adjustment(self) -> pulumi.Input[int]:
        """
        The number of members by which to scale, when the adjustment bounds are breached.
        """
        return pulumi.get(self, "scaling_adjustment")

    @scaling_adjustment.setter
    def scaling_adjustment(self, value: pulumi.Input[int]):
        pulumi.set(self, "scaling_adjustment", value)

    @property
    @pulumi.getter(name="metricIntervalLowerBound")
    def metric_interval_lower_bound(self) -> Optional[pulumi.Input[str]]:
        """
        The lower bound for the difference between the alarm threshold and the CloudWatch metric.
        """
        return pulumi.get(self, "metric_interval_lower_bound")

    @metric_interval_lower_bound.setter
    def metric_interval_lower_bound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_interval_lower_bound", value)

    @property
    @pulumi.getter(name="metricIntervalUpperBound")
    def metric_interval_upper_bound(self) -> Optional[pulumi.Input[str]]:
        """
        The upper bound for the difference between the alarm threshold and the CloudWatch metric.
        """
        return pulumi.get(self, "metric_interval_upper_bound")

    @metric_interval_upper_bound.setter
    def metric_interval_upper_bound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_interval_upper_bound", value)


if not MYPY:
    class AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationArgsDict(TypedDict):
        target_value: pulumi.Input[float]
        """
        The target value for the metric.
        """
        customized_metric_specification: NotRequired[pulumi.Input['AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationArgsDict']]
        disable_scale_in: NotRequired[pulumi.Input[bool]]
        """
        Indicates whether scale in by the target tracking policy is disabled. Defaults to `false`.
        """
        predefined_metric_specification: NotRequired[pulumi.Input['AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecificationArgsDict']]
        scale_in_cooldown: NotRequired[pulumi.Input[int]]
        """
        The amount of time, in seconds, after a scale in activity completes before another scale in activity can start.
        """
        scale_out_cooldown: NotRequired[pulumi.Input[int]]
        """
        The amount of time, in seconds, after a scale out activity completes before another scale out activity can start.
        """
elif False:
    AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationArgs:
    def __init__(__self__, *,
                 target_value: pulumi.Input[float],
                 customized_metric_specification: Optional[pulumi.Input['AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationArgs']] = None,
                 disable_scale_in: Optional[pulumi.Input[bool]] = None,
                 predefined_metric_specification: Optional[pulumi.Input['AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecificationArgs']] = None,
                 scale_in_cooldown: Optional[pulumi.Input[int]] = None,
                 scale_out_cooldown: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[float] target_value: The target value for the metric.
        :param pulumi.Input[bool] disable_scale_in: Indicates whether scale in by the target tracking policy is disabled. Defaults to `false`.
        :param pulumi.Input[int] scale_in_cooldown: The amount of time, in seconds, after a scale in activity completes before another scale in activity can start.
        :param pulumi.Input[int] scale_out_cooldown: The amount of time, in seconds, after a scale out activity completes before another scale out activity can start.
        """
        pulumi.set(__self__, "target_value", target_value)
        if customized_metric_specification is not None:
            pulumi.set(__self__, "customized_metric_specification", customized_metric_specification)
        if disable_scale_in is not None:
            pulumi.set(__self__, "disable_scale_in", disable_scale_in)
        if predefined_metric_specification is not None:
            pulumi.set(__self__, "predefined_metric_specification", predefined_metric_specification)
        if scale_in_cooldown is not None:
            pulumi.set(__self__, "scale_in_cooldown", scale_in_cooldown)
        if scale_out_cooldown is not None:
            pulumi.set(__self__, "scale_out_cooldown", scale_out_cooldown)

    @property
    @pulumi.getter(name="targetValue")
    def target_value(self) -> pulumi.Input[float]:
        """
        The target value for the metric.
        """
        return pulumi.get(self, "target_value")

    @target_value.setter
    def target_value(self, value: pulumi.Input[float]):
        pulumi.set(self, "target_value", value)

    @property
    @pulumi.getter(name="customizedMetricSpecification")
    def customized_metric_specification(self) -> Optional[pulumi.Input['AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationArgs']]:
        return pulumi.get(self, "customized_metric_specification")

    @customized_metric_specification.setter
    def customized_metric_specification(self, value: Optional[pulumi.Input['AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationArgs']]):
        pulumi.set(self, "customized_metric_specification", value)

    @property
    @pulumi.getter(name="disableScaleIn")
    def disable_scale_in(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether scale in by the target tracking policy is disabled. Defaults to `false`.
        """
        return pulumi.get(self, "disable_scale_in")

    @disable_scale_in.setter
    def disable_scale_in(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_scale_in", value)

    @property
    @pulumi.getter(name="predefinedMetricSpecification")
    def predefined_metric_specification(self) -> Optional[pulumi.Input['AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecificationArgs']]:
        return pulumi.get(self, "predefined_metric_specification")

    @predefined_metric_specification.setter
    def predefined_metric_specification(self, value: Optional[pulumi.Input['AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecificationArgs']]):
        pulumi.set(self, "predefined_metric_specification", value)

    @property
    @pulumi.getter(name="scaleInCooldown")
    def scale_in_cooldown(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of time, in seconds, after a scale in activity completes before another scale in activity can start.
        """
        return pulumi.get(self, "scale_in_cooldown")

    @scale_in_cooldown.setter
    def scale_in_cooldown(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scale_in_cooldown", value)

    @property
    @pulumi.getter(name="scaleOutCooldown")
    def scale_out_cooldown(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of time, in seconds, after a scale out activity completes before another scale out activity can start.
        """
        return pulumi.get(self, "scale_out_cooldown")

    @scale_out_cooldown.setter
    def scale_out_cooldown(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scale_out_cooldown", value)


if not MYPY:
    class AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationArgsDict(TypedDict):
        metric_name: pulumi.Input[str]
        """
        The name of the metric.
        """
        namespace: pulumi.Input[str]
        """
        The namespace of the metric.
        """
        statistic: pulumi.Input[str]
        """
        The statistic of the metric. Valid values: `Average`, `Minimum`, `Maximum`, `SampleCount`, and `Sum`.
        """
        dimensions: NotRequired[pulumi.Input[Sequence[pulumi.Input['AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationDimensionArgsDict']]]]
        unit: NotRequired[pulumi.Input[str]]
        """
        The unit of the metric.
        """
elif False:
    AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationArgs:
    def __init__(__self__, *,
                 metric_name: pulumi.Input[str],
                 namespace: pulumi.Input[str],
                 statistic: pulumi.Input[str],
                 dimensions: Optional[pulumi.Input[Sequence[pulumi.Input['AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationDimensionArgs']]]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] metric_name: The name of the metric.
        :param pulumi.Input[str] namespace: The namespace of the metric.
        :param pulumi.Input[str] statistic: The statistic of the metric. Valid values: `Average`, `Minimum`, `Maximum`, `SampleCount`, and `Sum`.
        :param pulumi.Input[str] unit: The unit of the metric.
        """
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "statistic", statistic)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> pulumi.Input[str]:
        """
        The name of the metric.
        """
        return pulumi.get(self, "metric_name")

    @metric_name.setter
    def metric_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_name", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        The namespace of the metric.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def statistic(self) -> pulumi.Input[str]:
        """
        The statistic of the metric. Valid values: `Average`, `Minimum`, `Maximum`, `SampleCount`, and `Sum`.
        """
        return pulumi.get(self, "statistic")

    @statistic.setter
    def statistic(self, value: pulumi.Input[str]):
        pulumi.set(self, "statistic", value)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationDimensionArgs']]]]:
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationDimensionArgs']]]]):
        pulumi.set(self, "dimensions", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        The unit of the metric.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationDimensionArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of the dimension.
        """
        value: pulumi.Input[str]
        """
        Value of the dimension.
        """
elif False:
    AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationDimensionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationDimensionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Name of the dimension.
        :param pulumi.Input[str] value: Value of the dimension.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the dimension.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value of the dimension.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecificationArgsDict(TypedDict):
        predefined_metric_type: pulumi.Input[str]
        """
        The metric type.
        """
        resource_label: NotRequired[pulumi.Input[str]]
        """
        Reserved for future use. Must be less than or equal to 1023 characters in length.
        """
elif False:
    AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsAppautoscalingPolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecificationArgs:
    def __init__(__self__, *,
                 predefined_metric_type: pulumi.Input[str],
                 resource_label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] predefined_metric_type: The metric type.
        :param pulumi.Input[str] resource_label: Reserved for future use. Must be less than or equal to 1023 characters in length.
        """
        pulumi.set(__self__, "predefined_metric_type", predefined_metric_type)
        if resource_label is not None:
            pulumi.set(__self__, "resource_label", resource_label)

    @property
    @pulumi.getter(name="predefinedMetricType")
    def predefined_metric_type(self) -> pulumi.Input[str]:
        """
        The metric type.
        """
        return pulumi.get(self, "predefined_metric_type")

    @predefined_metric_type.setter
    def predefined_metric_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "predefined_metric_type", value)

    @property
    @pulumi.getter(name="resourceLabel")
    def resource_label(self) -> Optional[pulumi.Input[str]]:
        """
        Reserved for future use. Must be less than or equal to 1023 characters in length.
        """
        return pulumi.get(self, "resource_label")

    @resource_label.setter
    def resource_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_label", value)


if not MYPY:
    class AwsBatchComputeEnvironmentComputeResourcesArgsDict(TypedDict):
        max_vcpus: pulumi.Input[int]
        """
        The maximum number of EC2 vCPUs that an environment can reach.
        """
        type: pulumi.Input[str]
        """
        The type of compute environment. Valid items are `EC2`, `SPOT`, `FARGATE` or `FARGATE_SPOT`.
        """
        allocation_strategy: NotRequired[pulumi.Input[str]]
        """
        The allocation strategy to use for the compute resource in case not enough instances of the best fitting instance type can be allocated. Available allocation_strategy - `BEST_FIT_PROGRESSIVE`, `SPOT_CAPACITY_OPTIMIZED`, `BEST_FIT`, `SPOT_PRICE_CAPACITY_OPTIMIZED`
        """
        bid_percentage: NotRequired[pulumi.Input[int]]
        """
        Integer of maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched.
        """
        desired_vcpus: NotRequired[pulumi.Input[int]]
        """
        The desired number of EC2 vCPUS in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
        """
        ec2_configuration: NotRequired[pulumi.Input['AwsBatchComputeEnvironmentComputeResourcesEc2ConfigurationArgsDict']]
        """
        Provides information used to select Amazon Machine Images (AMIs) for EC2 instances in the compute environment.
        """
        ec2_key_pair: NotRequired[pulumi.Input[str]]
        """
        The EC2 key pair that is used for instances launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
        """
        image_id: NotRequired[pulumi.Input[str]]
        """
        The Amazon Machine Image (AMI) ID used for instances launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified. (Deprecated, use ec2_configuration `image_id_override` instead)
        """
        instance_role: NotRequired[pulumi.Input[str]]
        """
        The Amazon ECS instance role applied to Amazon EC2 instances in a compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
        """
        instance_types: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        A list of instance types that may be launched. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
        """
        launch_template: NotRequired[pulumi.Input['AwsBatchComputeEnvironmentComputeResourcesLaunchTemplateArgsDict']]
        """
        The launch template to use for your compute resources. See details below. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
        """
        min_vcpus: NotRequired[pulumi.Input[int]]
        """
        The minimum number of EC2 vCPUs that an environment should maintain. For `EC2` or `SPOT` compute environments, if the parameter is not explicitly defined, a `0` default value will be set. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
        """
        security_group_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        A list of EC2 security group that are associated with instances launched in the compute environment. This parameter is required for Fargate compute environments.
        """
        spot_iam_fleet_role: NotRequired[pulumi.Input[str]]
        """
        The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment. This parameter is required for SPOT compute environments. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
        """
        subnets: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        A list of VPC subnets into which the compute resources are launched.
        """
        tags: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Key-value map of resource tags.
        """
elif False:
    AwsBatchComputeEnvironmentComputeResourcesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsBatchComputeEnvironmentComputeResourcesArgs:
    def __init__(__self__, *,
                 max_vcpus: pulumi.Input[int],
                 type: pulumi.Input[str],
                 allocation_strategy: Optional[pulumi.Input[str]] = None,
                 bid_percentage: Optional[pulumi.Input[int]] = None,
                 desired_vcpus: Optional[pulumi.Input[int]] = None,
                 ec2_configuration: Optional[pulumi.Input['AwsBatchComputeEnvironmentComputeResourcesEc2ConfigurationArgs']] = None,
                 ec2_key_pair: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 instance_role: Optional[pulumi.Input[str]] = None,
                 instance_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 launch_template: Optional[pulumi.Input['AwsBatchComputeEnvironmentComputeResourcesLaunchTemplateArgs']] = None,
                 min_vcpus: Optional[pulumi.Input[int]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 spot_iam_fleet_role: Optional[pulumi.Input[str]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] max_vcpus: The maximum number of EC2 vCPUs that an environment can reach.
        :param pulumi.Input[str] type: The type of compute environment. Valid items are `EC2`, `SPOT`, `FARGATE` or `FARGATE_SPOT`.
        :param pulumi.Input[str] allocation_strategy: The allocation strategy to use for the compute resource in case not enough instances of the best fitting instance type can be allocated. Available allocation_strategy - `BEST_FIT_PROGRESSIVE`, `SPOT_CAPACITY_OPTIMIZED`, `BEST_FIT`, `SPOT_PRICE_CAPACITY_OPTIMIZED`
        :param pulumi.Input[int] bid_percentage: Integer of maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched.
        :param pulumi.Input[int] desired_vcpus: The desired number of EC2 vCPUS in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
        :param pulumi.Input['AwsBatchComputeEnvironmentComputeResourcesEc2ConfigurationArgs'] ec2_configuration: Provides information used to select Amazon Machine Images (AMIs) for EC2 instances in the compute environment.
        :param pulumi.Input[str] ec2_key_pair: The EC2 key pair that is used for instances launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
        :param pulumi.Input[str] image_id: The Amazon Machine Image (AMI) ID used for instances launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified. (Deprecated, use ec2_configuration `image_id_override` instead)
        :param pulumi.Input[str] instance_role: The Amazon ECS instance role applied to Amazon EC2 instances in a compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] instance_types: A list of instance types that may be launched. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
        :param pulumi.Input['AwsBatchComputeEnvironmentComputeResourcesLaunchTemplateArgs'] launch_template: The launch template to use for your compute resources. See details below. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
        :param pulumi.Input[int] min_vcpus: The minimum number of EC2 vCPUs that an environment should maintain. For `EC2` or `SPOT` compute environments, if the parameter is not explicitly defined, a `0` default value will be set. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: A list of EC2 security group that are associated with instances launched in the compute environment. This parameter is required for Fargate compute environments.
        :param pulumi.Input[str] spot_iam_fleet_role: The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment. This parameter is required for SPOT compute environments. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnets: A list of VPC subnets into which the compute resources are launched.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Key-value map of resource tags.
        """
        pulumi.set(__self__, "max_vcpus", max_vcpus)
        pulumi.set(__self__, "type", type)
        if allocation_strategy is not None:
            pulumi.set(__self__, "allocation_strategy", allocation_strategy)
        if bid_percentage is not None:
            pulumi.set(__self__, "bid_percentage", bid_percentage)
        if desired_vcpus is not None:
            pulumi.set(__self__, "desired_vcpus", desired_vcpus)
        if ec2_configuration is not None:
            pulumi.set(__self__, "ec2_configuration", ec2_configuration)
        if ec2_key_pair is not None:
            pulumi.set(__self__, "ec2_key_pair", ec2_key_pair)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if instance_role is not None:
            pulumi.set(__self__, "instance_role", instance_role)
        if instance_types is not None:
            pulumi.set(__self__, "instance_types", instance_types)
        if launch_template is not None:
            pulumi.set(__self__, "launch_template", launch_template)
        if min_vcpus is not None:
            pulumi.set(__self__, "min_vcpus", min_vcpus)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if spot_iam_fleet_role is not None:
            pulumi.set(__self__, "spot_iam_fleet_role", spot_iam_fleet_role)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="maxVcpus")
    def max_vcpus(self) -> pulumi.Input[int]:
        """
        The maximum number of EC2 vCPUs that an environment can reach.
        """
        return pulumi.get(self, "max_vcpus")

    @max_vcpus.setter
    def max_vcpus(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_vcpus", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of compute environment. Valid items are `EC2`, `SPOT`, `FARGATE` or `FARGATE_SPOT`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="allocationStrategy")
    def allocation_strategy(self) -> Optional[pulumi.Input[str]]:
        """
        The allocation strategy to use for the compute resource in case not enough instances of the best fitting instance type can be allocated. Available allocation_strategy - `BEST_FIT_PROGRESSIVE`, `SPOT_CAPACITY_OPTIMIZED`, `BEST_FIT`, `SPOT_PRICE_CAPACITY_OPTIMIZED`
        """
        return pulumi.get(self, "allocation_strategy")

    @allocation_strategy.setter
    def allocation_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allocation_strategy", value)

    @property
    @pulumi.getter(name="bidPercentage")
    def bid_percentage(self) -> Optional[pulumi.Input[int]]:
        """
        Integer of maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched.
        """
        return pulumi.get(self, "bid_percentage")

    @bid_percentage.setter
    def bid_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bid_percentage", value)

    @property
    @pulumi.getter(name="desiredVcpus")
    def desired_vcpus(self) -> Optional[pulumi.Input[int]]:
        """
        The desired number of EC2 vCPUS in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
        """
        return pulumi.get(self, "desired_vcpus")

    @desired_vcpus.setter
    def desired_vcpus(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "desired_vcpus", value)

    @property
    @pulumi.getter(name="ec2Configuration")
    def ec2_configuration(self) -> Optional[pulumi.Input['AwsBatchComputeEnvironmentComputeResourcesEc2ConfigurationArgs']]:
        """
        Provides information used to select Amazon Machine Images (AMIs) for EC2 instances in the compute environment.
        """
        return pulumi.get(self, "ec2_configuration")

    @ec2_configuration.setter
    def ec2_configuration(self, value: Optional[pulumi.Input['AwsBatchComputeEnvironmentComputeResourcesEc2ConfigurationArgs']]):
        pulumi.set(self, "ec2_configuration", value)

    @property
    @pulumi.getter(name="ec2KeyPair")
    def ec2_key_pair(self) -> Optional[pulumi.Input[str]]:
        """
        The EC2 key pair that is used for instances launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
        """
        return pulumi.get(self, "ec2_key_pair")

    @ec2_key_pair.setter
    def ec2_key_pair(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ec2_key_pair", value)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Machine Image (AMI) ID used for instances launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified. (Deprecated, use ec2_configuration `image_id_override` instead)
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="instanceRole")
    def instance_role(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon ECS instance role applied to Amazon EC2 instances in a compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
        """
        return pulumi.get(self, "instance_role")

    @instance_role.setter
    def instance_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_role", value)

    @property
    @pulumi.getter(name="instanceTypes")
    def instance_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of instance types that may be launched. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
        """
        return pulumi.get(self, "instance_types")

    @instance_types.setter
    def instance_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "instance_types", value)

    @property
    @pulumi.getter(name="launchTemplate")
    def launch_template(self) -> Optional[pulumi.Input['AwsBatchComputeEnvironmentComputeResourcesLaunchTemplateArgs']]:
        """
        The launch template to use for your compute resources. See details below. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
        """
        return pulumi.get(self, "launch_template")

    @launch_template.setter
    def launch_template(self, value: Optional[pulumi.Input['AwsBatchComputeEnvironmentComputeResourcesLaunchTemplateArgs']]):
        pulumi.set(self, "launch_template", value)

    @property
    @pulumi.getter(name="minVcpus")
    def min_vcpus(self) -> Optional[pulumi.Input[int]]:
        """
        The minimum number of EC2 vCPUs that an environment should maintain. For `EC2` or `SPOT` compute environments, if the parameter is not explicitly defined, a `0` default value will be set. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
        """
        return pulumi.get(self, "min_vcpus")

    @min_vcpus.setter
    def min_vcpus(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_vcpus", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of EC2 security group that are associated with instances launched in the compute environment. This parameter is required for Fargate compute environments.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="spotIamFleetRole")
    def spot_iam_fleet_role(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment. This parameter is required for SPOT compute environments. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
        """
        return pulumi.get(self, "spot_iam_fleet_role")

    @spot_iam_fleet_role.setter
    def spot_iam_fleet_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spot_iam_fleet_role", value)

    @property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of VPC subnets into which the compute resources are launched.
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnets", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key-value map of resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


if not MYPY:
    class AwsBatchComputeEnvironmentComputeResourcesEc2ConfigurationArgsDict(TypedDict):
        image_id_override: NotRequired[pulumi.Input[str]]
        """
        The AMI ID used for instances launched in the compute environment that match the image type. This setting overrides the `image_id` argument in the `compute_resources` block.
        """
        image_type: NotRequired[pulumi.Input[str]]
        """
        The image type to match with the instance type to select an AMI.
        """
elif False:
    AwsBatchComputeEnvironmentComputeResourcesEc2ConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsBatchComputeEnvironmentComputeResourcesEc2ConfigurationArgs:
    def __init__(__self__, *,
                 image_id_override: Optional[pulumi.Input[str]] = None,
                 image_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] image_id_override: The AMI ID used for instances launched in the compute environment that match the image type. This setting overrides the `image_id` argument in the `compute_resources` block.
        :param pulumi.Input[str] image_type: The image type to match with the instance type to select an AMI.
        """
        if image_id_override is not None:
            pulumi.set(__self__, "image_id_override", image_id_override)
        if image_type is not None:
            pulumi.set(__self__, "image_type", image_type)

    @property
    @pulumi.getter(name="imageIdOverride")
    def image_id_override(self) -> Optional[pulumi.Input[str]]:
        """
        The AMI ID used for instances launched in the compute environment that match the image type. This setting overrides the `image_id` argument in the `compute_resources` block.
        """
        return pulumi.get(self, "image_id_override")

    @image_id_override.setter
    def image_id_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_id_override", value)

    @property
    @pulumi.getter(name="imageType")
    def image_type(self) -> Optional[pulumi.Input[str]]:
        """
        The image type to match with the instance type to select an AMI.
        """
        return pulumi.get(self, "image_type")

    @image_type.setter
    def image_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_type", value)


if not MYPY:
    class AwsBatchComputeEnvironmentComputeResourcesLaunchTemplateArgsDict(TypedDict):
        launch_template_id: NotRequired[pulumi.Input[str]]
        """
        ID of the launch template. You must specify either the launch template ID or launch template name in the request, but not both.
        """
        launch_template_name: NotRequired[pulumi.Input[str]]
        """
        Name of the launch template.
        """
        version: NotRequired[pulumi.Input[str]]
        """
        The version number of the launch template. Default: The default version of the launch template.
        """
elif False:
    AwsBatchComputeEnvironmentComputeResourcesLaunchTemplateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsBatchComputeEnvironmentComputeResourcesLaunchTemplateArgs:
    def __init__(__self__, *,
                 launch_template_id: Optional[pulumi.Input[str]] = None,
                 launch_template_name: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] launch_template_id: ID of the launch template. You must specify either the launch template ID or launch template name in the request, but not both.
        :param pulumi.Input[str] launch_template_name: Name of the launch template.
        :param pulumi.Input[str] version: The version number of the launch template. Default: The default version of the launch template.
        """
        if launch_template_id is not None:
            pulumi.set(__self__, "launch_template_id", launch_template_id)
        if launch_template_name is not None:
            pulumi.set(__self__, "launch_template_name", launch_template_name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="launchTemplateId")
    def launch_template_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the launch template. You must specify either the launch template ID or launch template name in the request, but not both.
        """
        return pulumi.get(self, "launch_template_id")

    @launch_template_id.setter
    def launch_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "launch_template_id", value)

    @property
    @pulumi.getter(name="launchTemplateName")
    def launch_template_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the launch template.
        """
        return pulumi.get(self, "launch_template_name")

    @launch_template_name.setter
    def launch_template_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "launch_template_name", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        The version number of the launch template. Default: The default version of the launch template.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class AwsBatchJobDefinitionRetryStrategyArgsDict(TypedDict):
        attempts: NotRequired[pulumi.Input[int]]
        """
        The number of times to move a job to the RUNNABLE status. You may specify between `1` and `10` attempts.
        """
        evaluate_on_exits: NotRequired[pulumi.Input[Sequence[pulumi.Input['AwsBatchJobDefinitionRetryStrategyEvaluateOnExitArgsDict']]]]
        """
        The evaluate on exit conditions under which the job should be retried or failed. If this parameter is specified, then the attempts parameter must also be specified. You may specify up to 5 configuration blocks.
        """
elif False:
    AwsBatchJobDefinitionRetryStrategyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsBatchJobDefinitionRetryStrategyArgs:
    def __init__(__self__, *,
                 attempts: Optional[pulumi.Input[int]] = None,
                 evaluate_on_exits: Optional[pulumi.Input[Sequence[pulumi.Input['AwsBatchJobDefinitionRetryStrategyEvaluateOnExitArgs']]]] = None):
        """
        :param pulumi.Input[int] attempts: The number of times to move a job to the RUNNABLE status. You may specify between `1` and `10` attempts.
        :param pulumi.Input[Sequence[pulumi.Input['AwsBatchJobDefinitionRetryStrategyEvaluateOnExitArgs']]] evaluate_on_exits: The evaluate on exit conditions under which the job should be retried or failed. If this parameter is specified, then the attempts parameter must also be specified. You may specify up to 5 configuration blocks.
        """
        if attempts is not None:
            pulumi.set(__self__, "attempts", attempts)
        if evaluate_on_exits is not None:
            pulumi.set(__self__, "evaluate_on_exits", evaluate_on_exits)

    @property
    @pulumi.getter
    def attempts(self) -> Optional[pulumi.Input[int]]:
        """
        The number of times to move a job to the RUNNABLE status. You may specify between `1` and `10` attempts.
        """
        return pulumi.get(self, "attempts")

    @attempts.setter
    def attempts(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "attempts", value)

    @property
    @pulumi.getter(name="evaluateOnExits")
    def evaluate_on_exits(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AwsBatchJobDefinitionRetryStrategyEvaluateOnExitArgs']]]]:
        """
        The evaluate on exit conditions under which the job should be retried or failed. If this parameter is specified, then the attempts parameter must also be specified. You may specify up to 5 configuration blocks.
        """
        return pulumi.get(self, "evaluate_on_exits")

    @evaluate_on_exits.setter
    def evaluate_on_exits(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AwsBatchJobDefinitionRetryStrategyEvaluateOnExitArgs']]]]):
        pulumi.set(self, "evaluate_on_exits", value)


if not MYPY:
    class AwsBatchJobDefinitionRetryStrategyEvaluateOnExitArgsDict(TypedDict):
        action: pulumi.Input[str]
        """
        Specifies the action to take if all of the specified conditions are met. The values are not case sensitive. Valid values: `RETRY`, `EXIT`.
        """
        on_exit_code: NotRequired[pulumi.Input[str]]
        """
        A glob pattern to match against the decimal representation of the exit code returned for a job.
        """
        on_reason: NotRequired[pulumi.Input[str]]
        """
        A glob pattern to match against the reason returned for a job.
        """
        on_status_reason: NotRequired[pulumi.Input[str]]
        """
        A glob pattern to match against the status reason returned for a job.
        """
elif False:
    AwsBatchJobDefinitionRetryStrategyEvaluateOnExitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsBatchJobDefinitionRetryStrategyEvaluateOnExitArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 on_exit_code: Optional[pulumi.Input[str]] = None,
                 on_reason: Optional[pulumi.Input[str]] = None,
                 on_status_reason: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Specifies the action to take if all of the specified conditions are met. The values are not case sensitive. Valid values: `RETRY`, `EXIT`.
        :param pulumi.Input[str] on_exit_code: A glob pattern to match against the decimal representation of the exit code returned for a job.
        :param pulumi.Input[str] on_reason: A glob pattern to match against the reason returned for a job.
        :param pulumi.Input[str] on_status_reason: A glob pattern to match against the status reason returned for a job.
        """
        pulumi.set(__self__, "action", action)
        if on_exit_code is not None:
            pulumi.set(__self__, "on_exit_code", on_exit_code)
        if on_reason is not None:
            pulumi.set(__self__, "on_reason", on_reason)
        if on_status_reason is not None:
            pulumi.set(__self__, "on_status_reason", on_status_reason)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        """
        Specifies the action to take if all of the specified conditions are met. The values are not case sensitive. Valid values: `RETRY`, `EXIT`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="onExitCode")
    def on_exit_code(self) -> Optional[pulumi.Input[str]]:
        """
        A glob pattern to match against the decimal representation of the exit code returned for a job.
        """
        return pulumi.get(self, "on_exit_code")

    @on_exit_code.setter
    def on_exit_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "on_exit_code", value)

    @property
    @pulumi.getter(name="onReason")
    def on_reason(self) -> Optional[pulumi.Input[str]]:
        """
        A glob pattern to match against the reason returned for a job.
        """
        return pulumi.get(self, "on_reason")

    @on_reason.setter
    def on_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "on_reason", value)

    @property
    @pulumi.getter(name="onStatusReason")
    def on_status_reason(self) -> Optional[pulumi.Input[str]]:
        """
        A glob pattern to match against the status reason returned for a job.
        """
        return pulumi.get(self, "on_status_reason")

    @on_status_reason.setter
    def on_status_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "on_status_reason", value)


if not MYPY:
    class AwsBatchJobDefinitionTimeoutArgsDict(TypedDict):
        attempt_duration_seconds: NotRequired[pulumi.Input[int]]
        """
        The time duration in seconds after which AWS Batch terminates your jobs if they have not finished. The minimum value for the timeout is `60`seconds.
        """
elif False:
    AwsBatchJobDefinitionTimeoutArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsBatchJobDefinitionTimeoutArgs:
    def __init__(__self__, *,
                 attempt_duration_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] attempt_duration_seconds: The time duration in seconds after which AWS Batch terminates your jobs if they have not finished. The minimum value for the timeout is `60`seconds.
        """
        if attempt_duration_seconds is not None:
            pulumi.set(__self__, "attempt_duration_seconds", attempt_duration_seconds)

    @property
    @pulumi.getter(name="attemptDurationSeconds")
    def attempt_duration_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The time duration in seconds after which AWS Batch terminates your jobs if they have not finished. The minimum value for the timeout is `60`seconds.
        """
        return pulumi.get(self, "attempt_duration_seconds")

    @attempt_duration_seconds.setter
    def attempt_duration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "attempt_duration_seconds", value)


if not MYPY:
    class AwsBatchSchedulingPolicyFairSharePolicyArgsDict(TypedDict):
        compute_reservation: NotRequired[pulumi.Input[int]]
        """
        A value used to reserve some of the available maximum vCPU for fair share identifiers that have not yet been used.
        """
        share_decay_seconds: NotRequired[pulumi.Input[int]]
        """
        The time period to use to calculate a fair share percentage for each fair share identifier in use, in seconds.
        """
        share_distributions: NotRequired[pulumi.Input[Sequence[pulumi.Input['AwsBatchSchedulingPolicyFairSharePolicyShareDistributionArgsDict']]]]
        """
        One or more share distribution blocks which define the weights for the fair share identifiers for the fair share policy.
        """
elif False:
    AwsBatchSchedulingPolicyFairSharePolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsBatchSchedulingPolicyFairSharePolicyArgs:
    def __init__(__self__, *,
                 compute_reservation: Optional[pulumi.Input[int]] = None,
                 share_decay_seconds: Optional[pulumi.Input[int]] = None,
                 share_distributions: Optional[pulumi.Input[Sequence[pulumi.Input['AwsBatchSchedulingPolicyFairSharePolicyShareDistributionArgs']]]] = None):
        """
        :param pulumi.Input[int] compute_reservation: A value used to reserve some of the available maximum vCPU for fair share identifiers that have not yet been used.
        :param pulumi.Input[int] share_decay_seconds: The time period to use to calculate a fair share percentage for each fair share identifier in use, in seconds.
        :param pulumi.Input[Sequence[pulumi.Input['AwsBatchSchedulingPolicyFairSharePolicyShareDistributionArgs']]] share_distributions: One or more share distribution blocks which define the weights for the fair share identifiers for the fair share policy.
        """
        if compute_reservation is not None:
            pulumi.set(__self__, "compute_reservation", compute_reservation)
        if share_decay_seconds is not None:
            pulumi.set(__self__, "share_decay_seconds", share_decay_seconds)
        if share_distributions is not None:
            pulumi.set(__self__, "share_distributions", share_distributions)

    @property
    @pulumi.getter(name="computeReservation")
    def compute_reservation(self) -> Optional[pulumi.Input[int]]:
        """
        A value used to reserve some of the available maximum vCPU for fair share identifiers that have not yet been used.
        """
        return pulumi.get(self, "compute_reservation")

    @compute_reservation.setter
    def compute_reservation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "compute_reservation", value)

    @property
    @pulumi.getter(name="shareDecaySeconds")
    def share_decay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The time period to use to calculate a fair share percentage for each fair share identifier in use, in seconds.
        """
        return pulumi.get(self, "share_decay_seconds")

    @share_decay_seconds.setter
    def share_decay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "share_decay_seconds", value)

    @property
    @pulumi.getter(name="shareDistributions")
    def share_distributions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AwsBatchSchedulingPolicyFairSharePolicyShareDistributionArgs']]]]:
        """
        One or more share distribution blocks which define the weights for the fair share identifiers for the fair share policy.
        """
        return pulumi.get(self, "share_distributions")

    @share_distributions.setter
    def share_distributions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AwsBatchSchedulingPolicyFairSharePolicyShareDistributionArgs']]]]):
        pulumi.set(self, "share_distributions", value)


if not MYPY:
    class AwsBatchSchedulingPolicyFairSharePolicyShareDistributionArgsDict(TypedDict):
        share_identifier: pulumi.Input[str]
        """
        A fair share identifier or fair share identifier prefix.
        """
        weight_factor: NotRequired[pulumi.Input[float]]
        """
        The weight factor for the fair share identifier.
        """
elif False:
    AwsBatchSchedulingPolicyFairSharePolicyShareDistributionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsBatchSchedulingPolicyFairSharePolicyShareDistributionArgs:
    def __init__(__self__, *,
                 share_identifier: pulumi.Input[str],
                 weight_factor: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] share_identifier: A fair share identifier or fair share identifier prefix.
        :param pulumi.Input[float] weight_factor: The weight factor for the fair share identifier.
        """
        pulumi.set(__self__, "share_identifier", share_identifier)
        if weight_factor is not None:
            pulumi.set(__self__, "weight_factor", weight_factor)

    @property
    @pulumi.getter(name="shareIdentifier")
    def share_identifier(self) -> pulumi.Input[str]:
        """
        A fair share identifier or fair share identifier prefix.
        """
        return pulumi.get(self, "share_identifier")

    @share_identifier.setter
    def share_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "share_identifier", value)

    @property
    @pulumi.getter(name="weightFactor")
    def weight_factor(self) -> Optional[pulumi.Input[float]]:
        """
        The weight factor for the fair share identifier.
        """
        return pulumi.get(self, "weight_factor")

    @weight_factor.setter
    def weight_factor(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "weight_factor", value)


if not MYPY:
    class AwsCloudfrontDistributionCustomErrorResponseArgsDict(TypedDict):
        error_code: pulumi.Input[int]
        error_caching_min_ttl: NotRequired[pulumi.Input[int]]
        response_code: NotRequired[pulumi.Input[int]]
        response_page_path: NotRequired[pulumi.Input[str]]
elif False:
    AwsCloudfrontDistributionCustomErrorResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsCloudfrontDistributionCustomErrorResponseArgs:
    def __init__(__self__, *,
                 error_code: pulumi.Input[int],
                 error_caching_min_ttl: Optional[pulumi.Input[int]] = None,
                 response_code: Optional[pulumi.Input[int]] = None,
                 response_page_path: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "error_code", error_code)
        if error_caching_min_ttl is not None:
            pulumi.set(__self__, "error_caching_min_ttl", error_caching_min_ttl)
        if response_code is not None:
            pulumi.set(__self__, "response_code", response_code)
        if response_page_path is not None:
            pulumi.set(__self__, "response_page_path", response_page_path)

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> pulumi.Input[int]:
        return pulumi.get(self, "error_code")

    @error_code.setter
    def error_code(self, value: pulumi.Input[int]):
        pulumi.set(self, "error_code", value)

    @property
    @pulumi.getter(name="errorCachingMinTtl")
    def error_caching_min_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "error_caching_min_ttl")

    @error_caching_min_ttl.setter
    def error_caching_min_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "error_caching_min_ttl", value)

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "response_code")

    @response_code.setter
    def response_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "response_code", value)

    @property
    @pulumi.getter(name="responsePagePath")
    def response_page_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_page_path")

    @response_page_path.setter
    def response_page_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_page_path", value)


if not MYPY:
    class AwsCloudfrontDistributionDefaultCacheBehaviorArgsDict(TypedDict):
        allowed_methods: pulumi.Input[Sequence[pulumi.Input[str]]]
        cached_methods: pulumi.Input[Sequence[pulumi.Input[str]]]
        target_origin_id: pulumi.Input[str]
        viewer_protocol_policy: pulumi.Input[str]
        cache_policy_id: NotRequired[pulumi.Input[str]]
        """
        \\n\\n						
        | Policy name                                                                                                                                                                                  | Policy Id                            |
        |----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------|
        | Amplify                                                | 2e54312d-136d-493c-8eb9-b001f22f67d2 |
        | CachingDisabled                               | 4135ea2d-6df8-44a3-9df3-4b5a84be39ad |
        | CachingOptimized                                    | 658327ea-f89d-4fab-a63d-7e88639e58f6 |
        | CachingOptimizedForUncompressedObjects | b2884449-e4de-46a7-ac36-70bc7f1ddd6d |
        | Elemental-MediaPackage                            | 08627262-05a9-4f76-9ded-b50ca2e3a84f |
        \\n\\n
        """
        compress: NotRequired[pulumi.Input[bool]]
        """
        Defaults to `false`.
        """
        default_ttl: NotRequired[pulumi.Input[int]]
        """
        default time to live: Not required when cache*policy*id is set
        """
        field_level_encryption_id: NotRequired[pulumi.Input[str]]
        forwarded_values: NotRequired[pulumi.Input['AwsCloudfrontDistributionDefaultCacheBehaviorForwardedValuesArgsDict']]
        function_associations: NotRequired[pulumi.Input[Sequence[pulumi.Input['AwsCloudfrontDistributionDefaultCacheBehaviorFunctionAssociationArgsDict']]]]
        lambda_function_associations: NotRequired[pulumi.Input[Sequence[pulumi.Input['AwsCloudfrontDistributionDefaultCacheBehaviorLambdaFunctionAssociationArgsDict']]]]
        max_ttl: NotRequired[pulumi.Input[int]]
        """
        Maximum time to live: Not required when cache*policy*id is set
        """
        min_ttl: NotRequired[pulumi.Input[int]]
        """
        Minimum time to live: Not required when cache*policy*id is set Defaults to `0`.
        """
        origin_request_policy_id: NotRequired[pulumi.Input[str]]
        realtime_log_config_arn: NotRequired[pulumi.Input[str]]
        response_headers_policy_id: NotRequired[pulumi.Input[str]]
        smooth_streaming: NotRequired[pulumi.Input[bool]]
        trusted_key_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        trusted_signers: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    AwsCloudfrontDistributionDefaultCacheBehaviorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsCloudfrontDistributionDefaultCacheBehaviorArgs:
    def __init__(__self__, *,
                 allowed_methods: pulumi.Input[Sequence[pulumi.Input[str]]],
                 cached_methods: pulumi.Input[Sequence[pulumi.Input[str]]],
                 target_origin_id: pulumi.Input[str],
                 viewer_protocol_policy: pulumi.Input[str],
                 cache_policy_id: Optional[pulumi.Input[str]] = None,
                 compress: Optional[pulumi.Input[bool]] = None,
                 default_ttl: Optional[pulumi.Input[int]] = None,
                 field_level_encryption_id: Optional[pulumi.Input[str]] = None,
                 forwarded_values: Optional[pulumi.Input['AwsCloudfrontDistributionDefaultCacheBehaviorForwardedValuesArgs']] = None,
                 function_associations: Optional[pulumi.Input[Sequence[pulumi.Input['AwsCloudfrontDistributionDefaultCacheBehaviorFunctionAssociationArgs']]]] = None,
                 lambda_function_associations: Optional[pulumi.Input[Sequence[pulumi.Input['AwsCloudfrontDistributionDefaultCacheBehaviorLambdaFunctionAssociationArgs']]]] = None,
                 max_ttl: Optional[pulumi.Input[int]] = None,
                 min_ttl: Optional[pulumi.Input[int]] = None,
                 origin_request_policy_id: Optional[pulumi.Input[str]] = None,
                 realtime_log_config_arn: Optional[pulumi.Input[str]] = None,
                 response_headers_policy_id: Optional[pulumi.Input[str]] = None,
                 smooth_streaming: Optional[pulumi.Input[bool]] = None,
                 trusted_key_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 trusted_signers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] cache_policy_id: \\n\\n						
               | Policy name                                                                                                                                                                                  | Policy Id                            |
               |----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------|
               | Amplify                                                | 2e54312d-136d-493c-8eb9-b001f22f67d2 |
               | CachingDisabled                               | 4135ea2d-6df8-44a3-9df3-4b5a84be39ad |
               | CachingOptimized                                    | 658327ea-f89d-4fab-a63d-7e88639e58f6 |
               | CachingOptimizedForUncompressedObjects | b2884449-e4de-46a7-ac36-70bc7f1ddd6d |
               | Elemental-MediaPackage                            | 08627262-05a9-4f76-9ded-b50ca2e3a84f |
               \\n\\n
        :param pulumi.Input[bool] compress: Defaults to `false`.
        :param pulumi.Input[int] default_ttl: default time to live: Not required when cache*policy*id is set
        :param pulumi.Input[int] max_ttl: Maximum time to live: Not required when cache*policy*id is set
        :param pulumi.Input[int] min_ttl: Minimum time to live: Not required when cache*policy*id is set Defaults to `0`.
        """
        pulumi.set(__self__, "allowed_methods", allowed_methods)
        pulumi.set(__self__, "cached_methods", cached_methods)
        pulumi.set(__self__, "target_origin_id", target_origin_id)
        pulumi.set(__self__, "viewer_protocol_policy", viewer_protocol_policy)
        if cache_policy_id is not None:
            pulumi.set(__self__, "cache_policy_id", cache_policy_id)
        if compress is not None:
            pulumi.set(__self__, "compress", compress)
        if default_ttl is not None:
            pulumi.set(__self__, "default_ttl", default_ttl)
        if field_level_encryption_id is not None:
            pulumi.set(__self__, "field_level_encryption_id", field_level_encryption_id)
        if forwarded_values is not None:
            pulumi.set(__self__, "forwarded_values", forwarded_values)
        if function_associations is not None:
            pulumi.set(__self__, "function_associations", function_associations)
        if lambda_function_associations is not None:
            pulumi.set(__self__, "lambda_function_associations", lambda_function_associations)
        if max_ttl is not None:
            pulumi.set(__self__, "max_ttl", max_ttl)
        if min_ttl is not None:
            pulumi.set(__self__, "min_ttl", min_ttl)
        if origin_request_policy_id is not None:
            pulumi.set(__self__, "origin_request_policy_id", origin_request_policy_id)
        if realtime_log_config_arn is not None:
            pulumi.set(__self__, "realtime_log_config_arn", realtime_log_config_arn)
        if response_headers_policy_id is not None:
            pulumi.set(__self__, "response_headers_policy_id", response_headers_policy_id)
        if smooth_streaming is not None:
            pulumi.set(__self__, "smooth_streaming", smooth_streaming)
        if trusted_key_groups is not None:
            pulumi.set(__self__, "trusted_key_groups", trusted_key_groups)
        if trusted_signers is not None:
            pulumi.set(__self__, "trusted_signers", trusted_signers)

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "allowed_methods")

    @allowed_methods.setter
    def allowed_methods(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "allowed_methods", value)

    @property
    @pulumi.getter(name="cachedMethods")
    def cached_methods(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "cached_methods")

    @cached_methods.setter
    def cached_methods(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "cached_methods", value)

    @property
    @pulumi.getter(name="targetOriginId")
    def target_origin_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target_origin_id")

    @target_origin_id.setter
    def target_origin_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_origin_id", value)

    @property
    @pulumi.getter(name="viewerProtocolPolicy")
    def viewer_protocol_policy(self) -> pulumi.Input[str]:
        return pulumi.get(self, "viewer_protocol_policy")

    @viewer_protocol_policy.setter
    def viewer_protocol_policy(self, value: pulumi.Input[str]):
        pulumi.set(self, "viewer_protocol_policy", value)

    @property
    @pulumi.getter(name="cachePolicyId")
    def cache_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        \\n\\n						
        | Policy name                                                                                                                                                                                  | Policy Id                            |
        |----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------|
        | Amplify                                                | 2e54312d-136d-493c-8eb9-b001f22f67d2 |
        | CachingDisabled                               | 4135ea2d-6df8-44a3-9df3-4b5a84be39ad |
        | CachingOptimized                                    | 658327ea-f89d-4fab-a63d-7e88639e58f6 |
        | CachingOptimizedForUncompressedObjects | b2884449-e4de-46a7-ac36-70bc7f1ddd6d |
        | Elemental-MediaPackage                            | 08627262-05a9-4f76-9ded-b50ca2e3a84f |
        \\n\\n
        """
        return pulumi.get(self, "cache_policy_id")

    @cache_policy_id.setter
    def cache_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_policy_id", value)

    @property
    @pulumi.getter
    def compress(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "compress")

    @compress.setter
    def compress(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "compress", value)

    @property
    @pulumi.getter(name="defaultTtl")
    def default_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        default time to live: Not required when cache*policy*id is set
        """
        return pulumi.get(self, "default_ttl")

    @default_ttl.setter
    def default_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_ttl", value)

    @property
    @pulumi.getter(name="fieldLevelEncryptionId")
    def field_level_encryption_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_level_encryption_id")

    @field_level_encryption_id.setter
    def field_level_encryption_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_level_encryption_id", value)

    @property
    @pulumi.getter(name="forwardedValues")
    def forwarded_values(self) -> Optional[pulumi.Input['AwsCloudfrontDistributionDefaultCacheBehaviorForwardedValuesArgs']]:
        return pulumi.get(self, "forwarded_values")

    @forwarded_values.setter
    def forwarded_values(self, value: Optional[pulumi.Input['AwsCloudfrontDistributionDefaultCacheBehaviorForwardedValuesArgs']]):
        pulumi.set(self, "forwarded_values", value)

    @property
    @pulumi.getter(name="functionAssociations")
    def function_associations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AwsCloudfrontDistributionDefaultCacheBehaviorFunctionAssociationArgs']]]]:
        return pulumi.get(self, "function_associations")

    @function_associations.setter
    def function_associations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AwsCloudfrontDistributionDefaultCacheBehaviorFunctionAssociationArgs']]]]):
        pulumi.set(self, "function_associations", value)

    @property
    @pulumi.getter(name="lambdaFunctionAssociations")
    def lambda_function_associations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AwsCloudfrontDistributionDefaultCacheBehaviorLambdaFunctionAssociationArgs']]]]:
        return pulumi.get(self, "lambda_function_associations")

    @lambda_function_associations.setter
    def lambda_function_associations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AwsCloudfrontDistributionDefaultCacheBehaviorLambdaFunctionAssociationArgs']]]]):
        pulumi.set(self, "lambda_function_associations", value)

    @property
    @pulumi.getter(name="maxTtl")
    def max_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum time to live: Not required when cache*policy*id is set
        """
        return pulumi.get(self, "max_ttl")

    @max_ttl.setter
    def max_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_ttl", value)

    @property
    @pulumi.getter(name="minTtl")
    def min_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum time to live: Not required when cache*policy*id is set Defaults to `0`.
        """
        return pulumi.get(self, "min_ttl")

    @min_ttl.setter
    def min_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_ttl", value)

    @property
    @pulumi.getter(name="originRequestPolicyId")
    def origin_request_policy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "origin_request_policy_id")

    @origin_request_policy_id.setter
    def origin_request_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin_request_policy_id", value)

    @property
    @pulumi.getter(name="realtimeLogConfigArn")
    def realtime_log_config_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "realtime_log_config_arn")

    @realtime_log_config_arn.setter
    def realtime_log_config_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "realtime_log_config_arn", value)

    @property
    @pulumi.getter(name="responseHeadersPolicyId")
    def response_headers_policy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_headers_policy_id")

    @response_headers_policy_id.setter
    def response_headers_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_headers_policy_id", value)

    @property
    @pulumi.getter(name="smoothStreaming")
    def smooth_streaming(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "smooth_streaming")

    @smooth_streaming.setter
    def smooth_streaming(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "smooth_streaming", value)

    @property
    @pulumi.getter(name="trustedKeyGroups")
    def trusted_key_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "trusted_key_groups")

    @trusted_key_groups.setter
    def trusted_key_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "trusted_key_groups", value)

    @property
    @pulumi.getter(name="trustedSigners")
    def trusted_signers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "trusted_signers")

    @trusted_signers.setter
    def trusted_signers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "trusted_signers", value)


if not MYPY:
    class AwsCloudfrontDistributionDefaultCacheBehaviorForwardedValuesArgsDict(TypedDict):
        cookies: pulumi.Input['AwsCloudfrontDistributionDefaultCacheBehaviorForwardedValuesCookiesArgsDict']
        query_string: pulumi.Input[bool]
        headers: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        headers: Not required when cache*policy*id is set
        """
        query_string_cache_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        query*string*cache*keys: Not required when cache*policy_id is set
        """
elif False:
    AwsCloudfrontDistributionDefaultCacheBehaviorForwardedValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsCloudfrontDistributionDefaultCacheBehaviorForwardedValuesArgs:
    def __init__(__self__, *,
                 cookies: pulumi.Input['AwsCloudfrontDistributionDefaultCacheBehaviorForwardedValuesCookiesArgs'],
                 query_string: pulumi.Input[bool],
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 query_string_cache_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] headers: headers: Not required when cache*policy*id is set
        :param pulumi.Input[Sequence[pulumi.Input[str]]] query_string_cache_keys: query*string*cache*keys: Not required when cache*policy_id is set
        """
        pulumi.set(__self__, "cookies", cookies)
        pulumi.set(__self__, "query_string", query_string)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if query_string_cache_keys is not None:
            pulumi.set(__self__, "query_string_cache_keys", query_string_cache_keys)

    @property
    @pulumi.getter
    def cookies(self) -> pulumi.Input['AwsCloudfrontDistributionDefaultCacheBehaviorForwardedValuesCookiesArgs']:
        return pulumi.get(self, "cookies")

    @cookies.setter
    def cookies(self, value: pulumi.Input['AwsCloudfrontDistributionDefaultCacheBehaviorForwardedValuesCookiesArgs']):
        pulumi.set(self, "cookies", value)

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "query_string")

    @query_string.setter
    def query_string(self, value: pulumi.Input[bool]):
        pulumi.set(self, "query_string", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        headers: Not required when cache*policy*id is set
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="queryStringCacheKeys")
    def query_string_cache_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        query*string*cache*keys: Not required when cache*policy_id is set
        """
        return pulumi.get(self, "query_string_cache_keys")

    @query_string_cache_keys.setter
    def query_string_cache_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "query_string_cache_keys", value)


if not MYPY:
    class AwsCloudfrontDistributionDefaultCacheBehaviorForwardedValuesCookiesArgsDict(TypedDict):
        forward: pulumi.Input[str]
        whitelisted_names: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    AwsCloudfrontDistributionDefaultCacheBehaviorForwardedValuesCookiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsCloudfrontDistributionDefaultCacheBehaviorForwardedValuesCookiesArgs:
    def __init__(__self__, *,
                 forward: pulumi.Input[str],
                 whitelisted_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "forward", forward)
        if whitelisted_names is not None:
            pulumi.set(__self__, "whitelisted_names", whitelisted_names)

    @property
    @pulumi.getter
    def forward(self) -> pulumi.Input[str]:
        return pulumi.get(self, "forward")

    @forward.setter
    def forward(self, value: pulumi.Input[str]):
        pulumi.set(self, "forward", value)

    @property
    @pulumi.getter(name="whitelistedNames")
    def whitelisted_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "whitelisted_names")

    @whitelisted_names.setter
    def whitelisted_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "whitelisted_names", value)


if not MYPY:
    class AwsCloudfrontDistributionDefaultCacheBehaviorFunctionAssociationArgsDict(TypedDict):
        event_type: pulumi.Input[str]
        function_arn: pulumi.Input[str]
elif False:
    AwsCloudfrontDistributionDefaultCacheBehaviorFunctionAssociationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsCloudfrontDistributionDefaultCacheBehaviorFunctionAssociationArgs:
    def __init__(__self__, *,
                 event_type: pulumi.Input[str],
                 function_arn: pulumi.Input[str]):
        pulumi.set(__self__, "event_type", event_type)
        pulumi.set(__self__, "function_arn", function_arn)

    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "event_type")

    @event_type.setter
    def event_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "event_type", value)

    @property
    @pulumi.getter(name="functionArn")
    def function_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "function_arn")

    @function_arn.setter
    def function_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "function_arn", value)


if not MYPY:
    class AwsCloudfrontDistributionDefaultCacheBehaviorLambdaFunctionAssociationArgsDict(TypedDict):
        event_type: pulumi.Input[str]
        lambda_arn: pulumi.Input[str]
        include_body: NotRequired[pulumi.Input[bool]]
        """
        Defaults to `false`.
        """
elif False:
    AwsCloudfrontDistributionDefaultCacheBehaviorLambdaFunctionAssociationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsCloudfrontDistributionDefaultCacheBehaviorLambdaFunctionAssociationArgs:
    def __init__(__self__, *,
                 event_type: pulumi.Input[str],
                 lambda_arn: pulumi.Input[str],
                 include_body: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] include_body: Defaults to `false`.
        """
        pulumi.set(__self__, "event_type", event_type)
        pulumi.set(__self__, "lambda_arn", lambda_arn)
        if include_body is not None:
            pulumi.set(__self__, "include_body", include_body)

    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "event_type")

    @event_type.setter
    def event_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "event_type", value)

    @property
    @pulumi.getter(name="lambdaArn")
    def lambda_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "lambda_arn")

    @lambda_arn.setter
    def lambda_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "lambda_arn", value)

    @property
    @pulumi.getter(name="includeBody")
    def include_body(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "include_body")

    @include_body.setter
    def include_body(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_body", value)


if not MYPY:
    class AwsCloudfrontDistributionLoggingConfigArgsDict(TypedDict):
        bucket: pulumi.Input[str]
        include_cookies: NotRequired[pulumi.Input[bool]]
        """
        Defaults to `false`.
        """
        prefix: NotRequired[pulumi.Input[str]]
        """
        Defaults to ``.
        """
elif False:
    AwsCloudfrontDistributionLoggingConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsCloudfrontDistributionLoggingConfigArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 include_cookies: Optional[pulumi.Input[bool]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] include_cookies: Defaults to `false`.
        :param pulumi.Input[str] prefix: Defaults to ``.
        """
        pulumi.set(__self__, "bucket", bucket)
        if include_cookies is not None:
            pulumi.set(__self__, "include_cookies", include_cookies)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="includeCookies")
    def include_cookies(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "include_cookies")

    @include_cookies.setter
    def include_cookies(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_cookies", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to ``.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


if not MYPY:
    class AwsCloudfrontDistributionOrderedCacheBehaviorArgsDict(TypedDict):
        allowed_methods: pulumi.Input[Sequence[pulumi.Input[str]]]
        cached_methods: pulumi.Input[Sequence[pulumi.Input[str]]]
        path_pattern: pulumi.Input[str]
        target_origin_id: pulumi.Input[str]
        viewer_protocol_policy: pulumi.Input[str]
        cache_policy_id: NotRequired[pulumi.Input[str]]
        compress: NotRequired[pulumi.Input[bool]]
        """
        Defaults to `false`.
        """
        default_ttl: NotRequired[pulumi.Input[int]]
        field_level_encryption_id: NotRequired[pulumi.Input[str]]
        forwarded_values: NotRequired[pulumi.Input['AwsCloudfrontDistributionOrderedCacheBehaviorForwardedValuesArgsDict']]
        function_associations: NotRequired[pulumi.Input[Sequence[pulumi.Input['AwsCloudfrontDistributionOrderedCacheBehaviorFunctionAssociationArgsDict']]]]
        lambda_function_associations: NotRequired[pulumi.Input[Sequence[pulumi.Input['AwsCloudfrontDistributionOrderedCacheBehaviorLambdaFunctionAssociationArgsDict']]]]
        max_ttl: NotRequired[pulumi.Input[int]]
        min_ttl: NotRequired[pulumi.Input[int]]
        """
        Defaults to `0`.
        """
        origin_request_policy_id: NotRequired[pulumi.Input[str]]
        realtime_log_config_arn: NotRequired[pulumi.Input[str]]
        response_headers_policy_id: NotRequired[pulumi.Input[str]]
        smooth_streaming: NotRequired[pulumi.Input[bool]]
        trusted_key_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        trusted_signers: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    AwsCloudfrontDistributionOrderedCacheBehaviorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsCloudfrontDistributionOrderedCacheBehaviorArgs:
    def __init__(__self__, *,
                 allowed_methods: pulumi.Input[Sequence[pulumi.Input[str]]],
                 cached_methods: pulumi.Input[Sequence[pulumi.Input[str]]],
                 path_pattern: pulumi.Input[str],
                 target_origin_id: pulumi.Input[str],
                 viewer_protocol_policy: pulumi.Input[str],
                 cache_policy_id: Optional[pulumi.Input[str]] = None,
                 compress: Optional[pulumi.Input[bool]] = None,
                 default_ttl: Optional[pulumi.Input[int]] = None,
                 field_level_encryption_id: Optional[pulumi.Input[str]] = None,
                 forwarded_values: Optional[pulumi.Input['AwsCloudfrontDistributionOrderedCacheBehaviorForwardedValuesArgs']] = None,
                 function_associations: Optional[pulumi.Input[Sequence[pulumi.Input['AwsCloudfrontDistributionOrderedCacheBehaviorFunctionAssociationArgs']]]] = None,
                 lambda_function_associations: Optional[pulumi.Input[Sequence[pulumi.Input['AwsCloudfrontDistributionOrderedCacheBehaviorLambdaFunctionAssociationArgs']]]] = None,
                 max_ttl: Optional[pulumi.Input[int]] = None,
                 min_ttl: Optional[pulumi.Input[int]] = None,
                 origin_request_policy_id: Optional[pulumi.Input[str]] = None,
                 realtime_log_config_arn: Optional[pulumi.Input[str]] = None,
                 response_headers_policy_id: Optional[pulumi.Input[str]] = None,
                 smooth_streaming: Optional[pulumi.Input[bool]] = None,
                 trusted_key_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 trusted_signers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] compress: Defaults to `false`.
        :param pulumi.Input[int] min_ttl: Defaults to `0`.
        """
        pulumi.set(__self__, "allowed_methods", allowed_methods)
        pulumi.set(__self__, "cached_methods", cached_methods)
        pulumi.set(__self__, "path_pattern", path_pattern)
        pulumi.set(__self__, "target_origin_id", target_origin_id)
        pulumi.set(__self__, "viewer_protocol_policy", viewer_protocol_policy)
        if cache_policy_id is not None:
            pulumi.set(__self__, "cache_policy_id", cache_policy_id)
        if compress is not None:
            pulumi.set(__self__, "compress", compress)
        if default_ttl is not None:
            pulumi.set(__self__, "default_ttl", default_ttl)
        if field_level_encryption_id is not None:
            pulumi.set(__self__, "field_level_encryption_id", field_level_encryption_id)
        if forwarded_values is not None:
            pulumi.set(__self__, "forwarded_values", forwarded_values)
        if function_associations is not None:
            pulumi.set(__self__, "function_associations", function_associations)
        if lambda_function_associations is not None:
            pulumi.set(__self__, "lambda_function_associations", lambda_function_associations)
        if max_ttl is not None:
            pulumi.set(__self__, "max_ttl", max_ttl)
        if min_ttl is not None:
            pulumi.set(__self__, "min_ttl", min_ttl)
        if origin_request_policy_id is not None:
            pulumi.set(__self__, "origin_request_policy_id", origin_request_policy_id)
        if realtime_log_config_arn is not None:
            pulumi.set(__self__, "realtime_log_config_arn", realtime_log_config_arn)
        if response_headers_policy_id is not None:
            pulumi.set(__self__, "response_headers_policy_id", response_headers_policy_id)
        if smooth_streaming is not None:
            pulumi.set(__self__, "smooth_streaming", smooth_streaming)
        if trusted_key_groups is not None:
            pulumi.set(__self__, "trusted_key_groups", trusted_key_groups)
        if trusted_signers is not None:
            pulumi.set(__self__, "trusted_signers", trusted_signers)

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "allowed_methods")

    @allowed_methods.setter
    def allowed_methods(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "allowed_methods", value)

    @property
    @pulumi.getter(name="cachedMethods")
    def cached_methods(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "cached_methods")

    @cached_methods.setter
    def cached_methods(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "cached_methods", value)

    @property
    @pulumi.getter(name="pathPattern")
    def path_pattern(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path_pattern")

    @path_pattern.setter
    def path_pattern(self, value: pulumi.Input[str]):
        pulumi.set(self, "path_pattern", value)

    @property
    @pulumi.getter(name="targetOriginId")
    def target_origin_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target_origin_id")

    @target_origin_id.setter
    def target_origin_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_origin_id", value)

    @property
    @pulumi.getter(name="viewerProtocolPolicy")
    def viewer_protocol_policy(self) -> pulumi.Input[str]:
        return pulumi.get(self, "viewer_protocol_policy")

    @viewer_protocol_policy.setter
    def viewer_protocol_policy(self, value: pulumi.Input[str]):
        pulumi.set(self, "viewer_protocol_policy", value)

    @property
    @pulumi.getter(name="cachePolicyId")
    def cache_policy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cache_policy_id")

    @cache_policy_id.setter
    def cache_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_policy_id", value)

    @property
    @pulumi.getter
    def compress(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "compress")

    @compress.setter
    def compress(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "compress", value)

    @property
    @pulumi.getter(name="defaultTtl")
    def default_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_ttl")

    @default_ttl.setter
    def default_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_ttl", value)

    @property
    @pulumi.getter(name="fieldLevelEncryptionId")
    def field_level_encryption_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_level_encryption_id")

    @field_level_encryption_id.setter
    def field_level_encryption_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_level_encryption_id", value)

    @property
    @pulumi.getter(name="forwardedValues")
    def forwarded_values(self) -> Optional[pulumi.Input['AwsCloudfrontDistributionOrderedCacheBehaviorForwardedValuesArgs']]:
        return pulumi.get(self, "forwarded_values")

    @forwarded_values.setter
    def forwarded_values(self, value: Optional[pulumi.Input['AwsCloudfrontDistributionOrderedCacheBehaviorForwardedValuesArgs']]):
        pulumi.set(self, "forwarded_values", value)

    @property
    @pulumi.getter(name="functionAssociations")
    def function_associations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AwsCloudfrontDistributionOrderedCacheBehaviorFunctionAssociationArgs']]]]:
        return pulumi.get(self, "function_associations")

    @function_associations.setter
    def function_associations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AwsCloudfrontDistributionOrderedCacheBehaviorFunctionAssociationArgs']]]]):
        pulumi.set(self, "function_associations", value)

    @property
    @pulumi.getter(name="lambdaFunctionAssociations")
    def lambda_function_associations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AwsCloudfrontDistributionOrderedCacheBehaviorLambdaFunctionAssociationArgs']]]]:
        return pulumi.get(self, "lambda_function_associations")

    @lambda_function_associations.setter
    def lambda_function_associations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AwsCloudfrontDistributionOrderedCacheBehaviorLambdaFunctionAssociationArgs']]]]):
        pulumi.set(self, "lambda_function_associations", value)

    @property
    @pulumi.getter(name="maxTtl")
    def max_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_ttl")

    @max_ttl.setter
    def max_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_ttl", value)

    @property
    @pulumi.getter(name="minTtl")
    def min_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Defaults to `0`.
        """
        return pulumi.get(self, "min_ttl")

    @min_ttl.setter
    def min_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_ttl", value)

    @property
    @pulumi.getter(name="originRequestPolicyId")
    def origin_request_policy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "origin_request_policy_id")

    @origin_request_policy_id.setter
    def origin_request_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin_request_policy_id", value)

    @property
    @pulumi.getter(name="realtimeLogConfigArn")
    def realtime_log_config_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "realtime_log_config_arn")

    @realtime_log_config_arn.setter
    def realtime_log_config_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "realtime_log_config_arn", value)

    @property
    @pulumi.getter(name="responseHeadersPolicyId")
    def response_headers_policy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_headers_policy_id")

    @response_headers_policy_id.setter
    def response_headers_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_headers_policy_id", value)

    @property
    @pulumi.getter(name="smoothStreaming")
    def smooth_streaming(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "smooth_streaming")

    @smooth_streaming.setter
    def smooth_streaming(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "smooth_streaming", value)

    @property
    @pulumi.getter(name="trustedKeyGroups")
    def trusted_key_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "trusted_key_groups")

    @trusted_key_groups.setter
    def trusted_key_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "trusted_key_groups", value)

    @property
    @pulumi.getter(name="trustedSigners")
    def trusted_signers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "trusted_signers")

    @trusted_signers.setter
    def trusted_signers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "trusted_signers", value)


if not MYPY:
    class AwsCloudfrontDistributionOrderedCacheBehaviorForwardedValuesArgsDict(TypedDict):
        cookies: pulumi.Input['AwsCloudfrontDistributionOrderedCacheBehaviorForwardedValuesCookiesArgsDict']
        query_string: pulumi.Input[bool]
        headers: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        query_string_cache_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    AwsCloudfrontDistributionOrderedCacheBehaviorForwardedValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsCloudfrontDistributionOrderedCacheBehaviorForwardedValuesArgs:
    def __init__(__self__, *,
                 cookies: pulumi.Input['AwsCloudfrontDistributionOrderedCacheBehaviorForwardedValuesCookiesArgs'],
                 query_string: pulumi.Input[bool],
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 query_string_cache_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "cookies", cookies)
        pulumi.set(__self__, "query_string", query_string)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if query_string_cache_keys is not None:
            pulumi.set(__self__, "query_string_cache_keys", query_string_cache_keys)

    @property
    @pulumi.getter
    def cookies(self) -> pulumi.Input['AwsCloudfrontDistributionOrderedCacheBehaviorForwardedValuesCookiesArgs']:
        return pulumi.get(self, "cookies")

    @cookies.setter
    def cookies(self, value: pulumi.Input['AwsCloudfrontDistributionOrderedCacheBehaviorForwardedValuesCookiesArgs']):
        pulumi.set(self, "cookies", value)

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "query_string")

    @query_string.setter
    def query_string(self, value: pulumi.Input[bool]):
        pulumi.set(self, "query_string", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="queryStringCacheKeys")
    def query_string_cache_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "query_string_cache_keys")

    @query_string_cache_keys.setter
    def query_string_cache_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "query_string_cache_keys", value)


if not MYPY:
    class AwsCloudfrontDistributionOrderedCacheBehaviorForwardedValuesCookiesArgsDict(TypedDict):
        forward: pulumi.Input[str]
        whitelisted_names: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    AwsCloudfrontDistributionOrderedCacheBehaviorForwardedValuesCookiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsCloudfrontDistributionOrderedCacheBehaviorForwardedValuesCookiesArgs:
    def __init__(__self__, *,
                 forward: pulumi.Input[str],
                 whitelisted_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "forward", forward)
        if whitelisted_names is not None:
            pulumi.set(__self__, "whitelisted_names", whitelisted_names)

    @property
    @pulumi.getter
    def forward(self) -> pulumi.Input[str]:
        return pulumi.get(self, "forward")

    @forward.setter
    def forward(self, value: pulumi.Input[str]):
        pulumi.set(self, "forward", value)

    @property
    @pulumi.getter(name="whitelistedNames")
    def whitelisted_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "whitelisted_names")

    @whitelisted_names.setter
    def whitelisted_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "whitelisted_names", value)


if not MYPY:
    class AwsCloudfrontDistributionOrderedCacheBehaviorFunctionAssociationArgsDict(TypedDict):
        event_type: pulumi.Input[str]
        function_arn: pulumi.Input[str]
elif False:
    AwsCloudfrontDistributionOrderedCacheBehaviorFunctionAssociationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsCloudfrontDistributionOrderedCacheBehaviorFunctionAssociationArgs:
    def __init__(__self__, *,
                 event_type: pulumi.Input[str],
                 function_arn: pulumi.Input[str]):
        pulumi.set(__self__, "event_type", event_type)
        pulumi.set(__self__, "function_arn", function_arn)

    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "event_type")

    @event_type.setter
    def event_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "event_type", value)

    @property
    @pulumi.getter(name="functionArn")
    def function_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "function_arn")

    @function_arn.setter
    def function_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "function_arn", value)


if not MYPY:
    class AwsCloudfrontDistributionOrderedCacheBehaviorLambdaFunctionAssociationArgsDict(TypedDict):
        event_type: pulumi.Input[str]
        lambda_arn: pulumi.Input[str]
        include_body: NotRequired[pulumi.Input[bool]]
        """
        Defaults to `false`.
        """
elif False:
    AwsCloudfrontDistributionOrderedCacheBehaviorLambdaFunctionAssociationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsCloudfrontDistributionOrderedCacheBehaviorLambdaFunctionAssociationArgs:
    def __init__(__self__, *,
                 event_type: pulumi.Input[str],
                 lambda_arn: pulumi.Input[str],
                 include_body: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] include_body: Defaults to `false`.
        """
        pulumi.set(__self__, "event_type", event_type)
        pulumi.set(__self__, "lambda_arn", lambda_arn)
        if include_body is not None:
            pulumi.set(__self__, "include_body", include_body)

    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "event_type")

    @event_type.setter
    def event_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "event_type", value)

    @property
    @pulumi.getter(name="lambdaArn")
    def lambda_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "lambda_arn")

    @lambda_arn.setter
    def lambda_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "lambda_arn", value)

    @property
    @pulumi.getter(name="includeBody")
    def include_body(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "include_body")

    @include_body.setter
    def include_body(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_body", value)


if not MYPY:
    class AwsCloudfrontDistributionOriginArgsDict(TypedDict):
        domain_name: pulumi.Input[str]
        origin_id: pulumi.Input[str]
        connection_attempts: NotRequired[pulumi.Input[int]]
        """
        Defaults to `3`.
        """
        connection_timeout: NotRequired[pulumi.Input[int]]
        """
        Defaults to `10`.
        """
        custom_headers: NotRequired[pulumi.Input[Sequence[pulumi.Input['AwsCloudfrontDistributionOriginCustomHeaderArgsDict']]]]
        custom_origin_config: NotRequired[pulumi.Input['AwsCloudfrontDistributionOriginCustomOriginConfigArgsDict']]
        origin_path: NotRequired[pulumi.Input[str]]
        """
        Defaults to ``.
        """
        origin_shield: NotRequired[pulumi.Input['AwsCloudfrontDistributionOriginOriginShieldArgsDict']]
        s3_origin_config: NotRequired[pulumi.Input['AwsCloudfrontDistributionOriginS3OriginConfigArgsDict']]
elif False:
    AwsCloudfrontDistributionOriginArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsCloudfrontDistributionOriginArgs:
    def __init__(__self__, *,
                 domain_name: pulumi.Input[str],
                 origin_id: pulumi.Input[str],
                 connection_attempts: Optional[pulumi.Input[int]] = None,
                 connection_timeout: Optional[pulumi.Input[int]] = None,
                 custom_headers: Optional[pulumi.Input[Sequence[pulumi.Input['AwsCloudfrontDistributionOriginCustomHeaderArgs']]]] = None,
                 custom_origin_config: Optional[pulumi.Input['AwsCloudfrontDistributionOriginCustomOriginConfigArgs']] = None,
                 origin_path: Optional[pulumi.Input[str]] = None,
                 origin_shield: Optional[pulumi.Input['AwsCloudfrontDistributionOriginOriginShieldArgs']] = None,
                 s3_origin_config: Optional[pulumi.Input['AwsCloudfrontDistributionOriginS3OriginConfigArgs']] = None):
        """
        :param pulumi.Input[int] connection_attempts: Defaults to `3`.
        :param pulumi.Input[int] connection_timeout: Defaults to `10`.
        :param pulumi.Input[str] origin_path: Defaults to ``.
        """
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "origin_id", origin_id)
        if connection_attempts is not None:
            pulumi.set(__self__, "connection_attempts", connection_attempts)
        if connection_timeout is not None:
            pulumi.set(__self__, "connection_timeout", connection_timeout)
        if custom_headers is not None:
            pulumi.set(__self__, "custom_headers", custom_headers)
        if custom_origin_config is not None:
            pulumi.set(__self__, "custom_origin_config", custom_origin_config)
        if origin_path is not None:
            pulumi.set(__self__, "origin_path", origin_path)
        if origin_shield is not None:
            pulumi.set(__self__, "origin_shield", origin_shield)
        if s3_origin_config is not None:
            pulumi.set(__self__, "s3_origin_config", s3_origin_config)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "origin_id")

    @origin_id.setter
    def origin_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "origin_id", value)

    @property
    @pulumi.getter(name="connectionAttempts")
    def connection_attempts(self) -> Optional[pulumi.Input[int]]:
        """
        Defaults to `3`.
        """
        return pulumi.get(self, "connection_attempts")

    @connection_attempts.setter
    def connection_attempts(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connection_attempts", value)

    @property
    @pulumi.getter(name="connectionTimeout")
    def connection_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Defaults to `10`.
        """
        return pulumi.get(self, "connection_timeout")

    @connection_timeout.setter
    def connection_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connection_timeout", value)

    @property
    @pulumi.getter(name="customHeaders")
    def custom_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AwsCloudfrontDistributionOriginCustomHeaderArgs']]]]:
        return pulumi.get(self, "custom_headers")

    @custom_headers.setter
    def custom_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AwsCloudfrontDistributionOriginCustomHeaderArgs']]]]):
        pulumi.set(self, "custom_headers", value)

    @property
    @pulumi.getter(name="customOriginConfig")
    def custom_origin_config(self) -> Optional[pulumi.Input['AwsCloudfrontDistributionOriginCustomOriginConfigArgs']]:
        return pulumi.get(self, "custom_origin_config")

    @custom_origin_config.setter
    def custom_origin_config(self, value: Optional[pulumi.Input['AwsCloudfrontDistributionOriginCustomOriginConfigArgs']]):
        pulumi.set(self, "custom_origin_config", value)

    @property
    @pulumi.getter(name="originPath")
    def origin_path(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to ``.
        """
        return pulumi.get(self, "origin_path")

    @origin_path.setter
    def origin_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin_path", value)

    @property
    @pulumi.getter(name="originShield")
    def origin_shield(self) -> Optional[pulumi.Input['AwsCloudfrontDistributionOriginOriginShieldArgs']]:
        return pulumi.get(self, "origin_shield")

    @origin_shield.setter
    def origin_shield(self, value: Optional[pulumi.Input['AwsCloudfrontDistributionOriginOriginShieldArgs']]):
        pulumi.set(self, "origin_shield", value)

    @property
    @pulumi.getter(name="s3OriginConfig")
    def s3_origin_config(self) -> Optional[pulumi.Input['AwsCloudfrontDistributionOriginS3OriginConfigArgs']]:
        return pulumi.get(self, "s3_origin_config")

    @s3_origin_config.setter
    def s3_origin_config(self, value: Optional[pulumi.Input['AwsCloudfrontDistributionOriginS3OriginConfigArgs']]):
        pulumi.set(self, "s3_origin_config", value)


if not MYPY:
    class AwsCloudfrontDistributionOriginCustomHeaderArgsDict(TypedDict):
        name: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    AwsCloudfrontDistributionOriginCustomHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsCloudfrontDistributionOriginCustomHeaderArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AwsCloudfrontDistributionOriginCustomOriginConfigArgsDict(TypedDict):
        origin_protocol_policy: pulumi.Input[str]
        origin_ssl_protocols: pulumi.Input[Sequence[pulumi.Input[str]]]
        http_port: NotRequired[pulumi.Input[int]]
        """
        Defaults to `80`.
        """
        https_port: NotRequired[pulumi.Input[int]]
        """
        Defaults to `443`.
        """
        origin_keepalive_timeout: NotRequired[pulumi.Input[int]]
        """
        Defaults to `5`.
        """
        origin_read_timeout: NotRequired[pulumi.Input[int]]
        """
        Defaults to `30`.
        """
elif False:
    AwsCloudfrontDistributionOriginCustomOriginConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsCloudfrontDistributionOriginCustomOriginConfigArgs:
    def __init__(__self__, *,
                 origin_protocol_policy: pulumi.Input[str],
                 origin_ssl_protocols: pulumi.Input[Sequence[pulumi.Input[str]]],
                 http_port: Optional[pulumi.Input[int]] = None,
                 https_port: Optional[pulumi.Input[int]] = None,
                 origin_keepalive_timeout: Optional[pulumi.Input[int]] = None,
                 origin_read_timeout: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] http_port: Defaults to `80`.
        :param pulumi.Input[int] https_port: Defaults to `443`.
        :param pulumi.Input[int] origin_keepalive_timeout: Defaults to `5`.
        :param pulumi.Input[int] origin_read_timeout: Defaults to `30`.
        """
        pulumi.set(__self__, "origin_protocol_policy", origin_protocol_policy)
        pulumi.set(__self__, "origin_ssl_protocols", origin_ssl_protocols)
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if https_port is not None:
            pulumi.set(__self__, "https_port", https_port)
        if origin_keepalive_timeout is not None:
            pulumi.set(__self__, "origin_keepalive_timeout", origin_keepalive_timeout)
        if origin_read_timeout is not None:
            pulumi.set(__self__, "origin_read_timeout", origin_read_timeout)

    @property
    @pulumi.getter(name="originProtocolPolicy")
    def origin_protocol_policy(self) -> pulumi.Input[str]:
        return pulumi.get(self, "origin_protocol_policy")

    @origin_protocol_policy.setter
    def origin_protocol_policy(self, value: pulumi.Input[str]):
        pulumi.set(self, "origin_protocol_policy", value)

    @property
    @pulumi.getter(name="originSslProtocols")
    def origin_ssl_protocols(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "origin_ssl_protocols")

    @origin_ssl_protocols.setter
    def origin_ssl_protocols(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "origin_ssl_protocols", value)

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[pulumi.Input[int]]:
        """
        Defaults to `80`.
        """
        return pulumi.get(self, "http_port")

    @http_port.setter
    def http_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_port", value)

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> Optional[pulumi.Input[int]]:
        """
        Defaults to `443`.
        """
        return pulumi.get(self, "https_port")

    @https_port.setter
    def https_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "https_port", value)

    @property
    @pulumi.getter(name="originKeepaliveTimeout")
    def origin_keepalive_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Defaults to `5`.
        """
        return pulumi.get(self, "origin_keepalive_timeout")

    @origin_keepalive_timeout.setter
    def origin_keepalive_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "origin_keepalive_timeout", value)

    @property
    @pulumi.getter(name="originReadTimeout")
    def origin_read_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Defaults to `30`.
        """
        return pulumi.get(self, "origin_read_timeout")

    @origin_read_timeout.setter
    def origin_read_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "origin_read_timeout", value)


if not MYPY:
    class AwsCloudfrontDistributionOriginGroupArgsDict(TypedDict):
        failover_criteria: pulumi.Input['AwsCloudfrontDistributionOriginGroupFailoverCriteriaArgsDict']
        members: pulumi.Input[Sequence[pulumi.Input['AwsCloudfrontDistributionOriginGroupMemberArgsDict']]]
        origin_id: pulumi.Input[str]
elif False:
    AwsCloudfrontDistributionOriginGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsCloudfrontDistributionOriginGroupArgs:
    def __init__(__self__, *,
                 failover_criteria: pulumi.Input['AwsCloudfrontDistributionOriginGroupFailoverCriteriaArgs'],
                 members: pulumi.Input[Sequence[pulumi.Input['AwsCloudfrontDistributionOriginGroupMemberArgs']]],
                 origin_id: pulumi.Input[str]):
        pulumi.set(__self__, "failover_criteria", failover_criteria)
        pulumi.set(__self__, "members", members)
        pulumi.set(__self__, "origin_id", origin_id)

    @property
    @pulumi.getter(name="failoverCriteria")
    def failover_criteria(self) -> pulumi.Input['AwsCloudfrontDistributionOriginGroupFailoverCriteriaArgs']:
        return pulumi.get(self, "failover_criteria")

    @failover_criteria.setter
    def failover_criteria(self, value: pulumi.Input['AwsCloudfrontDistributionOriginGroupFailoverCriteriaArgs']):
        pulumi.set(self, "failover_criteria", value)

    @property
    @pulumi.getter
    def members(self) -> pulumi.Input[Sequence[pulumi.Input['AwsCloudfrontDistributionOriginGroupMemberArgs']]]:
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: pulumi.Input[Sequence[pulumi.Input['AwsCloudfrontDistributionOriginGroupMemberArgs']]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "origin_id")

    @origin_id.setter
    def origin_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "origin_id", value)


if not MYPY:
    class AwsCloudfrontDistributionOriginGroupFailoverCriteriaArgsDict(TypedDict):
        status_codes: pulumi.Input[Sequence[pulumi.Input[int]]]
elif False:
    AwsCloudfrontDistributionOriginGroupFailoverCriteriaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsCloudfrontDistributionOriginGroupFailoverCriteriaArgs:
    def __init__(__self__, *,
                 status_codes: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(__self__, "status_codes", status_codes)

    @property
    @pulumi.getter(name="statusCodes")
    def status_codes(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        return pulumi.get(self, "status_codes")

    @status_codes.setter
    def status_codes(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "status_codes", value)


if not MYPY:
    class AwsCloudfrontDistributionOriginGroupMemberArgsDict(TypedDict):
        origin_id: pulumi.Input[str]
elif False:
    AwsCloudfrontDistributionOriginGroupMemberArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsCloudfrontDistributionOriginGroupMemberArgs:
    def __init__(__self__, *,
                 origin_id: pulumi.Input[str]):
        pulumi.set(__self__, "origin_id", origin_id)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "origin_id")

    @origin_id.setter
    def origin_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "origin_id", value)


if not MYPY:
    class AwsCloudfrontDistributionOriginOriginShieldArgsDict(TypedDict):
        enabled: pulumi.Input[bool]
        origin_shield_region: pulumi.Input[str]
elif False:
    AwsCloudfrontDistributionOriginOriginShieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsCloudfrontDistributionOriginOriginShieldArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 origin_shield_region: pulumi.Input[str]):
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "origin_shield_region", origin_shield_region)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="originShieldRegion")
    def origin_shield_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "origin_shield_region")

    @origin_shield_region.setter
    def origin_shield_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "origin_shield_region", value)


if not MYPY:
    class AwsCloudfrontDistributionOriginS3OriginConfigArgsDict(TypedDict):
        origin_access_identity: NotRequired[pulumi.Input[str]]
elif False:
    AwsCloudfrontDistributionOriginS3OriginConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsCloudfrontDistributionOriginS3OriginConfigArgs:
    def __init__(__self__, *,
                 origin_access_identity: Optional[pulumi.Input[str]] = None):
        if origin_access_identity is not None:
            pulumi.set(__self__, "origin_access_identity", origin_access_identity)

    @property
    @pulumi.getter(name="originAccessIdentity")
    def origin_access_identity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "origin_access_identity")

    @origin_access_identity.setter
    def origin_access_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin_access_identity", value)


if not MYPY:
    class AwsCloudfrontDistributionRestrictionsArgsDict(TypedDict):
        geo_restriction: pulumi.Input['AwsCloudfrontDistributionRestrictionsGeoRestrictionArgsDict']
elif False:
    AwsCloudfrontDistributionRestrictionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsCloudfrontDistributionRestrictionsArgs:
    def __init__(__self__, *,
                 geo_restriction: pulumi.Input['AwsCloudfrontDistributionRestrictionsGeoRestrictionArgs']):
        pulumi.set(__self__, "geo_restriction", geo_restriction)

    @property
    @pulumi.getter(name="geoRestriction")
    def geo_restriction(self) -> pulumi.Input['AwsCloudfrontDistributionRestrictionsGeoRestrictionArgs']:
        return pulumi.get(self, "geo_restriction")

    @geo_restriction.setter
    def geo_restriction(self, value: pulumi.Input['AwsCloudfrontDistributionRestrictionsGeoRestrictionArgs']):
        pulumi.set(self, "geo_restriction", value)


if not MYPY:
    class AwsCloudfrontDistributionRestrictionsGeoRestrictionArgsDict(TypedDict):
        restriction_type: pulumi.Input[str]
        locations: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    AwsCloudfrontDistributionRestrictionsGeoRestrictionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsCloudfrontDistributionRestrictionsGeoRestrictionArgs:
    def __init__(__self__, *,
                 restriction_type: pulumi.Input[str],
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "restriction_type", restriction_type)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)

    @property
    @pulumi.getter(name="restrictionType")
    def restriction_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "restriction_type")

    @restriction_type.setter
    def restriction_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "restriction_type", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "locations", value)


if not MYPY:
    class AwsCloudfrontDistributionViewerCertificateArgsDict(TypedDict):
        acm_certificate_arn: NotRequired[pulumi.Input[str]]
        cloudfront_default_certificate: NotRequired[pulumi.Input[bool]]
        iam_certificate_id: NotRequired[pulumi.Input[str]]
        minimum_protocol_version: NotRequired[pulumi.Input[str]]
        """
        Defaults to `TLSv1.2_2021`.
        """
        ssl_support_method: NotRequired[pulumi.Input[str]]
        """
        Defaults to `sni-only`.
        """
elif False:
    AwsCloudfrontDistributionViewerCertificateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsCloudfrontDistributionViewerCertificateArgs:
    def __init__(__self__, *,
                 acm_certificate_arn: Optional[pulumi.Input[str]] = None,
                 cloudfront_default_certificate: Optional[pulumi.Input[bool]] = None,
                 iam_certificate_id: Optional[pulumi.Input[str]] = None,
                 minimum_protocol_version: Optional[pulumi.Input[str]] = None,
                 ssl_support_method: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] minimum_protocol_version: Defaults to `TLSv1.2_2021`.
        :param pulumi.Input[str] ssl_support_method: Defaults to `sni-only`.
        """
        if acm_certificate_arn is not None:
            pulumi.set(__self__, "acm_certificate_arn", acm_certificate_arn)
        if cloudfront_default_certificate is not None:
            pulumi.set(__self__, "cloudfront_default_certificate", cloudfront_default_certificate)
        if iam_certificate_id is not None:
            pulumi.set(__self__, "iam_certificate_id", iam_certificate_id)
        if minimum_protocol_version is not None:
            pulumi.set(__self__, "minimum_protocol_version", minimum_protocol_version)
        if ssl_support_method is not None:
            pulumi.set(__self__, "ssl_support_method", ssl_support_method)

    @property
    @pulumi.getter(name="acmCertificateArn")
    def acm_certificate_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acm_certificate_arn")

    @acm_certificate_arn.setter
    def acm_certificate_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acm_certificate_arn", value)

    @property
    @pulumi.getter(name="cloudfrontDefaultCertificate")
    def cloudfront_default_certificate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "cloudfront_default_certificate")

    @cloudfront_default_certificate.setter
    def cloudfront_default_certificate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cloudfront_default_certificate", value)

    @property
    @pulumi.getter(name="iamCertificateId")
    def iam_certificate_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "iam_certificate_id")

    @iam_certificate_id.setter
    def iam_certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iam_certificate_id", value)

    @property
    @pulumi.getter(name="minimumProtocolVersion")
    def minimum_protocol_version(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `TLSv1.2_2021`.
        """
        return pulumi.get(self, "minimum_protocol_version")

    @minimum_protocol_version.setter
    def minimum_protocol_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "minimum_protocol_version", value)

    @property
    @pulumi.getter(name="sslSupportMethod")
    def ssl_support_method(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `sni-only`.
        """
        return pulumi.get(self, "ssl_support_method")

    @ssl_support_method.setter
    def ssl_support_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_support_method", value)


if not MYPY:
    class AwsCloudwatchEventRuleTagArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    AwsCloudwatchEventRuleTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsCloudwatchEventRuleTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AwsCloudwatchMetricAlarmDimensionArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    AwsCloudwatchMetricAlarmDimensionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsCloudwatchMetricAlarmDimensionArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AwsDynamodbTableV2AttributeArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        The name of the attribute
        """
        type: pulumi.Input[str]
        """
        Attribute type, which must be a scalar type: `S`, `N`, or `B` for (S)tring, (N)umber or (B)inary data
        """
elif False:
    AwsDynamodbTableV2AttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsDynamodbTableV2AttributeArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The name of the attribute
        :param pulumi.Input[str] type: Attribute type, which must be a scalar type: `S`, `N`, or `B` for (S)tring, (N)umber or (B)inary data
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the attribute
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Attribute type, which must be a scalar type: `S`, `N`, or `B` for (S)tring, (N)umber or (B)inary data
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class AwsDynamodbTableV2GlobalSecondaryIndexArgsDict(TypedDict):
        hash_key: pulumi.Input[str]
        """
        The name of the hash key in the index; must be defined as an attribute in the resource.
        """
        name: pulumi.Input[str]
        """
        The name of the index.
        """
        projection_type: pulumi.Input[str]
        """
        One of `ALL`, `INCLUDE` or `KEYS_ONLY` where `ALL` projects every attribute into the index, `KEYS_ONLY` projects just the hash and range key into the index, and `INCLUDE` projects only the keys specified in the `non_key_attributes` parameter.
        """
        non_key_attributes: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Only required with `INCLUDE` as a projection type; a list of attributes to project into the index. These do not need to be defined as attributes on the table.
        """
        range_key: NotRequired[pulumi.Input[str]]
        """
        The name of the range key; must be defined.
        """
        read_capacity: NotRequired[pulumi.Input[int]]
        """
        The number of read units for this index. Must be set if `billing_mode` is set to `PROVISIONED`.
        """
        write_capacity: NotRequired[pulumi.Input[int]]
        """
        The number of write units for this index. Must be set if `billing_mode` is set to `PROVISIONED`.
        """
elif False:
    AwsDynamodbTableV2GlobalSecondaryIndexArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsDynamodbTableV2GlobalSecondaryIndexArgs:
    def __init__(__self__, *,
                 hash_key: pulumi.Input[str],
                 name: pulumi.Input[str],
                 projection_type: pulumi.Input[str],
                 non_key_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 range_key: Optional[pulumi.Input[str]] = None,
                 read_capacity: Optional[pulumi.Input[int]] = None,
                 write_capacity: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] hash_key: The name of the hash key in the index; must be defined as an attribute in the resource.
        :param pulumi.Input[str] name: The name of the index.
        :param pulumi.Input[str] projection_type: One of `ALL`, `INCLUDE` or `KEYS_ONLY` where `ALL` projects every attribute into the index, `KEYS_ONLY` projects just the hash and range key into the index, and `INCLUDE` projects only the keys specified in the `non_key_attributes` parameter.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] non_key_attributes: Only required with `INCLUDE` as a projection type; a list of attributes to project into the index. These do not need to be defined as attributes on the table.
        :param pulumi.Input[str] range_key: The name of the range key; must be defined.
        :param pulumi.Input[int] read_capacity: The number of read units for this index. Must be set if `billing_mode` is set to `PROVISIONED`.
        :param pulumi.Input[int] write_capacity: The number of write units for this index. Must be set if `billing_mode` is set to `PROVISIONED`.
        """
        pulumi.set(__self__, "hash_key", hash_key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "projection_type", projection_type)
        if non_key_attributes is not None:
            pulumi.set(__self__, "non_key_attributes", non_key_attributes)
        if range_key is not None:
            pulumi.set(__self__, "range_key", range_key)
        if read_capacity is not None:
            pulumi.set(__self__, "read_capacity", read_capacity)
        if write_capacity is not None:
            pulumi.set(__self__, "write_capacity", write_capacity)

    @property
    @pulumi.getter(name="hashKey")
    def hash_key(self) -> pulumi.Input[str]:
        """
        The name of the hash key in the index; must be defined as an attribute in the resource.
        """
        return pulumi.get(self, "hash_key")

    @hash_key.setter
    def hash_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "hash_key", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the index.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="projectionType")
    def projection_type(self) -> pulumi.Input[str]:
        """
        One of `ALL`, `INCLUDE` or `KEYS_ONLY` where `ALL` projects every attribute into the index, `KEYS_ONLY` projects just the hash and range key into the index, and `INCLUDE` projects only the keys specified in the `non_key_attributes` parameter.
        """
        return pulumi.get(self, "projection_type")

    @projection_type.setter
    def projection_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "projection_type", value)

    @property
    @pulumi.getter(name="nonKeyAttributes")
    def non_key_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Only required with `INCLUDE` as a projection type; a list of attributes to project into the index. These do not need to be defined as attributes on the table.
        """
        return pulumi.get(self, "non_key_attributes")

    @non_key_attributes.setter
    def non_key_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "non_key_attributes", value)

    @property
    @pulumi.getter(name="rangeKey")
    def range_key(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the range key; must be defined.
        """
        return pulumi.get(self, "range_key")

    @range_key.setter
    def range_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "range_key", value)

    @property
    @pulumi.getter(name="readCapacity")
    def read_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        The number of read units for this index. Must be set if `billing_mode` is set to `PROVISIONED`.
        """
        return pulumi.get(self, "read_capacity")

    @read_capacity.setter
    def read_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "read_capacity", value)

    @property
    @pulumi.getter(name="writeCapacity")
    def write_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        The number of write units for this index. Must be set if `billing_mode` is set to `PROVISIONED`.
        """
        return pulumi.get(self, "write_capacity")

    @write_capacity.setter
    def write_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "write_capacity", value)


if not MYPY:
    class AwsDynamodbTableV2KeySchemaArgsDict(TypedDict):
        attribute_name: pulumi.Input[str]
        """
        The name of the attribute
        """
        key_type: pulumi.Input[str]
        """
        Applicable key types are `HASH` or `RANGE`.
        """
elif False:
    AwsDynamodbTableV2KeySchemaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsDynamodbTableV2KeySchemaArgs:
    def __init__(__self__, *,
                 attribute_name: pulumi.Input[str],
                 key_type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] attribute_name: The name of the attribute
        :param pulumi.Input[str] key_type: Applicable key types are `HASH` or `RANGE`.
        """
        pulumi.set(__self__, "attribute_name", attribute_name)
        pulumi.set(__self__, "key_type", key_type)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> pulumi.Input[str]:
        """
        The name of the attribute
        """
        return pulumi.get(self, "attribute_name")

    @attribute_name.setter
    def attribute_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute_name", value)

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> pulumi.Input[str]:
        """
        Applicable key types are `HASH` or `RANGE`.
        """
        return pulumi.get(self, "key_type")

    @key_type.setter
    def key_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_type", value)


if not MYPY:
    class AwsDynamodbTableV2LocalSecondaryIndexArgsDict(TypedDict):
        hash_key: pulumi.Input[str]
        """
        The name of the hash key in the index; must be defined as an attribute in the resource.
        """
        name: pulumi.Input[str]
        """
        The name of the index.
        """
        projection_type: pulumi.Input[str]
        """
        One of `ALL`, `INCLUDE` or `KEYS_ONLY` where `ALL` projects every attribute into the index, `KEYS_ONLY` projects just the hash and range key into the index, and `INCLUDE` projects only the keys specified in the `non_key_attributes` parameter.
        """
        range_key: pulumi.Input[str]
        """
        The name of the range key; must be defined.
        """
        non_key_attributes: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Only required with `INCLUDE` as a projection type; a list of attributes to project into the index. These do not need to be defined as attributes on the table.
        """
elif False:
    AwsDynamodbTableV2LocalSecondaryIndexArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsDynamodbTableV2LocalSecondaryIndexArgs:
    def __init__(__self__, *,
                 hash_key: pulumi.Input[str],
                 name: pulumi.Input[str],
                 projection_type: pulumi.Input[str],
                 range_key: pulumi.Input[str],
                 non_key_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] hash_key: The name of the hash key in the index; must be defined as an attribute in the resource.
        :param pulumi.Input[str] name: The name of the index.
        :param pulumi.Input[str] projection_type: One of `ALL`, `INCLUDE` or `KEYS_ONLY` where `ALL` projects every attribute into the index, `KEYS_ONLY` projects just the hash and range key into the index, and `INCLUDE` projects only the keys specified in the `non_key_attributes` parameter.
        :param pulumi.Input[str] range_key: The name of the range key; must be defined.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] non_key_attributes: Only required with `INCLUDE` as a projection type; a list of attributes to project into the index. These do not need to be defined as attributes on the table.
        """
        pulumi.set(__self__, "hash_key", hash_key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "projection_type", projection_type)
        pulumi.set(__self__, "range_key", range_key)
        if non_key_attributes is not None:
            pulumi.set(__self__, "non_key_attributes", non_key_attributes)

    @property
    @pulumi.getter(name="hashKey")
    def hash_key(self) -> pulumi.Input[str]:
        """
        The name of the hash key in the index; must be defined as an attribute in the resource.
        """
        return pulumi.get(self, "hash_key")

    @hash_key.setter
    def hash_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "hash_key", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the index.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="projectionType")
    def projection_type(self) -> pulumi.Input[str]:
        """
        One of `ALL`, `INCLUDE` or `KEYS_ONLY` where `ALL` projects every attribute into the index, `KEYS_ONLY` projects just the hash and range key into the index, and `INCLUDE` projects only the keys specified in the `non_key_attributes` parameter.
        """
        return pulumi.get(self, "projection_type")

    @projection_type.setter
    def projection_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "projection_type", value)

    @property
    @pulumi.getter(name="rangeKey")
    def range_key(self) -> pulumi.Input[str]:
        """
        The name of the range key; must be defined.
        """
        return pulumi.get(self, "range_key")

    @range_key.setter
    def range_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "range_key", value)

    @property
    @pulumi.getter(name="nonKeyAttributes")
    def non_key_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Only required with `INCLUDE` as a projection type; a list of attributes to project into the index. These do not need to be defined as attributes on the table.
        """
        return pulumi.get(self, "non_key_attributes")

    @non_key_attributes.setter
    def non_key_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "non_key_attributes", value)


if not MYPY:
    class AwsDynamodbTableV2ServerSideEncryptionArgsDict(TypedDict):
        enabled: pulumi.Input[bool]
        """
        Whether or not to enable encryption at rest using an AWS managed KMS customer master key (CMK).
        """
        kms_key_arn: NotRequired[pulumi.Input[str]]
        """
        The ARN of the CMK that should be used for the AWS KMS encryption.
        """
elif False:
    AwsDynamodbTableV2ServerSideEncryptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsDynamodbTableV2ServerSideEncryptionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 kms_key_arn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: Whether or not to enable encryption at rest using an AWS managed KMS customer master key (CMK).
        :param pulumi.Input[str] kms_key_arn: The ARN of the CMK that should be used for the AWS KMS encryption.
        """
        pulumi.set(__self__, "enabled", enabled)
        if kms_key_arn is not None:
            pulumi.set(__self__, "kms_key_arn", kms_key_arn)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Whether or not to enable encryption at rest using an AWS managed KMS customer master key (CMK).
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the CMK that should be used for the AWS KMS encryption.
        """
        return pulumi.get(self, "kms_key_arn")

    @kms_key_arn.setter
    def kms_key_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_arn", value)


if not MYPY:
    class AwsDynamodbTableV2TagArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    AwsDynamodbTableV2TagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsDynamodbTableV2TagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AwsDynamodbTableV2TtlArgsDict(TypedDict):
        attribute_name: pulumi.Input[str]
        """
        The name of the attribute that will be stored in the ttl timestamp
        """
        enabled: pulumi.Input[bool]
        """
        Status of the ttl
        """
elif False:
    AwsDynamodbTableV2TtlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsDynamodbTableV2TtlArgs:
    def __init__(__self__, *,
                 attribute_name: pulumi.Input[str],
                 enabled: pulumi.Input[bool]):
        """
        :param pulumi.Input[str] attribute_name: The name of the attribute that will be stored in the ttl timestamp
        :param pulumi.Input[bool] enabled: Status of the ttl
        """
        pulumi.set(__self__, "attribute_name", attribute_name)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> pulumi.Input[str]:
        """
        The name of the attribute that will be stored in the ttl timestamp
        """
        return pulumi.get(self, "attribute_name")

    @attribute_name.setter
    def attribute_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute_name", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Status of the ttl
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class AwsEfsFileSystemLifecyclePolicyArgsDict(TypedDict):
        transition_to_archive: NotRequired[pulumi.Input[str]]
        """
        Indicates how long it takes to transition files to the archive storage class. Requires transition*to*ia, Elastic Throughput and General Purpose performance mode. Valid values: `AFTER_1_DAY`, `AFTER_7_DAYS`, `AFTER_14_DAYS`, `AFTER_30_DAYS`, `AFTER_60_DAYS`, or `AFTER_90_DAYS`
        """
        transition_to_ia: NotRequired[pulumi.Input[str]]
        """
        Indicates how long it takes to transition files to the IA storage class. Valid values: `AFTER_1_DAY`, `AFTER_7_DAYS`, `AFTER_14_DAYS`, `AFTER_30_DAYS`, `AFTER_60_DAYS`, or `AFTER_90_DAYS`
        """
        transition_to_primary_storage_class: NotRequired[pulumi.Input[str]]
        """
        Describes the policy used to transition a file from infequent access storage to primary storage. Valid values: `AFTER_1_ACCESS`
        """
elif False:
    AwsEfsFileSystemLifecyclePolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsEfsFileSystemLifecyclePolicyArgs:
    def __init__(__self__, *,
                 transition_to_archive: Optional[pulumi.Input[str]] = None,
                 transition_to_ia: Optional[pulumi.Input[str]] = None,
                 transition_to_primary_storage_class: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] transition_to_archive: Indicates how long it takes to transition files to the archive storage class. Requires transition*to*ia, Elastic Throughput and General Purpose performance mode. Valid values: `AFTER_1_DAY`, `AFTER_7_DAYS`, `AFTER_14_DAYS`, `AFTER_30_DAYS`, `AFTER_60_DAYS`, or `AFTER_90_DAYS`
        :param pulumi.Input[str] transition_to_ia: Indicates how long it takes to transition files to the IA storage class. Valid values: `AFTER_1_DAY`, `AFTER_7_DAYS`, `AFTER_14_DAYS`, `AFTER_30_DAYS`, `AFTER_60_DAYS`, or `AFTER_90_DAYS`
        :param pulumi.Input[str] transition_to_primary_storage_class: Describes the policy used to transition a file from infequent access storage to primary storage. Valid values: `AFTER_1_ACCESS`
        """
        if transition_to_archive is not None:
            pulumi.set(__self__, "transition_to_archive", transition_to_archive)
        if transition_to_ia is not None:
            pulumi.set(__self__, "transition_to_ia", transition_to_ia)
        if transition_to_primary_storage_class is not None:
            pulumi.set(__self__, "transition_to_primary_storage_class", transition_to_primary_storage_class)

    @property
    @pulumi.getter(name="transitionToArchive")
    def transition_to_archive(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates how long it takes to transition files to the archive storage class. Requires transition*to*ia, Elastic Throughput and General Purpose performance mode. Valid values: `AFTER_1_DAY`, `AFTER_7_DAYS`, `AFTER_14_DAYS`, `AFTER_30_DAYS`, `AFTER_60_DAYS`, or `AFTER_90_DAYS`
        """
        return pulumi.get(self, "transition_to_archive")

    @transition_to_archive.setter
    def transition_to_archive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transition_to_archive", value)

    @property
    @pulumi.getter(name="transitionToIa")
    def transition_to_ia(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates how long it takes to transition files to the IA storage class. Valid values: `AFTER_1_DAY`, `AFTER_7_DAYS`, `AFTER_14_DAYS`, `AFTER_30_DAYS`, `AFTER_60_DAYS`, or `AFTER_90_DAYS`
        """
        return pulumi.get(self, "transition_to_ia")

    @transition_to_ia.setter
    def transition_to_ia(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transition_to_ia", value)

    @property
    @pulumi.getter(name="transitionToPrimaryStorageClass")
    def transition_to_primary_storage_class(self) -> Optional[pulumi.Input[str]]:
        """
        Describes the policy used to transition a file from infequent access storage to primary storage. Valid values: `AFTER_1_ACCESS`
        """
        return pulumi.get(self, "transition_to_primary_storage_class")

    @transition_to_primary_storage_class.setter
    def transition_to_primary_storage_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transition_to_primary_storage_class", value)


if not MYPY:
    class AwsEfsFileSystemMountTargetArgsDict(TypedDict):
        availability_zone: NotRequired[pulumi.Input[str]]
        ip_address: NotRequired[pulumi.Input[str]]
        lifecycle_state: NotRequired[pulumi.Input[str]]
        mount_target_id: NotRequired[pulumi.Input[str]]
        subnet_id: NotRequired[pulumi.Input[str]]
elif False:
    AwsEfsFileSystemMountTargetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsEfsFileSystemMountTargetArgs:
    def __init__(__self__, *,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 lifecycle_state: Optional[pulumi.Input[str]] = None,
                 mount_target_id: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None):
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if lifecycle_state is not None:
            pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if mount_target_id is not None:
            pulumi.set(__self__, "mount_target_id", mount_target_id)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lifecycle_state")

    @lifecycle_state.setter
    def lifecycle_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_state", value)

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mount_target_id")

    @mount_target_id.setter
    def mount_target_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target_id", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)


if not MYPY:
    class AwsEfsFileSystemTagArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    AwsEfsFileSystemTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsEfsFileSystemTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AwsEfsLifecyclePolicyLifecyclePolicyArgsDict(TypedDict):
        transition_to_archive: NotRequired[pulumi.Input[str]]
        """
        Indicates how long it takes to transition files to the archive storage class. Requires transition*to*ia, Elastic Throughput and General Purpose performance mode. Valid values: `AFTER_1_DAY`, `AFTER_7_DAYS`, `AFTER_14_DAYS`, `AFTER_30_DAYS`, `AFTER_60_DAYS`, or `AFTER_90_DAYS`
        """
        transition_to_ia: NotRequired[pulumi.Input[str]]
        """
        Indicates how long it takes to transition files to the IA storage class. Valid values: `AFTER_1_DAY`, `AFTER_7_DAYS`, `AFTER_14_DAYS`, `AFTER_30_DAYS`, `AFTER_60_DAYS`, or `AFTER_90_DAYS`
        """
        transition_to_primary_storage_class: NotRequired[pulumi.Input[str]]
        """
        Describes the policy used to transition a file from infequent access storage to primary storage. Valid values: `AFTER_1_ACCESS`
        """
elif False:
    AwsEfsLifecyclePolicyLifecyclePolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsEfsLifecyclePolicyLifecyclePolicyArgs:
    def __init__(__self__, *,
                 transition_to_archive: Optional[pulumi.Input[str]] = None,
                 transition_to_ia: Optional[pulumi.Input[str]] = None,
                 transition_to_primary_storage_class: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] transition_to_archive: Indicates how long it takes to transition files to the archive storage class. Requires transition*to*ia, Elastic Throughput and General Purpose performance mode. Valid values: `AFTER_1_DAY`, `AFTER_7_DAYS`, `AFTER_14_DAYS`, `AFTER_30_DAYS`, `AFTER_60_DAYS`, or `AFTER_90_DAYS`
        :param pulumi.Input[str] transition_to_ia: Indicates how long it takes to transition files to the IA storage class. Valid values: `AFTER_1_DAY`, `AFTER_7_DAYS`, `AFTER_14_DAYS`, `AFTER_30_DAYS`, `AFTER_60_DAYS`, or `AFTER_90_DAYS`
        :param pulumi.Input[str] transition_to_primary_storage_class: Describes the policy used to transition a file from infequent access storage to primary storage. Valid values: `AFTER_1_ACCESS`
        """
        if transition_to_archive is not None:
            pulumi.set(__self__, "transition_to_archive", transition_to_archive)
        if transition_to_ia is not None:
            pulumi.set(__self__, "transition_to_ia", transition_to_ia)
        if transition_to_primary_storage_class is not None:
            pulumi.set(__self__, "transition_to_primary_storage_class", transition_to_primary_storage_class)

    @property
    @pulumi.getter(name="transitionToArchive")
    def transition_to_archive(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates how long it takes to transition files to the archive storage class. Requires transition*to*ia, Elastic Throughput and General Purpose performance mode. Valid values: `AFTER_1_DAY`, `AFTER_7_DAYS`, `AFTER_14_DAYS`, `AFTER_30_DAYS`, `AFTER_60_DAYS`, or `AFTER_90_DAYS`
        """
        return pulumi.get(self, "transition_to_archive")

    @transition_to_archive.setter
    def transition_to_archive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transition_to_archive", value)

    @property
    @pulumi.getter(name="transitionToIa")
    def transition_to_ia(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates how long it takes to transition files to the IA storage class. Valid values: `AFTER_1_DAY`, `AFTER_7_DAYS`, `AFTER_14_DAYS`, `AFTER_30_DAYS`, `AFTER_60_DAYS`, or `AFTER_90_DAYS`
        """
        return pulumi.get(self, "transition_to_ia")

    @transition_to_ia.setter
    def transition_to_ia(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transition_to_ia", value)

    @property
    @pulumi.getter(name="transitionToPrimaryStorageClass")
    def transition_to_primary_storage_class(self) -> Optional[pulumi.Input[str]]:
        """
        Describes the policy used to transition a file from infequent access storage to primary storage. Valid values: `AFTER_1_ACCESS`
        """
        return pulumi.get(self, "transition_to_primary_storage_class")

    @transition_to_primary_storage_class.setter
    def transition_to_primary_storage_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transition_to_primary_storage_class", value)


if not MYPY:
    class AwsElasticsearchClusterConfigArgsDict(TypedDict):
        cold_storage_options: NotRequired[pulumi.Input['AwsElasticsearchClusterConfigColdStorageOptionsArgsDict']]
        dedicated_master_count: NotRequired[pulumi.Input[int]]
        """
        Defaults to `0`.
        """
        dedicated_master_enabled: NotRequired[pulumi.Input[bool]]
        """
        Defaults to `false`.
        """
        dedicated_master_type: NotRequired[pulumi.Input[str]]
        """
        Defaults to `t2.small.elasticsearch`.
        """
        instance_count: NotRequired[pulumi.Input[int]]
        """
        Defaults to `1`.
        """
        instance_type: NotRequired[pulumi.Input[str]]
        """
        Defaults to `t2.small.elasticsearch`.
        """
        multi_az_with_standby_enabled: NotRequired[pulumi.Input[bool]]
        warm_count: NotRequired[pulumi.Input[int]]
        warm_enabled: NotRequired[pulumi.Input[bool]]
        warm_type: NotRequired[pulumi.Input[str]]
elif False:
    AwsElasticsearchClusterConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsElasticsearchClusterConfigArgs:
    def __init__(__self__, *,
                 cold_storage_options: Optional[pulumi.Input['AwsElasticsearchClusterConfigColdStorageOptionsArgs']] = None,
                 dedicated_master_count: Optional[pulumi.Input[int]] = None,
                 dedicated_master_enabled: Optional[pulumi.Input[bool]] = None,
                 dedicated_master_type: Optional[pulumi.Input[str]] = None,
                 instance_count: Optional[pulumi.Input[int]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 multi_az_with_standby_enabled: Optional[pulumi.Input[bool]] = None,
                 warm_count: Optional[pulumi.Input[int]] = None,
                 warm_enabled: Optional[pulumi.Input[bool]] = None,
                 warm_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] dedicated_master_count: Defaults to `0`.
        :param pulumi.Input[bool] dedicated_master_enabled: Defaults to `false`.
        :param pulumi.Input[str] dedicated_master_type: Defaults to `t2.small.elasticsearch`.
        :param pulumi.Input[int] instance_count: Defaults to `1`.
        :param pulumi.Input[str] instance_type: Defaults to `t2.small.elasticsearch`.
        """
        if cold_storage_options is not None:
            pulumi.set(__self__, "cold_storage_options", cold_storage_options)
        if dedicated_master_count is not None:
            pulumi.set(__self__, "dedicated_master_count", dedicated_master_count)
        if dedicated_master_enabled is not None:
            pulumi.set(__self__, "dedicated_master_enabled", dedicated_master_enabled)
        if dedicated_master_type is not None:
            pulumi.set(__self__, "dedicated_master_type", dedicated_master_type)
        if instance_count is not None:
            pulumi.set(__self__, "instance_count", instance_count)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if multi_az_with_standby_enabled is not None:
            pulumi.set(__self__, "multi_az_with_standby_enabled", multi_az_with_standby_enabled)
        if warm_count is not None:
            pulumi.set(__self__, "warm_count", warm_count)
        if warm_enabled is not None:
            pulumi.set(__self__, "warm_enabled", warm_enabled)
        if warm_type is not None:
            pulumi.set(__self__, "warm_type", warm_type)

    @property
    @pulumi.getter(name="coldStorageOptions")
    def cold_storage_options(self) -> Optional[pulumi.Input['AwsElasticsearchClusterConfigColdStorageOptionsArgs']]:
        return pulumi.get(self, "cold_storage_options")

    @cold_storage_options.setter
    def cold_storage_options(self, value: Optional[pulumi.Input['AwsElasticsearchClusterConfigColdStorageOptionsArgs']]):
        pulumi.set(self, "cold_storage_options", value)

    @property
    @pulumi.getter(name="dedicatedMasterCount")
    def dedicated_master_count(self) -> Optional[pulumi.Input[int]]:
        """
        Defaults to `0`.
        """
        return pulumi.get(self, "dedicated_master_count")

    @dedicated_master_count.setter
    def dedicated_master_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dedicated_master_count", value)

    @property
    @pulumi.getter(name="dedicatedMasterEnabled")
    def dedicated_master_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "dedicated_master_enabled")

    @dedicated_master_enabled.setter
    def dedicated_master_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dedicated_master_enabled", value)

    @property
    @pulumi.getter(name="dedicatedMasterType")
    def dedicated_master_type(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `t2.small.elasticsearch`.
        """
        return pulumi.get(self, "dedicated_master_type")

    @dedicated_master_type.setter
    def dedicated_master_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dedicated_master_type", value)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> Optional[pulumi.Input[int]]:
        """
        Defaults to `1`.
        """
        return pulumi.get(self, "instance_count")

    @instance_count.setter
    def instance_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_count", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `t2.small.elasticsearch`.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="multiAzWithStandbyEnabled")
    def multi_az_with_standby_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "multi_az_with_standby_enabled")

    @multi_az_with_standby_enabled.setter
    def multi_az_with_standby_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multi_az_with_standby_enabled", value)

    @property
    @pulumi.getter(name="warmCount")
    def warm_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "warm_count")

    @warm_count.setter
    def warm_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "warm_count", value)

    @property
    @pulumi.getter(name="warmEnabled")
    def warm_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "warm_enabled")

    @warm_enabled.setter
    def warm_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "warm_enabled", value)

    @property
    @pulumi.getter(name="warmType")
    def warm_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "warm_type")

    @warm_type.setter
    def warm_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warm_type", value)


if not MYPY:
    class AwsElasticsearchClusterConfigColdStorageOptionsArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
elif False:
    AwsElasticsearchClusterConfigColdStorageOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsElasticsearchClusterConfigColdStorageOptionsArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class AwsElasticsearchEbsOptionArgsDict(TypedDict):
        ebs_enabled: NotRequired[pulumi.Input[bool]]
        iops: NotRequired[pulumi.Input[int]]
        volume_size: NotRequired[pulumi.Input[int]]
        volume_type: NotRequired[pulumi.Input[str]]
elif False:
    AwsElasticsearchEbsOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsElasticsearchEbsOptionArgs:
    def __init__(__self__, *,
                 ebs_enabled: Optional[pulumi.Input[bool]] = None,
                 iops: Optional[pulumi.Input[int]] = None,
                 volume_size: Optional[pulumi.Input[int]] = None,
                 volume_type: Optional[pulumi.Input[str]] = None):
        if ebs_enabled is not None:
            pulumi.set(__self__, "ebs_enabled", ebs_enabled)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if volume_size is not None:
            pulumi.set(__self__, "volume_size", volume_size)
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)

    @property
    @pulumi.getter(name="ebsEnabled")
    def ebs_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ebs_enabled")

    @ebs_enabled.setter
    def ebs_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ebs_enabled", value)

    @property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iops", value)

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "volume_size")

    @volume_size.setter
    def volume_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "volume_size", value)

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "volume_type")

    @volume_type.setter
    def volume_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_type", value)


if not MYPY:
    class AwsElasticsearchEncryptAtRestArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
        kms_key_id: NotRequired[pulumi.Input[str]]
        """
        The ID of a KMS key to use with the ElasticSearch instance.
        """
        kms_key_name: NotRequired[pulumi.Input[str]]
        """
        The name of a KMS key to use with the ElasticSearch instance.
        """
elif False:
    AwsElasticsearchEncryptAtRestArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsElasticsearchEncryptAtRestArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 kms_key_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kms_key_id: The ID of a KMS key to use with the ElasticSearch instance.
        :param pulumi.Input[str] kms_key_name: The name of a KMS key to use with the ElasticSearch instance.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if kms_key_name is not None:
            pulumi.set(__self__, "kms_key_name", kms_key_name)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of a KMS key to use with the ElasticSearch instance.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="kmsKeyName")
    def kms_key_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of a KMS key to use with the ElasticSearch instance.
        """
        return pulumi.get(self, "kms_key_name")

    @kms_key_name.setter
    def kms_key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_name", value)


if not MYPY:
    class AwsElasticsearchSnapshotOptionArgsDict(TypedDict):
        automated_snapshot_start_hour: pulumi.Input[int]
elif False:
    AwsElasticsearchSnapshotOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsElasticsearchSnapshotOptionArgs:
    def __init__(__self__, *,
                 automated_snapshot_start_hour: pulumi.Input[int]):
        pulumi.set(__self__, "automated_snapshot_start_hour", automated_snapshot_start_hour)

    @property
    @pulumi.getter(name="automatedSnapshotStartHour")
    def automated_snapshot_start_hour(self) -> pulumi.Input[int]:
        return pulumi.get(self, "automated_snapshot_start_hour")

    @automated_snapshot_start_hour.setter
    def automated_snapshot_start_hour(self, value: pulumi.Input[int]):
        pulumi.set(self, "automated_snapshot_start_hour", value)


if not MYPY:
    class AwsElasticsearchVpcOptionArgsDict(TypedDict):
        availability_zones: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        security_group_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        subnet_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        vpc_id: NotRequired[pulumi.Input[str]]
elif False:
    AwsElasticsearchVpcOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsElasticsearchVpcOptionArgs:
    def __init__(__self__, *,
                 availability_zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        if availability_zones is not None:
            pulumi.set(__self__, "availability_zones", availability_zones)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "availability_zones")

    @availability_zones.setter
    def availability_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "availability_zones", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnet_ids", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


if not MYPY:
    class AwsHostMetadataArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    AwsHostMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsHostMetadataArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AwsHostMinionTagArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    AwsHostMinionTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsHostMinionTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AwsHostNetworkInterfaceArgsDict(TypedDict):
        associate_public_ip: NotRequired[pulumi.Input[bool]]
        """
        Whether or not to associate a public IP with the newly created ENI.  Cannot be specified if `network_interface_id` is specified.
        """
        device_index: NotRequired[pulumi.Input[int]]
        """
        The device index to pass to AWS for attaching the ENI.  Starts at zero.
        """
        groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        metadatas: NotRequired[pulumi.Input[Sequence[pulumi.Input['AwsHostNetworkInterfaceMetadataArgsDict']]]]
        network_interface_id: NotRequired[pulumi.Input[str]]
        """
        The ID of an ENI to attach to this host.  Cannot be specified if `subnet_id` or `associate_public_ip` is specified.
        """
        subnet_id: NotRequired[pulumi.Input[str]]
        """
        The ID of a subnet in which to create a new ENI.  Cannot be specified if `network_interface_id` is specified.
        """
elif False:
    AwsHostNetworkInterfaceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsHostNetworkInterfaceArgs:
    def __init__(__self__, *,
                 associate_public_ip: Optional[pulumi.Input[bool]] = None,
                 device_index: Optional[pulumi.Input[int]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['AwsHostNetworkInterfaceMetadataArgs']]]] = None,
                 network_interface_id: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] associate_public_ip: Whether or not to associate a public IP with the newly created ENI.  Cannot be specified if `network_interface_id` is specified.
        :param pulumi.Input[int] device_index: The device index to pass to AWS for attaching the ENI.  Starts at zero.
        :param pulumi.Input[str] network_interface_id: The ID of an ENI to attach to this host.  Cannot be specified if `subnet_id` or `associate_public_ip` is specified.
        :param pulumi.Input[str] subnet_id: The ID of a subnet in which to create a new ENI.  Cannot be specified if `network_interface_id` is specified.
        """
        if associate_public_ip is not None:
            pulumi.set(__self__, "associate_public_ip", associate_public_ip)
        if device_index is not None:
            pulumi.set(__self__, "device_index", device_index)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if network_interface_id is not None:
            pulumi.set(__self__, "network_interface_id", network_interface_id)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="associatePublicIp")
    def associate_public_ip(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to associate a public IP with the newly created ENI.  Cannot be specified if `network_interface_id` is specified.
        """
        return pulumi.get(self, "associate_public_ip")

    @associate_public_ip.setter
    def associate_public_ip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "associate_public_ip", value)

    @property
    @pulumi.getter(name="deviceIndex")
    def device_index(self) -> Optional[pulumi.Input[int]]:
        """
        The device index to pass to AWS for attaching the ENI.  Starts at zero.
        """
        return pulumi.get(self, "device_index")

    @device_index.setter
    def device_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "device_index", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AwsHostNetworkInterfaceMetadataArgs']]]]:
        return pulumi.get(self, "metadatas")

    @metadatas.setter
    def metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AwsHostNetworkInterfaceMetadataArgs']]]]):
        pulumi.set(self, "metadatas", value)

    @property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of an ENI to attach to this host.  Cannot be specified if `subnet_id` or `associate_public_ip` is specified.
        """
        return pulumi.get(self, "network_interface_id")

    @network_interface_id.setter
    def network_interface_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_interface_id", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of a subnet in which to create a new ENI.  Cannot be specified if `network_interface_id` is specified.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)


if not MYPY:
    class AwsHostNetworkInterfaceMetadataArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    AwsHostNetworkInterfaceMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsHostNetworkInterfaceMetadataArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AwsHostTagArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    AwsHostTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsHostTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AwsHostTaintArgsDict(TypedDict):
        effect: pulumi.Input[str]
        """
        Update strategy of the node. Effect types <br>      - NoSchedule<br>     - PreferNoSchedule<br>     - NoExecute
        """
        key: pulumi.Input[str]
        value: NotRequired[pulumi.Input[str]]
elif False:
    AwsHostTaintArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsHostTaintArgs:
    def __init__(__self__, *,
                 effect: pulumi.Input[str],
                 key: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] effect: Update strategy of the node. Effect types <br>      - NoSchedule<br>     - PreferNoSchedule<br>     - NoExecute
        """
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> pulumi.Input[str]:
        """
        Update strategy of the node. Effect types <br>      - NoSchedule<br>     - PreferNoSchedule<br>     - NoExecute
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: pulumi.Input[str]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AwsHostVolumeArgsDict(TypedDict):
        iops: NotRequired[pulumi.Input[int]]
        name: NotRequired[pulumi.Input[str]]
        size: NotRequired[pulumi.Input[int]]
        volume_id: NotRequired[pulumi.Input[str]]
        volume_type: NotRequired[pulumi.Input[str]]
elif False:
    AwsHostVolumeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsHostVolumeArgs:
    def __init__(__self__, *,
                 iops: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 volume_id: Optional[pulumi.Input[str]] = None,
                 volume_type: Optional[pulumi.Input[str]] = None):
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)

    @property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iops", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_id", value)

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "volume_type")

    @volume_type.setter
    def volume_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_type", value)


if not MYPY:
    class AwsLambdaFunctionDeadLetterConfigArgsDict(TypedDict):
        target_arn: NotRequired[pulumi.Input[str]]
        """
        ARN of an SNS topic or SQS queue to notify when an invocation fails.
        """
elif False:
    AwsLambdaFunctionDeadLetterConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsLambdaFunctionDeadLetterConfigArgs:
    def __init__(__self__, *,
                 target_arn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] target_arn: ARN of an SNS topic or SQS queue to notify when an invocation fails.
        """
        if target_arn is not None:
            pulumi.set(__self__, "target_arn", target_arn)

    @property
    @pulumi.getter(name="targetArn")
    def target_arn(self) -> Optional[pulumi.Input[str]]:
        """
        ARN of an SNS topic or SQS queue to notify when an invocation fails.
        """
        return pulumi.get(self, "target_arn")

    @target_arn.setter
    def target_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_arn", value)


if not MYPY:
    class AwsLambdaFunctionEnvironmentArgsDict(TypedDict):
        variables: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of environment variables that are accessible from the function code during execution.
        """
elif False:
    AwsLambdaFunctionEnvironmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsLambdaFunctionEnvironmentArgs:
    def __init__(__self__, *,
                 variables: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] variables: Map of environment variables that are accessible from the function code during execution.
        """
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of environment variables that are accessible from the function code during execution.
        """
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "variables", value)


if not MYPY:
    class AwsLambdaFunctionEventConfigDestinationConfigArgsDict(TypedDict):
        on_failure: NotRequired[pulumi.Input['AwsLambdaFunctionEventConfigDestinationConfigOnFailureArgsDict']]
        """
        Configured destination for failed asynchronous invocations
        """
        on_success: NotRequired[pulumi.Input['AwsLambdaFunctionEventConfigDestinationConfigOnSuccessArgsDict']]
        """
        Configured destination for successful asynchronous invocations
        """
elif False:
    AwsLambdaFunctionEventConfigDestinationConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsLambdaFunctionEventConfigDestinationConfigArgs:
    def __init__(__self__, *,
                 on_failure: Optional[pulumi.Input['AwsLambdaFunctionEventConfigDestinationConfigOnFailureArgs']] = None,
                 on_success: Optional[pulumi.Input['AwsLambdaFunctionEventConfigDestinationConfigOnSuccessArgs']] = None):
        """
        :param pulumi.Input['AwsLambdaFunctionEventConfigDestinationConfigOnFailureArgs'] on_failure: Configured destination for failed asynchronous invocations
        :param pulumi.Input['AwsLambdaFunctionEventConfigDestinationConfigOnSuccessArgs'] on_success: Configured destination for successful asynchronous invocations
        """
        if on_failure is not None:
            pulumi.set(__self__, "on_failure", on_failure)
        if on_success is not None:
            pulumi.set(__self__, "on_success", on_success)

    @property
    @pulumi.getter(name="onFailure")
    def on_failure(self) -> Optional[pulumi.Input['AwsLambdaFunctionEventConfigDestinationConfigOnFailureArgs']]:
        """
        Configured destination for failed asynchronous invocations
        """
        return pulumi.get(self, "on_failure")

    @on_failure.setter
    def on_failure(self, value: Optional[pulumi.Input['AwsLambdaFunctionEventConfigDestinationConfigOnFailureArgs']]):
        pulumi.set(self, "on_failure", value)

    @property
    @pulumi.getter(name="onSuccess")
    def on_success(self) -> Optional[pulumi.Input['AwsLambdaFunctionEventConfigDestinationConfigOnSuccessArgs']]:
        """
        Configured destination for successful asynchronous invocations
        """
        return pulumi.get(self, "on_success")

    @on_success.setter
    def on_success(self, value: Optional[pulumi.Input['AwsLambdaFunctionEventConfigDestinationConfigOnSuccessArgs']]):
        pulumi.set(self, "on_success", value)


if not MYPY:
    class AwsLambdaFunctionEventConfigDestinationConfigOnFailureArgsDict(TypedDict):
        destination: pulumi.Input[str]
        """
        The AWS ARN of the destination resource
        """
elif False:
    AwsLambdaFunctionEventConfigDestinationConfigOnFailureArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsLambdaFunctionEventConfigDestinationConfigOnFailureArgs:
    def __init__(__self__, *,
                 destination: pulumi.Input[str]):
        """
        :param pulumi.Input[str] destination: The AWS ARN of the destination resource
        """
        pulumi.set(__self__, "destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Input[str]:
        """
        The AWS ARN of the destination resource
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination", value)


if not MYPY:
    class AwsLambdaFunctionEventConfigDestinationConfigOnSuccessArgsDict(TypedDict):
        destination: pulumi.Input[str]
        """
        The AWS ARN of the destination resource
        """
elif False:
    AwsLambdaFunctionEventConfigDestinationConfigOnSuccessArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsLambdaFunctionEventConfigDestinationConfigOnSuccessArgs:
    def __init__(__self__, *,
                 destination: pulumi.Input[str]):
        """
        :param pulumi.Input[str] destination: The AWS ARN of the destination resource
        """
        pulumi.set(__self__, "destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Input[str]:
        """
        The AWS ARN of the destination resource
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination", value)


if not MYPY:
    class AwsLambdaFunctionImageConfigArgsDict(TypedDict):
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The command that is passed to the container.
        """
        entry_points: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The entry point that is passed to the container.
        """
        working_directory: NotRequired[pulumi.Input[str]]
        """
        The working directory that is passed to the container.
        """
elif False:
    AwsLambdaFunctionImageConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsLambdaFunctionImageConfigArgs:
    def __init__(__self__, *,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 entry_points: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 working_directory: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] commands: The command that is passed to the container.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] entry_points: The entry point that is passed to the container.
        :param pulumi.Input[str] working_directory: The working directory that is passed to the container.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if entry_points is not None:
            pulumi.set(__self__, "entry_points", entry_points)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The command that is passed to the container.
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)

    @property
    @pulumi.getter(name="entryPoints")
    def entry_points(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The entry point that is passed to the container.
        """
        return pulumi.get(self, "entry_points")

    @entry_points.setter
    def entry_points(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "entry_points", value)

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[pulumi.Input[str]]:
        """
        The working directory that is passed to the container.
        """
        return pulumi.get(self, "working_directory")

    @working_directory.setter
    def working_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "working_directory", value)


if not MYPY:
    class AwsLambdaFunctionTracingConfigArgsDict(TypedDict):
        mode: pulumi.Input[str]
        """
        Whether to sample and trace a subset of incoming requests with AWS X-Ray. Valid values are `PassThrough` and `Active`.
        """
elif False:
    AwsLambdaFunctionTracingConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsLambdaFunctionTracingConfigArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str]):
        """
        :param pulumi.Input[str] mode: Whether to sample and trace a subset of incoming requests with AWS X-Ray. Valid values are `PassThrough` and `Active`.
        """
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        """
        Whether to sample and trace a subset of incoming requests with AWS X-Ray. Valid values are `PassThrough` and `Active`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)


if not MYPY:
    class AwsLbListenerRuleActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        The type of routing action. Valid values are `redirect`, `forward`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`
        """
        authenticate_cognito: NotRequired[pulumi.Input['AwsLbListenerRuleActionAuthenticateCognitoArgsDict']]
        """
        Information for creating an authenticate action using Cognito. Required if `type` is `authenticate-cognito`.
        """
        authenticate_oidc: NotRequired[pulumi.Input['AwsLbListenerRuleActionAuthenticateOidcArgsDict']]
        """
        Information for creating an authenticate action using OIDC. Required if `type` is `authenticate-oidc`.
        """
        fixed_response: NotRequired[pulumi.Input['AwsLbListenerRuleActionFixedResponseArgsDict']]
        """
        Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
        """
        forward: NotRequired[pulumi.Input['AwsLbListenerRuleActionForwardArgsDict']]
        """
        Information for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. If you specify both `forward` block and `target_group_arn` attribute, you can specify only one target group.
        """
        order: NotRequired[pulumi.Input[int]]
        redirect: NotRequired[pulumi.Input['AwsLbListenerRuleActionRedirectArgsDict']]
        """
        Information for creating a redirect action. Required if `type` is `redirect`.
        """
        target_group_arn: NotRequired[pulumi.Input[str]]
        """
        The ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead.
        """
elif False:
    AwsLbListenerRuleActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsLbListenerRuleActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 authenticate_cognito: Optional[pulumi.Input['AwsLbListenerRuleActionAuthenticateCognitoArgs']] = None,
                 authenticate_oidc: Optional[pulumi.Input['AwsLbListenerRuleActionAuthenticateOidcArgs']] = None,
                 fixed_response: Optional[pulumi.Input['AwsLbListenerRuleActionFixedResponseArgs']] = None,
                 forward: Optional[pulumi.Input['AwsLbListenerRuleActionForwardArgs']] = None,
                 order: Optional[pulumi.Input[int]] = None,
                 redirect: Optional[pulumi.Input['AwsLbListenerRuleActionRedirectArgs']] = None,
                 target_group_arn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: The type of routing action. Valid values are `redirect`, `forward`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`
        :param pulumi.Input['AwsLbListenerRuleActionAuthenticateCognitoArgs'] authenticate_cognito: Information for creating an authenticate action using Cognito. Required if `type` is `authenticate-cognito`.
        :param pulumi.Input['AwsLbListenerRuleActionAuthenticateOidcArgs'] authenticate_oidc: Information for creating an authenticate action using OIDC. Required if `type` is `authenticate-oidc`.
        :param pulumi.Input['AwsLbListenerRuleActionFixedResponseArgs'] fixed_response: Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
        :param pulumi.Input['AwsLbListenerRuleActionForwardArgs'] forward: Information for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. If you specify both `forward` block and `target_group_arn` attribute, you can specify only one target group.
        :param pulumi.Input['AwsLbListenerRuleActionRedirectArgs'] redirect: Information for creating a redirect action. Required if `type` is `redirect`.
        :param pulumi.Input[str] target_group_arn: The ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead.
        """
        pulumi.set(__self__, "type", type)
        if authenticate_cognito is not None:
            pulumi.set(__self__, "authenticate_cognito", authenticate_cognito)
        if authenticate_oidc is not None:
            pulumi.set(__self__, "authenticate_oidc", authenticate_oidc)
        if fixed_response is not None:
            pulumi.set(__self__, "fixed_response", fixed_response)
        if forward is not None:
            pulumi.set(__self__, "forward", forward)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if target_group_arn is not None:
            pulumi.set(__self__, "target_group_arn", target_group_arn)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of routing action. Valid values are `redirect`, `forward`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="authenticateCognito")
    def authenticate_cognito(self) -> Optional[pulumi.Input['AwsLbListenerRuleActionAuthenticateCognitoArgs']]:
        """
        Information for creating an authenticate action using Cognito. Required if `type` is `authenticate-cognito`.
        """
        return pulumi.get(self, "authenticate_cognito")

    @authenticate_cognito.setter
    def authenticate_cognito(self, value: Optional[pulumi.Input['AwsLbListenerRuleActionAuthenticateCognitoArgs']]):
        pulumi.set(self, "authenticate_cognito", value)

    @property
    @pulumi.getter(name="authenticateOidc")
    def authenticate_oidc(self) -> Optional[pulumi.Input['AwsLbListenerRuleActionAuthenticateOidcArgs']]:
        """
        Information for creating an authenticate action using OIDC. Required if `type` is `authenticate-oidc`.
        """
        return pulumi.get(self, "authenticate_oidc")

    @authenticate_oidc.setter
    def authenticate_oidc(self, value: Optional[pulumi.Input['AwsLbListenerRuleActionAuthenticateOidcArgs']]):
        pulumi.set(self, "authenticate_oidc", value)

    @property
    @pulumi.getter(name="fixedResponse")
    def fixed_response(self) -> Optional[pulumi.Input['AwsLbListenerRuleActionFixedResponseArgs']]:
        """
        Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
        """
        return pulumi.get(self, "fixed_response")

    @fixed_response.setter
    def fixed_response(self, value: Optional[pulumi.Input['AwsLbListenerRuleActionFixedResponseArgs']]):
        pulumi.set(self, "fixed_response", value)

    @property
    @pulumi.getter
    def forward(self) -> Optional[pulumi.Input['AwsLbListenerRuleActionForwardArgs']]:
        """
        Information for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. If you specify both `forward` block and `target_group_arn` attribute, you can specify only one target group.
        """
        return pulumi.get(self, "forward")

    @forward.setter
    def forward(self, value: Optional[pulumi.Input['AwsLbListenerRuleActionForwardArgs']]):
        pulumi.set(self, "forward", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def redirect(self) -> Optional[pulumi.Input['AwsLbListenerRuleActionRedirectArgs']]:
        """
        Information for creating a redirect action. Required if `type` is `redirect`.
        """
        return pulumi.get(self, "redirect")

    @redirect.setter
    def redirect(self, value: Optional[pulumi.Input['AwsLbListenerRuleActionRedirectArgs']]):
        pulumi.set(self, "redirect", value)

    @property
    @pulumi.getter(name="targetGroupArn")
    def target_group_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead.
        """
        return pulumi.get(self, "target_group_arn")

    @target_group_arn.setter
    def target_group_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_group_arn", value)


if not MYPY:
    class AwsLbListenerRuleActionAuthenticateCognitoArgsDict(TypedDict):
        user_pool_arn: pulumi.Input[str]
        """
        The ARN of the Cognito user pool.
        """
        user_pool_client_id: pulumi.Input[str]
        """
        The ID of the Cognito user pool client.
        """
        user_pool_domain: pulumi.Input[str]
        """
        The domain prefix or fully-qualified domain name of the Cognito user pool.
        """
        authentication_request_extra_params: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        The query parameters to include in the redirect request to the authorization endpoint.
        """
        on_unauthenticated_request: NotRequired[pulumi.Input[str]]
        """
        The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`.
        """
        scope: NotRequired[pulumi.Input[str]]
        """
        The set of user claims to be requested from the IdP. Defaults to `openid`.
        """
        session_cookie_name: NotRequired[pulumi.Input[str]]
        """
        The name of the cookie used to maintain session information. Defaults to `AWSELBAuthSessionCookie`.
        """
        session_timeout: NotRequired[pulumi.Input[int]]
        """
        The maximum duration of the authentication session, in seconds. Defaults to `604800`.
        """
elif False:
    AwsLbListenerRuleActionAuthenticateCognitoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsLbListenerRuleActionAuthenticateCognitoArgs:
    def __init__(__self__, *,
                 user_pool_arn: pulumi.Input[str],
                 user_pool_client_id: pulumi.Input[str],
                 user_pool_domain: pulumi.Input[str],
                 authentication_request_extra_params: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 on_unauthenticated_request: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 session_cookie_name: Optional[pulumi.Input[str]] = None,
                 session_timeout: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] user_pool_arn: The ARN of the Cognito user pool.
        :param pulumi.Input[str] user_pool_client_id: The ID of the Cognito user pool client.
        :param pulumi.Input[str] user_pool_domain: The domain prefix or fully-qualified domain name of the Cognito user pool.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] authentication_request_extra_params: The query parameters to include in the redirect request to the authorization endpoint.
        :param pulumi.Input[str] on_unauthenticated_request: The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`.
        :param pulumi.Input[str] scope: The set of user claims to be requested from the IdP. Defaults to `openid`.
        :param pulumi.Input[str] session_cookie_name: The name of the cookie used to maintain session information. Defaults to `AWSELBAuthSessionCookie`.
        :param pulumi.Input[int] session_timeout: The maximum duration of the authentication session, in seconds. Defaults to `604800`.
        """
        pulumi.set(__self__, "user_pool_arn", user_pool_arn)
        pulumi.set(__self__, "user_pool_client_id", user_pool_client_id)
        pulumi.set(__self__, "user_pool_domain", user_pool_domain)
        if authentication_request_extra_params is not None:
            pulumi.set(__self__, "authentication_request_extra_params", authentication_request_extra_params)
        if on_unauthenticated_request is not None:
            pulumi.set(__self__, "on_unauthenticated_request", on_unauthenticated_request)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if session_cookie_name is not None:
            pulumi.set(__self__, "session_cookie_name", session_cookie_name)
        if session_timeout is not None:
            pulumi.set(__self__, "session_timeout", session_timeout)

    @property
    @pulumi.getter(name="userPoolArn")
    def user_pool_arn(self) -> pulumi.Input[str]:
        """
        The ARN of the Cognito user pool.
        """
        return pulumi.get(self, "user_pool_arn")

    @user_pool_arn.setter
    def user_pool_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_pool_arn", value)

    @property
    @pulumi.getter(name="userPoolClientId")
    def user_pool_client_id(self) -> pulumi.Input[str]:
        """
        The ID of the Cognito user pool client.
        """
        return pulumi.get(self, "user_pool_client_id")

    @user_pool_client_id.setter
    def user_pool_client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_pool_client_id", value)

    @property
    @pulumi.getter(name="userPoolDomain")
    def user_pool_domain(self) -> pulumi.Input[str]:
        """
        The domain prefix or fully-qualified domain name of the Cognito user pool.
        """
        return pulumi.get(self, "user_pool_domain")

    @user_pool_domain.setter
    def user_pool_domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_pool_domain", value)

    @property
    @pulumi.getter(name="authenticationRequestExtraParams")
    def authentication_request_extra_params(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The query parameters to include in the redirect request to the authorization endpoint.
        """
        return pulumi.get(self, "authentication_request_extra_params")

    @authentication_request_extra_params.setter
    def authentication_request_extra_params(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "authentication_request_extra_params", value)

    @property
    @pulumi.getter(name="onUnauthenticatedRequest")
    def on_unauthenticated_request(self) -> Optional[pulumi.Input[str]]:
        """
        The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`.
        """
        return pulumi.get(self, "on_unauthenticated_request")

    @on_unauthenticated_request.setter
    def on_unauthenticated_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "on_unauthenticated_request", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        The set of user claims to be requested from the IdP. Defaults to `openid`.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="sessionCookieName")
    def session_cookie_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the cookie used to maintain session information. Defaults to `AWSELBAuthSessionCookie`.
        """
        return pulumi.get(self, "session_cookie_name")

    @session_cookie_name.setter
    def session_cookie_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_cookie_name", value)

    @property
    @pulumi.getter(name="sessionTimeout")
    def session_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum duration of the authentication session, in seconds. Defaults to `604800`.
        """
        return pulumi.get(self, "session_timeout")

    @session_timeout.setter
    def session_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_timeout", value)


if not MYPY:
    class AwsLbListenerRuleActionAuthenticateOidcArgsDict(TypedDict):
        authorization_endpoint: pulumi.Input[str]
        """
        The authorization endpoint of the IdP.
        """
        client_id: pulumi.Input[str]
        """
        The OAuth 2.0 client identifier.
        """
        client_secret: pulumi.Input[str]
        """
        The OAuth 2.0 client secret.
        """
        issuer: pulumi.Input[str]
        """
        The OIDC issuer identifier of the IdP.
        """
        token_endpoint: pulumi.Input[str]
        """
        The token endpoint of the IdP.
        """
        user_info_endpoint: pulumi.Input[str]
        """
        The user info endpoint of the IdP.
        """
        authentication_request_extra_params: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        The query parameters to include in the redirect request to the authorization endpoint. Max: 10
        """
        on_unauthenticated_request: NotRequired[pulumi.Input[str]]
        """
        The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`.
        """
        scope: NotRequired[pulumi.Input[str]]
        """
        The set of user claims to be requested from the IdP. Defaults to `openid`.
        """
        session_cookie_name: NotRequired[pulumi.Input[str]]
        """
        The name of the cookie used to maintain session information. Defaults to `AWSELBAuthSessionCookie`.
        """
        session_timeout: NotRequired[pulumi.Input[int]]
        """
        The maximum duration of the authentication session, in seconds. Defaults to `604800`.
        """
elif False:
    AwsLbListenerRuleActionAuthenticateOidcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsLbListenerRuleActionAuthenticateOidcArgs:
    def __init__(__self__, *,
                 authorization_endpoint: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 issuer: pulumi.Input[str],
                 token_endpoint: pulumi.Input[str],
                 user_info_endpoint: pulumi.Input[str],
                 authentication_request_extra_params: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 on_unauthenticated_request: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 session_cookie_name: Optional[pulumi.Input[str]] = None,
                 session_timeout: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] authorization_endpoint: The authorization endpoint of the IdP.
        :param pulumi.Input[str] client_id: The OAuth 2.0 client identifier.
        :param pulumi.Input[str] client_secret: The OAuth 2.0 client secret.
        :param pulumi.Input[str] issuer: The OIDC issuer identifier of the IdP.
        :param pulumi.Input[str] token_endpoint: The token endpoint of the IdP.
        :param pulumi.Input[str] user_info_endpoint: The user info endpoint of the IdP.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] authentication_request_extra_params: The query parameters to include in the redirect request to the authorization endpoint. Max: 10
        :param pulumi.Input[str] on_unauthenticated_request: The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`.
        :param pulumi.Input[str] scope: The set of user claims to be requested from the IdP. Defaults to `openid`.
        :param pulumi.Input[str] session_cookie_name: The name of the cookie used to maintain session information. Defaults to `AWSELBAuthSessionCookie`.
        :param pulumi.Input[int] session_timeout: The maximum duration of the authentication session, in seconds. Defaults to `604800`.
        """
        pulumi.set(__self__, "authorization_endpoint", authorization_endpoint)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "issuer", issuer)
        pulumi.set(__self__, "token_endpoint", token_endpoint)
        pulumi.set(__self__, "user_info_endpoint", user_info_endpoint)
        if authentication_request_extra_params is not None:
            pulumi.set(__self__, "authentication_request_extra_params", authentication_request_extra_params)
        if on_unauthenticated_request is not None:
            pulumi.set(__self__, "on_unauthenticated_request", on_unauthenticated_request)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if session_cookie_name is not None:
            pulumi.set(__self__, "session_cookie_name", session_cookie_name)
        if session_timeout is not None:
            pulumi.set(__self__, "session_timeout", session_timeout)

    @property
    @pulumi.getter(name="authorizationEndpoint")
    def authorization_endpoint(self) -> pulumi.Input[str]:
        """
        The authorization endpoint of the IdP.
        """
        return pulumi.get(self, "authorization_endpoint")

    @authorization_endpoint.setter
    def authorization_endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "authorization_endpoint", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        """
        The OAuth 2.0 client identifier.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        """
        The OAuth 2.0 client secret.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter
    def issuer(self) -> pulumi.Input[str]:
        """
        The OIDC issuer identifier of the IdP.
        """
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: pulumi.Input[str]):
        pulumi.set(self, "issuer", value)

    @property
    @pulumi.getter(name="tokenEndpoint")
    def token_endpoint(self) -> pulumi.Input[str]:
        """
        The token endpoint of the IdP.
        """
        return pulumi.get(self, "token_endpoint")

    @token_endpoint.setter
    def token_endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_endpoint", value)

    @property
    @pulumi.getter(name="userInfoEndpoint")
    def user_info_endpoint(self) -> pulumi.Input[str]:
        """
        The user info endpoint of the IdP.
        """
        return pulumi.get(self, "user_info_endpoint")

    @user_info_endpoint.setter
    def user_info_endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_info_endpoint", value)

    @property
    @pulumi.getter(name="authenticationRequestExtraParams")
    def authentication_request_extra_params(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The query parameters to include in the redirect request to the authorization endpoint. Max: 10
        """
        return pulumi.get(self, "authentication_request_extra_params")

    @authentication_request_extra_params.setter
    def authentication_request_extra_params(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "authentication_request_extra_params", value)

    @property
    @pulumi.getter(name="onUnauthenticatedRequest")
    def on_unauthenticated_request(self) -> Optional[pulumi.Input[str]]:
        """
        The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`.
        """
        return pulumi.get(self, "on_unauthenticated_request")

    @on_unauthenticated_request.setter
    def on_unauthenticated_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "on_unauthenticated_request", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        The set of user claims to be requested from the IdP. Defaults to `openid`.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="sessionCookieName")
    def session_cookie_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the cookie used to maintain session information. Defaults to `AWSELBAuthSessionCookie`.
        """
        return pulumi.get(self, "session_cookie_name")

    @session_cookie_name.setter
    def session_cookie_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_cookie_name", value)

    @property
    @pulumi.getter(name="sessionTimeout")
    def session_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum duration of the authentication session, in seconds. Defaults to `604800`.
        """
        return pulumi.get(self, "session_timeout")

    @session_timeout.setter
    def session_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_timeout", value)


if not MYPY:
    class AwsLbListenerRuleActionFixedResponseArgsDict(TypedDict):
        content_type: pulumi.Input[str]
        """
        The content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`
        """
        message_body: NotRequired[pulumi.Input[str]]
        """
        The message body.
        """
        status_code: NotRequired[pulumi.Input[str]]
        """
        The HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
        """
elif False:
    AwsLbListenerRuleActionFixedResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsLbListenerRuleActionFixedResponseArgs:
    def __init__(__self__, *,
                 content_type: pulumi.Input[str],
                 message_body: Optional[pulumi.Input[str]] = None,
                 status_code: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] content_type: The content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`
        :param pulumi.Input[str] message_body: The message body.
        :param pulumi.Input[str] status_code: The HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
        """
        pulumi.set(__self__, "content_type", content_type)
        if message_body is not None:
            pulumi.set(__self__, "message_body", message_body)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Input[str]:
        """
        The content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="messageBody")
    def message_body(self) -> Optional[pulumi.Input[str]]:
        """
        The message body.
        """
        return pulumi.get(self, "message_body")

    @message_body.setter
    def message_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_body", value)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
        """
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_code", value)


if not MYPY:
    class AwsLbListenerRuleActionForwardArgsDict(TypedDict):
        target_groups: pulumi.Input[Sequence[pulumi.Input['AwsLbListenerRuleActionForwardTargetGroupArgsDict']]]
        stickiness: NotRequired[pulumi.Input['AwsLbListenerRuleActionForwardStickinessArgsDict']]
elif False:
    AwsLbListenerRuleActionForwardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsLbListenerRuleActionForwardArgs:
    def __init__(__self__, *,
                 target_groups: pulumi.Input[Sequence[pulumi.Input['AwsLbListenerRuleActionForwardTargetGroupArgs']]],
                 stickiness: Optional[pulumi.Input['AwsLbListenerRuleActionForwardStickinessArgs']] = None):
        pulumi.set(__self__, "target_groups", target_groups)
        if stickiness is not None:
            pulumi.set(__self__, "stickiness", stickiness)

    @property
    @pulumi.getter(name="targetGroups")
    def target_groups(self) -> pulumi.Input[Sequence[pulumi.Input['AwsLbListenerRuleActionForwardTargetGroupArgs']]]:
        return pulumi.get(self, "target_groups")

    @target_groups.setter
    def target_groups(self, value: pulumi.Input[Sequence[pulumi.Input['AwsLbListenerRuleActionForwardTargetGroupArgs']]]):
        pulumi.set(self, "target_groups", value)

    @property
    @pulumi.getter
    def stickiness(self) -> Optional[pulumi.Input['AwsLbListenerRuleActionForwardStickinessArgs']]:
        return pulumi.get(self, "stickiness")

    @stickiness.setter
    def stickiness(self, value: Optional[pulumi.Input['AwsLbListenerRuleActionForwardStickinessArgs']]):
        pulumi.set(self, "stickiness", value)


if not MYPY:
    class AwsLbListenerRuleActionForwardStickinessArgsDict(TypedDict):
        duration: pulumi.Input[int]
        """
        The time period, in seconds, during which requests from a client should be routed to the same target group.
        """
        enabled: NotRequired[pulumi.Input[bool]]
        """
        Indicates whether target group stickiness is enabled. Defaults to `false`.
        """
elif False:
    AwsLbListenerRuleActionForwardStickinessArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsLbListenerRuleActionForwardStickinessArgs:
    def __init__(__self__, *,
                 duration: pulumi.Input[int],
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[int] duration: The time period, in seconds, during which requests from a client should be routed to the same target group.
        :param pulumi.Input[bool] enabled: Indicates whether target group stickiness is enabled. Defaults to `false`.
        """
        pulumi.set(__self__, "duration", duration)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Input[int]:
        """
        The time period, in seconds, during which requests from a client should be routed to the same target group.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: pulumi.Input[int]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether target group stickiness is enabled. Defaults to `false`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class AwsLbListenerRuleActionForwardTargetGroupArgsDict(TypedDict):
        arn: pulumi.Input[str]
        """
        The Amazon Resource Name (ARN) of the target group.
        """
        weight: NotRequired[pulumi.Input[int]]
        """
        The weight. The range is 0 to 999. Defaults to `1`.
        """
elif False:
    AwsLbListenerRuleActionForwardTargetGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsLbListenerRuleActionForwardTargetGroupArgs:
    def __init__(__self__, *,
                 arn: pulumi.Input[str],
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] arn: The Amazon Resource Name (ARN) of the target group.
        :param pulumi.Input[int] weight: The weight. The range is 0 to 999. Defaults to `1`.
        """
        pulumi.set(__self__, "arn", arn)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the target group.
        """
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        The weight. The range is 0 to 999. Defaults to `1`.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:
    class AwsLbListenerRuleActionRedirectArgsDict(TypedDict):
        status_code: pulumi.Input[str]
        """
        The HTTP redirect code. The redirect is either permanent or temporary
        """
        host: NotRequired[pulumi.Input[str]]
        """
        The hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
        """
        path: NotRequired[pulumi.Input[str]]
        """
        The absolute path, starting with the leading "/". Defaults to `/#{path}`.
        """
        port: NotRequired[pulumi.Input[str]]
        """
        The port. Specify a value from `1` to `65535`. Defaults to `#{port}`.
        """
        protocol: NotRequired[pulumi.Input[str]]
        """
        The protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
        """
        query: NotRequired[pulumi.Input[str]]
        """
        The query parameters, URL-encoded when necessary. Defaults to `#{query}`.
        """
elif False:
    AwsLbListenerRuleActionRedirectArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsLbListenerRuleActionRedirectArgs:
    def __init__(__self__, *,
                 status_code: pulumi.Input[str],
                 host: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] status_code: The HTTP redirect code. The redirect is either permanent or temporary
        :param pulumi.Input[str] host: The hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
        :param pulumi.Input[str] path: The absolute path, starting with the leading "/". Defaults to `/#{path}`.
        :param pulumi.Input[str] port: The port. Specify a value from `1` to `65535`. Defaults to `#{port}`.
        :param pulumi.Input[str] protocol: The protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
        :param pulumi.Input[str] query: The query parameters, URL-encoded when necessary. Defaults to `#{query}`.
        """
        pulumi.set(__self__, "status_code", status_code)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if query is not None:
            pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> pulumi.Input[str]:
        """
        The HTTP redirect code. The redirect is either permanent or temporary
        """
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "status_code", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        The hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The absolute path, starting with the leading "/". Defaults to `/#{path}`.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        The port. Specify a value from `1` to `65535`. Defaults to `#{port}`.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        The protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[str]]:
        """
        The query parameters, URL-encoded when necessary. Defaults to `#{query}`.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query", value)


if not MYPY:
    class AwsLbListenerRuleConditionArgsDict(TypedDict):
        host_header: NotRequired[pulumi.Input['AwsLbListenerRuleConditionHostHeaderArgsDict']]
        http_header: NotRequired[pulumi.Input['AwsLbListenerRuleConditionHttpHeaderArgsDict']]
        """
        HTTP headers to match.
        """
        http_request_method: NotRequired[pulumi.Input['AwsLbListenerRuleConditionHttpRequestMethodArgsDict']]
        """
        Contains a single `values` item which is a list of HTTP request methods or verbs to match. Maximum size is 40 characters.
        """
        path_pattern: NotRequired[pulumi.Input['AwsLbListenerRuleConditionPathPatternArgsDict']]
        """
        Contains a single `values` item which is a list of path patterns to match against the request URL. Maximum size of each pattern is 128 characters.
        """
        query_strings: NotRequired[pulumi.Input[Sequence[pulumi.Input['AwsLbListenerRuleConditionQueryStringArgsDict']]]]
        """
        Query strings to match.
        """
        source_ip: NotRequired[pulumi.Input['AwsLbListenerRuleConditionSourceIpArgsDict']]
        """
        Contains a single `values` item which is a list of source IP CIDR notations to match.
        """
elif False:
    AwsLbListenerRuleConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsLbListenerRuleConditionArgs:
    def __init__(__self__, *,
                 host_header: Optional[pulumi.Input['AwsLbListenerRuleConditionHostHeaderArgs']] = None,
                 http_header: Optional[pulumi.Input['AwsLbListenerRuleConditionHttpHeaderArgs']] = None,
                 http_request_method: Optional[pulumi.Input['AwsLbListenerRuleConditionHttpRequestMethodArgs']] = None,
                 path_pattern: Optional[pulumi.Input['AwsLbListenerRuleConditionPathPatternArgs']] = None,
                 query_strings: Optional[pulumi.Input[Sequence[pulumi.Input['AwsLbListenerRuleConditionQueryStringArgs']]]] = None,
                 source_ip: Optional[pulumi.Input['AwsLbListenerRuleConditionSourceIpArgs']] = None):
        """
        :param pulumi.Input['AwsLbListenerRuleConditionHttpHeaderArgs'] http_header: HTTP headers to match.
        :param pulumi.Input['AwsLbListenerRuleConditionHttpRequestMethodArgs'] http_request_method: Contains a single `values` item which is a list of HTTP request methods or verbs to match. Maximum size is 40 characters.
        :param pulumi.Input['AwsLbListenerRuleConditionPathPatternArgs'] path_pattern: Contains a single `values` item which is a list of path patterns to match against the request URL. Maximum size of each pattern is 128 characters.
        :param pulumi.Input[Sequence[pulumi.Input['AwsLbListenerRuleConditionQueryStringArgs']]] query_strings: Query strings to match.
        :param pulumi.Input['AwsLbListenerRuleConditionSourceIpArgs'] source_ip: Contains a single `values` item which is a list of source IP CIDR notations to match.
        """
        if host_header is not None:
            pulumi.set(__self__, "host_header", host_header)
        if http_header is not None:
            pulumi.set(__self__, "http_header", http_header)
        if http_request_method is not None:
            pulumi.set(__self__, "http_request_method", http_request_method)
        if path_pattern is not None:
            pulumi.set(__self__, "path_pattern", path_pattern)
        if query_strings is not None:
            pulumi.set(__self__, "query_strings", query_strings)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)

    @property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> Optional[pulumi.Input['AwsLbListenerRuleConditionHostHeaderArgs']]:
        return pulumi.get(self, "host_header")

    @host_header.setter
    def host_header(self, value: Optional[pulumi.Input['AwsLbListenerRuleConditionHostHeaderArgs']]):
        pulumi.set(self, "host_header", value)

    @property
    @pulumi.getter(name="httpHeader")
    def http_header(self) -> Optional[pulumi.Input['AwsLbListenerRuleConditionHttpHeaderArgs']]:
        """
        HTTP headers to match.
        """
        return pulumi.get(self, "http_header")

    @http_header.setter
    def http_header(self, value: Optional[pulumi.Input['AwsLbListenerRuleConditionHttpHeaderArgs']]):
        pulumi.set(self, "http_header", value)

    @property
    @pulumi.getter(name="httpRequestMethod")
    def http_request_method(self) -> Optional[pulumi.Input['AwsLbListenerRuleConditionHttpRequestMethodArgs']]:
        """
        Contains a single `values` item which is a list of HTTP request methods or verbs to match. Maximum size is 40 characters.
        """
        return pulumi.get(self, "http_request_method")

    @http_request_method.setter
    def http_request_method(self, value: Optional[pulumi.Input['AwsLbListenerRuleConditionHttpRequestMethodArgs']]):
        pulumi.set(self, "http_request_method", value)

    @property
    @pulumi.getter(name="pathPattern")
    def path_pattern(self) -> Optional[pulumi.Input['AwsLbListenerRuleConditionPathPatternArgs']]:
        """
        Contains a single `values` item which is a list of path patterns to match against the request URL. Maximum size of each pattern is 128 characters.
        """
        return pulumi.get(self, "path_pattern")

    @path_pattern.setter
    def path_pattern(self, value: Optional[pulumi.Input['AwsLbListenerRuleConditionPathPatternArgs']]):
        pulumi.set(self, "path_pattern", value)

    @property
    @pulumi.getter(name="queryStrings")
    def query_strings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AwsLbListenerRuleConditionQueryStringArgs']]]]:
        """
        Query strings to match.
        """
        return pulumi.get(self, "query_strings")

    @query_strings.setter
    def query_strings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AwsLbListenerRuleConditionQueryStringArgs']]]]):
        pulumi.set(self, "query_strings", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input['AwsLbListenerRuleConditionSourceIpArgs']]:
        """
        Contains a single `values` item which is a list of source IP CIDR notations to match.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input['AwsLbListenerRuleConditionSourceIpArgs']]):
        pulumi.set(self, "source_ip", value)


if not MYPY:
    class AwsLbListenerRuleConditionHostHeaderArgsDict(TypedDict):
        values: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        Contains a single `values` item which is a list of host header patterns to match. The maximum size of each pattern is 128 characters.
        """
elif False:
    AwsLbListenerRuleConditionHostHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsLbListenerRuleConditionHostHeaderArgs:
    def __init__(__self__, *,
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: Contains a single `values` item which is a list of host header patterns to match. The maximum size of each pattern is 128 characters.
        """
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Contains a single `values` item which is a list of host header patterns to match. The maximum size of each pattern is 128 characters.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class AwsLbListenerRuleConditionHttpHeaderArgsDict(TypedDict):
        http_header_name: pulumi.Input[str]
        """
        Name of HTTP header to search. The maximum size is 40 characters.
        """
        values: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        List of header value patterns to match. Maximum size of each pattern is 128 characters.
        """
elif False:
    AwsLbListenerRuleConditionHttpHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsLbListenerRuleConditionHttpHeaderArgs:
    def __init__(__self__, *,
                 http_header_name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] http_header_name: Name of HTTP header to search. The maximum size is 40 characters.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: List of header value patterns to match. Maximum size of each pattern is 128 characters.
        """
        pulumi.set(__self__, "http_header_name", http_header_name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="httpHeaderName")
    def http_header_name(self) -> pulumi.Input[str]:
        """
        Name of HTTP header to search. The maximum size is 40 characters.
        """
        return pulumi.get(self, "http_header_name")

    @http_header_name.setter
    def http_header_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "http_header_name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of header value patterns to match. Maximum size of each pattern is 128 characters.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class AwsLbListenerRuleConditionHttpRequestMethodArgsDict(TypedDict):
        values: pulumi.Input[Sequence[pulumi.Input[str]]]
elif False:
    AwsLbListenerRuleConditionHttpRequestMethodArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsLbListenerRuleConditionHttpRequestMethodArgs:
    def __init__(__self__, *,
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class AwsLbListenerRuleConditionPathPatternArgsDict(TypedDict):
        values: pulumi.Input[Sequence[pulumi.Input[str]]]
elif False:
    AwsLbListenerRuleConditionPathPatternArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsLbListenerRuleConditionPathPatternArgs:
    def __init__(__self__, *,
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class AwsLbListenerRuleConditionQueryStringArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Query string value pattern to match.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        Query string key pattern to match.
        """
elif False:
    AwsLbListenerRuleConditionQueryStringArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsLbListenerRuleConditionQueryStringArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: Query string value pattern to match.
        :param pulumi.Input[str] key: Query string key pattern to match.
        """
        pulumi.set(__self__, "value", value)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Query string value pattern to match.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Query string key pattern to match.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


if not MYPY:
    class AwsLbListenerRuleConditionSourceIpArgsDict(TypedDict):
        values: pulumi.Input[Sequence[pulumi.Input[str]]]
elif False:
    AwsLbListenerRuleConditionSourceIpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsLbListenerRuleConditionSourceIpArgs:
    def __init__(__self__, *,
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class AwsLbListenerRuleTagArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    AwsLbListenerRuleTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsLbListenerRuleTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AwsLbTargetGroupHealthCheckArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
        """
        Whether health checks are enabled. Defaults to `true`.
        """
        healthy_threshold: NotRequired[pulumi.Input[int]]
        """
        Number of consecutive health checks successes required before considering an unhealthy target healthy. Defaults to `3`.
        """
        interval: NotRequired[pulumi.Input[int]]
        """
        Approximate amount of time, in seconds, between health checks of an individual target. Minimum value 5 seconds, Maximum value 300 seconds. For lambda target groups, it needs to be greater as the `timeout` of the underlying `lambda`. Defaults to `30`.
        """
        matcher: NotRequired[pulumi.Input[str]]
        """
        Response codes to use when checking for a healthy responses from a target. You can specify multiple values (for example, "200,202" for HTTP(s) or "0,12" for GRPC) or a range of values (for example, "200-299" or "0-99"). Required for HTTP/HTTPS/GRPC ALB. Only applies to Application Load Balancers (i.e., HTTP/HTTPS/GRPC) not Network Load Balancers (i.e., TCP).
        """
        path: NotRequired[pulumi.Input[str]]
        """
        Destination for the health check request. Required for HTTP/HTTPS ALB and HTTP NLB. Only applies to HTTP/HTTPS.
        """
        port: NotRequired[pulumi.Input[str]]
        """
        Port to use to connect with the target. Valid values are either ports 1-65535, or traffic-port. Defaults to `traffic-port`.
        """
        protocol: NotRequired[pulumi.Input[str]]
        """
        Protocol to use to connect with the target. Defaults to HTTP. Not applicable when target_type is lambda Defaults to `HTTP`.
        """
        timeout: NotRequired[pulumi.Input[int]]
        """
        Amount of time, in seconds, during which no response means a failed health check.
        """
        unhealthy_threshold: NotRequired[pulumi.Input[int]]
        """
        Number of consecutive health check failures required before considering the target unhealthy. Defaults to `3`.
        """
elif False:
    AwsLbTargetGroupHealthCheckArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsLbTargetGroupHealthCheckArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 healthy_threshold: Optional[pulumi.Input[int]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 matcher: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 unhealthy_threshold: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] enabled: Whether health checks are enabled. Defaults to `true`.
        :param pulumi.Input[int] healthy_threshold: Number of consecutive health checks successes required before considering an unhealthy target healthy. Defaults to `3`.
        :param pulumi.Input[int] interval: Approximate amount of time, in seconds, between health checks of an individual target. Minimum value 5 seconds, Maximum value 300 seconds. For lambda target groups, it needs to be greater as the `timeout` of the underlying `lambda`. Defaults to `30`.
        :param pulumi.Input[str] matcher: Response codes to use when checking for a healthy responses from a target. You can specify multiple values (for example, "200,202" for HTTP(s) or "0,12" for GRPC) or a range of values (for example, "200-299" or "0-99"). Required for HTTP/HTTPS/GRPC ALB. Only applies to Application Load Balancers (i.e., HTTP/HTTPS/GRPC) not Network Load Balancers (i.e., TCP).
        :param pulumi.Input[str] path: Destination for the health check request. Required for HTTP/HTTPS ALB and HTTP NLB. Only applies to HTTP/HTTPS.
        :param pulumi.Input[str] port: Port to use to connect with the target. Valid values are either ports 1-65535, or traffic-port. Defaults to `traffic-port`.
        :param pulumi.Input[str] protocol: Protocol to use to connect with the target. Defaults to HTTP. Not applicable when target_type is lambda Defaults to `HTTP`.
        :param pulumi.Input[int] timeout: Amount of time, in seconds, during which no response means a failed health check.
        :param pulumi.Input[int] unhealthy_threshold: Number of consecutive health check failures required before considering the target unhealthy. Defaults to `3`.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if healthy_threshold is not None:
            pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if matcher is not None:
            pulumi.set(__self__, "matcher", matcher)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if unhealthy_threshold is not None:
            pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether health checks are enabled. Defaults to `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Number of consecutive health checks successes required before considering an unhealthy target healthy. Defaults to `3`.
        """
        return pulumi.get(self, "healthy_threshold")

    @healthy_threshold.setter
    def healthy_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "healthy_threshold", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Approximate amount of time, in seconds, between health checks of an individual target. Minimum value 5 seconds, Maximum value 300 seconds. For lambda target groups, it needs to be greater as the `timeout` of the underlying `lambda`. Defaults to `30`.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def matcher(self) -> Optional[pulumi.Input[str]]:
        """
        Response codes to use when checking for a healthy responses from a target. You can specify multiple values (for example, "200,202" for HTTP(s) or "0,12" for GRPC) or a range of values (for example, "200-299" or "0-99"). Required for HTTP/HTTPS/GRPC ALB. Only applies to Application Load Balancers (i.e., HTTP/HTTPS/GRPC) not Network Load Balancers (i.e., TCP).
        """
        return pulumi.get(self, "matcher")

    @matcher.setter
    def matcher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "matcher", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Destination for the health check request. Required for HTTP/HTTPS ALB and HTTP NLB. Only applies to HTTP/HTTPS.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Port to use to connect with the target. Valid values are either ports 1-65535, or traffic-port. Defaults to `traffic-port`.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol to use to connect with the target. Defaults to HTTP. Not applicable when target_type is lambda Defaults to `HTTP`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Amount of time, in seconds, during which no response means a failed health check.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Number of consecutive health check failures required before considering the target unhealthy. Defaults to `3`.
        """
        return pulumi.get(self, "unhealthy_threshold")

    @unhealthy_threshold.setter
    def unhealthy_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unhealthy_threshold", value)


if not MYPY:
    class AwsLoadBalancerListenerCertificateArgsDict(TypedDict):
        arn: NotRequired[pulumi.Input[str]]
        is_default: NotRequired[pulumi.Input[bool]]
elif False:
    AwsLoadBalancerListenerCertificateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsLoadBalancerListenerCertificateArgs:
    def __init__(__self__, *,
                 arn: Optional[pulumi.Input[str]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None):
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)

    @property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)


if not MYPY:
    class AwsLoadBalancerListenerDefaultActionArgsDict(TypedDict):
        order: NotRequired[pulumi.Input[int]]
        target_group_arn: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
elif False:
    AwsLoadBalancerListenerDefaultActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsLoadBalancerListenerDefaultActionArgs:
    def __init__(__self__, *,
                 order: Optional[pulumi.Input[int]] = None,
                 target_group_arn: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if order is not None:
            pulumi.set(__self__, "order", order)
        if target_group_arn is not None:
            pulumi.set(__self__, "target_group_arn", target_group_arn)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter(name="targetGroupArn")
    def target_group_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_group_arn")

    @target_group_arn.setter
    def target_group_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_group_arn", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class AwsLoadBalancerTagArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    AwsLoadBalancerTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsLoadBalancerTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AwsMwaaEnvironmentLastUpdatedArgsDict(TypedDict):
        created_at: NotRequired[pulumi.Input[str]]
        errors: NotRequired[pulumi.Input[Sequence[pulumi.Input['AwsMwaaEnvironmentLastUpdatedErrorArgsDict']]]]
        status: NotRequired[pulumi.Input[str]]
elif False:
    AwsMwaaEnvironmentLastUpdatedArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsMwaaEnvironmentLastUpdatedArgs:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[str]] = None,
                 errors: Optional[pulumi.Input[Sequence[pulumi.Input['AwsMwaaEnvironmentLastUpdatedErrorArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if errors is not None:
            pulumi.set(__self__, "errors", errors)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def errors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AwsMwaaEnvironmentLastUpdatedErrorArgs']]]]:
        return pulumi.get(self, "errors")

    @errors.setter
    def errors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AwsMwaaEnvironmentLastUpdatedErrorArgs']]]]):
        pulumi.set(self, "errors", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class AwsMwaaEnvironmentLastUpdatedErrorArgsDict(TypedDict):
        error_code: NotRequired[pulumi.Input[str]]
        error_message: NotRequired[pulumi.Input[str]]
elif False:
    AwsMwaaEnvironmentLastUpdatedErrorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsMwaaEnvironmentLastUpdatedErrorArgs:
    def __init__(__self__, *,
                 error_code: Optional[pulumi.Input[str]] = None,
                 error_message: Optional[pulumi.Input[str]] = None):
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "error_code")

    @error_code.setter
    def error_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_code", value)

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "error_message")

    @error_message.setter
    def error_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_message", value)


if not MYPY:
    class AwsMwaaEnvironmentLoggingConfigurationArgsDict(TypedDict):
        dag_processing_logs: NotRequired[pulumi.Input['AwsMwaaEnvironmentLoggingConfigurationDagProcessingLogsArgsDict']]
        scheduler_logs: NotRequired[pulumi.Input['AwsMwaaEnvironmentLoggingConfigurationSchedulerLogsArgsDict']]
        task_logs: NotRequired[pulumi.Input['AwsMwaaEnvironmentLoggingConfigurationTaskLogsArgsDict']]
        webserver_logs: NotRequired[pulumi.Input['AwsMwaaEnvironmentLoggingConfigurationWebserverLogsArgsDict']]
        worker_logs: NotRequired[pulumi.Input['AwsMwaaEnvironmentLoggingConfigurationWorkerLogsArgsDict']]
elif False:
    AwsMwaaEnvironmentLoggingConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsMwaaEnvironmentLoggingConfigurationArgs:
    def __init__(__self__, *,
                 dag_processing_logs: Optional[pulumi.Input['AwsMwaaEnvironmentLoggingConfigurationDagProcessingLogsArgs']] = None,
                 scheduler_logs: Optional[pulumi.Input['AwsMwaaEnvironmentLoggingConfigurationSchedulerLogsArgs']] = None,
                 task_logs: Optional[pulumi.Input['AwsMwaaEnvironmentLoggingConfigurationTaskLogsArgs']] = None,
                 webserver_logs: Optional[pulumi.Input['AwsMwaaEnvironmentLoggingConfigurationWebserverLogsArgs']] = None,
                 worker_logs: Optional[pulumi.Input['AwsMwaaEnvironmentLoggingConfigurationWorkerLogsArgs']] = None):
        if dag_processing_logs is not None:
            pulumi.set(__self__, "dag_processing_logs", dag_processing_logs)
        if scheduler_logs is not None:
            pulumi.set(__self__, "scheduler_logs", scheduler_logs)
        if task_logs is not None:
            pulumi.set(__self__, "task_logs", task_logs)
        if webserver_logs is not None:
            pulumi.set(__self__, "webserver_logs", webserver_logs)
        if worker_logs is not None:
            pulumi.set(__self__, "worker_logs", worker_logs)

    @property
    @pulumi.getter(name="dagProcessingLogs")
    def dag_processing_logs(self) -> Optional[pulumi.Input['AwsMwaaEnvironmentLoggingConfigurationDagProcessingLogsArgs']]:
        return pulumi.get(self, "dag_processing_logs")

    @dag_processing_logs.setter
    def dag_processing_logs(self, value: Optional[pulumi.Input['AwsMwaaEnvironmentLoggingConfigurationDagProcessingLogsArgs']]):
        pulumi.set(self, "dag_processing_logs", value)

    @property
    @pulumi.getter(name="schedulerLogs")
    def scheduler_logs(self) -> Optional[pulumi.Input['AwsMwaaEnvironmentLoggingConfigurationSchedulerLogsArgs']]:
        return pulumi.get(self, "scheduler_logs")

    @scheduler_logs.setter
    def scheduler_logs(self, value: Optional[pulumi.Input['AwsMwaaEnvironmentLoggingConfigurationSchedulerLogsArgs']]):
        pulumi.set(self, "scheduler_logs", value)

    @property
    @pulumi.getter(name="taskLogs")
    def task_logs(self) -> Optional[pulumi.Input['AwsMwaaEnvironmentLoggingConfigurationTaskLogsArgs']]:
        return pulumi.get(self, "task_logs")

    @task_logs.setter
    def task_logs(self, value: Optional[pulumi.Input['AwsMwaaEnvironmentLoggingConfigurationTaskLogsArgs']]):
        pulumi.set(self, "task_logs", value)

    @property
    @pulumi.getter(name="webserverLogs")
    def webserver_logs(self) -> Optional[pulumi.Input['AwsMwaaEnvironmentLoggingConfigurationWebserverLogsArgs']]:
        return pulumi.get(self, "webserver_logs")

    @webserver_logs.setter
    def webserver_logs(self, value: Optional[pulumi.Input['AwsMwaaEnvironmentLoggingConfigurationWebserverLogsArgs']]):
        pulumi.set(self, "webserver_logs", value)

    @property
    @pulumi.getter(name="workerLogs")
    def worker_logs(self) -> Optional[pulumi.Input['AwsMwaaEnvironmentLoggingConfigurationWorkerLogsArgs']]:
        return pulumi.get(self, "worker_logs")

    @worker_logs.setter
    def worker_logs(self, value: Optional[pulumi.Input['AwsMwaaEnvironmentLoggingConfigurationWorkerLogsArgs']]):
        pulumi.set(self, "worker_logs", value)


if not MYPY:
    class AwsMwaaEnvironmentLoggingConfigurationDagProcessingLogsArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
        log_level: NotRequired[pulumi.Input[str]]
elif False:
    AwsMwaaEnvironmentLoggingConfigurationDagProcessingLogsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsMwaaEnvironmentLoggingConfigurationDagProcessingLogsArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 log_level: Optional[pulumi.Input[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_level", value)


if not MYPY:
    class AwsMwaaEnvironmentLoggingConfigurationSchedulerLogsArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
        log_level: NotRequired[pulumi.Input[str]]
elif False:
    AwsMwaaEnvironmentLoggingConfigurationSchedulerLogsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsMwaaEnvironmentLoggingConfigurationSchedulerLogsArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 log_level: Optional[pulumi.Input[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_level", value)


if not MYPY:
    class AwsMwaaEnvironmentLoggingConfigurationTaskLogsArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
        log_level: NotRequired[pulumi.Input[str]]
elif False:
    AwsMwaaEnvironmentLoggingConfigurationTaskLogsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsMwaaEnvironmentLoggingConfigurationTaskLogsArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 log_level: Optional[pulumi.Input[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_level", value)


if not MYPY:
    class AwsMwaaEnvironmentLoggingConfigurationWebserverLogsArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
        log_level: NotRequired[pulumi.Input[str]]
elif False:
    AwsMwaaEnvironmentLoggingConfigurationWebserverLogsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsMwaaEnvironmentLoggingConfigurationWebserverLogsArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 log_level: Optional[pulumi.Input[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_level", value)


if not MYPY:
    class AwsMwaaEnvironmentLoggingConfigurationWorkerLogsArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
        log_level: NotRequired[pulumi.Input[str]]
elif False:
    AwsMwaaEnvironmentLoggingConfigurationWorkerLogsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsMwaaEnvironmentLoggingConfigurationWorkerLogsArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 log_level: Optional[pulumi.Input[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_level", value)


if not MYPY:
    class AwsSqsQueueDeadLetterQueueConfigurationArgsDict(TypedDict):
        max_message_receive_attempts: pulumi.Input[int]
        """
        Maximum number of processing attempts for a given message before it is moved to the dead letter queue
        """
        target_sqs_dlq_name: pulumi.Input[str]
        """
        Name of the SQS queue meant to be the target dead letter queue for this SQS resource (queues must belong to same tenant)
        """
elif False:
    AwsSqsQueueDeadLetterQueueConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsSqsQueueDeadLetterQueueConfigurationArgs:
    def __init__(__self__, *,
                 max_message_receive_attempts: pulumi.Input[int],
                 target_sqs_dlq_name: pulumi.Input[str]):
        """
        :param pulumi.Input[int] max_message_receive_attempts: Maximum number of processing attempts for a given message before it is moved to the dead letter queue
        :param pulumi.Input[str] target_sqs_dlq_name: Name of the SQS queue meant to be the target dead letter queue for this SQS resource (queues must belong to same tenant)
        """
        pulumi.set(__self__, "max_message_receive_attempts", max_message_receive_attempts)
        pulumi.set(__self__, "target_sqs_dlq_name", target_sqs_dlq_name)

    @property
    @pulumi.getter(name="maxMessageReceiveAttempts")
    def max_message_receive_attempts(self) -> pulumi.Input[int]:
        """
        Maximum number of processing attempts for a given message before it is moved to the dead letter queue
        """
        return pulumi.get(self, "max_message_receive_attempts")

    @max_message_receive_attempts.setter
    def max_message_receive_attempts(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_message_receive_attempts", value)

    @property
    @pulumi.getter(name="targetSqsDlqName")
    def target_sqs_dlq_name(self) -> pulumi.Input[str]:
        """
        Name of the SQS queue meant to be the target dead letter queue for this SQS resource (queues must belong to same tenant)
        """
        return pulumi.get(self, "target_sqs_dlq_name")

    @target_sqs_dlq_name.setter
    def target_sqs_dlq_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_sqs_dlq_name", value)


if not MYPY:
    class AwsTargetGroupAttributesAttributeArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    AwsTargetGroupAttributesAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsTargetGroupAttributesAttributeArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AwsTimestreamwriteDatabaseAllTagArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    AwsTimestreamwriteDatabaseAllTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsTimestreamwriteDatabaseAllTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AwsTimestreamwriteDatabaseTagArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    AwsTimestreamwriteDatabaseTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsTimestreamwriteDatabaseTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AwsTimestreamwriteTableAllTagArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    AwsTimestreamwriteTableAllTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsTimestreamwriteTableAllTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AwsTimestreamwriteTableMagneticStoreWritePropertiesArgsDict(TypedDict):
        enable_magnetic_store_writes: NotRequired[pulumi.Input[bool]]
        """
        A flag to enable magnetic store writes. Defaults to `false`.
        """
        magnetic_store_rejected_data_location: NotRequired[pulumi.Input['AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgsDict']]
        """
        The location to write error reports for records rejected asynchronously during magnetic store writes.
        """
elif False:
    AwsTimestreamwriteTableMagneticStoreWritePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsTimestreamwriteTableMagneticStoreWritePropertiesArgs:
    def __init__(__self__, *,
                 enable_magnetic_store_writes: Optional[pulumi.Input[bool]] = None,
                 magnetic_store_rejected_data_location: Optional[pulumi.Input['AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgs']] = None):
        """
        :param pulumi.Input[bool] enable_magnetic_store_writes: A flag to enable magnetic store writes. Defaults to `false`.
        :param pulumi.Input['AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgs'] magnetic_store_rejected_data_location: The location to write error reports for records rejected asynchronously during magnetic store writes.
        """
        if enable_magnetic_store_writes is not None:
            pulumi.set(__self__, "enable_magnetic_store_writes", enable_magnetic_store_writes)
        if magnetic_store_rejected_data_location is not None:
            pulumi.set(__self__, "magnetic_store_rejected_data_location", magnetic_store_rejected_data_location)

    @property
    @pulumi.getter(name="enableMagneticStoreWrites")
    def enable_magnetic_store_writes(self) -> Optional[pulumi.Input[bool]]:
        """
        A flag to enable magnetic store writes. Defaults to `false`.
        """
        return pulumi.get(self, "enable_magnetic_store_writes")

    @enable_magnetic_store_writes.setter
    def enable_magnetic_store_writes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_magnetic_store_writes", value)

    @property
    @pulumi.getter(name="magneticStoreRejectedDataLocation")
    def magnetic_store_rejected_data_location(self) -> Optional[pulumi.Input['AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgs']]:
        """
        The location to write error reports for records rejected asynchronously during magnetic store writes.
        """
        return pulumi.get(self, "magnetic_store_rejected_data_location")

    @magnetic_store_rejected_data_location.setter
    def magnetic_store_rejected_data_location(self, value: Optional[pulumi.Input['AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgs']]):
        pulumi.set(self, "magnetic_store_rejected_data_location", value)


if not MYPY:
    class AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgsDict(TypedDict):
        s3_configuration: NotRequired[pulumi.Input['AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgsDict']]
        """
        Configuration of an S3 location to write error reports for records rejected, asynchronously, during magnetic store writes.
        """
elif False:
    AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgs:
    def __init__(__self__, *,
                 s3_configuration: Optional[pulumi.Input['AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgs']] = None):
        """
        :param pulumi.Input['AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgs'] s3_configuration: Configuration of an S3 location to write error reports for records rejected, asynchronously, during magnetic store writes.
        """
        if s3_configuration is not None:
            pulumi.set(__self__, "s3_configuration", s3_configuration)

    @property
    @pulumi.getter(name="s3Configuration")
    def s3_configuration(self) -> Optional[pulumi.Input['AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgs']]:
        """
        Configuration of an S3 location to write error reports for records rejected, asynchronously, during magnetic store writes.
        """
        return pulumi.get(self, "s3_configuration")

    @s3_configuration.setter
    def s3_configuration(self, value: Optional[pulumi.Input['AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgs']]):
        pulumi.set(self, "s3_configuration", value)


if not MYPY:
    class AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgsDict(TypedDict):
        bucket_name: NotRequired[pulumi.Input[str]]
        """
        Bucket name of the customer S3 bucket.
        """
        encryption_option: NotRequired[pulumi.Input[str]]
        """
        Encryption option for the customer s3 location. Options are S3 server side encryption with an S3-managed key or KMS managed key. Valid values are `SSE_KMS` and `SSE_S3`.
        """
        kms_key_id: NotRequired[pulumi.Input[str]]
        """
        KMS key arn for the customer s3 location when encrypting with a KMS managed key.
        """
        object_key_prefix: NotRequired[pulumi.Input[str]]
        """
        Object key prefix for the customer S3 location.
        """
elif False:
    AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsTimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgs:
    def __init__(__self__, *,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 encryption_option: Optional[pulumi.Input[str]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 object_key_prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bucket_name: Bucket name of the customer S3 bucket.
        :param pulumi.Input[str] encryption_option: Encryption option for the customer s3 location. Options are S3 server side encryption with an S3-managed key or KMS managed key. Valid values are `SSE_KMS` and `SSE_S3`.
        :param pulumi.Input[str] kms_key_id: KMS key arn for the customer s3 location when encrypting with a KMS managed key.
        :param pulumi.Input[str] object_key_prefix: Object key prefix for the customer S3 location.
        """
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if encryption_option is not None:
            pulumi.set(__self__, "encryption_option", encryption_option)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if object_key_prefix is not None:
            pulumi.set(__self__, "object_key_prefix", object_key_prefix)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[str]]:
        """
        Bucket name of the customer S3 bucket.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="encryptionOption")
    def encryption_option(self) -> Optional[pulumi.Input[str]]:
        """
        Encryption option for the customer s3 location. Options are S3 server side encryption with an S3-managed key or KMS managed key. Valid values are `SSE_KMS` and `SSE_S3`.
        """
        return pulumi.get(self, "encryption_option")

    @encryption_option.setter
    def encryption_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_option", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        KMS key arn for the customer s3 location when encrypting with a KMS managed key.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="objectKeyPrefix")
    def object_key_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Object key prefix for the customer S3 location.
        """
        return pulumi.get(self, "object_key_prefix")

    @object_key_prefix.setter
    def object_key_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_key_prefix", value)


if not MYPY:
    class AwsTimestreamwriteTableRetentionPropertiesArgsDict(TypedDict):
        magnetic_store_retention_period_in_days: pulumi.Input[int]
        """
        The duration for which data must be stored in the magnetic store. Minimum value of 1. Maximum value of 73000.
        """
        memory_store_retention_period_in_hours: pulumi.Input[int]
        """
        The duration for which data must be stored in the memory store. Minimum value of 1. Maximum value of 8766.
        """
elif False:
    AwsTimestreamwriteTableRetentionPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsTimestreamwriteTableRetentionPropertiesArgs:
    def __init__(__self__, *,
                 magnetic_store_retention_period_in_days: pulumi.Input[int],
                 memory_store_retention_period_in_hours: pulumi.Input[int]):
        """
        :param pulumi.Input[int] magnetic_store_retention_period_in_days: The duration for which data must be stored in the magnetic store. Minimum value of 1. Maximum value of 73000.
        :param pulumi.Input[int] memory_store_retention_period_in_hours: The duration for which data must be stored in the memory store. Minimum value of 1. Maximum value of 8766.
        """
        pulumi.set(__self__, "magnetic_store_retention_period_in_days", magnetic_store_retention_period_in_days)
        pulumi.set(__self__, "memory_store_retention_period_in_hours", memory_store_retention_period_in_hours)

    @property
    @pulumi.getter(name="magneticStoreRetentionPeriodInDays")
    def magnetic_store_retention_period_in_days(self) -> pulumi.Input[int]:
        """
        The duration for which data must be stored in the magnetic store. Minimum value of 1. Maximum value of 73000.
        """
        return pulumi.get(self, "magnetic_store_retention_period_in_days")

    @magnetic_store_retention_period_in_days.setter
    def magnetic_store_retention_period_in_days(self, value: pulumi.Input[int]):
        pulumi.set(self, "magnetic_store_retention_period_in_days", value)

    @property
    @pulumi.getter(name="memoryStoreRetentionPeriodInHours")
    def memory_store_retention_period_in_hours(self) -> pulumi.Input[int]:
        """
        The duration for which data must be stored in the memory store. Minimum value of 1. Maximum value of 8766.
        """
        return pulumi.get(self, "memory_store_retention_period_in_hours")

    @memory_store_retention_period_in_hours.setter
    def memory_store_retention_period_in_hours(self, value: pulumi.Input[int]):
        pulumi.set(self, "memory_store_retention_period_in_hours", value)


if not MYPY:
    class AwsTimestreamwriteTableTagArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    AwsTimestreamwriteTableTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsTimestreamwriteTableTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AzureAvailabilitySetVirtualMachineArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
elif False:
    AzureAvailabilitySetVirtualMachineArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureAvailabilitySetVirtualMachineArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class AzureK8NodePoolNodeLabelArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    AzureK8NodePoolNodeLabelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureK8NodePoolNodeLabelArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AzureK8NodePoolScalePriorityArgsDict(TypedDict):
        eviction_policy: NotRequired[pulumi.Input[str]]
        """
        eviction policies Delete/Deallocate. Default value is Delete
        """
        priority: NotRequired[pulumi.Input[str]]
        """
        priority levels Regular/Spot
        """
        spot_max_price: NotRequired[pulumi.Input[float]]
        """
        for spot VMs sets the maximum price you're willing to pay, controlling costs, while priority.spot determines the scaling order of spot VM pools.
        """
elif False:
    AzureK8NodePoolScalePriorityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureK8NodePoolScalePriorityArgs:
    def __init__(__self__, *,
                 eviction_policy: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 spot_max_price: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] eviction_policy: eviction policies Delete/Deallocate. Default value is Delete
        :param pulumi.Input[str] priority: priority levels Regular/Spot
        :param pulumi.Input[float] spot_max_price: for spot VMs sets the maximum price you're willing to pay, controlling costs, while priority.spot determines the scaling order of spot VM pools.
        """
        if eviction_policy is not None:
            pulumi.set(__self__, "eviction_policy", eviction_policy)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if spot_max_price is not None:
            pulumi.set(__self__, "spot_max_price", spot_max_price)

    @property
    @pulumi.getter(name="evictionPolicy")
    def eviction_policy(self) -> Optional[pulumi.Input[str]]:
        """
        eviction policies Delete/Deallocate. Default value is Delete
        """
        return pulumi.get(self, "eviction_policy")

    @eviction_policy.setter
    def eviction_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eviction_policy", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        """
        priority levels Regular/Spot
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="spotMaxPrice")
    def spot_max_price(self) -> Optional[pulumi.Input[float]]:
        """
        for spot VMs sets the maximum price you're willing to pay, controlling costs, while priority.spot determines the scaling order of spot VM pools.
        """
        return pulumi.get(self, "spot_max_price")

    @spot_max_price.setter
    def spot_max_price(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "spot_max_price", value)


if not MYPY:
    class AzureMssqlDatabaseSkuArgsDict(TypedDict):
        capacity: pulumi.Input[int]
        name: pulumi.Input[str]
        tier: NotRequired[pulumi.Input[str]]
elif False:
    AzureMssqlDatabaseSkuArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureMssqlDatabaseSkuArgs:
    def __init__(__self__, *,
                 capacity: pulumi.Input[int],
                 name: pulumi.Input[str],
                 tier: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "capacity", capacity)
        pulumi.set(__self__, "name", name)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def capacity(self) -> pulumi.Input[int]:
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: pulumi.Input[int]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tier", value)


if not MYPY:
    class AzureMssqlElasticpoolSkuArgsDict(TypedDict):
        capacity: pulumi.Input[int]
        name: pulumi.Input[str]
        tier: NotRequired[pulumi.Input[str]]
elif False:
    AzureMssqlElasticpoolSkuArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureMssqlElasticpoolSkuArgs:
    def __init__(__self__, *,
                 capacity: pulumi.Input[int],
                 name: pulumi.Input[str],
                 tier: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "capacity", capacity)
        pulumi.set(__self__, "name", name)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def capacity(self) -> pulumi.Input[int]:
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: pulumi.Input[int]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tier", value)


if not MYPY:
    class AzurePrivateEndpointPrivateLinkServiceConnectionArgsDict(TypedDict):
        group_ids: pulumi.Input[Sequence[pulumi.Input[str]]]
        name: pulumi.Input[str]
        """
        Specifies the Name of the Private Service Connection.
        """
        private_connection_resource_id: pulumi.Input[str]
        """
        The ID of the Private Link Enabled Remote Resource which this Private Endpoint should be connected to.
        """
elif False:
    AzurePrivateEndpointPrivateLinkServiceConnectionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzurePrivateEndpointPrivateLinkServiceConnectionArgs:
    def __init__(__self__, *,
                 group_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 name: pulumi.Input[str],
                 private_connection_resource_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Specifies the Name of the Private Service Connection.
        :param pulumi.Input[str] private_connection_resource_id: The ID of the Private Link Enabled Remote Resource which this Private Endpoint should be connected to.
        """
        pulumi.set(__self__, "group_ids", group_ids)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "private_connection_resource_id", private_connection_resource_id)

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "group_ids")

    @group_ids.setter
    def group_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "group_ids", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Specifies the Name of the Private Service Connection.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="privateConnectionResourceId")
    def private_connection_resource_id(self) -> pulumi.Input[str]:
        """
        The ID of the Private Link Enabled Remote Resource which this Private Endpoint should be connected to.
        """
        return pulumi.get(self, "private_connection_resource_id")

    @private_connection_resource_id.setter
    def private_connection_resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_connection_resource_id", value)


if not MYPY:
    class AzureVaultBackupPolicyBackupArgsDict(TypedDict):
        frequency: pulumi.Input[str]
        time: pulumi.Input[str]
        hour_duration: NotRequired[pulumi.Input[int]]
        hour_interval: NotRequired[pulumi.Input[int]]
        weekdays: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    AzureVaultBackupPolicyBackupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureVaultBackupPolicyBackupArgs:
    def __init__(__self__, *,
                 frequency: pulumi.Input[str],
                 time: pulumi.Input[str],
                 hour_duration: Optional[pulumi.Input[int]] = None,
                 hour_interval: Optional[pulumi.Input[int]] = None,
                 weekdays: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "time", time)
        if hour_duration is not None:
            pulumi.set(__self__, "hour_duration", hour_duration)
        if hour_interval is not None:
            pulumi.set(__self__, "hour_interval", hour_interval)
        if weekdays is not None:
            pulumi.set(__self__, "weekdays", weekdays)

    @property
    @pulumi.getter
    def frequency(self) -> pulumi.Input[str]:
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: pulumi.Input[str]):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter
    def time(self) -> pulumi.Input[str]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: pulumi.Input[str]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter(name="hourDuration")
    def hour_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hour_duration")

    @hour_duration.setter
    def hour_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hour_duration", value)

    @property
    @pulumi.getter(name="hourInterval")
    def hour_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hour_interval")

    @hour_interval.setter
    def hour_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hour_interval", value)

    @property
    @pulumi.getter
    def weekdays(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "weekdays")

    @weekdays.setter
    def weekdays(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "weekdays", value)


if not MYPY:
    class AzureVaultBackupPolicyRetentionDailyArgsDict(TypedDict):
        count: pulumi.Input[int]
elif False:
    AzureVaultBackupPolicyRetentionDailyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureVaultBackupPolicyRetentionDailyArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[int]):
        pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[int]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[int]):
        pulumi.set(self, "count", value)


if not MYPY:
    class AzureVaultBackupPolicyRetentionMonthlyArgsDict(TypedDict):
        count: pulumi.Input[int]
        weekdays: pulumi.Input[Sequence[pulumi.Input[str]]]
        weeks: pulumi.Input[Sequence[pulumi.Input[str]]]
elif False:
    AzureVaultBackupPolicyRetentionMonthlyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureVaultBackupPolicyRetentionMonthlyArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[int],
                 weekdays: pulumi.Input[Sequence[pulumi.Input[str]]],
                 weeks: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "weekdays", weekdays)
        pulumi.set(__self__, "weeks", weeks)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[int]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[int]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def weekdays(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "weekdays")

    @weekdays.setter
    def weekdays(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "weekdays", value)

    @property
    @pulumi.getter
    def weeks(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "weeks")

    @weeks.setter
    def weeks(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "weeks", value)


if not MYPY:
    class AzureVaultBackupPolicyRetentionWeeklyArgsDict(TypedDict):
        count: pulumi.Input[int]
        weekdays: pulumi.Input[Sequence[pulumi.Input[str]]]
elif False:
    AzureVaultBackupPolicyRetentionWeeklyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureVaultBackupPolicyRetentionWeeklyArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[int],
                 weekdays: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "weekdays", weekdays)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[int]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[int]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def weekdays(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "weekdays")

    @weekdays.setter
    def weekdays(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "weekdays", value)


if not MYPY:
    class AzureVaultBackupPolicyRetentionYearlyArgsDict(TypedDict):
        count: pulumi.Input[int]
        months: pulumi.Input[Sequence[pulumi.Input[str]]]
        weekdays: pulumi.Input[Sequence[pulumi.Input[str]]]
        weeks: pulumi.Input[Sequence[pulumi.Input[str]]]
elif False:
    AzureVaultBackupPolicyRetentionYearlyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureVaultBackupPolicyRetentionYearlyArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[int],
                 months: pulumi.Input[Sequence[pulumi.Input[str]]],
                 weekdays: pulumi.Input[Sequence[pulumi.Input[str]]],
                 weeks: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "months", months)
        pulumi.set(__self__, "weekdays", weekdays)
        pulumi.set(__self__, "weeks", weeks)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[int]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[int]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def months(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "months")

    @months.setter
    def months(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "months", value)

    @property
    @pulumi.getter
    def weekdays(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "weekdays")

    @weekdays.setter
    def weekdays(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "weekdays", value)

    @property
    @pulumi.getter
    def weeks(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "weeks")

    @weeks.setter
    def weeks(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "weeks", value)


if not MYPY:
    class AzureVirtualMachineMinionTagArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    AzureVirtualMachineMinionTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureVirtualMachineMinionTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AzureVirtualMachineScaleSetBootDiagnosticsArgsDict(TypedDict):
        storage_uri: pulumi.Input[str]
        """
        Blob endpoint for the storage account to hold the virtual machine's diagnostic files.
        """
        enabled: NotRequired[pulumi.Input[bool]]
        """
        Whether to enable boot diagnostics for the virtual machine. Defaults to `true`.
        """
elif False:
    AzureVirtualMachineScaleSetBootDiagnosticsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureVirtualMachineScaleSetBootDiagnosticsArgs:
    def __init__(__self__, *,
                 storage_uri: pulumi.Input[str],
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] storage_uri: Blob endpoint for the storage account to hold the virtual machine's diagnostic files.
        :param pulumi.Input[bool] enabled: Whether to enable boot diagnostics for the virtual machine. Defaults to `true`.
        """
        pulumi.set(__self__, "storage_uri", storage_uri)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="storageUri")
    def storage_uri(self) -> pulumi.Input[str]:
        """
        Blob endpoint for the storage account to hold the virtual machine's diagnostic files.
        """
        return pulumi.get(self, "storage_uri")

    @storage_uri.setter
    def storage_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_uri", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable boot diagnostics for the virtual machine. Defaults to `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class AzureVirtualMachineScaleSetExtensionArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Specifies the name of the extension.
        """
        publisher: pulumi.Input[str]
        """
        The publisher of the extension, available publishers can be found by using the Azure CLI..
        """
        type: pulumi.Input[str]
        """
        The type of extension, available types for a publisher can be found using the Azure CLI.
        """
        type_handler_version: pulumi.Input[str]
        """
        Specifies the version of the extension to use, available versions can be found using the Azure CLI.
        """
        auto_upgrade_minor_version: NotRequired[pulumi.Input[bool]]
        """
        Specifies whether or not to use the latest minor version available.
        """
        protected_settings: NotRequired[pulumi.Input[str]]
        """
        The protected_settings passed to the extension, like settings, these are specified as a JSON object in a string.
        """
        provision_after_extensions: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Specifies a dependency array of extensions required to be executed before, the array stores the name of each extension.
        """
        settings: NotRequired[pulumi.Input[str]]
        """
        The settings passed to the extension, these are specified as a JSON object in a string.
        """
elif False:
    AzureVirtualMachineScaleSetExtensionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureVirtualMachineScaleSetExtensionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 publisher: pulumi.Input[str],
                 type: pulumi.Input[str],
                 type_handler_version: pulumi.Input[str],
                 auto_upgrade_minor_version: Optional[pulumi.Input[bool]] = None,
                 protected_settings: Optional[pulumi.Input[str]] = None,
                 provision_after_extensions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 settings: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Specifies the name of the extension.
        :param pulumi.Input[str] publisher: The publisher of the extension, available publishers can be found by using the Azure CLI..
        :param pulumi.Input[str] type: The type of extension, available types for a publisher can be found using the Azure CLI.
        :param pulumi.Input[str] type_handler_version: Specifies the version of the extension to use, available versions can be found using the Azure CLI.
        :param pulumi.Input[bool] auto_upgrade_minor_version: Specifies whether or not to use the latest minor version available.
        :param pulumi.Input[str] protected_settings: The protected_settings passed to the extension, like settings, these are specified as a JSON object in a string.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] provision_after_extensions: Specifies a dependency array of extensions required to be executed before, the array stores the name of each extension.
        :param pulumi.Input[str] settings: The settings passed to the extension, these are specified as a JSON object in a string.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "publisher", publisher)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "type_handler_version", type_handler_version)
        if auto_upgrade_minor_version is not None:
            pulumi.set(__self__, "auto_upgrade_minor_version", auto_upgrade_minor_version)
        if protected_settings is not None:
            pulumi.set(__self__, "protected_settings", protected_settings)
        if provision_after_extensions is not None:
            pulumi.set(__self__, "provision_after_extensions", provision_after_extensions)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Specifies the name of the extension.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def publisher(self) -> pulumi.Input[str]:
        """
        The publisher of the extension, available publishers can be found by using the Azure CLI..
        """
        return pulumi.get(self, "publisher")

    @publisher.setter
    def publisher(self, value: pulumi.Input[str]):
        pulumi.set(self, "publisher", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of extension, available types for a publisher can be found using the Azure CLI.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="typeHandlerVersion")
    def type_handler_version(self) -> pulumi.Input[str]:
        """
        Specifies the version of the extension to use, available versions can be found using the Azure CLI.
        """
        return pulumi.get(self, "type_handler_version")

    @type_handler_version.setter
    def type_handler_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "type_handler_version", value)

    @property
    @pulumi.getter(name="autoUpgradeMinorVersion")
    def auto_upgrade_minor_version(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether or not to use the latest minor version available.
        """
        return pulumi.get(self, "auto_upgrade_minor_version")

    @auto_upgrade_minor_version.setter
    def auto_upgrade_minor_version(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_upgrade_minor_version", value)

    @property
    @pulumi.getter(name="protectedSettings")
    def protected_settings(self) -> Optional[pulumi.Input[str]]:
        """
        The protected_settings passed to the extension, like settings, these are specified as a JSON object in a string.
        """
        return pulumi.get(self, "protected_settings")

    @protected_settings.setter
    def protected_settings(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protected_settings", value)

    @property
    @pulumi.getter(name="provisionAfterExtensions")
    def provision_after_extensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies a dependency array of extensions required to be executed before, the array stores the name of each extension.
        """
        return pulumi.get(self, "provision_after_extensions")

    @provision_after_extensions.setter
    def provision_after_extensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "provision_after_extensions", value)

    @property
    @pulumi.getter
    def settings(self) -> Optional[pulumi.Input[str]]:
        """
        The settings passed to the extension, these are specified as a JSON object in a string.
        """
        return pulumi.get(self, "settings")

    @settings.setter
    def settings(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "settings", value)


if not MYPY:
    class AzureVirtualMachineScaleSetIdentityArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Specifies the identity type to be assigned to the scale set. Allowable values are `SystemAssigned` and `UserAssigned`.
        """
        identity_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Specifies a list of user managed identity ids to be assigned to the VMSS. Required if `type` is `UserAssigned`.
        """
        principal_id: NotRequired[pulumi.Input[str]]
elif False:
    AzureVirtualMachineScaleSetIdentityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureVirtualMachineScaleSetIdentityArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 identity_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 principal_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: Specifies the identity type to be assigned to the scale set. Allowable values are `SystemAssigned` and `UserAssigned`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] identity_ids: Specifies a list of user managed identity ids to be assigned to the VMSS. Required if `type` is `UserAssigned`.
        """
        pulumi.set(__self__, "type", type)
        if identity_ids is not None:
            pulumi.set(__self__, "identity_ids", identity_ids)
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Specifies the identity type to be assigned to the scale set. Allowable values are `SystemAssigned` and `UserAssigned`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies a list of user managed identity ids to be assigned to the VMSS. Required if `type` is `UserAssigned`.
        """
        return pulumi.get(self, "identity_ids")

    @identity_ids.setter
    def identity_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "identity_ids", value)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "principal_id")

    @principal_id.setter
    def principal_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal_id", value)


if not MYPY:
    class AzureVirtualMachineScaleSetNetworkProfileArgsDict(TypedDict):
        ip_configurations: pulumi.Input[Sequence[pulumi.Input['AzureVirtualMachineScaleSetNetworkProfileIpConfigurationArgsDict']]]
        name: pulumi.Input[str]
        """
        Specifies the name of the network interface configuration.
        """
        primary: pulumi.Input[bool]
        """
        Indicates whether network interfaces created from the network interface configuration will be the primary NIC of the VM.
        """
        accelerated_networking: NotRequired[pulumi.Input[bool]]
        """
        Specifies whether to enable accelerated networking or not. Defaults to `false`.
        """
        dns_settings: NotRequired[pulumi.Input['AzureVirtualMachineScaleSetNetworkProfileDnsSettingsArgsDict']]
        ip_forwarding: NotRequired[pulumi.Input[bool]]
        """
        Whether IP forwarding is enabled on this NIC. Defaults to `false`.
        """
        network_security_group_id: NotRequired[pulumi.Input[str]]
        """
        Specifies the identifier for the network security group.
        """
elif False:
    AzureVirtualMachineScaleSetNetworkProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureVirtualMachineScaleSetNetworkProfileArgs:
    def __init__(__self__, *,
                 ip_configurations: pulumi.Input[Sequence[pulumi.Input['AzureVirtualMachineScaleSetNetworkProfileIpConfigurationArgs']]],
                 name: pulumi.Input[str],
                 primary: pulumi.Input[bool],
                 accelerated_networking: Optional[pulumi.Input[bool]] = None,
                 dns_settings: Optional[pulumi.Input['AzureVirtualMachineScaleSetNetworkProfileDnsSettingsArgs']] = None,
                 ip_forwarding: Optional[pulumi.Input[bool]] = None,
                 network_security_group_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Specifies the name of the network interface configuration.
        :param pulumi.Input[bool] primary: Indicates whether network interfaces created from the network interface configuration will be the primary NIC of the VM.
        :param pulumi.Input[bool] accelerated_networking: Specifies whether to enable accelerated networking or not. Defaults to `false`.
        :param pulumi.Input[bool] ip_forwarding: Whether IP forwarding is enabled on this NIC. Defaults to `false`.
        :param pulumi.Input[str] network_security_group_id: Specifies the identifier for the network security group.
        """
        pulumi.set(__self__, "ip_configurations", ip_configurations)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary", primary)
        if accelerated_networking is not None:
            pulumi.set(__self__, "accelerated_networking", accelerated_networking)
        if dns_settings is not None:
            pulumi.set(__self__, "dns_settings", dns_settings)
        if ip_forwarding is not None:
            pulumi.set(__self__, "ip_forwarding", ip_forwarding)
        if network_security_group_id is not None:
            pulumi.set(__self__, "network_security_group_id", network_security_group_id)

    @property
    @pulumi.getter(name="ipConfigurations")
    def ip_configurations(self) -> pulumi.Input[Sequence[pulumi.Input['AzureVirtualMachineScaleSetNetworkProfileIpConfigurationArgs']]]:
        return pulumi.get(self, "ip_configurations")

    @ip_configurations.setter
    def ip_configurations(self, value: pulumi.Input[Sequence[pulumi.Input['AzureVirtualMachineScaleSetNetworkProfileIpConfigurationArgs']]]):
        pulumi.set(self, "ip_configurations", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Specifies the name of the network interface configuration.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def primary(self) -> pulumi.Input[bool]:
        """
        Indicates whether network interfaces created from the network interface configuration will be the primary NIC of the VM.
        """
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: pulumi.Input[bool]):
        pulumi.set(self, "primary", value)

    @property
    @pulumi.getter(name="acceleratedNetworking")
    def accelerated_networking(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to enable accelerated networking or not. Defaults to `false`.
        """
        return pulumi.get(self, "accelerated_networking")

    @accelerated_networking.setter
    def accelerated_networking(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "accelerated_networking", value)

    @property
    @pulumi.getter(name="dnsSettings")
    def dns_settings(self) -> Optional[pulumi.Input['AzureVirtualMachineScaleSetNetworkProfileDnsSettingsArgs']]:
        return pulumi.get(self, "dns_settings")

    @dns_settings.setter
    def dns_settings(self, value: Optional[pulumi.Input['AzureVirtualMachineScaleSetNetworkProfileDnsSettingsArgs']]):
        pulumi.set(self, "dns_settings", value)

    @property
    @pulumi.getter(name="ipForwarding")
    def ip_forwarding(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether IP forwarding is enabled on this NIC. Defaults to `false`.
        """
        return pulumi.get(self, "ip_forwarding")

    @ip_forwarding.setter
    def ip_forwarding(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip_forwarding", value)

    @property
    @pulumi.getter(name="networkSecurityGroupId")
    def network_security_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the identifier for the network security group.
        """
        return pulumi.get(self, "network_security_group_id")

    @network_security_group_id.setter
    def network_security_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_security_group_id", value)


if not MYPY:
    class AzureVirtualMachineScaleSetNetworkProfileDnsSettingsArgsDict(TypedDict):
        dns_servers: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        Specifies an array of dns servers.
        """
elif False:
    AzureVirtualMachineScaleSetNetworkProfileDnsSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureVirtualMachineScaleSetNetworkProfileDnsSettingsArgs:
    def __init__(__self__, *,
                 dns_servers: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_servers: Specifies an array of dns servers.
        """
        pulumi.set(__self__, "dns_servers", dns_servers)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Specifies an array of dns servers.
        """
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "dns_servers", value)


if not MYPY:
    class AzureVirtualMachineScaleSetNetworkProfileIpConfigurationArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Specifies name of the IP configuration.
        """
        subnet_id: pulumi.Input[str]
        """
        Specifies the identifier of the subnet.
        """
        application_gateway_backend_address_pool_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Specifies an array of references to backend address pools of application gateways.
        """
        application_security_group_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Specifies up to 20 application security group IDs.
        """
        load_balancer_backend_address_pool_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Specifies an array of references to backend address pools of load balancers.
        """
        load_balancer_inbound_nat_rules_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Specifies an array of references to inbound NAT pools for load balancers.
        """
        primary: NotRequired[pulumi.Input[bool]]
        """
        Specifies if this ip_configuration is the primary one.
        """
        public_ip_address_configuration: NotRequired[pulumi.Input['AzureVirtualMachineScaleSetNetworkProfileIpConfigurationPublicIpAddressConfigurationArgsDict']]
        """
        Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration.
        """
elif False:
    AzureVirtualMachineScaleSetNetworkProfileIpConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureVirtualMachineScaleSetNetworkProfileIpConfigurationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 subnet_id: pulumi.Input[str],
                 application_gateway_backend_address_pool_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 application_security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 load_balancer_backend_address_pool_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 load_balancer_inbound_nat_rules_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 primary: Optional[pulumi.Input[bool]] = None,
                 public_ip_address_configuration: Optional[pulumi.Input['AzureVirtualMachineScaleSetNetworkProfileIpConfigurationPublicIpAddressConfigurationArgs']] = None):
        """
        :param pulumi.Input[str] name: Specifies name of the IP configuration.
        :param pulumi.Input[str] subnet_id: Specifies the identifier of the subnet.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] application_gateway_backend_address_pool_ids: Specifies an array of references to backend address pools of application gateways.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] application_security_group_ids: Specifies up to 20 application security group IDs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] load_balancer_backend_address_pool_ids: Specifies an array of references to backend address pools of load balancers.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] load_balancer_inbound_nat_rules_ids: Specifies an array of references to inbound NAT pools for load balancers.
        :param pulumi.Input[bool] primary: Specifies if this ip_configuration is the primary one.
        :param pulumi.Input['AzureVirtualMachineScaleSetNetworkProfileIpConfigurationPublicIpAddressConfigurationArgs'] public_ip_address_configuration: Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if application_gateway_backend_address_pool_ids is not None:
            pulumi.set(__self__, "application_gateway_backend_address_pool_ids", application_gateway_backend_address_pool_ids)
        if application_security_group_ids is not None:
            pulumi.set(__self__, "application_security_group_ids", application_security_group_ids)
        if load_balancer_backend_address_pool_ids is not None:
            pulumi.set(__self__, "load_balancer_backend_address_pool_ids", load_balancer_backend_address_pool_ids)
        if load_balancer_inbound_nat_rules_ids is not None:
            pulumi.set(__self__, "load_balancer_inbound_nat_rules_ids", load_balancer_inbound_nat_rules_ids)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if public_ip_address_configuration is not None:
            pulumi.set(__self__, "public_ip_address_configuration", public_ip_address_configuration)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Specifies name of the IP configuration.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        Specifies the identifier of the subnet.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="applicationGatewayBackendAddressPoolIds")
    def application_gateway_backend_address_pool_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies an array of references to backend address pools of application gateways.
        """
        return pulumi.get(self, "application_gateway_backend_address_pool_ids")

    @application_gateway_backend_address_pool_ids.setter
    def application_gateway_backend_address_pool_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "application_gateway_backend_address_pool_ids", value)

    @property
    @pulumi.getter(name="applicationSecurityGroupIds")
    def application_security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies up to 20 application security group IDs.
        """
        return pulumi.get(self, "application_security_group_ids")

    @application_security_group_ids.setter
    def application_security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "application_security_group_ids", value)

    @property
    @pulumi.getter(name="loadBalancerBackendAddressPoolIds")
    def load_balancer_backend_address_pool_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies an array of references to backend address pools of load balancers.
        """
        return pulumi.get(self, "load_balancer_backend_address_pool_ids")

    @load_balancer_backend_address_pool_ids.setter
    def load_balancer_backend_address_pool_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "load_balancer_backend_address_pool_ids", value)

    @property
    @pulumi.getter(name="loadBalancerInboundNatRulesIds")
    def load_balancer_inbound_nat_rules_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies an array of references to inbound NAT pools for load balancers.
        """
        return pulumi.get(self, "load_balancer_inbound_nat_rules_ids")

    @load_balancer_inbound_nat_rules_ids.setter
    def load_balancer_inbound_nat_rules_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "load_balancer_inbound_nat_rules_ids", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies if this ip_configuration is the primary one.
        """
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "primary", value)

    @property
    @pulumi.getter(name="publicIpAddressConfiguration")
    def public_ip_address_configuration(self) -> Optional[pulumi.Input['AzureVirtualMachineScaleSetNetworkProfileIpConfigurationPublicIpAddressConfigurationArgs']]:
        """
        Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration.
        """
        return pulumi.get(self, "public_ip_address_configuration")

    @public_ip_address_configuration.setter
    def public_ip_address_configuration(self, value: Optional[pulumi.Input['AzureVirtualMachineScaleSetNetworkProfileIpConfigurationPublicIpAddressConfigurationArgs']]):
        pulumi.set(self, "public_ip_address_configuration", value)


if not MYPY:
    class AzureVirtualMachineScaleSetNetworkProfileIpConfigurationPublicIpAddressConfigurationArgsDict(TypedDict):
        domain_name_label: pulumi.Input[str]
        """
        The domain name label for the dns settings.
        """
        idle_timeout: pulumi.Input[int]
        """
        The idle timeout in minutes. This value must be between 4 and 30.
        """
        name: pulumi.Input[str]
        """
        The name of the public ip address configuration.
        """
elif False:
    AzureVirtualMachineScaleSetNetworkProfileIpConfigurationPublicIpAddressConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureVirtualMachineScaleSetNetworkProfileIpConfigurationPublicIpAddressConfigurationArgs:
    def __init__(__self__, *,
                 domain_name_label: pulumi.Input[str],
                 idle_timeout: pulumi.Input[int],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] domain_name_label: The domain name label for the dns settings.
        :param pulumi.Input[int] idle_timeout: The idle timeout in minutes. This value must be between 4 and 30.
        :param pulumi.Input[str] name: The name of the public ip address configuration.
        """
        pulumi.set(__self__, "domain_name_label", domain_name_label)
        pulumi.set(__self__, "idle_timeout", idle_timeout)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="domainNameLabel")
    def domain_name_label(self) -> pulumi.Input[str]:
        """
        The domain name label for the dns settings.
        """
        return pulumi.get(self, "domain_name_label")

    @domain_name_label.setter
    def domain_name_label(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain_name_label", value)

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> pulumi.Input[int]:
        """
        The idle timeout in minutes. This value must be between 4 and 30.
        """
        return pulumi.get(self, "idle_timeout")

    @idle_timeout.setter
    def idle_timeout(self, value: pulumi.Input[int]):
        pulumi.set(self, "idle_timeout", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the public ip address configuration.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class AzureVirtualMachineScaleSetOsProfileArgsDict(TypedDict):
        admin_username: pulumi.Input[str]
        """
        Specifies the administrator account name to use for all the instances of virtual machines in the scale set.
        """
        computer_name_prefix: pulumi.Input[str]
        """
        Specifies the computer name prefix for all of the virtual machines in the scale set.
        """
        admin_password: NotRequired[pulumi.Input[str]]
        """
        Specifies the administrator password to use for all the instances of virtual machines in a scale set.
        """
        custom_data: NotRequired[pulumi.Input[str]]
        """
        Specifies custom data to supply to the machine. On linux-based systems, this can be used as a cloud-init script. On other systems, this will be copied as a file on disk.
        """
elif False:
    AzureVirtualMachineScaleSetOsProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureVirtualMachineScaleSetOsProfileArgs:
    def __init__(__self__, *,
                 admin_username: pulumi.Input[str],
                 computer_name_prefix: pulumi.Input[str],
                 admin_password: Optional[pulumi.Input[str]] = None,
                 custom_data: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] admin_username: Specifies the administrator account name to use for all the instances of virtual machines in the scale set.
        :param pulumi.Input[str] computer_name_prefix: Specifies the computer name prefix for all of the virtual machines in the scale set.
        :param pulumi.Input[str] admin_password: Specifies the administrator password to use for all the instances of virtual machines in a scale set.
        :param pulumi.Input[str] custom_data: Specifies custom data to supply to the machine. On linux-based systems, this can be used as a cloud-init script. On other systems, this will be copied as a file on disk.
        """
        pulumi.set(__self__, "admin_username", admin_username)
        pulumi.set(__self__, "computer_name_prefix", computer_name_prefix)
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if custom_data is not None:
            pulumi.set(__self__, "custom_data", custom_data)

    @property
    @pulumi.getter(name="adminUsername")
    def admin_username(self) -> pulumi.Input[str]:
        """
        Specifies the administrator account name to use for all the instances of virtual machines in the scale set.
        """
        return pulumi.get(self, "admin_username")

    @admin_username.setter
    def admin_username(self, value: pulumi.Input[str]):
        pulumi.set(self, "admin_username", value)

    @property
    @pulumi.getter(name="computerNamePrefix")
    def computer_name_prefix(self) -> pulumi.Input[str]:
        """
        Specifies the computer name prefix for all of the virtual machines in the scale set.
        """
        return pulumi.get(self, "computer_name_prefix")

    @computer_name_prefix.setter
    def computer_name_prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "computer_name_prefix", value)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the administrator password to use for all the instances of virtual machines in a scale set.
        """
        return pulumi.get(self, "admin_password")

    @admin_password.setter
    def admin_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_password", value)

    @property
    @pulumi.getter(name="customData")
    def custom_data(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies custom data to supply to the machine. On linux-based systems, this can be used as a cloud-init script. On other systems, this will be copied as a file on disk.
        """
        return pulumi.get(self, "custom_data")

    @custom_data.setter
    def custom_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_data", value)


if not MYPY:
    class AzureVirtualMachineScaleSetOsProfileLinuxConfigArgsDict(TypedDict):
        disable_password_authentication: NotRequired[pulumi.Input[bool]]
        """
        Specifies whether password authentication should be disabled. Defaults to `false`.
        """
        ssh_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input['AzureVirtualMachineScaleSetOsProfileLinuxConfigSshKeyArgsDict']]]]
        """
        Specifies a collection of `path` and `key_data` to be placed on the virtual machine.
        """
elif False:
    AzureVirtualMachineScaleSetOsProfileLinuxConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureVirtualMachineScaleSetOsProfileLinuxConfigArgs:
    def __init__(__self__, *,
                 disable_password_authentication: Optional[pulumi.Input[bool]] = None,
                 ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input['AzureVirtualMachineScaleSetOsProfileLinuxConfigSshKeyArgs']]]] = None):
        """
        :param pulumi.Input[bool] disable_password_authentication: Specifies whether password authentication should be disabled. Defaults to `false`.
        :param pulumi.Input[Sequence[pulumi.Input['AzureVirtualMachineScaleSetOsProfileLinuxConfigSshKeyArgs']]] ssh_keys: Specifies a collection of `path` and `key_data` to be placed on the virtual machine.
        """
        if disable_password_authentication is not None:
            pulumi.set(__self__, "disable_password_authentication", disable_password_authentication)
        if ssh_keys is not None:
            pulumi.set(__self__, "ssh_keys", ssh_keys)

    @property
    @pulumi.getter(name="disablePasswordAuthentication")
    def disable_password_authentication(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether password authentication should be disabled. Defaults to `false`.
        """
        return pulumi.get(self, "disable_password_authentication")

    @disable_password_authentication.setter
    def disable_password_authentication(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_password_authentication", value)

    @property
    @pulumi.getter(name="sshKeys")
    def ssh_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AzureVirtualMachineScaleSetOsProfileLinuxConfigSshKeyArgs']]]]:
        """
        Specifies a collection of `path` and `key_data` to be placed on the virtual machine.
        """
        return pulumi.get(self, "ssh_keys")

    @ssh_keys.setter
    def ssh_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AzureVirtualMachineScaleSetOsProfileLinuxConfigSshKeyArgs']]]]):
        pulumi.set(self, "ssh_keys", value)


if not MYPY:
    class AzureVirtualMachineScaleSetOsProfileLinuxConfigSshKeyArgsDict(TypedDict):
        path: pulumi.Input[str]
        key_data: NotRequired[pulumi.Input[str]]
elif False:
    AzureVirtualMachineScaleSetOsProfileLinuxConfigSshKeyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureVirtualMachineScaleSetOsProfileLinuxConfigSshKeyArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 key_data: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "path", path)
        if key_data is not None:
            pulumi.set(__self__, "key_data", key_data)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="keyData")
    def key_data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_data")

    @key_data.setter
    def key_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_data", value)


if not MYPY:
    class AzureVirtualMachineScaleSetOsProfileSecretArgsDict(TypedDict):
        source_vault_id: pulumi.Input[str]
        """
        Specifies the key vault to use.
        """
        vault_certificates: NotRequired[pulumi.Input[Sequence[pulumi.Input['AzureVirtualMachineScaleSetOsProfileSecretVaultCertificateArgsDict']]]]
        """
        A collection of Vault Certificates as documented below.
        """
elif False:
    AzureVirtualMachineScaleSetOsProfileSecretArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureVirtualMachineScaleSetOsProfileSecretArgs:
    def __init__(__self__, *,
                 source_vault_id: pulumi.Input[str],
                 vault_certificates: Optional[pulumi.Input[Sequence[pulumi.Input['AzureVirtualMachineScaleSetOsProfileSecretVaultCertificateArgs']]]] = None):
        """
        :param pulumi.Input[str] source_vault_id: Specifies the key vault to use.
        :param pulumi.Input[Sequence[pulumi.Input['AzureVirtualMachineScaleSetOsProfileSecretVaultCertificateArgs']]] vault_certificates: A collection of Vault Certificates as documented below.
        """
        pulumi.set(__self__, "source_vault_id", source_vault_id)
        if vault_certificates is not None:
            pulumi.set(__self__, "vault_certificates", vault_certificates)

    @property
    @pulumi.getter(name="sourceVaultId")
    def source_vault_id(self) -> pulumi.Input[str]:
        """
        Specifies the key vault to use.
        """
        return pulumi.get(self, "source_vault_id")

    @source_vault_id.setter
    def source_vault_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_vault_id", value)

    @property
    @pulumi.getter(name="vaultCertificates")
    def vault_certificates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AzureVirtualMachineScaleSetOsProfileSecretVaultCertificateArgs']]]]:
        """
        A collection of Vault Certificates as documented below.
        """
        return pulumi.get(self, "vault_certificates")

    @vault_certificates.setter
    def vault_certificates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AzureVirtualMachineScaleSetOsProfileSecretVaultCertificateArgs']]]]):
        pulumi.set(self, "vault_certificates", value)


if not MYPY:
    class AzureVirtualMachineScaleSetOsProfileSecretVaultCertificateArgsDict(TypedDict):
        certificate_url: pulumi.Input[str]
        """
        It is the Base64 encoding of a JSON Object that which is encoded in UTF-8 of which the contents need to be `data`, `dataType` and `password`.
        """
        certificate_store: NotRequired[pulumi.Input[str]]
        """
        Specifies the certificate store on the Virtual Machine where the certificate should be added to.
        """
elif False:
    AzureVirtualMachineScaleSetOsProfileSecretVaultCertificateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureVirtualMachineScaleSetOsProfileSecretVaultCertificateArgs:
    def __init__(__self__, *,
                 certificate_url: pulumi.Input[str],
                 certificate_store: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] certificate_url: It is the Base64 encoding of a JSON Object that which is encoded in UTF-8 of which the contents need to be `data`, `dataType` and `password`.
        :param pulumi.Input[str] certificate_store: Specifies the certificate store on the Virtual Machine where the certificate should be added to.
        """
        pulumi.set(__self__, "certificate_url", certificate_url)
        if certificate_store is not None:
            pulumi.set(__self__, "certificate_store", certificate_store)

    @property
    @pulumi.getter(name="certificateUrl")
    def certificate_url(self) -> pulumi.Input[str]:
        """
        It is the Base64 encoding of a JSON Object that which is encoded in UTF-8 of which the contents need to be `data`, `dataType` and `password`.
        """
        return pulumi.get(self, "certificate_url")

    @certificate_url.setter
    def certificate_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "certificate_url", value)

    @property
    @pulumi.getter(name="certificateStore")
    def certificate_store(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the certificate store on the Virtual Machine where the certificate should be added to.
        """
        return pulumi.get(self, "certificate_store")

    @certificate_store.setter
    def certificate_store(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_store", value)


if not MYPY:
    class AzureVirtualMachineScaleSetOsProfileWindowsConfigArgsDict(TypedDict):
        additional_unattend_configs: NotRequired[pulumi.Input[Sequence[pulumi.Input['AzureVirtualMachineScaleSetOsProfileWindowsConfigAdditionalUnattendConfigArgsDict']]]]
        enable_automatic_upgrades: NotRequired[pulumi.Input[bool]]
        """
        Indicates whether virtual machines in the scale set are enabled for automatic updates.
        """
        provision_vm_agent: NotRequired[pulumi.Input[bool]]
        """
        Indicates whether virtual machine agent should be provisioned on the virtual machines in the scale set.
        """
        winrms: NotRequired[pulumi.Input[Sequence[pulumi.Input['AzureVirtualMachineScaleSetOsProfileWindowsConfigWinrmArgsDict']]]]
elif False:
    AzureVirtualMachineScaleSetOsProfileWindowsConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureVirtualMachineScaleSetOsProfileWindowsConfigArgs:
    def __init__(__self__, *,
                 additional_unattend_configs: Optional[pulumi.Input[Sequence[pulumi.Input['AzureVirtualMachineScaleSetOsProfileWindowsConfigAdditionalUnattendConfigArgs']]]] = None,
                 enable_automatic_upgrades: Optional[pulumi.Input[bool]] = None,
                 provision_vm_agent: Optional[pulumi.Input[bool]] = None,
                 winrms: Optional[pulumi.Input[Sequence[pulumi.Input['AzureVirtualMachineScaleSetOsProfileWindowsConfigWinrmArgs']]]] = None):
        """
        :param pulumi.Input[bool] enable_automatic_upgrades: Indicates whether virtual machines in the scale set are enabled for automatic updates.
        :param pulumi.Input[bool] provision_vm_agent: Indicates whether virtual machine agent should be provisioned on the virtual machines in the scale set.
        """
        if additional_unattend_configs is not None:
            pulumi.set(__self__, "additional_unattend_configs", additional_unattend_configs)
        if enable_automatic_upgrades is not None:
            pulumi.set(__self__, "enable_automatic_upgrades", enable_automatic_upgrades)
        if provision_vm_agent is not None:
            pulumi.set(__self__, "provision_vm_agent", provision_vm_agent)
        if winrms is not None:
            pulumi.set(__self__, "winrms", winrms)

    @property
    @pulumi.getter(name="additionalUnattendConfigs")
    def additional_unattend_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AzureVirtualMachineScaleSetOsProfileWindowsConfigAdditionalUnattendConfigArgs']]]]:
        return pulumi.get(self, "additional_unattend_configs")

    @additional_unattend_configs.setter
    def additional_unattend_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AzureVirtualMachineScaleSetOsProfileWindowsConfigAdditionalUnattendConfigArgs']]]]):
        pulumi.set(self, "additional_unattend_configs", value)

    @property
    @pulumi.getter(name="enableAutomaticUpgrades")
    def enable_automatic_upgrades(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether virtual machines in the scale set are enabled for automatic updates.
        """
        return pulumi.get(self, "enable_automatic_upgrades")

    @enable_automatic_upgrades.setter
    def enable_automatic_upgrades(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_automatic_upgrades", value)

    @property
    @pulumi.getter(name="provisionVmAgent")
    def provision_vm_agent(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether virtual machine agent should be provisioned on the virtual machines in the scale set.
        """
        return pulumi.get(self, "provision_vm_agent")

    @provision_vm_agent.setter
    def provision_vm_agent(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provision_vm_agent", value)

    @property
    @pulumi.getter
    def winrms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AzureVirtualMachineScaleSetOsProfileWindowsConfigWinrmArgs']]]]:
        return pulumi.get(self, "winrms")

    @winrms.setter
    def winrms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AzureVirtualMachineScaleSetOsProfileWindowsConfigWinrmArgs']]]]):
        pulumi.set(self, "winrms", value)


if not MYPY:
    class AzureVirtualMachineScaleSetOsProfileWindowsConfigAdditionalUnattendConfigArgsDict(TypedDict):
        component: pulumi.Input[str]
        """
        Specifies the name of the component to configure with the added content. The only allowable value is `Microsoft-Windows-Shell-Setup`.
        """
        content: pulumi.Input[str]
        """
        Specifies the base-64 encoded XML formatted content that is added to the unattend.xml file for the specified path and component.
        """
        pass_: pulumi.Input[str]
        """
        Specifies the name of the pass that the content applies to. The only allowable value is `oobeSystem`.
        """
        setting_name: pulumi.Input[str]
        """
        Specifies the name of the setting to which the content applies. Possible values are: `FirstLogonCommands` and `AutoLogon`.
        """
elif False:
    AzureVirtualMachineScaleSetOsProfileWindowsConfigAdditionalUnattendConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureVirtualMachineScaleSetOsProfileWindowsConfigAdditionalUnattendConfigArgs:
    def __init__(__self__, *,
                 component: pulumi.Input[str],
                 content: pulumi.Input[str],
                 pass_: pulumi.Input[str],
                 setting_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] component: Specifies the name of the component to configure with the added content. The only allowable value is `Microsoft-Windows-Shell-Setup`.
        :param pulumi.Input[str] content: Specifies the base-64 encoded XML formatted content that is added to the unattend.xml file for the specified path and component.
        :param pulumi.Input[str] pass_: Specifies the name of the pass that the content applies to. The only allowable value is `oobeSystem`.
        :param pulumi.Input[str] setting_name: Specifies the name of the setting to which the content applies. Possible values are: `FirstLogonCommands` and `AutoLogon`.
        """
        pulumi.set(__self__, "component", component)
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "pass_", pass_)
        pulumi.set(__self__, "setting_name", setting_name)

    @property
    @pulumi.getter
    def component(self) -> pulumi.Input[str]:
        """
        Specifies the name of the component to configure with the added content. The only allowable value is `Microsoft-Windows-Shell-Setup`.
        """
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: pulumi.Input[str]):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        Specifies the base-64 encoded XML formatted content that is added to the unattend.xml file for the specified path and component.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> pulumi.Input[str]:
        """
        Specifies the name of the pass that the content applies to. The only allowable value is `oobeSystem`.
        """
        return pulumi.get(self, "pass_")

    @pass_.setter
    def pass_(self, value: pulumi.Input[str]):
        pulumi.set(self, "pass_", value)

    @property
    @pulumi.getter(name="settingName")
    def setting_name(self) -> pulumi.Input[str]:
        """
        Specifies the name of the setting to which the content applies. Possible values are: `FirstLogonCommands` and `AutoLogon`.
        """
        return pulumi.get(self, "setting_name")

    @setting_name.setter
    def setting_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "setting_name", value)


if not MYPY:
    class AzureVirtualMachineScaleSetOsProfileWindowsConfigWinrmArgsDict(TypedDict):
        protocol: pulumi.Input[str]
        """
        Specifies the protocol of listener.
        """
        certificate_url: NotRequired[pulumi.Input[str]]
        """
        Specifies URL of the certificate with which new Virtual Machines is provisioned.
        """
elif False:
    AzureVirtualMachineScaleSetOsProfileWindowsConfigWinrmArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureVirtualMachineScaleSetOsProfileWindowsConfigWinrmArgs:
    def __init__(__self__, *,
                 protocol: pulumi.Input[str],
                 certificate_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] protocol: Specifies the protocol of listener.
        :param pulumi.Input[str] certificate_url: Specifies URL of the certificate with which new Virtual Machines is provisioned.
        """
        pulumi.set(__self__, "protocol", protocol)
        if certificate_url is not None:
            pulumi.set(__self__, "certificate_url", certificate_url)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        Specifies the protocol of listener.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="certificateUrl")
    def certificate_url(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies URL of the certificate with which new Virtual Machines is provisioned.
        """
        return pulumi.get(self, "certificate_url")

    @certificate_url.setter
    def certificate_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_url", value)


if not MYPY:
    class AzureVirtualMachineScaleSetPlanArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Specifies the name of the image from the marketplace.
        """
        product: pulumi.Input[str]
        """
        Specifies the product of the image from the marketplace.
        """
        publisher: pulumi.Input[str]
        """
        Specifies the publisher of the image.
        """
elif False:
    AzureVirtualMachineScaleSetPlanArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureVirtualMachineScaleSetPlanArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 product: pulumi.Input[str],
                 publisher: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Specifies the name of the image from the marketplace.
        :param pulumi.Input[str] product: Specifies the product of the image from the marketplace.
        :param pulumi.Input[str] publisher: Specifies the publisher of the image.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "product", product)
        pulumi.set(__self__, "publisher", publisher)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Specifies the name of the image from the marketplace.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def product(self) -> pulumi.Input[str]:
        """
        Specifies the product of the image from the marketplace.
        """
        return pulumi.get(self, "product")

    @product.setter
    def product(self, value: pulumi.Input[str]):
        pulumi.set(self, "product", value)

    @property
    @pulumi.getter
    def publisher(self) -> pulumi.Input[str]:
        """
        Specifies the publisher of the image.
        """
        return pulumi.get(self, "publisher")

    @publisher.setter
    def publisher(self, value: pulumi.Input[str]):
        pulumi.set(self, "publisher", value)


if not MYPY:
    class AzureVirtualMachineScaleSetRollingUpgradePolicyArgsDict(TypedDict):
        max_batch_instance_percent: NotRequired[pulumi.Input[int]]
        """
        The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade. Defaults to `20`.
        """
        max_unhealthy_instance_percent: NotRequired[pulumi.Input[int]]
        """
        The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy. Defaults to `20`.
        """
        max_unhealthy_upgraded_instance_percent: NotRequired[pulumi.Input[int]]
        """
        The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. Defaults to `20`.
        """
        pause_time_between_batches: NotRequired[pulumi.Input[str]]
        """
        The wait time between completing the update for all virtual machines in one batch and starting the next batch. Defaults to `PT0S`.
        """
elif False:
    AzureVirtualMachineScaleSetRollingUpgradePolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureVirtualMachineScaleSetRollingUpgradePolicyArgs:
    def __init__(__self__, *,
                 max_batch_instance_percent: Optional[pulumi.Input[int]] = None,
                 max_unhealthy_instance_percent: Optional[pulumi.Input[int]] = None,
                 max_unhealthy_upgraded_instance_percent: Optional[pulumi.Input[int]] = None,
                 pause_time_between_batches: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] max_batch_instance_percent: The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade. Defaults to `20`.
        :param pulumi.Input[int] max_unhealthy_instance_percent: The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy. Defaults to `20`.
        :param pulumi.Input[int] max_unhealthy_upgraded_instance_percent: The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. Defaults to `20`.
        :param pulumi.Input[str] pause_time_between_batches: The wait time between completing the update for all virtual machines in one batch and starting the next batch. Defaults to `PT0S`.
        """
        if max_batch_instance_percent is not None:
            pulumi.set(__self__, "max_batch_instance_percent", max_batch_instance_percent)
        if max_unhealthy_instance_percent is not None:
            pulumi.set(__self__, "max_unhealthy_instance_percent", max_unhealthy_instance_percent)
        if max_unhealthy_upgraded_instance_percent is not None:
            pulumi.set(__self__, "max_unhealthy_upgraded_instance_percent", max_unhealthy_upgraded_instance_percent)
        if pause_time_between_batches is not None:
            pulumi.set(__self__, "pause_time_between_batches", pause_time_between_batches)

    @property
    @pulumi.getter(name="maxBatchInstancePercent")
    def max_batch_instance_percent(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade. Defaults to `20`.
        """
        return pulumi.get(self, "max_batch_instance_percent")

    @max_batch_instance_percent.setter
    def max_batch_instance_percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_batch_instance_percent", value)

    @property
    @pulumi.getter(name="maxUnhealthyInstancePercent")
    def max_unhealthy_instance_percent(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy. Defaults to `20`.
        """
        return pulumi.get(self, "max_unhealthy_instance_percent")

    @max_unhealthy_instance_percent.setter
    def max_unhealthy_instance_percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_unhealthy_instance_percent", value)

    @property
    @pulumi.getter(name="maxUnhealthyUpgradedInstancePercent")
    def max_unhealthy_upgraded_instance_percent(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. Defaults to `20`.
        """
        return pulumi.get(self, "max_unhealthy_upgraded_instance_percent")

    @max_unhealthy_upgraded_instance_percent.setter
    def max_unhealthy_upgraded_instance_percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_unhealthy_upgraded_instance_percent", value)

    @property
    @pulumi.getter(name="pauseTimeBetweenBatches")
    def pause_time_between_batches(self) -> Optional[pulumi.Input[str]]:
        """
        The wait time between completing the update for all virtual machines in one batch and starting the next batch. Defaults to `PT0S`.
        """
        return pulumi.get(self, "pause_time_between_batches")

    @pause_time_between_batches.setter
    def pause_time_between_batches(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pause_time_between_batches", value)


if not MYPY:
    class AzureVirtualMachineScaleSetSkuArgsDict(TypedDict):
        capacity: pulumi.Input[int]
        """
        Specifies the number of virtual machines in the scale set.
        """
        name: pulumi.Input[str]
        """
        Specifies the size of virtual machines in a scale set.
        """
        tier: NotRequired[pulumi.Input[str]]
        """
        Specifies the tier of virtual machines in a scale set. Possible values, `standard` or `basic`.
        """
elif False:
    AzureVirtualMachineScaleSetSkuArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureVirtualMachineScaleSetSkuArgs:
    def __init__(__self__, *,
                 capacity: pulumi.Input[int],
                 name: pulumi.Input[str],
                 tier: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] capacity: Specifies the number of virtual machines in the scale set.
        :param pulumi.Input[str] name: Specifies the size of virtual machines in a scale set.
        :param pulumi.Input[str] tier: Specifies the tier of virtual machines in a scale set. Possible values, `standard` or `basic`.
        """
        pulumi.set(__self__, "capacity", capacity)
        pulumi.set(__self__, "name", name)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def capacity(self) -> pulumi.Input[int]:
        """
        Specifies the number of virtual machines in the scale set.
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: pulumi.Input[int]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Specifies the size of virtual machines in a scale set.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the tier of virtual machines in a scale set. Possible values, `standard` or `basic`.
        """
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tier", value)


if not MYPY:
    class AzureVirtualMachineScaleSetStorageProfileDataDiskArgsDict(TypedDict):
        create_option: pulumi.Input[str]
        """
        Specifies how the data disk should be created. The only possible options are `FromImage` and `Empty`.
        """
        lun: pulumi.Input[int]
        """
        Specifies the Logical Unit Number of the disk in each virtual machine in the scale set.
        """
        caching: NotRequired[pulumi.Input[str]]
        """
        Specifies the caching requirements. Possible values include: `None` (default), `ReadOnly`, `ReadWrite`.
        """
        disk_size_gb: NotRequired[pulumi.Input[int]]
        """
        Specifies the size of the disk in GB. This element is required when creating an empty disk. Defaults to `128`.
        """
        managed_disk_type: NotRequired[pulumi.Input[str]]
        """
        Specifies the type of managed disk to create. Value must be either `Standard_LRS`, `StandardSSD_LRS` or `Premium_LRS`.
        """
elif False:
    AzureVirtualMachineScaleSetStorageProfileDataDiskArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureVirtualMachineScaleSetStorageProfileDataDiskArgs:
    def __init__(__self__, *,
                 create_option: pulumi.Input[str],
                 lun: pulumi.Input[int],
                 caching: Optional[pulumi.Input[str]] = None,
                 disk_size_gb: Optional[pulumi.Input[int]] = None,
                 managed_disk_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] create_option: Specifies how the data disk should be created. The only possible options are `FromImage` and `Empty`.
        :param pulumi.Input[int] lun: Specifies the Logical Unit Number of the disk in each virtual machine in the scale set.
        :param pulumi.Input[str] caching: Specifies the caching requirements. Possible values include: `None` (default), `ReadOnly`, `ReadWrite`.
        :param pulumi.Input[int] disk_size_gb: Specifies the size of the disk in GB. This element is required when creating an empty disk. Defaults to `128`.
        :param pulumi.Input[str] managed_disk_type: Specifies the type of managed disk to create. Value must be either `Standard_LRS`, `StandardSSD_LRS` or `Premium_LRS`.
        """
        pulumi.set(__self__, "create_option", create_option)
        pulumi.set(__self__, "lun", lun)
        if caching is not None:
            pulumi.set(__self__, "caching", caching)
        if disk_size_gb is not None:
            pulumi.set(__self__, "disk_size_gb", disk_size_gb)
        if managed_disk_type is not None:
            pulumi.set(__self__, "managed_disk_type", managed_disk_type)

    @property
    @pulumi.getter(name="createOption")
    def create_option(self) -> pulumi.Input[str]:
        """
        Specifies how the data disk should be created. The only possible options are `FromImage` and `Empty`.
        """
        return pulumi.get(self, "create_option")

    @create_option.setter
    def create_option(self, value: pulumi.Input[str]):
        pulumi.set(self, "create_option", value)

    @property
    @pulumi.getter
    def lun(self) -> pulumi.Input[int]:
        """
        Specifies the Logical Unit Number of the disk in each virtual machine in the scale set.
        """
        return pulumi.get(self, "lun")

    @lun.setter
    def lun(self, value: pulumi.Input[int]):
        pulumi.set(self, "lun", value)

    @property
    @pulumi.getter
    def caching(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the caching requirements. Possible values include: `None` (default), `ReadOnly`, `ReadWrite`.
        """
        return pulumi.get(self, "caching")

    @caching.setter
    def caching(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "caching", value)

    @property
    @pulumi.getter(name="diskSizeGb")
    def disk_size_gb(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the size of the disk in GB. This element is required when creating an empty disk. Defaults to `128`.
        """
        return pulumi.get(self, "disk_size_gb")

    @disk_size_gb.setter
    def disk_size_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size_gb", value)

    @property
    @pulumi.getter(name="managedDiskType")
    def managed_disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the type of managed disk to create. Value must be either `Standard_LRS`, `StandardSSD_LRS` or `Premium_LRS`.
        """
        return pulumi.get(self, "managed_disk_type")

    @managed_disk_type.setter
    def managed_disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "managed_disk_type", value)


if not MYPY:
    class AzureVirtualMachineScaleSetStorageProfileImageReferenceArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Specifies the ID of the (custom) image to use to create the virtual machine scale set.
        """
        offer: NotRequired[pulumi.Input[str]]
        """
        Specifies the offer of the image used to create the virtual machines.
        """
        publisher: NotRequired[pulumi.Input[str]]
        """
        Specifies the publisher of the image used to create the virtual machines.
        """
        sku: NotRequired[pulumi.Input[str]]
        """
        Specifies the SKU of the image used to create the virtual machines.
        """
        version: NotRequired[pulumi.Input[str]]
        """
        Specifies the version of the image used to create the virtual machines.
        """
elif False:
    AzureVirtualMachineScaleSetStorageProfileImageReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureVirtualMachineScaleSetStorageProfileImageReferenceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 offer: Optional[pulumi.Input[str]] = None,
                 publisher: Optional[pulumi.Input[str]] = None,
                 sku: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Specifies the ID of the (custom) image to use to create the virtual machine scale set.
        :param pulumi.Input[str] offer: Specifies the offer of the image used to create the virtual machines.
        :param pulumi.Input[str] publisher: Specifies the publisher of the image used to create the virtual machines.
        :param pulumi.Input[str] sku: Specifies the SKU of the image used to create the virtual machines.
        :param pulumi.Input[str] version: Specifies the version of the image used to create the virtual machines.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if offer is not None:
            pulumi.set(__self__, "offer", offer)
        if publisher is not None:
            pulumi.set(__self__, "publisher", publisher)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID of the (custom) image to use to create the virtual machine scale set.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def offer(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the offer of the image used to create the virtual machines.
        """
        return pulumi.get(self, "offer")

    @offer.setter
    def offer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offer", value)

    @property
    @pulumi.getter
    def publisher(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the publisher of the image used to create the virtual machines.
        """
        return pulumi.get(self, "publisher")

    @publisher.setter
    def publisher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "publisher", value)

    @property
    @pulumi.getter
    def sku(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the SKU of the image used to create the virtual machines.
        """
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sku", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the version of the image used to create the virtual machines.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class AzureVirtualMachineScaleSetStorageProfileOsDiskArgsDict(TypedDict):
        caching: NotRequired[pulumi.Input[str]]
        """
        Specifies the caching requirements. Possible values include: `None` (default), `ReadOnly`, `ReadWrite`.
        """
        create_option: NotRequired[pulumi.Input[str]]
        """
        Specifies how the virtual machine should be created. The only possible option is `FromImage`.
        """
        image: NotRequired[pulumi.Input[str]]
        """
        Specifies the blob uri for user image. A virtual machine scale set creates an os disk in the same container as the user image.
        """
        managed_disk_type: NotRequired[pulumi.Input[str]]
        """
        Specifies the type of managed disk to create. Value you must be either `Standard_LRS`, `StandardSSD_LRS` or `Premium_LRS`. Cannot be used when `vhd_containers` or `image` is specified.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Specifies the disk name. Must be specified when using unmanaged disk ('managed*disk*type' property not set).
        """
        os_type: NotRequired[pulumi.Input[str]]
        """
        Specifies the operating system Type, valid values are `windows`, `linux`.
        """
        vhd_containers: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Specifies the vhd uri. Cannot be used when `image` or `managed_disk_type` is specified.
        """
elif False:
    AzureVirtualMachineScaleSetStorageProfileOsDiskArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureVirtualMachineScaleSetStorageProfileOsDiskArgs:
    def __init__(__self__, *,
                 caching: Optional[pulumi.Input[str]] = None,
                 create_option: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 managed_disk_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[str]] = None,
                 vhd_containers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] caching: Specifies the caching requirements. Possible values include: `None` (default), `ReadOnly`, `ReadWrite`.
        :param pulumi.Input[str] create_option: Specifies how the virtual machine should be created. The only possible option is `FromImage`.
        :param pulumi.Input[str] image: Specifies the blob uri for user image. A virtual machine scale set creates an os disk in the same container as the user image.
        :param pulumi.Input[str] managed_disk_type: Specifies the type of managed disk to create. Value you must be either `Standard_LRS`, `StandardSSD_LRS` or `Premium_LRS`. Cannot be used when `vhd_containers` or `image` is specified.
        :param pulumi.Input[str] name: Specifies the disk name. Must be specified when using unmanaged disk ('managed*disk*type' property not set).
        :param pulumi.Input[str] os_type: Specifies the operating system Type, valid values are `windows`, `linux`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vhd_containers: Specifies the vhd uri. Cannot be used when `image` or `managed_disk_type` is specified.
        """
        if caching is not None:
            pulumi.set(__self__, "caching", caching)
        if create_option is not None:
            pulumi.set(__self__, "create_option", create_option)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if managed_disk_type is not None:
            pulumi.set(__self__, "managed_disk_type", managed_disk_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if vhd_containers is not None:
            pulumi.set(__self__, "vhd_containers", vhd_containers)

    @property
    @pulumi.getter
    def caching(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the caching requirements. Possible values include: `None` (default), `ReadOnly`, `ReadWrite`.
        """
        return pulumi.get(self, "caching")

    @caching.setter
    def caching(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "caching", value)

    @property
    @pulumi.getter(name="createOption")
    def create_option(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies how the virtual machine should be created. The only possible option is `FromImage`.
        """
        return pulumi.get(self, "create_option")

    @create_option.setter
    def create_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_option", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the blob uri for user image. A virtual machine scale set creates an os disk in the same container as the user image.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="managedDiskType")
    def managed_disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the type of managed disk to create. Value you must be either `Standard_LRS`, `StandardSSD_LRS` or `Premium_LRS`. Cannot be used when `vhd_containers` or `image` is specified.
        """
        return pulumi.get(self, "managed_disk_type")

    @managed_disk_type.setter
    def managed_disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "managed_disk_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the disk name. Must be specified when using unmanaged disk ('managed*disk*type' property not set).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the operating system Type, valid values are `windows`, `linux`.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_type", value)

    @property
    @pulumi.getter(name="vhdContainers")
    def vhd_containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the vhd uri. Cannot be used when `image` or `managed_disk_type` is specified.
        """
        return pulumi.get(self, "vhd_containers")

    @vhd_containers.setter
    def vhd_containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vhd_containers", value)


if not MYPY:
    class AzureVirtualMachineTagArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    AzureVirtualMachineTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureVirtualMachineTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AzureVirtualMachineVolumeArgsDict(TypedDict):
        iops: NotRequired[pulumi.Input[int]]
        name: NotRequired[pulumi.Input[str]]
        size: NotRequired[pulumi.Input[int]]
        volume_id: NotRequired[pulumi.Input[str]]
        volume_type: NotRequired[pulumi.Input[str]]
elif False:
    AzureVirtualMachineVolumeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureVirtualMachineVolumeArgs:
    def __init__(__self__, *,
                 iops: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 volume_id: Optional[pulumi.Input[str]] = None,
                 volume_type: Optional[pulumi.Input[str]] = None):
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)

    @property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iops", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_id", value)

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "volume_type")

    @volume_type.setter
    def volume_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_type", value)


if not MYPY:
    class AzureVmMaintenanceConfigurationWindowArgsDict(TypedDict):
        start_time: pulumi.Input[str]
        """
        Effective start date of the maintenance window in YYYY-MM-DD HH:MM format.
        """
        time_zone: pulumi.Input[str]
        """
        The timezone on which maintenance should be scheduled.
        """
        duration: NotRequired[pulumi.Input[str]]
        """
        The duration of the maintenance window in HH:mm format.
        """
        expiration_time: NotRequired[pulumi.Input[str]]
        """
        Effective expiration date of the maintenance window in YYYY-MM-DD hh:mm format.
        """
        recur_every: NotRequired[pulumi.Input[str]]
        """
        he rate at which a maintenance window is expected to recur. The rate can be expressed as daily, weekly, or monthly schedules.
        """
elif False:
    AzureVmMaintenanceConfigurationWindowArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureVmMaintenanceConfigurationWindowArgs:
    def __init__(__self__, *,
                 start_time: pulumi.Input[str],
                 time_zone: pulumi.Input[str],
                 duration: Optional[pulumi.Input[str]] = None,
                 expiration_time: Optional[pulumi.Input[str]] = None,
                 recur_every: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] start_time: Effective start date of the maintenance window in YYYY-MM-DD HH:MM format.
        :param pulumi.Input[str] time_zone: The timezone on which maintenance should be scheduled.
        :param pulumi.Input[str] duration: The duration of the maintenance window in HH:mm format.
        :param pulumi.Input[str] expiration_time: Effective expiration date of the maintenance window in YYYY-MM-DD hh:mm format.
        :param pulumi.Input[str] recur_every: he rate at which a maintenance window is expected to recur. The rate can be expressed as daily, weekly, or monthly schedules.
        """
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "time_zone", time_zone)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if expiration_time is not None:
            pulumi.set(__self__, "expiration_time", expiration_time)
        if recur_every is not None:
            pulumi.set(__self__, "recur_every", recur_every)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        """
        Effective start date of the maintenance window in YYYY-MM-DD HH:MM format.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> pulumi.Input[str]:
        """
        The timezone on which maintenance should be scheduled.
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "time_zone", value)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        """
        The duration of the maintenance window in HH:mm format.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> Optional[pulumi.Input[str]]:
        """
        Effective expiration date of the maintenance window in YYYY-MM-DD hh:mm format.
        """
        return pulumi.get(self, "expiration_time")

    @expiration_time.setter
    def expiration_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiration_time", value)

    @property
    @pulumi.getter(name="recurEvery")
    def recur_every(self) -> Optional[pulumi.Input[str]]:
        """
        he rate at which a maintenance window is expected to recur. The rate can be expressed as daily, weekly, or monthly schedules.
        """
        return pulumi.get(self, "recur_every")

    @recur_every.setter
    def recur_every(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recur_every", value)


if not MYPY:
    class ByohTagArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    ByohTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ByohTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class DuploServiceLbconfigsLbconfigArgsDict(TypedDict):
        lb_type: pulumi.Input[int]
        """
        The numerical index of the type of load balancer configuration to create.
        Should be one of:

           - `0` : ELB (Classic Load Balancer)
           - `1` : ALB (Application Load Balancer)
           - `2` : Health-check Only (No Load Balancer)
           - `3` : K8S Service w/ Cluster IP (No Load Balancer)
           - `4` : K8S Service w/ Node Port (No Load Balancer)
           - `5` : Azure Shared Application Gateway
           - `6` : NLB (Network Load Balancer)
           - `7` : Target Group Only
        """
        port: pulumi.Input[str]
        """
        The backend port associated with this load balancer configuration.
        """
        protocol: pulumi.Input[str]
        """
        The backend protocol associated with this load balancer configuration.
        """
        allow_global_access: NotRequired[pulumi.Input[bool]]
        """
        Applicable for internal lb.
        """
        backend_protocol_version: NotRequired[pulumi.Input[str]]
        certificate_arn: NotRequired[pulumi.Input[str]]
        """
        The ARN of an ACM certificate to associate with this load balancer.  Only applicable for HTTPS.
        """
        cloud_name: NotRequired[pulumi.Input[str]]
        """
        The name of the cloud load balancer (if applicable).
        """
        custom_cidrs: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Specify CIDR Values. This is applicable only for Network Load Balancer if `lb_type` is `6`.
        """
        dns_name: NotRequired[pulumi.Input[str]]
        """
        The DNS name of the cloud load balancer (if applicable).
        """
        external_port: NotRequired[pulumi.Input[int]]
        """
        The frontend port associated with this load balancer configuration. Required if `lb_type` is not `7`.
        """
        external_traffic_policy: NotRequired[pulumi.Input[str]]
        """
        Only for K8S Node Port (`lb_type = 4`) or load balancers in Kubernetes.  Set the kubernetes service `externalTrafficPolicy` attribute.
        """
        extra_selector_labels: NotRequired[pulumi.Input[Sequence[pulumi.Input['DuploServiceLbconfigsLbconfigExtraSelectorLabelArgsDict']]]]
        """
        Only for K8S services or load balancers in Kubernetes.  Sets an additional selector label to narrow which pods can receive traffic.
        """
        frontend_ip: NotRequired[pulumi.Input[str]]
        health_check: NotRequired[pulumi.Input['DuploServiceLbconfigsLbconfigHealthCheckArgsDict']]
        """
        Health Check configuration block.
        """
        health_check_url: NotRequired[pulumi.Input[str]]
        """
        The health check URL to associate with this load balancer configuration.
        """
        host_name: NotRequired[pulumi.Input[str]]
        """
        (Azure Only) Set only if Azure Shared Application Gateway is used (`lb_type = 5`).
        """
        host_port: NotRequired[pulumi.Input[int]]
        """
        The automatically assigned host port.
        """
        index: NotRequired[pulumi.Input[int]]
        """
        The load balancer Index.
        """
        is_infra_deployment: NotRequired[pulumi.Input[bool]]
        is_internal: NotRequired[pulumi.Input[bool]]
        """
        Whether or not to create an internal load balancer.
        """
        is_native: NotRequired[pulumi.Input[bool]]
        """
        Set to true if the service for which the load balancer is being created is hosted on a docker native host, which is managed directly by DuploCloud, or false if the service is hosted on a cloud-provided platform like EKS, AKS, GKE, ECS, etc. The `get_native_hosts` data source lists the native hosts in a DuploCloud Tenant
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name of the duplo service.
        """
        replication_controller_name: NotRequired[pulumi.Input[str]]
        """
        The name of the duplo service.
        """
        set_ingress_health_check: NotRequired[pulumi.Input[bool]]
        """
        Only for K8S services or load balancers in Kubernetes.  Set to `true` to set health check annotations for ingress.
        """
        skip_http_to_https: NotRequired[pulumi.Input[bool]]
        """
        Skip http to https.
        """
        target_group_arn: NotRequired[pulumi.Input[str]]
        """
        The ARN of the Target Group to which to route traffic.
        """
elif False:
    DuploServiceLbconfigsLbconfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DuploServiceLbconfigsLbconfigArgs:
    def __init__(__self__, *,
                 lb_type: pulumi.Input[int],
                 port: pulumi.Input[str],
                 protocol: pulumi.Input[str],
                 allow_global_access: Optional[pulumi.Input[bool]] = None,
                 backend_protocol_version: Optional[pulumi.Input[str]] = None,
                 certificate_arn: Optional[pulumi.Input[str]] = None,
                 cloud_name: Optional[pulumi.Input[str]] = None,
                 custom_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_name: Optional[pulumi.Input[str]] = None,
                 external_port: Optional[pulumi.Input[int]] = None,
                 external_traffic_policy: Optional[pulumi.Input[str]] = None,
                 extra_selector_labels: Optional[pulumi.Input[Sequence[pulumi.Input['DuploServiceLbconfigsLbconfigExtraSelectorLabelArgs']]]] = None,
                 frontend_ip: Optional[pulumi.Input[str]] = None,
                 health_check: Optional[pulumi.Input['DuploServiceLbconfigsLbconfigHealthCheckArgs']] = None,
                 health_check_url: Optional[pulumi.Input[str]] = None,
                 host_name: Optional[pulumi.Input[str]] = None,
                 host_port: Optional[pulumi.Input[int]] = None,
                 index: Optional[pulumi.Input[int]] = None,
                 is_infra_deployment: Optional[pulumi.Input[bool]] = None,
                 is_internal: Optional[pulumi.Input[bool]] = None,
                 is_native: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 replication_controller_name: Optional[pulumi.Input[str]] = None,
                 set_ingress_health_check: Optional[pulumi.Input[bool]] = None,
                 skip_http_to_https: Optional[pulumi.Input[bool]] = None,
                 target_group_arn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] lb_type: The numerical index of the type of load balancer configuration to create.
               Should be one of:
               
                  - `0` : ELB (Classic Load Balancer)
                  - `1` : ALB (Application Load Balancer)
                  - `2` : Health-check Only (No Load Balancer)
                  - `3` : K8S Service w/ Cluster IP (No Load Balancer)
                  - `4` : K8S Service w/ Node Port (No Load Balancer)
                  - `5` : Azure Shared Application Gateway
                  - `6` : NLB (Network Load Balancer)
                  - `7` : Target Group Only
        :param pulumi.Input[str] port: The backend port associated with this load balancer configuration.
        :param pulumi.Input[str] protocol: The backend protocol associated with this load balancer configuration.
        :param pulumi.Input[bool] allow_global_access: Applicable for internal lb.
        :param pulumi.Input[str] certificate_arn: The ARN of an ACM certificate to associate with this load balancer.  Only applicable for HTTPS.
        :param pulumi.Input[str] cloud_name: The name of the cloud load balancer (if applicable).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] custom_cidrs: Specify CIDR Values. This is applicable only for Network Load Balancer if `lb_type` is `6`.
        :param pulumi.Input[str] dns_name: The DNS name of the cloud load balancer (if applicable).
        :param pulumi.Input[int] external_port: The frontend port associated with this load balancer configuration. Required if `lb_type` is not `7`.
        :param pulumi.Input[str] external_traffic_policy: Only for K8S Node Port (`lb_type = 4`) or load balancers in Kubernetes.  Set the kubernetes service `externalTrafficPolicy` attribute.
        :param pulumi.Input[Sequence[pulumi.Input['DuploServiceLbconfigsLbconfigExtraSelectorLabelArgs']]] extra_selector_labels: Only for K8S services or load balancers in Kubernetes.  Sets an additional selector label to narrow which pods can receive traffic.
        :param pulumi.Input['DuploServiceLbconfigsLbconfigHealthCheckArgs'] health_check: Health Check configuration block.
        :param pulumi.Input[str] health_check_url: The health check URL to associate with this load balancer configuration.
        :param pulumi.Input[str] host_name: (Azure Only) Set only if Azure Shared Application Gateway is used (`lb_type = 5`).
        :param pulumi.Input[int] host_port: The automatically assigned host port.
        :param pulumi.Input[int] index: The load balancer Index.
        :param pulumi.Input[bool] is_internal: Whether or not to create an internal load balancer.
        :param pulumi.Input[bool] is_native: Set to true if the service for which the load balancer is being created is hosted on a docker native host, which is managed directly by DuploCloud, or false if the service is hosted on a cloud-provided platform like EKS, AKS, GKE, ECS, etc. The `get_native_hosts` data source lists the native hosts in a DuploCloud Tenant
        :param pulumi.Input[str] name: The name of the duplo service.
        :param pulumi.Input[str] replication_controller_name: The name of the duplo service.
        :param pulumi.Input[bool] set_ingress_health_check: Only for K8S services or load balancers in Kubernetes.  Set to `true` to set health check annotations for ingress.
        :param pulumi.Input[bool] skip_http_to_https: Skip http to https.
        :param pulumi.Input[str] target_group_arn: The ARN of the Target Group to which to route traffic.
        """
        pulumi.set(__self__, "lb_type", lb_type)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        if allow_global_access is not None:
            pulumi.set(__self__, "allow_global_access", allow_global_access)
        if backend_protocol_version is not None:
            pulumi.set(__self__, "backend_protocol_version", backend_protocol_version)
        if certificate_arn is not None:
            pulumi.set(__self__, "certificate_arn", certificate_arn)
        if cloud_name is not None:
            pulumi.set(__self__, "cloud_name", cloud_name)
        if custom_cidrs is not None:
            pulumi.set(__self__, "custom_cidrs", custom_cidrs)
        if dns_name is not None:
            pulumi.set(__self__, "dns_name", dns_name)
        if external_port is not None:
            pulumi.set(__self__, "external_port", external_port)
        if external_traffic_policy is not None:
            pulumi.set(__self__, "external_traffic_policy", external_traffic_policy)
        if extra_selector_labels is not None:
            pulumi.set(__self__, "extra_selector_labels", extra_selector_labels)
        if frontend_ip is not None:
            pulumi.set(__self__, "frontend_ip", frontend_ip)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if health_check_url is not None:
            pulumi.set(__self__, "health_check_url", health_check_url)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if host_port is not None:
            pulumi.set(__self__, "host_port", host_port)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if is_infra_deployment is not None:
            pulumi.set(__self__, "is_infra_deployment", is_infra_deployment)
        if is_internal is not None:
            pulumi.set(__self__, "is_internal", is_internal)
        if is_native is not None:
            pulumi.set(__self__, "is_native", is_native)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if replication_controller_name is not None:
            pulumi.set(__self__, "replication_controller_name", replication_controller_name)
        if set_ingress_health_check is not None:
            pulumi.set(__self__, "set_ingress_health_check", set_ingress_health_check)
        if skip_http_to_https is not None:
            pulumi.set(__self__, "skip_http_to_https", skip_http_to_https)
        if target_group_arn is not None:
            pulumi.set(__self__, "target_group_arn", target_group_arn)

    @property
    @pulumi.getter(name="lbType")
    def lb_type(self) -> pulumi.Input[int]:
        """
        The numerical index of the type of load balancer configuration to create.
        Should be one of:

           - `0` : ELB (Classic Load Balancer)
           - `1` : ALB (Application Load Balancer)
           - `2` : Health-check Only (No Load Balancer)
           - `3` : K8S Service w/ Cluster IP (No Load Balancer)
           - `4` : K8S Service w/ Node Port (No Load Balancer)
           - `5` : Azure Shared Application Gateway
           - `6` : NLB (Network Load Balancer)
           - `7` : Target Group Only
        """
        return pulumi.get(self, "lb_type")

    @lb_type.setter
    def lb_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "lb_type", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[str]:
        """
        The backend port associated with this load balancer configuration.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[str]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        The backend protocol associated with this load balancer configuration.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="allowGlobalAccess")
    def allow_global_access(self) -> Optional[pulumi.Input[bool]]:
        """
        Applicable for internal lb.
        """
        return pulumi.get(self, "allow_global_access")

    @allow_global_access.setter
    def allow_global_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_global_access", value)

    @property
    @pulumi.getter(name="backendProtocolVersion")
    def backend_protocol_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backend_protocol_version")

    @backend_protocol_version.setter
    def backend_protocol_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backend_protocol_version", value)

    @property
    @pulumi.getter(name="certificateArn")
    def certificate_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of an ACM certificate to associate with this load balancer.  Only applicable for HTTPS.
        """
        return pulumi.get(self, "certificate_arn")

    @certificate_arn.setter
    def certificate_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_arn", value)

    @property
    @pulumi.getter(name="cloudName")
    def cloud_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the cloud load balancer (if applicable).
        """
        return pulumi.get(self, "cloud_name")

    @cloud_name.setter
    def cloud_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_name", value)

    @property
    @pulumi.getter(name="customCidrs")
    def custom_cidrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify CIDR Values. This is applicable only for Network Load Balancer if `lb_type` is `6`.
        """
        return pulumi.get(self, "custom_cidrs")

    @custom_cidrs.setter
    def custom_cidrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "custom_cidrs", value)

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> Optional[pulumi.Input[str]]:
        """
        The DNS name of the cloud load balancer (if applicable).
        """
        return pulumi.get(self, "dns_name")

    @dns_name.setter
    def dns_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_name", value)

    @property
    @pulumi.getter(name="externalPort")
    def external_port(self) -> Optional[pulumi.Input[int]]:
        """
        The frontend port associated with this load balancer configuration. Required if `lb_type` is not `7`.
        """
        return pulumi.get(self, "external_port")

    @external_port.setter
    def external_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "external_port", value)

    @property
    @pulumi.getter(name="externalTrafficPolicy")
    def external_traffic_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Only for K8S Node Port (`lb_type = 4`) or load balancers in Kubernetes.  Set the kubernetes service `externalTrafficPolicy` attribute.
        """
        return pulumi.get(self, "external_traffic_policy")

    @external_traffic_policy.setter
    def external_traffic_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_traffic_policy", value)

    @property
    @pulumi.getter(name="extraSelectorLabels")
    def extra_selector_labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DuploServiceLbconfigsLbconfigExtraSelectorLabelArgs']]]]:
        """
        Only for K8S services or load balancers in Kubernetes.  Sets an additional selector label to narrow which pods can receive traffic.
        """
        return pulumi.get(self, "extra_selector_labels")

    @extra_selector_labels.setter
    def extra_selector_labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DuploServiceLbconfigsLbconfigExtraSelectorLabelArgs']]]]):
        pulumi.set(self, "extra_selector_labels", value)

    @property
    @pulumi.getter(name="frontendIp")
    def frontend_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "frontend_ip")

    @frontend_ip.setter
    def frontend_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "frontend_ip", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input['DuploServiceLbconfigsLbconfigHealthCheckArgs']]:
        """
        Health Check configuration block.
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input['DuploServiceLbconfigsLbconfigHealthCheckArgs']]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter(name="healthCheckUrl")
    def health_check_url(self) -> Optional[pulumi.Input[str]]:
        """
        The health check URL to associate with this load balancer configuration.
        """
        return pulumi.get(self, "health_check_url")

    @health_check_url.setter
    def health_check_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_url", value)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Azure Only) Set only if Azure Shared Application Gateway is used (`lb_type = 5`).
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_name", value)

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> Optional[pulumi.Input[int]]:
        """
        The automatically assigned host port.
        """
        return pulumi.get(self, "host_port")

    @host_port.setter
    def host_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "host_port", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[int]]:
        """
        The load balancer Index.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="isInfraDeployment")
    def is_infra_deployment(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_infra_deployment")

    @is_infra_deployment.setter
    def is_infra_deployment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_infra_deployment", value)

    @property
    @pulumi.getter(name="isInternal")
    def is_internal(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to create an internal load balancer.
        """
        return pulumi.get(self, "is_internal")

    @is_internal.setter
    def is_internal(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_internal", value)

    @property
    @pulumi.getter(name="isNative")
    def is_native(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to true if the service for which the load balancer is being created is hosted on a docker native host, which is managed directly by DuploCloud, or false if the service is hosted on a cloud-provided platform like EKS, AKS, GKE, ECS, etc. The `get_native_hosts` data source lists the native hosts in a DuploCloud Tenant
        """
        return pulumi.get(self, "is_native")

    @is_native.setter
    def is_native(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_native", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the duplo service.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="replicationControllerName")
    def replication_controller_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the duplo service.
        """
        return pulumi.get(self, "replication_controller_name")

    @replication_controller_name.setter
    def replication_controller_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replication_controller_name", value)

    @property
    @pulumi.getter(name="setIngressHealthCheck")
    def set_ingress_health_check(self) -> Optional[pulumi.Input[bool]]:
        """
        Only for K8S services or load balancers in Kubernetes.  Set to `true` to set health check annotations for ingress.
        """
        return pulumi.get(self, "set_ingress_health_check")

    @set_ingress_health_check.setter
    def set_ingress_health_check(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "set_ingress_health_check", value)

    @property
    @pulumi.getter(name="skipHttpToHttps")
    def skip_http_to_https(self) -> Optional[pulumi.Input[bool]]:
        """
        Skip http to https.
        """
        return pulumi.get(self, "skip_http_to_https")

    @skip_http_to_https.setter
    def skip_http_to_https(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_http_to_https", value)

    @property
    @pulumi.getter(name="targetGroupArn")
    def target_group_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the Target Group to which to route traffic.
        """
        return pulumi.get(self, "target_group_arn")

    @target_group_arn.setter
    def target_group_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_group_arn", value)


if not MYPY:
    class DuploServiceLbconfigsLbconfigExtraSelectorLabelArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    DuploServiceLbconfigsLbconfigExtraSelectorLabelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DuploServiceLbconfigsLbconfigExtraSelectorLabelArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class DuploServiceLbconfigsLbconfigHealthCheckArgsDict(TypedDict):
        grpc_success_codes: NotRequired[pulumi.Input[str]]
        """
        Response codes to use when checking for a healthy responses from a target. You can specify multiple values (for example, "0,12" for GRPC) or a range of values (for example, "0-99"). Required for GRPC ALB. Only applies to Application Load Balancers (i.e., GRPC) not Network Load Balancers (i.e., TCP).
        """
        healthy_threshold: NotRequired[pulumi.Input[int]]
        """
        Number of consecutive health checks successes required before considering an unhealthy target healthy.
        """
        http_success_codes: NotRequired[pulumi.Input[str]]
        """
        Response codes to use when checking for a healthy responses from a target. You can specify multiple values (for example, "200,202" for HTTP(s)) or a range of values (for example, "200-299"). Required for HTTP/HTTPS ALB. Only applies to Application Load Balancers (i.e., HTTP/HTTPS) not Network Load Balancers (i.e., TCP).
        """
        interval: NotRequired[pulumi.Input[int]]
        """
        Approximate amount of time, in seconds, between health checks of an individual target. Minimum value 5 seconds, Maximum value 300 seconds.
        """
        timeout: NotRequired[pulumi.Input[int]]
        """
        Amount of time, in seconds, during which no response means a failed health check.
        """
        unhealthy_threshold: NotRequired[pulumi.Input[int]]
        """
        Number of consecutive health check failures required before considering the target unhealthy.
        """
elif False:
    DuploServiceLbconfigsLbconfigHealthCheckArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DuploServiceLbconfigsLbconfigHealthCheckArgs:
    def __init__(__self__, *,
                 grpc_success_codes: Optional[pulumi.Input[str]] = None,
                 healthy_threshold: Optional[pulumi.Input[int]] = None,
                 http_success_codes: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 unhealthy_threshold: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] grpc_success_codes: Response codes to use when checking for a healthy responses from a target. You can specify multiple values (for example, "0,12" for GRPC) or a range of values (for example, "0-99"). Required for GRPC ALB. Only applies to Application Load Balancers (i.e., GRPC) not Network Load Balancers (i.e., TCP).
        :param pulumi.Input[int] healthy_threshold: Number of consecutive health checks successes required before considering an unhealthy target healthy.
        :param pulumi.Input[str] http_success_codes: Response codes to use when checking for a healthy responses from a target. You can specify multiple values (for example, "200,202" for HTTP(s)) or a range of values (for example, "200-299"). Required for HTTP/HTTPS ALB. Only applies to Application Load Balancers (i.e., HTTP/HTTPS) not Network Load Balancers (i.e., TCP).
        :param pulumi.Input[int] interval: Approximate amount of time, in seconds, between health checks of an individual target. Minimum value 5 seconds, Maximum value 300 seconds.
        :param pulumi.Input[int] timeout: Amount of time, in seconds, during which no response means a failed health check.
        :param pulumi.Input[int] unhealthy_threshold: Number of consecutive health check failures required before considering the target unhealthy.
        """
        if grpc_success_codes is not None:
            pulumi.set(__self__, "grpc_success_codes", grpc_success_codes)
        if healthy_threshold is not None:
            pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        if http_success_codes is not None:
            pulumi.set(__self__, "http_success_codes", http_success_codes)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if unhealthy_threshold is not None:
            pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @property
    @pulumi.getter(name="grpcSuccessCodes")
    def grpc_success_codes(self) -> Optional[pulumi.Input[str]]:
        """
        Response codes to use when checking for a healthy responses from a target. You can specify multiple values (for example, "0,12" for GRPC) or a range of values (for example, "0-99"). Required for GRPC ALB. Only applies to Application Load Balancers (i.e., GRPC) not Network Load Balancers (i.e., TCP).
        """
        return pulumi.get(self, "grpc_success_codes")

    @grpc_success_codes.setter
    def grpc_success_codes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grpc_success_codes", value)

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Number of consecutive health checks successes required before considering an unhealthy target healthy.
        """
        return pulumi.get(self, "healthy_threshold")

    @healthy_threshold.setter
    def healthy_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "healthy_threshold", value)

    @property
    @pulumi.getter(name="httpSuccessCodes")
    def http_success_codes(self) -> Optional[pulumi.Input[str]]:
        """
        Response codes to use when checking for a healthy responses from a target. You can specify multiple values (for example, "200,202" for HTTP(s)) or a range of values (for example, "200-299"). Required for HTTP/HTTPS ALB. Only applies to Application Load Balancers (i.e., HTTP/HTTPS) not Network Load Balancers (i.e., TCP).
        """
        return pulumi.get(self, "http_success_codes")

    @http_success_codes.setter
    def http_success_codes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_success_codes", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Approximate amount of time, in seconds, between health checks of an individual target. Minimum value 5 seconds, Maximum value 300 seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Amount of time, in seconds, during which no response means a failed health check.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Number of consecutive health check failures required before considering the target unhealthy.
        """
        return pulumi.get(self, "unhealthy_threshold")

    @unhealthy_threshold.setter
    def unhealthy_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unhealthy_threshold", value)


if not MYPY:
    class DuploServiceTagArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    DuploServiceTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DuploServiceTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class EcacheInstanceLogDeliveryConfigurationArgsDict(TypedDict):
        destination_type: pulumi.Input[str]
        """
        destination type : must be cloudwatch-logs.
        """
        log_format: pulumi.Input[str]
        """
        log_format: Value must be one of the ['json', 'text']
        """
        log_type: pulumi.Input[str]
        """
        log_type: Value must be one of the ['slow-log', 'engine-log']
        """
        log_group: NotRequired[pulumi.Input[str]]
        """
        cloudwatch log_group
        """
elif False:
    EcacheInstanceLogDeliveryConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EcacheInstanceLogDeliveryConfigurationArgs:
    def __init__(__self__, *,
                 destination_type: pulumi.Input[str],
                 log_format: pulumi.Input[str],
                 log_type: pulumi.Input[str],
                 log_group: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] destination_type: destination type : must be cloudwatch-logs.
        :param pulumi.Input[str] log_format: log_format: Value must be one of the ['json', 'text']
        :param pulumi.Input[str] log_type: log_type: Value must be one of the ['slow-log', 'engine-log']
        :param pulumi.Input[str] log_group: cloudwatch log_group
        """
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "log_format", log_format)
        pulumi.set(__self__, "log_type", log_type)
        if log_group is not None:
            pulumi.set(__self__, "log_group", log_group)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        """
        destination type : must be cloudwatch-logs.
        """
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="logFormat")
    def log_format(self) -> pulumi.Input[str]:
        """
        log_format: Value must be one of the ['json', 'text']
        """
        return pulumi.get(self, "log_format")

    @log_format.setter
    def log_format(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_format", value)

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> pulumi.Input[str]:
        """
        log_type: Value must be one of the ['slow-log', 'engine-log']
        """
        return pulumi.get(self, "log_type")

    @log_type.setter
    def log_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_type", value)

    @property
    @pulumi.getter(name="logGroup")
    def log_group(self) -> Optional[pulumi.Input[str]]:
        """
        cloudwatch log_group
        """
        return pulumi.get(self, "log_group")

    @log_group.setter
    def log_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_group", value)


if not MYPY:
    class EcsServiceCapacityProviderStrategyArgsDict(TypedDict):
        capacity_provider: pulumi.Input[str]
        """
        Name of the capacity provider.
        """
        base: NotRequired[pulumi.Input[int]]
        """
        The number of tasks, at a minimum, to run on the specified capacity provider.
        """
        weight: NotRequired[pulumi.Input[int]]
        """
        The relative percentage of the total number of launched tasks that should use the specified capacity provider.
        """
elif False:
    EcsServiceCapacityProviderStrategyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EcsServiceCapacityProviderStrategyArgs:
    def __init__(__self__, *,
                 capacity_provider: pulumi.Input[str],
                 base: Optional[pulumi.Input[int]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] capacity_provider: Name of the capacity provider.
        :param pulumi.Input[int] base: The number of tasks, at a minimum, to run on the specified capacity provider.
        :param pulumi.Input[int] weight: The relative percentage of the total number of launched tasks that should use the specified capacity provider.
        """
        pulumi.set(__self__, "capacity_provider", capacity_provider)
        if base is not None:
            pulumi.set(__self__, "base", base)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="capacityProvider")
    def capacity_provider(self) -> pulumi.Input[str]:
        """
        Name of the capacity provider.
        """
        return pulumi.get(self, "capacity_provider")

    @capacity_provider.setter
    def capacity_provider(self, value: pulumi.Input[str]):
        pulumi.set(self, "capacity_provider", value)

    @property
    @pulumi.getter
    def base(self) -> Optional[pulumi.Input[int]]:
        """
        The number of tasks, at a minimum, to run on the specified capacity provider.
        """
        return pulumi.get(self, "base")

    @base.setter
    def base(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "base", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        The relative percentage of the total number of launched tasks that should use the specified capacity provider.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:
    class EcsServiceLoadBalancerArgsDict(TypedDict):
        external_port: pulumi.Input[int]
        """
        The frontend port associated with this load balancer configuration.
        """
        lb_type: pulumi.Input[int]
        """
        The numerical index of the type of load balancer configuration to create.
        Should be one of:

           - `0` : ELB (Classic Load Balancer)
           - `1` : ALB (Application Load Balancer)
           - `2` : Health-check Only (No Load Balancer)
        """
        port: pulumi.Input[str]
        """
        The backend port associated with this load balancer configuration.
        """
        protocol: pulumi.Input[str]
        """
        The frontend protocol associated with this load balancer configuration.
        """
        target_group_count: pulumi.Input[int]
        """
        Number of Load Balancer target group to associate with the service.
        """
        backend_protocol: NotRequired[pulumi.Input[str]]
        """
        The backend protocol associated with this load balancer configuration.
        """
        backend_protocol_version: NotRequired[pulumi.Input[str]]
        """
        The backend protocol version associated with this load balancer configuration.
        """
        certificate_arn: NotRequired[pulumi.Input[str]]
        """
        The ARN of an ACM certificate to associate with this load balancer.  Only applicable for HTTPS.
        """
        drop_invalid_headers: NotRequired[pulumi.Input[bool]]
        """
        Whether or not to drop invalid HTTP headers received by the load balancer.
        """
        enable_access_logs: NotRequired[pulumi.Input[bool]]
        """
        Whether or not to enable access logs.  When enabled, Duplo will send access logs to a centralized S3 bucket per plan
        """
        health_check_config: NotRequired[pulumi.Input['EcsServiceLoadBalancerHealthCheckConfigArgsDict']]
        """
        Health check configuration for this load balancer.
        """
        health_check_url: NotRequired[pulumi.Input[str]]
        """
        The health check URL to associate with this load balancer configuration.
        """
        http_to_https_redirect: NotRequired[pulumi.Input[bool]]
        """
        Whether or not the load balancer should redirect HTTP to HTTPS.
        """
        idle_timeout: NotRequired[pulumi.Input[int]]
        """
        The time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type `application`.
        """
        index: NotRequired[pulumi.Input[int]]
        """
        The load balancer Index.
        """
        is_internal: NotRequired[pulumi.Input[bool]]
        """
        Whether or not to create an internal load balancer.
        """
        load_balancer_arn: NotRequired[pulumi.Input[str]]
        """
        The load balancer ARN.
        """
        load_balancer_name: NotRequired[pulumi.Input[str]]
        """
        The load balancer name.
        """
        replication_controller_name: NotRequired[pulumi.Input[str]]
        webaclid: NotRequired[pulumi.Input[str]]
        """
        The ARN of a web application firewall to associate this load balancer.
        """
elif False:
    EcsServiceLoadBalancerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EcsServiceLoadBalancerArgs:
    def __init__(__self__, *,
                 external_port: pulumi.Input[int],
                 lb_type: pulumi.Input[int],
                 port: pulumi.Input[str],
                 protocol: pulumi.Input[str],
                 target_group_count: pulumi.Input[int],
                 backend_protocol: Optional[pulumi.Input[str]] = None,
                 backend_protocol_version: Optional[pulumi.Input[str]] = None,
                 certificate_arn: Optional[pulumi.Input[str]] = None,
                 drop_invalid_headers: Optional[pulumi.Input[bool]] = None,
                 enable_access_logs: Optional[pulumi.Input[bool]] = None,
                 health_check_config: Optional[pulumi.Input['EcsServiceLoadBalancerHealthCheckConfigArgs']] = None,
                 health_check_url: Optional[pulumi.Input[str]] = None,
                 http_to_https_redirect: Optional[pulumi.Input[bool]] = None,
                 idle_timeout: Optional[pulumi.Input[int]] = None,
                 index: Optional[pulumi.Input[int]] = None,
                 is_internal: Optional[pulumi.Input[bool]] = None,
                 load_balancer_arn: Optional[pulumi.Input[str]] = None,
                 load_balancer_name: Optional[pulumi.Input[str]] = None,
                 replication_controller_name: Optional[pulumi.Input[str]] = None,
                 webaclid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] external_port: The frontend port associated with this load balancer configuration.
        :param pulumi.Input[int] lb_type: The numerical index of the type of load balancer configuration to create.
               Should be one of:
               
                  - `0` : ELB (Classic Load Balancer)
                  - `1` : ALB (Application Load Balancer)
                  - `2` : Health-check Only (No Load Balancer)
        :param pulumi.Input[str] port: The backend port associated with this load balancer configuration.
        :param pulumi.Input[str] protocol: The frontend protocol associated with this load balancer configuration.
        :param pulumi.Input[int] target_group_count: Number of Load Balancer target group to associate with the service.
        :param pulumi.Input[str] backend_protocol: The backend protocol associated with this load balancer configuration.
        :param pulumi.Input[str] backend_protocol_version: The backend protocol version associated with this load balancer configuration.
        :param pulumi.Input[str] certificate_arn: The ARN of an ACM certificate to associate with this load balancer.  Only applicable for HTTPS.
        :param pulumi.Input[bool] drop_invalid_headers: Whether or not to drop invalid HTTP headers received by the load balancer.
        :param pulumi.Input[bool] enable_access_logs: Whether or not to enable access logs.  When enabled, Duplo will send access logs to a centralized S3 bucket per plan
        :param pulumi.Input['EcsServiceLoadBalancerHealthCheckConfigArgs'] health_check_config: Health check configuration for this load balancer.
        :param pulumi.Input[str] health_check_url: The health check URL to associate with this load balancer configuration.
        :param pulumi.Input[bool] http_to_https_redirect: Whether or not the load balancer should redirect HTTP to HTTPS.
        :param pulumi.Input[int] idle_timeout: The time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type `application`.
        :param pulumi.Input[int] index: The load balancer Index.
        :param pulumi.Input[bool] is_internal: Whether or not to create an internal load balancer.
        :param pulumi.Input[str] load_balancer_arn: The load balancer ARN.
        :param pulumi.Input[str] load_balancer_name: The load balancer name.
        :param pulumi.Input[str] webaclid: The ARN of a web application firewall to associate this load balancer.
        """
        pulumi.set(__self__, "external_port", external_port)
        pulumi.set(__self__, "lb_type", lb_type)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "target_group_count", target_group_count)
        if backend_protocol is not None:
            warnings.warn("""Use 'backend_protocol_version' instead.""", DeprecationWarning)
            pulumi.log.warn("""backend_protocol is deprecated: Use 'backend_protocol_version' instead.""")
        if backend_protocol is not None:
            pulumi.set(__self__, "backend_protocol", backend_protocol)
        if backend_protocol_version is not None:
            pulumi.set(__self__, "backend_protocol_version", backend_protocol_version)
        if certificate_arn is not None:
            pulumi.set(__self__, "certificate_arn", certificate_arn)
        if drop_invalid_headers is not None:
            pulumi.set(__self__, "drop_invalid_headers", drop_invalid_headers)
        if enable_access_logs is not None:
            pulumi.set(__self__, "enable_access_logs", enable_access_logs)
        if health_check_config is not None:
            pulumi.set(__self__, "health_check_config", health_check_config)
        if health_check_url is not None:
            pulumi.set(__self__, "health_check_url", health_check_url)
        if http_to_https_redirect is not None:
            pulumi.set(__self__, "http_to_https_redirect", http_to_https_redirect)
        if idle_timeout is not None:
            pulumi.set(__self__, "idle_timeout", idle_timeout)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if is_internal is not None:
            pulumi.set(__self__, "is_internal", is_internal)
        if load_balancer_arn is not None:
            pulumi.set(__self__, "load_balancer_arn", load_balancer_arn)
        if load_balancer_name is not None:
            pulumi.set(__self__, "load_balancer_name", load_balancer_name)
        if replication_controller_name is not None:
            pulumi.set(__self__, "replication_controller_name", replication_controller_name)
        if webaclid is not None:
            pulumi.set(__self__, "webaclid", webaclid)

    @property
    @pulumi.getter(name="externalPort")
    def external_port(self) -> pulumi.Input[int]:
        """
        The frontend port associated with this load balancer configuration.
        """
        return pulumi.get(self, "external_port")

    @external_port.setter
    def external_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "external_port", value)

    @property
    @pulumi.getter(name="lbType")
    def lb_type(self) -> pulumi.Input[int]:
        """
        The numerical index of the type of load balancer configuration to create.
        Should be one of:

           - `0` : ELB (Classic Load Balancer)
           - `1` : ALB (Application Load Balancer)
           - `2` : Health-check Only (No Load Balancer)
        """
        return pulumi.get(self, "lb_type")

    @lb_type.setter
    def lb_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "lb_type", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[str]:
        """
        The backend port associated with this load balancer configuration.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[str]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        The frontend protocol associated with this load balancer configuration.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="targetGroupCount")
    def target_group_count(self) -> pulumi.Input[int]:
        """
        Number of Load Balancer target group to associate with the service.
        """
        return pulumi.get(self, "target_group_count")

    @target_group_count.setter
    def target_group_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "target_group_count", value)

    @property
    @pulumi.getter(name="backendProtocol")
    @_utilities.deprecated("""Use 'backend_protocol_version' instead.""")
    def backend_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        The backend protocol associated with this load balancer configuration.
        """
        return pulumi.get(self, "backend_protocol")

    @backend_protocol.setter
    def backend_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backend_protocol", value)

    @property
    @pulumi.getter(name="backendProtocolVersion")
    def backend_protocol_version(self) -> Optional[pulumi.Input[str]]:
        """
        The backend protocol version associated with this load balancer configuration.
        """
        return pulumi.get(self, "backend_protocol_version")

    @backend_protocol_version.setter
    def backend_protocol_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backend_protocol_version", value)

    @property
    @pulumi.getter(name="certificateArn")
    def certificate_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of an ACM certificate to associate with this load balancer.  Only applicable for HTTPS.
        """
        return pulumi.get(self, "certificate_arn")

    @certificate_arn.setter
    def certificate_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_arn", value)

    @property
    @pulumi.getter(name="dropInvalidHeaders")
    def drop_invalid_headers(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to drop invalid HTTP headers received by the load balancer.
        """
        return pulumi.get(self, "drop_invalid_headers")

    @drop_invalid_headers.setter
    def drop_invalid_headers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drop_invalid_headers", value)

    @property
    @pulumi.getter(name="enableAccessLogs")
    def enable_access_logs(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to enable access logs.  When enabled, Duplo will send access logs to a centralized S3 bucket per plan
        """
        return pulumi.get(self, "enable_access_logs")

    @enable_access_logs.setter
    def enable_access_logs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_access_logs", value)

    @property
    @pulumi.getter(name="healthCheckConfig")
    def health_check_config(self) -> Optional[pulumi.Input['EcsServiceLoadBalancerHealthCheckConfigArgs']]:
        """
        Health check configuration for this load balancer.
        """
        return pulumi.get(self, "health_check_config")

    @health_check_config.setter
    def health_check_config(self, value: Optional[pulumi.Input['EcsServiceLoadBalancerHealthCheckConfigArgs']]):
        pulumi.set(self, "health_check_config", value)

    @property
    @pulumi.getter(name="healthCheckUrl")
    def health_check_url(self) -> Optional[pulumi.Input[str]]:
        """
        The health check URL to associate with this load balancer configuration.
        """
        return pulumi.get(self, "health_check_url")

    @health_check_url.setter
    def health_check_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_url", value)

    @property
    @pulumi.getter(name="httpToHttpsRedirect")
    def http_to_https_redirect(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not the load balancer should redirect HTTP to HTTPS.
        """
        return pulumi.get(self, "http_to_https_redirect")

    @http_to_https_redirect.setter
    def http_to_https_redirect(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "http_to_https_redirect", value)

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        The time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type `application`.
        """
        return pulumi.get(self, "idle_timeout")

    @idle_timeout.setter
    def idle_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "idle_timeout", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[int]]:
        """
        The load balancer Index.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="isInternal")
    def is_internal(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to create an internal load balancer.
        """
        return pulumi.get(self, "is_internal")

    @is_internal.setter
    def is_internal(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_internal", value)

    @property
    @pulumi.getter(name="loadBalancerArn")
    def load_balancer_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The load balancer ARN.
        """
        return pulumi.get(self, "load_balancer_arn")

    @load_balancer_arn.setter
    def load_balancer_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_arn", value)

    @property
    @pulumi.getter(name="loadBalancerName")
    def load_balancer_name(self) -> Optional[pulumi.Input[str]]:
        """
        The load balancer name.
        """
        return pulumi.get(self, "load_balancer_name")

    @load_balancer_name.setter
    def load_balancer_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_name", value)

    @property
    @pulumi.getter(name="replicationControllerName")
    def replication_controller_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replication_controller_name")

    @replication_controller_name.setter
    def replication_controller_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replication_controller_name", value)

    @property
    @pulumi.getter
    def webaclid(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of a web application firewall to associate this load balancer.
        """
        return pulumi.get(self, "webaclid")

    @webaclid.setter
    def webaclid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webaclid", value)


if not MYPY:
    class EcsServiceLoadBalancerHealthCheckConfigArgsDict(TypedDict):
        grpc_success_code: NotRequired[pulumi.Input[str]]
        health_check_interval_seconds: NotRequired[pulumi.Input[int]]
        health_check_timeout_seconds: NotRequired[pulumi.Input[int]]
        healthy_threshold_count: NotRequired[pulumi.Input[int]]
        http_success_code: NotRequired[pulumi.Input[str]]
        unhealthy_threshold_count: NotRequired[pulumi.Input[int]]
elif False:
    EcsServiceLoadBalancerHealthCheckConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EcsServiceLoadBalancerHealthCheckConfigArgs:
    def __init__(__self__, *,
                 grpc_success_code: Optional[pulumi.Input[str]] = None,
                 health_check_interval_seconds: Optional[pulumi.Input[int]] = None,
                 health_check_timeout_seconds: Optional[pulumi.Input[int]] = None,
                 healthy_threshold_count: Optional[pulumi.Input[int]] = None,
                 http_success_code: Optional[pulumi.Input[str]] = None,
                 unhealthy_threshold_count: Optional[pulumi.Input[int]] = None):
        if grpc_success_code is not None:
            pulumi.set(__self__, "grpc_success_code", grpc_success_code)
        if health_check_interval_seconds is not None:
            pulumi.set(__self__, "health_check_interval_seconds", health_check_interval_seconds)
        if health_check_timeout_seconds is not None:
            pulumi.set(__self__, "health_check_timeout_seconds", health_check_timeout_seconds)
        if healthy_threshold_count is not None:
            pulumi.set(__self__, "healthy_threshold_count", healthy_threshold_count)
        if http_success_code is not None:
            pulumi.set(__self__, "http_success_code", http_success_code)
        if unhealthy_threshold_count is not None:
            pulumi.set(__self__, "unhealthy_threshold_count", unhealthy_threshold_count)

    @property
    @pulumi.getter(name="grpcSuccessCode")
    def grpc_success_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "grpc_success_code")

    @grpc_success_code.setter
    def grpc_success_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grpc_success_code", value)

    @property
    @pulumi.getter(name="healthCheckIntervalSeconds")
    def health_check_interval_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "health_check_interval_seconds")

    @health_check_interval_seconds.setter
    def health_check_interval_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_interval_seconds", value)

    @property
    @pulumi.getter(name="healthCheckTimeoutSeconds")
    def health_check_timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "health_check_timeout_seconds")

    @health_check_timeout_seconds.setter
    def health_check_timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_timeout_seconds", value)

    @property
    @pulumi.getter(name="healthyThresholdCount")
    def healthy_threshold_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "healthy_threshold_count")

    @healthy_threshold_count.setter
    def healthy_threshold_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "healthy_threshold_count", value)

    @property
    @pulumi.getter(name="httpSuccessCode")
    def http_success_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_success_code")

    @http_success_code.setter
    def http_success_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_success_code", value)

    @property
    @pulumi.getter(name="unhealthyThresholdCount")
    def unhealthy_threshold_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "unhealthy_threshold_count")

    @unhealthy_threshold_count.setter
    def unhealthy_threshold_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unhealthy_threshold_count", value)


if not MYPY:
    class EcsTaskDefinitionInferenceAcceleratorArgsDict(TypedDict):
        device_name: pulumi.Input[str]
        device_type: pulumi.Input[str]
elif False:
    EcsTaskDefinitionInferenceAcceleratorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EcsTaskDefinitionInferenceAcceleratorArgs:
    def __init__(__self__, *,
                 device_name: pulumi.Input[str],
                 device_type: pulumi.Input[str]):
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "device_type", device_type)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "device_name")

    @device_name.setter
    def device_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "device_name", value)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "device_type")

    @device_type.setter
    def device_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "device_type", value)


if not MYPY:
    class EcsTaskDefinitionPlacementConstraintArgsDict(TypedDict):
        type: pulumi.Input[str]
        expression: NotRequired[pulumi.Input[str]]
elif False:
    EcsTaskDefinitionPlacementConstraintArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EcsTaskDefinitionPlacementConstraintArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 expression: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)


if not MYPY:
    class EcsTaskDefinitionProxyConfigurationArgsDict(TypedDict):
        container_name: pulumi.Input[str]
        properties: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        type: NotRequired[pulumi.Input[str]]
        """
        Defaults to `APPMESH`.
        """
elif False:
    EcsTaskDefinitionProxyConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EcsTaskDefinitionProxyConfigurationArgs:
    def __init__(__self__, *,
                 container_name: pulumi.Input[str],
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: Defaults to `APPMESH`.
        """
        pulumi.set(__self__, "container_name", container_name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `APPMESH`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class EcsTaskDefinitionRequiresAttributeArgsDict(TypedDict):
        name: pulumi.Input[str]
elif False:
    EcsTaskDefinitionRequiresAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EcsTaskDefinitionRequiresAttributeArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class EcsTaskDefinitionRuntimePlatformArgsDict(TypedDict):
        cpu_architecture: pulumi.Input[str]
        """
        Valid values are 'X86_64','ARM64'
        """
        operating_system_family: pulumi.Input[str]
        """
        Valid values are \\n\\nFor FARGATE: 'LINUX','WINDOWS*SERVER*2019*FULL','WINDOWS*SERVER*2019*CORE','WINDOWS*SERVER*2022*FULL','WINDOWS*SERVER*2022*CORE'
        """
elif False:
    EcsTaskDefinitionRuntimePlatformArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EcsTaskDefinitionRuntimePlatformArgs:
    def __init__(__self__, *,
                 cpu_architecture: pulumi.Input[str],
                 operating_system_family: pulumi.Input[str]):
        """
        :param pulumi.Input[str] cpu_architecture: Valid values are 'X86_64','ARM64'
        :param pulumi.Input[str] operating_system_family: Valid values are \\n\\nFor FARGATE: 'LINUX','WINDOWS*SERVER*2019*FULL','WINDOWS*SERVER*2019*CORE','WINDOWS*SERVER*2022*FULL','WINDOWS*SERVER*2022*CORE'
        """
        pulumi.set(__self__, "cpu_architecture", cpu_architecture)
        pulumi.set(__self__, "operating_system_family", operating_system_family)

    @property
    @pulumi.getter(name="cpuArchitecture")
    def cpu_architecture(self) -> pulumi.Input[str]:
        """
        Valid values are 'X86_64','ARM64'
        """
        return pulumi.get(self, "cpu_architecture")

    @cpu_architecture.setter
    def cpu_architecture(self, value: pulumi.Input[str]):
        pulumi.set(self, "cpu_architecture", value)

    @property
    @pulumi.getter(name="operatingSystemFamily")
    def operating_system_family(self) -> pulumi.Input[str]:
        """
        Valid values are \\n\\nFor FARGATE: 'LINUX','WINDOWS*SERVER*2019*FULL','WINDOWS*SERVER*2019*CORE','WINDOWS*SERVER*2022*FULL','WINDOWS*SERVER*2022*CORE'
        """
        return pulumi.get(self, "operating_system_family")

    @operating_system_family.setter
    def operating_system_family(self, value: pulumi.Input[str]):
        pulumi.set(self, "operating_system_family", value)


if not MYPY:
    class EcsTaskDefinitionTagArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    EcsTaskDefinitionTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EcsTaskDefinitionTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class GcpCloudFunctionEventTriggerArgsDict(TypedDict):
        event_type: pulumi.Input[str]
        """
        The type of event that will trigger the function
        """
        resource: NotRequired[pulumi.Input[str]]
        """
        The resource that will trigger the function
        """
        service: NotRequired[pulumi.Input[str]]
        """
        The service that will trigger the function
        """
elif False:
    GcpCloudFunctionEventTriggerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GcpCloudFunctionEventTriggerArgs:
    def __init__(__self__, *,
                 event_type: pulumi.Input[str],
                 resource: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] event_type: The type of event that will trigger the function
        :param pulumi.Input[str] resource: The resource that will trigger the function
        :param pulumi.Input[str] service: The service that will trigger the function
        """
        pulumi.set(__self__, "event_type", event_type)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> pulumi.Input[str]:
        """
        The type of event that will trigger the function
        """
        return pulumi.get(self, "event_type")

    @event_type.setter
    def event_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "event_type", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[str]]:
        """
        The resource that will trigger the function
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        The service that will trigger the function
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)


if not MYPY:
    class GcpCloudFunctionHttpsTriggerArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
        """
        Must be set to `true`.
        """
        security_level: NotRequired[pulumi.Input[str]]
        """
        The security level of the HTTPS trigger
        """
        url: NotRequired[pulumi.Input[str]]
        """
        The URL of the HTTPS trigger
        """
elif False:
    GcpCloudFunctionHttpsTriggerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GcpCloudFunctionHttpsTriggerArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 security_level: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: Must be set to `true`.
        :param pulumi.Input[str] security_level: The security level of the HTTPS trigger
        :param pulumi.Input[str] url: The URL of the HTTPS trigger
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if security_level is not None:
            pulumi.set(__self__, "security_level", security_level)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Must be set to `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> Optional[pulumi.Input[str]]:
        """
        The security level of the HTTPS trigger
        """
        return pulumi.get(self, "security_level")

    @security_level.setter
    def security_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_level", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the HTTPS trigger
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


if not MYPY:
    class GcpInfraMaintenanceWindowExclusionArgsDict(TypedDict):
        end_time: pulumi.Input[str]
        start_time: pulumi.Input[str]
        scope: NotRequired[pulumi.Input[str]]
        """
        The scope of automatic upgrades to restrict in the exclusion window. One of: NO*UPGRADES | NO*MINOR*UPGRADES | NO*MINOR*OR*NODE_UPGRADES Defaults to `NO_UPGRADES`.
        """
elif False:
    GcpInfraMaintenanceWindowExclusionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GcpInfraMaintenanceWindowExclusionArgs:
    def __init__(__self__, *,
                 end_time: pulumi.Input[str],
                 start_time: pulumi.Input[str],
                 scope: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] scope: The scope of automatic upgrades to restrict in the exclusion window. One of: NO*UPGRADES | NO*MINOR*UPGRADES | NO*MINOR*OR*NODE_UPGRADES Defaults to `NO_UPGRADES`.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        The scope of automatic upgrades to restrict in the exclusion window. One of: NO*UPGRADES | NO*MINOR*UPGRADES | NO*MINOR*OR*NODE_UPGRADES Defaults to `NO_UPGRADES`.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)


if not MYPY:
    class GcpInfraMaintenanceWindowRecurringWindowArgsDict(TypedDict):
        end_time: pulumi.Input[str]
        recurrence: pulumi.Input[str]
        """
        Specify recurrence in RFC5545 RRULE format, to specify when this recurs.
        """
        start_time: pulumi.Input[str]
elif False:
    GcpInfraMaintenanceWindowRecurringWindowArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GcpInfraMaintenanceWindowRecurringWindowArgs:
    def __init__(__self__, *,
                 end_time: pulumi.Input[str],
                 recurrence: pulumi.Input[str],
                 start_time: pulumi.Input[str]):
        """
        :param pulumi.Input[str] recurrence: Specify recurrence in RFC5545 RRULE format, to specify when this recurs.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "recurrence", recurrence)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter
    def recurrence(self) -> pulumi.Input[str]:
        """
        Specify recurrence in RFC5545 RRULE format, to specify when this recurs.
        """
        return pulumi.get(self, "recurrence")

    @recurrence.setter
    def recurrence(self, value: pulumi.Input[str]):
        pulumi.set(self, "recurrence", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_time", value)


if not MYPY:
    class GcpInfraSecurityRulePortsAndProtocolArgsDict(TypedDict):
        service_protocol: pulumi.Input[str]
        """
        The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, sctp, ipip, all), or the IP protocol number.
        """
        ports: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The list of ports to which this rule applies. This field is only applicable for UDP, TCP and SCTP protocol.
        """
elif False:
    GcpInfraSecurityRulePortsAndProtocolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GcpInfraSecurityRulePortsAndProtocolArgs:
    def __init__(__self__, *,
                 service_protocol: pulumi.Input[str],
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] service_protocol: The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, sctp, ipip, all), or the IP protocol number.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ports: The list of ports to which this rule applies. This field is only applicable for UDP, TCP and SCTP protocol.
        """
        pulumi.set(__self__, "service_protocol", service_protocol)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter(name="serviceProtocol")
    def service_protocol(self) -> pulumi.Input[str]:
        """
        The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, sctp, ipip, all), or the IP protocol number.
        """
        return pulumi.get(self, "service_protocol")

    @service_protocol.setter
    def service_protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_protocol", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of ports to which this rule applies. This field is only applicable for UDP, TCP and SCTP protocol.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ports", value)


if not MYPY:
    class GcpNodePoolAcceleratorArgsDict(TypedDict):
        accelerator_count: NotRequired[pulumi.Input[str]]
        """
        The number of the accelerator cards exposed to an instance.
        """
        accelerator_type: NotRequired[pulumi.Input[str]]
        """
        The accelerator type resource name.
        """
        gpu_driver_installation_configs: NotRequired[pulumi.Input[Sequence[pulumi.Input['GcpNodePoolAcceleratorGpuDriverInstallationConfigArgsDict']]]]
        gpu_partition_size: NotRequired[pulumi.Input[str]]
        """
        Size of partitions to create on the GPU
        """
        gpu_sharing_configs: NotRequired[pulumi.Input[Sequence[pulumi.Input['GcpNodePoolAcceleratorGpuSharingConfigArgsDict']]]]
        max_time_shared_clients_per_gpu: NotRequired[pulumi.Input[str]]
        """
        The number of time-shared GPU resources to expose for each physical GPU.
        """
elif False:
    GcpNodePoolAcceleratorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GcpNodePoolAcceleratorArgs:
    def __init__(__self__, *,
                 accelerator_count: Optional[pulumi.Input[str]] = None,
                 accelerator_type: Optional[pulumi.Input[str]] = None,
                 gpu_driver_installation_configs: Optional[pulumi.Input[Sequence[pulumi.Input['GcpNodePoolAcceleratorGpuDriverInstallationConfigArgs']]]] = None,
                 gpu_partition_size: Optional[pulumi.Input[str]] = None,
                 gpu_sharing_configs: Optional[pulumi.Input[Sequence[pulumi.Input['GcpNodePoolAcceleratorGpuSharingConfigArgs']]]] = None,
                 max_time_shared_clients_per_gpu: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] accelerator_count: The number of the accelerator cards exposed to an instance.
        :param pulumi.Input[str] accelerator_type: The accelerator type resource name.
        :param pulumi.Input[str] gpu_partition_size: Size of partitions to create on the GPU
        :param pulumi.Input[str] max_time_shared_clients_per_gpu: The number of time-shared GPU resources to expose for each physical GPU.
        """
        if accelerator_count is not None:
            pulumi.set(__self__, "accelerator_count", accelerator_count)
        if accelerator_type is not None:
            pulumi.set(__self__, "accelerator_type", accelerator_type)
        if gpu_driver_installation_configs is not None:
            pulumi.set(__self__, "gpu_driver_installation_configs", gpu_driver_installation_configs)
        if gpu_partition_size is not None:
            pulumi.set(__self__, "gpu_partition_size", gpu_partition_size)
        if gpu_sharing_configs is not None:
            pulumi.set(__self__, "gpu_sharing_configs", gpu_sharing_configs)
        if max_time_shared_clients_per_gpu is not None:
            pulumi.set(__self__, "max_time_shared_clients_per_gpu", max_time_shared_clients_per_gpu)

    @property
    @pulumi.getter(name="acceleratorCount")
    def accelerator_count(self) -> Optional[pulumi.Input[str]]:
        """
        The number of the accelerator cards exposed to an instance.
        """
        return pulumi.get(self, "accelerator_count")

    @accelerator_count.setter
    def accelerator_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accelerator_count", value)

    @property
    @pulumi.getter(name="acceleratorType")
    def accelerator_type(self) -> Optional[pulumi.Input[str]]:
        """
        The accelerator type resource name.
        """
        return pulumi.get(self, "accelerator_type")

    @accelerator_type.setter
    def accelerator_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accelerator_type", value)

    @property
    @pulumi.getter(name="gpuDriverInstallationConfigs")
    def gpu_driver_installation_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GcpNodePoolAcceleratorGpuDriverInstallationConfigArgs']]]]:
        return pulumi.get(self, "gpu_driver_installation_configs")

    @gpu_driver_installation_configs.setter
    def gpu_driver_installation_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GcpNodePoolAcceleratorGpuDriverInstallationConfigArgs']]]]):
        pulumi.set(self, "gpu_driver_installation_configs", value)

    @property
    @pulumi.getter(name="gpuPartitionSize")
    def gpu_partition_size(self) -> Optional[pulumi.Input[str]]:
        """
        Size of partitions to create on the GPU
        """
        return pulumi.get(self, "gpu_partition_size")

    @gpu_partition_size.setter
    def gpu_partition_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gpu_partition_size", value)

    @property
    @pulumi.getter(name="gpuSharingConfigs")
    def gpu_sharing_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GcpNodePoolAcceleratorGpuSharingConfigArgs']]]]:
        return pulumi.get(self, "gpu_sharing_configs")

    @gpu_sharing_configs.setter
    def gpu_sharing_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GcpNodePoolAcceleratorGpuSharingConfigArgs']]]]):
        pulumi.set(self, "gpu_sharing_configs", value)

    @property
    @pulumi.getter(name="maxTimeSharedClientsPerGpu")
    def max_time_shared_clients_per_gpu(self) -> Optional[pulumi.Input[str]]:
        """
        The number of time-shared GPU resources to expose for each physical GPU.
        """
        return pulumi.get(self, "max_time_shared_clients_per_gpu")

    @max_time_shared_clients_per_gpu.setter
    def max_time_shared_clients_per_gpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_time_shared_clients_per_gpu", value)


if not MYPY:
    class GcpNodePoolAcceleratorGpuDriverInstallationConfigArgsDict(TypedDict):
        gpu_driver_version: NotRequired[pulumi.Input[str]]
elif False:
    GcpNodePoolAcceleratorGpuDriverInstallationConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GcpNodePoolAcceleratorGpuDriverInstallationConfigArgs:
    def __init__(__self__, *,
                 gpu_driver_version: Optional[pulumi.Input[str]] = None):
        if gpu_driver_version is not None:
            pulumi.set(__self__, "gpu_driver_version", gpu_driver_version)

    @property
    @pulumi.getter(name="gpuDriverVersion")
    def gpu_driver_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gpu_driver_version")

    @gpu_driver_version.setter
    def gpu_driver_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gpu_driver_version", value)


if not MYPY:
    class GcpNodePoolAcceleratorGpuSharingConfigArgsDict(TypedDict):
        gpu_sharing_strategy: NotRequired[pulumi.Input[str]]
        """
        The configuration for GPU sharing options.
        """
        max_shared_clients_per_gpu: NotRequired[pulumi.Input[str]]
        """
        The max number of containers that can share a physical GPU.
        """
elif False:
    GcpNodePoolAcceleratorGpuSharingConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GcpNodePoolAcceleratorGpuSharingConfigArgs:
    def __init__(__self__, *,
                 gpu_sharing_strategy: Optional[pulumi.Input[str]] = None,
                 max_shared_clients_per_gpu: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] gpu_sharing_strategy: The configuration for GPU sharing options.
        :param pulumi.Input[str] max_shared_clients_per_gpu: The max number of containers that can share a physical GPU.
        """
        if gpu_sharing_strategy is not None:
            pulumi.set(__self__, "gpu_sharing_strategy", gpu_sharing_strategy)
        if max_shared_clients_per_gpu is not None:
            pulumi.set(__self__, "max_shared_clients_per_gpu", max_shared_clients_per_gpu)

    @property
    @pulumi.getter(name="gpuSharingStrategy")
    def gpu_sharing_strategy(self) -> Optional[pulumi.Input[str]]:
        """
        The configuration for GPU sharing options.
        """
        return pulumi.get(self, "gpu_sharing_strategy")

    @gpu_sharing_strategy.setter
    def gpu_sharing_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gpu_sharing_strategy", value)

    @property
    @pulumi.getter(name="maxSharedClientsPerGpu")
    def max_shared_clients_per_gpu(self) -> Optional[pulumi.Input[str]]:
        """
        The max number of containers that can share a physical GPU.
        """
        return pulumi.get(self, "max_shared_clients_per_gpu")

    @max_shared_clients_per_gpu.setter
    def max_shared_clients_per_gpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_shared_clients_per_gpu", value)


if not MYPY:
    class GcpNodePoolLinuxNodeConfigArgsDict(TypedDict):
        cgroup_mode: NotRequired[pulumi.Input[str]]
        """
        cgroupMode specifies the cgroup mode to be used on the node.
        """
        sysctls: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        The Linux kernel parameters to be applied to the nodes and all pods running on the nodes.
        """
elif False:
    GcpNodePoolLinuxNodeConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GcpNodePoolLinuxNodeConfigArgs:
    def __init__(__self__, *,
                 cgroup_mode: Optional[pulumi.Input[str]] = None,
                 sysctls: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] cgroup_mode: cgroupMode specifies the cgroup mode to be used on the node.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] sysctls: The Linux kernel parameters to be applied to the nodes and all pods running on the nodes.
        """
        if cgroup_mode is not None:
            pulumi.set(__self__, "cgroup_mode", cgroup_mode)
        if sysctls is not None:
            pulumi.set(__self__, "sysctls", sysctls)

    @property
    @pulumi.getter(name="cgroupMode")
    def cgroup_mode(self) -> Optional[pulumi.Input[str]]:
        """
        cgroupMode specifies the cgroup mode to be used on the node.
        """
        return pulumi.get(self, "cgroup_mode")

    @cgroup_mode.setter
    def cgroup_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cgroup_mode", value)

    @property
    @pulumi.getter
    def sysctls(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The Linux kernel parameters to be applied to the nodes and all pods running on the nodes.
        """
        return pulumi.get(self, "sysctls")

    @sysctls.setter
    def sysctls(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "sysctls", value)


if not MYPY:
    class GcpNodePoolNodePoolLoggingConfigArgsDict(TypedDict):
        variant_config: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
elif False:
    GcpNodePoolNodePoolLoggingConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GcpNodePoolNodePoolLoggingConfigArgs:
    def __init__(__self__, *,
                 variant_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if variant_config is not None:
            pulumi.set(__self__, "variant_config", variant_config)

    @property
    @pulumi.getter(name="variantConfig")
    def variant_config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "variant_config")

    @variant_config.setter
    def variant_config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "variant_config", value)


if not MYPY:
    class GcpNodePoolTaintArgsDict(TypedDict):
        effect: NotRequired[pulumi.Input[str]]
        """
        Update strategy of the node pool. Supported effect's are : 
        	- EFFECT_UNSPECIFIED 
        	- NO_SCHEDULE 
        	- PREFER_NO_SCHEDULE
        	- NO_EXECUTE
        """
        key: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    GcpNodePoolTaintArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GcpNodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] effect: Update strategy of the node pool. Supported effect's are : 
               	- EFFECT_UNSPECIFIED 
               	- NO_SCHEDULE 
               	- PREFER_NO_SCHEDULE
               	- NO_EXECUTE
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        Update strategy of the node pool. Supported effect's are : 
        	- EFFECT_UNSPECIFIED 
        	- NO_SCHEDULE 
        	- PREFER_NO_SCHEDULE
        	- NO_EXECUTE
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class GcpNodePoolUpgradeSettingArgsDict(TypedDict):
        blue_green_settings: NotRequired[pulumi.Input[Sequence[pulumi.Input['GcpNodePoolUpgradeSettingBlueGreenSettingArgsDict']]]]
        max_surge: NotRequired[pulumi.Input[int]]
        """
        The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process.
        """
        max_unavailable: NotRequired[pulumi.Input[int]]
        """
        The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready
        """
        strategy: NotRequired[pulumi.Input[str]]
        """
        Update strategy of the node pool.
        """
elif False:
    GcpNodePoolUpgradeSettingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GcpNodePoolUpgradeSettingArgs:
    def __init__(__self__, *,
                 blue_green_settings: Optional[pulumi.Input[Sequence[pulumi.Input['GcpNodePoolUpgradeSettingBlueGreenSettingArgs']]]] = None,
                 max_surge: Optional[pulumi.Input[int]] = None,
                 max_unavailable: Optional[pulumi.Input[int]] = None,
                 strategy: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] max_surge: The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process.
        :param pulumi.Input[int] max_unavailable: The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready
        :param pulumi.Input[str] strategy: Update strategy of the node pool.
        """
        if blue_green_settings is not None:
            pulumi.set(__self__, "blue_green_settings", blue_green_settings)
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter(name="blueGreenSettings")
    def blue_green_settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GcpNodePoolUpgradeSettingBlueGreenSettingArgs']]]]:
        return pulumi.get(self, "blue_green_settings")

    @blue_green_settings.setter
    def blue_green_settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GcpNodePoolUpgradeSettingBlueGreenSettingArgs']]]]):
        pulumi.set(self, "blue_green_settings", value)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process.
        """
        return pulumi.get(self, "max_surge")

    @max_surge.setter
    def max_surge(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_surge", value)

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready
        """
        return pulumi.get(self, "max_unavailable")

    @max_unavailable.setter
    def max_unavailable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_unavailable", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input[str]]:
        """
        Update strategy of the node pool.
        """
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strategy", value)


if not MYPY:
    class GcpNodePoolUpgradeSettingBlueGreenSettingArgsDict(TypedDict):
        node_pool_soak_duration: NotRequired[pulumi.Input[str]]
        """
        Note: The node_pool_soak_duration should not be used along with standard_rollout_policy
        """
        standard_rollout_policies: NotRequired[pulumi.Input[Sequence[pulumi.Input['GcpNodePoolUpgradeSettingBlueGreenSettingStandardRolloutPolicyArgsDict']]]]
        """
        Note: The standard_rollout_policy should not be used along with node_pool_soak_duration
        """
elif False:
    GcpNodePoolUpgradeSettingBlueGreenSettingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GcpNodePoolUpgradeSettingBlueGreenSettingArgs:
    def __init__(__self__, *,
                 node_pool_soak_duration: Optional[pulumi.Input[str]] = None,
                 standard_rollout_policies: Optional[pulumi.Input[Sequence[pulumi.Input['GcpNodePoolUpgradeSettingBlueGreenSettingStandardRolloutPolicyArgs']]]] = None):
        """
        :param pulumi.Input[str] node_pool_soak_duration: Note: The node_pool_soak_duration should not be used along with standard_rollout_policy
        :param pulumi.Input[Sequence[pulumi.Input['GcpNodePoolUpgradeSettingBlueGreenSettingStandardRolloutPolicyArgs']]] standard_rollout_policies: Note: The standard_rollout_policy should not be used along with node_pool_soak_duration
        """
        if node_pool_soak_duration is not None:
            pulumi.set(__self__, "node_pool_soak_duration", node_pool_soak_duration)
        if standard_rollout_policies is not None:
            pulumi.set(__self__, "standard_rollout_policies", standard_rollout_policies)

    @property
    @pulumi.getter(name="nodePoolSoakDuration")
    def node_pool_soak_duration(self) -> Optional[pulumi.Input[str]]:
        """
        Note: The node_pool_soak_duration should not be used along with standard_rollout_policy
        """
        return pulumi.get(self, "node_pool_soak_duration")

    @node_pool_soak_duration.setter
    def node_pool_soak_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_pool_soak_duration", value)

    @property
    @pulumi.getter(name="standardRolloutPolicies")
    def standard_rollout_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GcpNodePoolUpgradeSettingBlueGreenSettingStandardRolloutPolicyArgs']]]]:
        """
        Note: The standard_rollout_policy should not be used along with node_pool_soak_duration
        """
        return pulumi.get(self, "standard_rollout_policies")

    @standard_rollout_policies.setter
    def standard_rollout_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GcpNodePoolUpgradeSettingBlueGreenSettingStandardRolloutPolicyArgs']]]]):
        pulumi.set(self, "standard_rollout_policies", value)


if not MYPY:
    class GcpNodePoolUpgradeSettingBlueGreenSettingStandardRolloutPolicyArgsDict(TypedDict):
        batch_node_count: NotRequired[pulumi.Input[int]]
        """
        Note: The batch_node_count should not be used along with batch_percentage
        """
        batch_percentage: NotRequired[pulumi.Input[float]]
        """
        Note: The batch_percentage should not be used along with batch_node_count
        """
        batch_soak_duration: NotRequired[pulumi.Input[str]]
elif False:
    GcpNodePoolUpgradeSettingBlueGreenSettingStandardRolloutPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GcpNodePoolUpgradeSettingBlueGreenSettingStandardRolloutPolicyArgs:
    def __init__(__self__, *,
                 batch_node_count: Optional[pulumi.Input[int]] = None,
                 batch_percentage: Optional[pulumi.Input[float]] = None,
                 batch_soak_duration: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] batch_node_count: Note: The batch_node_count should not be used along with batch_percentage
        :param pulumi.Input[float] batch_percentage: Note: The batch_percentage should not be used along with batch_node_count
        """
        if batch_node_count is not None:
            pulumi.set(__self__, "batch_node_count", batch_node_count)
        if batch_percentage is not None:
            pulumi.set(__self__, "batch_percentage", batch_percentage)
        if batch_soak_duration is not None:
            pulumi.set(__self__, "batch_soak_duration", batch_soak_duration)

    @property
    @pulumi.getter(name="batchNodeCount")
    def batch_node_count(self) -> Optional[pulumi.Input[int]]:
        """
        Note: The batch_node_count should not be used along with batch_percentage
        """
        return pulumi.get(self, "batch_node_count")

    @batch_node_count.setter
    def batch_node_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "batch_node_count", value)

    @property
    @pulumi.getter(name="batchPercentage")
    def batch_percentage(self) -> Optional[pulumi.Input[float]]:
        """
        Note: The batch_percentage should not be used along with batch_node_count
        """
        return pulumi.get(self, "batch_percentage")

    @batch_percentage.setter
    def batch_percentage(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "batch_percentage", value)

    @property
    @pulumi.getter(name="batchSoakDuration")
    def batch_soak_duration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "batch_soak_duration")

    @batch_soak_duration.setter
    def batch_soak_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "batch_soak_duration", value)


if not MYPY:
    class GcpSchedulerJobAppEngineTargetArgsDict(TypedDict):
        method: pulumi.Input[str]
        """
        The HTTP method to use.
        """
        relative_uri: pulumi.Input[str]
        """
        The relative URI.
        """
        body: NotRequired[pulumi.Input[str]]
        """
        The HTTP request body to send.
        """
        headers: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        The HTTP headers to send.
        """
        routing: NotRequired[pulumi.Input['GcpSchedulerJobAppEngineTargetRoutingArgsDict']]
        """
        Specifies App Engine routing.
        """
elif False:
    GcpSchedulerJobAppEngineTargetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GcpSchedulerJobAppEngineTargetArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str],
                 relative_uri: pulumi.Input[str],
                 body: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 routing: Optional[pulumi.Input['GcpSchedulerJobAppEngineTargetRoutingArgs']] = None):
        """
        :param pulumi.Input[str] method: The HTTP method to use.
        :param pulumi.Input[str] relative_uri: The relative URI.
        :param pulumi.Input[str] body: The HTTP request body to send.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] headers: The HTTP headers to send.
        :param pulumi.Input['GcpSchedulerJobAppEngineTargetRoutingArgs'] routing: Specifies App Engine routing.
        """
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "relative_uri", relative_uri)
        if body is not None:
            pulumi.set(__self__, "body", body)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if routing is not None:
            pulumi.set(__self__, "routing", routing)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        """
        The HTTP method to use.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter(name="relativeUri")
    def relative_uri(self) -> pulumi.Input[str]:
        """
        The relative URI.
        """
        return pulumi.get(self, "relative_uri")

    @relative_uri.setter
    def relative_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "relative_uri", value)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP request body to send.
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The HTTP headers to send.
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def routing(self) -> Optional[pulumi.Input['GcpSchedulerJobAppEngineTargetRoutingArgs']]:
        """
        Specifies App Engine routing.
        """
        return pulumi.get(self, "routing")

    @routing.setter
    def routing(self, value: Optional[pulumi.Input['GcpSchedulerJobAppEngineTargetRoutingArgs']]):
        pulumi.set(self, "routing", value)


if not MYPY:
    class GcpSchedulerJobAppEngineTargetRoutingArgsDict(TypedDict):
        host: NotRequired[pulumi.Input[str]]
        """
        The App Engine host.
        """
        instance: NotRequired[pulumi.Input[str]]
        """
        The App Engine instance.
        """
        service: NotRequired[pulumi.Input[str]]
        """
        The App Engine service.
        """
        version: NotRequired[pulumi.Input[str]]
        """
        The App Engine service version.
        """
elif False:
    GcpSchedulerJobAppEngineTargetRoutingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GcpSchedulerJobAppEngineTargetRoutingArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 instance: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: The App Engine host.
        :param pulumi.Input[str] instance: The App Engine instance.
        :param pulumi.Input[str] service: The App Engine service.
        :param pulumi.Input[str] version: The App Engine service version.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if instance is not None:
            pulumi.set(__self__, "instance", instance)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        The App Engine host.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def instance(self) -> Optional[pulumi.Input[str]]:
        """
        The App Engine instance.
        """
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        The App Engine service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        The App Engine service version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class GcpSchedulerJobHttpTargetArgsDict(TypedDict):
        method: pulumi.Input[str]
        """
        The HTTP method to use.
        """
        uri: pulumi.Input[str]
        """
        The request URI.
        """
        body: NotRequired[pulumi.Input[str]]
        """
        The HTTP request body to send.
        """
        headers: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        The HTTP headers to send.
        """
        oauth_token: NotRequired[pulumi.Input['GcpSchedulerJobHttpTargetOauthTokenArgsDict']]
        """
        Specifies OAuth authentication.
        """
        oidc_token: NotRequired[pulumi.Input['GcpSchedulerJobHttpTargetOidcTokenArgsDict']]
        """
        Specifies OIDC authentication.
        """
elif False:
    GcpSchedulerJobHttpTargetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GcpSchedulerJobHttpTargetArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str],
                 uri: pulumi.Input[str],
                 body: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 oauth_token: Optional[pulumi.Input['GcpSchedulerJobHttpTargetOauthTokenArgs']] = None,
                 oidc_token: Optional[pulumi.Input['GcpSchedulerJobHttpTargetOidcTokenArgs']] = None):
        """
        :param pulumi.Input[str] method: The HTTP method to use.
        :param pulumi.Input[str] uri: The request URI.
        :param pulumi.Input[str] body: The HTTP request body to send.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] headers: The HTTP headers to send.
        :param pulumi.Input['GcpSchedulerJobHttpTargetOauthTokenArgs'] oauth_token: Specifies OAuth authentication.
        :param pulumi.Input['GcpSchedulerJobHttpTargetOidcTokenArgs'] oidc_token: Specifies OIDC authentication.
        """
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "uri", uri)
        if body is not None:
            pulumi.set(__self__, "body", body)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if oauth_token is not None:
            pulumi.set(__self__, "oauth_token", oauth_token)
        if oidc_token is not None:
            pulumi.set(__self__, "oidc_token", oidc_token)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        """
        The HTTP method to use.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Input[str]:
        """
        The request URI.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP request body to send.
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The HTTP headers to send.
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="oauthToken")
    def oauth_token(self) -> Optional[pulumi.Input['GcpSchedulerJobHttpTargetOauthTokenArgs']]:
        """
        Specifies OAuth authentication.
        """
        return pulumi.get(self, "oauth_token")

    @oauth_token.setter
    def oauth_token(self, value: Optional[pulumi.Input['GcpSchedulerJobHttpTargetOauthTokenArgs']]):
        pulumi.set(self, "oauth_token", value)

    @property
    @pulumi.getter(name="oidcToken")
    def oidc_token(self) -> Optional[pulumi.Input['GcpSchedulerJobHttpTargetOidcTokenArgs']]:
        """
        Specifies OIDC authentication.
        """
        return pulumi.get(self, "oidc_token")

    @oidc_token.setter
    def oidc_token(self, value: Optional[pulumi.Input['GcpSchedulerJobHttpTargetOidcTokenArgs']]):
        pulumi.set(self, "oidc_token", value)


if not MYPY:
    class GcpSchedulerJobHttpTargetOauthTokenArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
        """
        Must be set to `true`. Defaults to `true`.
        """
        scope: NotRequired[pulumi.Input[str]]
        """
        The OAuth token scope.
        """
        service_account_email: NotRequired[pulumi.Input[str]]
        """
        The OAuth token service account email.
        """
elif False:
    GcpSchedulerJobHttpTargetOauthTokenArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GcpSchedulerJobHttpTargetOauthTokenArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 service_account_email: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: Must be set to `true`. Defaults to `true`.
        :param pulumi.Input[str] scope: The OAuth token scope.
        :param pulumi.Input[str] service_account_email: The OAuth token service account email.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if service_account_email is not None:
            pulumi.set(__self__, "service_account_email", service_account_email)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Must be set to `true`. Defaults to `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        The OAuth token scope.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="serviceAccountEmail")
    def service_account_email(self) -> Optional[pulumi.Input[str]]:
        """
        The OAuth token service account email.
        """
        return pulumi.get(self, "service_account_email")

    @service_account_email.setter
    def service_account_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_email", value)


if not MYPY:
    class GcpSchedulerJobHttpTargetOidcTokenArgsDict(TypedDict):
        audience: NotRequired[pulumi.Input[str]]
        """
        The OIDC token audience.
        """
        enabled: NotRequired[pulumi.Input[bool]]
        """
        Must be set to `true`. Defaults to `true`.
        """
        service_account_email: NotRequired[pulumi.Input[str]]
        """
        The OIDC token service account email.
        """
elif False:
    GcpSchedulerJobHttpTargetOidcTokenArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GcpSchedulerJobHttpTargetOidcTokenArgs:
    def __init__(__self__, *,
                 audience: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 service_account_email: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] audience: The OIDC token audience.
        :param pulumi.Input[bool] enabled: Must be set to `true`. Defaults to `true`.
        :param pulumi.Input[str] service_account_email: The OIDC token service account email.
        """
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if service_account_email is not None:
            pulumi.set(__self__, "service_account_email", service_account_email)

    @property
    @pulumi.getter
    def audience(self) -> Optional[pulumi.Input[str]]:
        """
        The OIDC token audience.
        """
        return pulumi.get(self, "audience")

    @audience.setter
    def audience(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audience", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Must be set to `true`. Defaults to `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="serviceAccountEmail")
    def service_account_email(self) -> Optional[pulumi.Input[str]]:
        """
        The OIDC token service account email.
        """
        return pulumi.get(self, "service_account_email")

    @service_account_email.setter
    def service_account_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_email", value)


if not MYPY:
    class GcpSchedulerJobPubsubTargetArgsDict(TypedDict):
        topic_name: pulumi.Input[str]
        """
        The name of the topic to target
        """
        attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        The attributes to send to the pubsub target.
        """
        data: NotRequired[pulumi.Input[str]]
        """
        The data to send to the pubsub topic.
        """
elif False:
    GcpSchedulerJobPubsubTargetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GcpSchedulerJobPubsubTargetArgs:
    def __init__(__self__, *,
                 topic_name: pulumi.Input[str],
                 attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 data: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] topic_name: The name of the topic to target
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] attributes: The attributes to send to the pubsub target.
        :param pulumi.Input[str] data: The data to send to the pubsub topic.
        """
        pulumi.set(__self__, "topic_name", topic_name)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if data is not None:
            pulumi.set(__self__, "data", data)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> pulumi.Input[str]:
        """
        The name of the topic to target
        """
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_name", value)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The attributes to send to the pubsub target.
        """
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter
    def data(self) -> Optional[pulumi.Input[str]]:
        """
        The data to send to the pubsub topic.
        """
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data", value)


if not MYPY:
    class GcpStorageBucketV2DefaultEncryptionArgsDict(TypedDict):
        method: NotRequired[pulumi.Input[str]]
        """
        Default encryption method.  Must be one of: `None`, `Sse`, `AwsKms`, `TenantKms`. Defaults to `Sse`.
        """
elif False:
    GcpStorageBucketV2DefaultEncryptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GcpStorageBucketV2DefaultEncryptionArgs:
    def __init__(__self__, *,
                 method: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] method: Default encryption method.  Must be one of: `None`, `Sse`, `AwsKms`, `TenantKms`. Defaults to `Sse`.
        """
        if method is not None:
            pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[str]]:
        """
        Default encryption method.  Must be one of: `None`, `Sse`, `AwsKms`, `TenantKms`. Defaults to `Sse`.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method", value)


if not MYPY:
    class GcpTenantSecurityRulePortsAndProtocolArgsDict(TypedDict):
        service_protocol: pulumi.Input[str]
        """
        The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, sctp, ipip, all), or the IP protocol number.
        """
        ports: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The list of ports to which this rule applies. This field is only applicable for UDP, TCP and SCTP protocol.
        """
elif False:
    GcpTenantSecurityRulePortsAndProtocolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GcpTenantSecurityRulePortsAndProtocolArgs:
    def __init__(__self__, *,
                 service_protocol: pulumi.Input[str],
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] service_protocol: The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, sctp, ipip, all), or the IP protocol number.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ports: The list of ports to which this rule applies. This field is only applicable for UDP, TCP and SCTP protocol.
        """
        pulumi.set(__self__, "service_protocol", service_protocol)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter(name="serviceProtocol")
    def service_protocol(self) -> pulumi.Input[str]:
        """
        The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, sctp, ipip, all), or the IP protocol number.
        """
        return pulumi.get(self, "service_protocol")

    @service_protocol.setter
    def service_protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_protocol", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of ports to which this rule applies. This field is only applicable for UDP, TCP and SCTP protocol.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ports", value)


if not MYPY:
    class InfrastructureAllSettingArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    InfrastructureAllSettingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InfrastructureAllSettingArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class InfrastructureCustomDataArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    InfrastructureCustomDataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InfrastructureCustomDataArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class InfrastructureOnpremCustomDataArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    InfrastructureOnpremCustomDataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InfrastructureOnpremCustomDataArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class InfrastructureOnpremEksConfigArgsDict(TypedDict):
        ingress_security_group_ids: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        The security group IDs
        """
        private_subnets: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        The private subnets for the VPC.
        """
        public_subnets: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        The public subnets for the VPC.
        """
        vpc_id: pulumi.Input[str]
        """
        The the ID of a Virtual Private Cloud
        """
elif False:
    InfrastructureOnpremEksConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InfrastructureOnpremEksConfigArgs:
    def __init__(__self__, *,
                 ingress_security_group_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 private_subnets: pulumi.Input[Sequence[pulumi.Input[str]]],
                 public_subnets: pulumi.Input[Sequence[pulumi.Input[str]]],
                 vpc_id: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ingress_security_group_ids: The security group IDs
        :param pulumi.Input[Sequence[pulumi.Input[str]]] private_subnets: The private subnets for the VPC.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] public_subnets: The public subnets for the VPC.
        :param pulumi.Input[str] vpc_id: The the ID of a Virtual Private Cloud
        """
        pulumi.set(__self__, "ingress_security_group_ids", ingress_security_group_ids)
        pulumi.set(__self__, "private_subnets", private_subnets)
        pulumi.set(__self__, "public_subnets", public_subnets)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="ingressSecurityGroupIds")
    def ingress_security_group_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The security group IDs
        """
        return pulumi.get(self, "ingress_security_group_ids")

    @ingress_security_group_ids.setter
    def ingress_security_group_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "ingress_security_group_ids", value)

    @property
    @pulumi.getter(name="privateSubnets")
    def private_subnets(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The private subnets for the VPC.
        """
        return pulumi.get(self, "private_subnets")

    @private_subnets.setter
    def private_subnets(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "private_subnets", value)

    @property
    @pulumi.getter(name="publicSubnets")
    def public_subnets(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The public subnets for the VPC.
        """
        return pulumi.get(self, "public_subnets")

    @public_subnets.setter
    def public_subnets(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "public_subnets", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        The the ID of a Virtual Private Cloud
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)


if not MYPY:
    class InfrastructurePrivateSubnetArgsDict(TypedDict):
        cidr_block: NotRequired[pulumi.Input[str]]
        """
        The subnet CIDR block.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        The subnet ID.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The subnet name.
        """
        tags: NotRequired[pulumi.Input[Sequence[pulumi.Input['InfrastructurePrivateSubnetTagArgsDict']]]]
        """
        The subnet's tags.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        The type of subnet.  Will be one of: `"public"` or `"private"`.
        """
        zone: NotRequired[pulumi.Input[str]]
        """
        The Duplo zone that the subnet resides in.  Will be one of:  `"A"`, `"B"`, `"C"`, or `"D"`
        """
elif False:
    InfrastructurePrivateSubnetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InfrastructurePrivateSubnetArgs:
    def __init__(__self__, *,
                 cidr_block: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['InfrastructurePrivateSubnetTagArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cidr_block: The subnet CIDR block.
        :param pulumi.Input[str] id: The subnet ID.
        :param pulumi.Input[str] name: The subnet name.
        :param pulumi.Input[Sequence[pulumi.Input['InfrastructurePrivateSubnetTagArgs']]] tags: The subnet's tags.
        :param pulumi.Input[str] type: The type of subnet.  Will be one of: `"public"` or `"private"`.
        :param pulumi.Input[str] zone: The Duplo zone that the subnet resides in.  Will be one of:  `"A"`, `"B"`, `"C"`, or `"D"`
        """
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[pulumi.Input[str]]:
        """
        The subnet CIDR block.
        """
        return pulumi.get(self, "cidr_block")

    @cidr_block.setter
    def cidr_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr_block", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The subnet ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The subnet name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InfrastructurePrivateSubnetTagArgs']]]]:
        """
        The subnet's tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InfrastructurePrivateSubnetTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of subnet.  Will be one of: `"public"` or `"private"`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        The Duplo zone that the subnet resides in.  Will be one of:  `"A"`, `"B"`, `"C"`, or `"D"`
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


if not MYPY:
    class InfrastructurePrivateSubnetTagArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    InfrastructurePrivateSubnetTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InfrastructurePrivateSubnetTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class InfrastructurePublicSubnetArgsDict(TypedDict):
        cidr_block: NotRequired[pulumi.Input[str]]
        """
        The subnet CIDR block.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        The subnet ID.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The subnet name.
        """
        tags: NotRequired[pulumi.Input[Sequence[pulumi.Input['InfrastructurePublicSubnetTagArgsDict']]]]
        """
        The subnet's tags.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        The type of subnet.  Will be one of: `"public"` or `"private"`.
        """
        zone: NotRequired[pulumi.Input[str]]
        """
        The Duplo zone that the subnet resides in.  Will be one of:  `"A"`, `"B"`, `"C"`, or `"D"`
        """
elif False:
    InfrastructurePublicSubnetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InfrastructurePublicSubnetArgs:
    def __init__(__self__, *,
                 cidr_block: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['InfrastructurePublicSubnetTagArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cidr_block: The subnet CIDR block.
        :param pulumi.Input[str] id: The subnet ID.
        :param pulumi.Input[str] name: The subnet name.
        :param pulumi.Input[Sequence[pulumi.Input['InfrastructurePublicSubnetTagArgs']]] tags: The subnet's tags.
        :param pulumi.Input[str] type: The type of subnet.  Will be one of: `"public"` or `"private"`.
        :param pulumi.Input[str] zone: The Duplo zone that the subnet resides in.  Will be one of:  `"A"`, `"B"`, `"C"`, or `"D"`
        """
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[pulumi.Input[str]]:
        """
        The subnet CIDR block.
        """
        return pulumi.get(self, "cidr_block")

    @cidr_block.setter
    def cidr_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr_block", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The subnet ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The subnet name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InfrastructurePublicSubnetTagArgs']]]]:
        """
        The subnet's tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InfrastructurePublicSubnetTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of subnet.  Will be one of: `"public"` or `"private"`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        The Duplo zone that the subnet resides in.  Will be one of:  `"A"`, `"B"`, `"C"`, or `"D"`
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


if not MYPY:
    class InfrastructurePublicSubnetTagArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    InfrastructurePublicSubnetTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InfrastructurePublicSubnetTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class InfrastructureSecurityGroupArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        The security group ID.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The security group name.
        """
        read_only: NotRequired[pulumi.Input[bool]]
        rules: NotRequired[pulumi.Input[Sequence[pulumi.Input['InfrastructureSecurityGroupRuleArgsDict']]]]
        """
        Security group rules
        """
        type: NotRequired[pulumi.Input[str]]
        """
        The type of security group.  Will be one of: `"host"` or `"lb"`.
        """
elif False:
    InfrastructureSecurityGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InfrastructureSecurityGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['InfrastructureSecurityGroupRuleArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The security group ID.
        :param pulumi.Input[str] name: The security group name.
        :param pulumi.Input[Sequence[pulumi.Input['InfrastructureSecurityGroupRuleArgs']]] rules: Security group rules
        :param pulumi.Input[str] type: The type of security group.  Will be one of: `"host"` or `"lb"`.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The security group ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The security group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InfrastructureSecurityGroupRuleArgs']]]]:
        """
        Security group rules
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InfrastructureSecurityGroupRuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of security group.  Will be one of: `"host"` or `"lb"`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class InfrastructureSecurityGroupRuleArgsDict(TypedDict):
        action: NotRequired[pulumi.Input[str]]
        destination_rule_type: NotRequired[pulumi.Input[int]]
        direction: NotRequired[pulumi.Input[str]]
        priority: NotRequired[pulumi.Input[int]]
        protocol: NotRequired[pulumi.Input[str]]
        source_address_prefix: NotRequired[pulumi.Input[str]]
        source_port_range: NotRequired[pulumi.Input[str]]
        source_rule_type: NotRequired[pulumi.Input[int]]
elif False:
    InfrastructureSecurityGroupRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InfrastructureSecurityGroupRuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 destination_rule_type: Optional[pulumi.Input[int]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 source_address_prefix: Optional[pulumi.Input[str]] = None,
                 source_port_range: Optional[pulumi.Input[str]] = None,
                 source_rule_type: Optional[pulumi.Input[int]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if destination_rule_type is not None:
            pulumi.set(__self__, "destination_rule_type", destination_rule_type)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if source_address_prefix is not None:
            pulumi.set(__self__, "source_address_prefix", source_address_prefix)
        if source_port_range is not None:
            pulumi.set(__self__, "source_port_range", source_port_range)
        if source_rule_type is not None:
            pulumi.set(__self__, "source_rule_type", source_rule_type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="destinationRuleType")
    def destination_rule_type(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "destination_rule_type")

    @destination_rule_type.setter
    def destination_rule_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "destination_rule_type", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="sourceAddressPrefix")
    def source_address_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_address_prefix")

    @source_address_prefix.setter
    def source_address_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_address_prefix", value)

    @property
    @pulumi.getter(name="sourcePortRange")
    def source_port_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_port_range")

    @source_port_range.setter
    def source_port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_port_range", value)

    @property
    @pulumi.getter(name="sourceRuleType")
    def source_rule_type(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "source_rule_type")

    @source_rule_type.setter
    def source_rule_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_rule_type", value)


if not MYPY:
    class InfrastructureSettingArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    InfrastructureSettingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InfrastructureSettingArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class InfrastructureSettingCustomDataArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    InfrastructureSettingCustomDataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InfrastructureSettingCustomDataArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class InfrastructureSettingSettingArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    InfrastructureSettingSettingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InfrastructureSettingSettingArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class K8HelmReleaseChartArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Provide unique name for the helm chart.
        """
        source_name: pulumi.Input[str]
        """
        The name of the source, referred from helm repository resource.
        """
        version: pulumi.Input[str]
        """
        The helm chart version
        """
        interval: NotRequired[pulumi.Input[str]]
        """
        The interval associated to helm chart Defaults to `5m0s`.
        """
        reconcile_strategy: NotRequired[pulumi.Input[str]]
        """
        The reconcile strategy should be chosen from ChartVersion or Revision. No new chart artifact is produced on updates to the source unless the version is changed in HelmRepository. Use `Revision` to produce new chart artifact on change in source revision. Defaults to `ChartVersion`.
        """
        source_type: NotRequired[pulumi.Input[str]]
        """
        The helm chart source, currently only HelmRepository as source is supported Defaults to `HelmRepository`.
        """
elif False:
    K8HelmReleaseChartArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8HelmReleaseChartArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 source_name: pulumi.Input[str],
                 version: pulumi.Input[str],
                 interval: Optional[pulumi.Input[str]] = None,
                 reconcile_strategy: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Provide unique name for the helm chart.
        :param pulumi.Input[str] source_name: The name of the source, referred from helm repository resource.
        :param pulumi.Input[str] version: The helm chart version
        :param pulumi.Input[str] interval: The interval associated to helm chart Defaults to `5m0s`.
        :param pulumi.Input[str] reconcile_strategy: The reconcile strategy should be chosen from ChartVersion or Revision. No new chart artifact is produced on updates to the source unless the version is changed in HelmRepository. Use `Revision` to produce new chart artifact on change in source revision. Defaults to `ChartVersion`.
        :param pulumi.Input[str] source_type: The helm chart source, currently only HelmRepository as source is supported Defaults to `HelmRepository`.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "source_name", source_name)
        pulumi.set(__self__, "version", version)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if reconcile_strategy is not None:
            pulumi.set(__self__, "reconcile_strategy", reconcile_strategy)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Provide unique name for the helm chart.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> pulumi.Input[str]:
        """
        The name of the source, referred from helm repository resource.
        """
        return pulumi.get(self, "source_name")

    @source_name.setter
    def source_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_name", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        """
        The helm chart version
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[str]]:
        """
        The interval associated to helm chart Defaults to `5m0s`.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="reconcileStrategy")
    def reconcile_strategy(self) -> Optional[pulumi.Input[str]]:
        """
        The reconcile strategy should be chosen from ChartVersion or Revision. No new chart artifact is produced on updates to the source unless the version is changed in HelmRepository. Use `Revision` to produce new chart artifact on change in source revision. Defaults to `ChartVersion`.
        """
        return pulumi.get(self, "reconcile_strategy")

    @reconcile_strategy.setter
    def reconcile_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reconcile_strategy", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        """
        The helm chart source, currently only HelmRepository as source is supported Defaults to `HelmRepository`.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)


if not MYPY:
    class K8IngressLbconfigArgsDict(TypedDict):
        dns_prefix: pulumi.Input[str]
        """
        The DNS prefix to expose services using Route53 domain.
        """
        is_internal: pulumi.Input[bool]
        """
        Whether or not to create an internal load balancer.
        """
        certificate_arn: NotRequired[pulumi.Input[str]]
        """
        The ARN of an ACM certificate to associate with this load balancer.  Only applicable for HTTPS.
        """
        http_port: NotRequired[pulumi.Input[int]]
        """
        HTTP Listener Port.
        """
        https_port: NotRequired[pulumi.Input[int]]
        """
        HTTPS Listener Port.
        """
elif False:
    K8IngressLbconfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8IngressLbconfigArgs:
    def __init__(__self__, *,
                 dns_prefix: pulumi.Input[str],
                 is_internal: pulumi.Input[bool],
                 certificate_arn: Optional[pulumi.Input[str]] = None,
                 http_port: Optional[pulumi.Input[int]] = None,
                 https_port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] dns_prefix: The DNS prefix to expose services using Route53 domain.
        :param pulumi.Input[bool] is_internal: Whether or not to create an internal load balancer.
        :param pulumi.Input[str] certificate_arn: The ARN of an ACM certificate to associate with this load balancer.  Only applicable for HTTPS.
        :param pulumi.Input[int] http_port: HTTP Listener Port.
        :param pulumi.Input[int] https_port: HTTPS Listener Port.
        """
        pulumi.set(__self__, "dns_prefix", dns_prefix)
        pulumi.set(__self__, "is_internal", is_internal)
        if certificate_arn is not None:
            pulumi.set(__self__, "certificate_arn", certificate_arn)
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if https_port is not None:
            pulumi.set(__self__, "https_port", https_port)

    @property
    @pulumi.getter(name="dnsPrefix")
    def dns_prefix(self) -> pulumi.Input[str]:
        """
        The DNS prefix to expose services using Route53 domain.
        """
        return pulumi.get(self, "dns_prefix")

    @dns_prefix.setter
    def dns_prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "dns_prefix", value)

    @property
    @pulumi.getter(name="isInternal")
    def is_internal(self) -> pulumi.Input[bool]:
        """
        Whether or not to create an internal load balancer.
        """
        return pulumi.get(self, "is_internal")

    @is_internal.setter
    def is_internal(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_internal", value)

    @property
    @pulumi.getter(name="certificateArn")
    def certificate_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of an ACM certificate to associate with this load balancer.  Only applicable for HTTPS.
        """
        return pulumi.get(self, "certificate_arn")

    @certificate_arn.setter
    def certificate_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_arn", value)

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[pulumi.Input[int]]:
        """
        HTTP Listener Port.
        """
        return pulumi.get(self, "http_port")

    @http_port.setter
    def http_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_port", value)

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> Optional[pulumi.Input[int]]:
        """
        HTTPS Listener Port.
        """
        return pulumi.get(self, "https_port")

    @https_port.setter
    def https_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "https_port", value)


if not MYPY:
    class K8IngressRuleArgsDict(TypedDict):
        path: pulumi.Input[str]
        """
        Specify the path (for e.g. /api /v1/api/) to do a path base routing. If host is specified then both path and host should be match for the incoming request.
        """
        path_type: pulumi.Input[str]
        """
        Type of the path to be used.
        """
        service_name: pulumi.Input[str]
        """
        Name of the kubernetes service which Ingress will use as backend to serve the request.
        """
        host: NotRequired[pulumi.Input[str]]
        """
        If a host is provided (for e.g. example, foo.bar.com), the rules apply to that host.
        """
        port: NotRequired[pulumi.Input[int]]
        """
        Port from the kubernetes service that ingress will use as backend port to serve the requests.
        """
        port_name: NotRequired[pulumi.Input[str]]
        """
        Port name from the kubernetes service that ingress will use as backend port to serve the requests.
        """
elif False:
    K8IngressRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8IngressRuleArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 path_type: pulumi.Input[str],
                 service_name: pulumi.Input[str],
                 host: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] path: Specify the path (for e.g. /api /v1/api/) to do a path base routing. If host is specified then both path and host should be match for the incoming request.
        :param pulumi.Input[str] path_type: Type of the path to be used.
        :param pulumi.Input[str] service_name: Name of the kubernetes service which Ingress will use as backend to serve the request.
        :param pulumi.Input[str] host: If a host is provided (for e.g. example, foo.bar.com), the rules apply to that host.
        :param pulumi.Input[int] port: Port from the kubernetes service that ingress will use as backend port to serve the requests.
        :param pulumi.Input[str] port_name: Port name from the kubernetes service that ingress will use as backend port to serve the requests.
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "path_type", path_type)
        pulumi.set(__self__, "service_name", service_name)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_name is not None:
            pulumi.set(__self__, "port_name", port_name)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Specify the path (for e.g. /api /v1/api/) to do a path base routing. If host is specified then both path and host should be match for the incoming request.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="pathType")
    def path_type(self) -> pulumi.Input[str]:
        """
        Type of the path to be used.
        """
        return pulumi.get(self, "path_type")

    @path_type.setter
    def path_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "path_type", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Input[str]:
        """
        Name of the kubernetes service which Ingress will use as backend to serve the request.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        If a host is provided (for e.g. example, foo.bar.com), the rules apply to that host.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port from the kubernetes service that ingress will use as backend port to serve the requests.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portName")
    def port_name(self) -> Optional[pulumi.Input[str]]:
        """
        Port name from the kubernetes service that ingress will use as backend port to serve the requests.
        """
        return pulumi.get(self, "port_name")

    @port_name.setter
    def port_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_name", value)


if not MYPY:
    class K8IngressTlArgsDict(TypedDict):
        hosts: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        The list of hosts included in the TLS certificate. Each value in this list must match the name(s) specified in the TLS secret. If not specified, it defaults to the wildcard host setting for the load balancer controller managing this Ingress.
        """
        secret_name: pulumi.Input[str]
        """
        The name of the secret used to terminate TLS traffic on port 443. This field is optional, enabling TLS routing based solely on the SNI hostname. If the SNI host in a listener conflicts with the 'Host' header in an IngressRule, the SNI host is used for termination, while the 'Host' header value is used for routing.
        """
elif False:
    K8IngressTlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8IngressTlArgs:
    def __init__(__self__, *,
                 hosts: pulumi.Input[Sequence[pulumi.Input[str]]],
                 secret_name: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] hosts: The list of hosts included in the TLS certificate. Each value in this list must match the name(s) specified in the TLS secret. If not specified, it defaults to the wildcard host setting for the load balancer controller managing this Ingress.
        :param pulumi.Input[str] secret_name: The name of the secret used to terminate TLS traffic on port 443. This field is optional, enabling TLS routing based solely on the SNI hostname. If the SNI host in a listener conflicts with the 'Host' header in an IngressRule, the SNI host is used for termination, while the 'Host' header value is used for routing.
        """
        pulumi.set(__self__, "hosts", hosts)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def hosts(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The list of hosts included in the TLS certificate. Each value in this list must match the name(s) specified in the TLS secret. If not specified, it defaults to the wildcard host setting for the load balancer controller managing this Ingress.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        The name of the secret used to terminate TLS traffic on port 443. This field is optional, enabling TLS routing based solely on the SNI hostname. If the SNI host in a listener conflicts with the 'Host' header in an IngressRule, the SNI host is used for termination, while the 'Host' header value is used for routing.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)


if not MYPY:
    class K8PersistentVolumeClaimSpecArgsDict(TypedDict):
        access_modes: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        A set of the desired access modes the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#access-modes-1
        """
        resources: pulumi.Input['K8PersistentVolumeClaimSpecResourcesArgsDict']
        """
        A list of the minimum resources the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#resources
        """
        storage_class_name: NotRequired[pulumi.Input[str]]
        """
        Name of the storage class requested by the claim
        """
        volume_mode: NotRequired[pulumi.Input[str]]
        """
        Kubernetes supports two volumeModes of PersistentVolumes: `Filesystem` and `Block`.
        """
        volume_name: NotRequired[pulumi.Input[str]]
        """
        The binding reference to the PersistentVolume backing this claim.
        """
elif False:
    K8PersistentVolumeClaimSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8PersistentVolumeClaimSpecArgs:
    def __init__(__self__, *,
                 access_modes: pulumi.Input[Sequence[pulumi.Input[str]]],
                 resources: pulumi.Input['K8PersistentVolumeClaimSpecResourcesArgs'],
                 storage_class_name: Optional[pulumi.Input[str]] = None,
                 volume_mode: Optional[pulumi.Input[str]] = None,
                 volume_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] access_modes: A set of the desired access modes the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#access-modes-1
        :param pulumi.Input['K8PersistentVolumeClaimSpecResourcesArgs'] resources: A list of the minimum resources the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#resources
        :param pulumi.Input[str] storage_class_name: Name of the storage class requested by the claim
        :param pulumi.Input[str] volume_mode: Kubernetes supports two volumeModes of PersistentVolumes: `Filesystem` and `Block`.
        :param pulumi.Input[str] volume_name: The binding reference to the PersistentVolume backing this claim.
        """
        pulumi.set(__self__, "access_modes", access_modes)
        pulumi.set(__self__, "resources", resources)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)
        if volume_mode is not None:
            pulumi.set(__self__, "volume_mode", volume_mode)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)

    @property
    @pulumi.getter(name="accessModes")
    def access_modes(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A set of the desired access modes the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#access-modes-1
        """
        return pulumi.get(self, "access_modes")

    @access_modes.setter
    def access_modes(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "access_modes", value)

    @property
    @pulumi.getter
    def resources(self) -> pulumi.Input['K8PersistentVolumeClaimSpecResourcesArgs']:
        """
        A list of the minimum resources the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#resources
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: pulumi.Input['K8PersistentVolumeClaimSpecResourcesArgs']):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the storage class requested by the claim
        """
        return pulumi.get(self, "storage_class_name")

    @storage_class_name.setter
    def storage_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_class_name", value)

    @property
    @pulumi.getter(name="volumeMode")
    def volume_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Kubernetes supports two volumeModes of PersistentVolumes: `Filesystem` and `Block`.
        """
        return pulumi.get(self, "volume_mode")

    @volume_mode.setter
    def volume_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_mode", value)

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[pulumi.Input[str]]:
        """
        The binding reference to the PersistentVolume backing this claim.
        """
        return pulumi.get(self, "volume_name")

    @volume_name.setter
    def volume_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_name", value)


if not MYPY:
    class K8PersistentVolumeClaimSpecResourcesArgsDict(TypedDict):
        limits: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map describing the maximum amount of compute resources allowed. More info: http://kubernetes.io/docs/user-guide/compute-resources/
        """
        requests: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map describing the minimum amount of compute resources required. If this is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. More info: http://kubernetes.io/docs/user-guide/compute-resources/
        """
elif False:
    K8PersistentVolumeClaimSpecResourcesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8PersistentVolumeClaimSpecResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] limits: Map describing the maximum amount of compute resources allowed. More info: http://kubernetes.io/docs/user-guide/compute-resources/
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] requests: Map describing the minimum amount of compute resources required. If this is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. More info: http://kubernetes.io/docs/user-guide/compute-resources/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map describing the maximum amount of compute resources allowed. More info: http://kubernetes.io/docs/user-guide/compute-resources/
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map describing the minimum amount of compute resources required. If this is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. More info: http://kubernetes.io/docs/user-guide/compute-resources/
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "requests", value)


if not MYPY:
    class K8SecretProviderClassSecretObjectArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of the secret object.
        """
        type: pulumi.Input[str]
        """
        Type of the secret object.
        """
        annotations: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        An unstructured key value map stored with the secret object that may be used to store arbitrary metadata.
        """
        datas: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8SecretProviderClassSecretObjectDataArgsDict']]]]
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the service.
        """
elif False:
    K8SecretProviderClassSecretObjectArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8SecretProviderClassSecretObjectArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 datas: Optional[pulumi.Input[Sequence[pulumi.Input['K8SecretProviderClassSecretObjectDataArgs']]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Name of the secret object.
        :param pulumi.Input[str] type: Type of the secret object.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: An unstructured key value map stored with the secret object that may be used to store arbitrary metadata.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the service.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if datas is not None:
            pulumi.set(__self__, "datas", datas)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the secret object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of the secret object.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        An unstructured key value map stored with the secret object that may be used to store arbitrary metadata.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def datas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8SecretProviderClassSecretObjectDataArgs']]]]:
        return pulumi.get(self, "datas")

    @datas.setter
    def datas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8SecretProviderClassSecretObjectDataArgs']]]]):
        pulumi.set(self, "datas", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the service.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


if not MYPY:
    class K8SecretProviderClassSecretObjectDataArgsDict(TypedDict):
        key: pulumi.Input[str]
        object_name: pulumi.Input[str]
elif False:
    K8SecretProviderClassSecretObjectDataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8SecretProviderClassSecretObjectDataArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 object_name: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "object_name", object_name)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="objectName")
    def object_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object_name")

    @object_name.setter
    def object_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_name", value)


if not MYPY:
    class K8StorageClassAllowedTopologiesArgsDict(TypedDict):
        match_label_expressions: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8StorageClassAllowedTopologiesMatchLabelExpressionArgsDict']]]]
        """
        A list of topology selector requirements by labels.
        """
elif False:
    K8StorageClassAllowedTopologiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8StorageClassAllowedTopologiesArgs:
    def __init__(__self__, *,
                 match_label_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['K8StorageClassAllowedTopologiesMatchLabelExpressionArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8StorageClassAllowedTopologiesMatchLabelExpressionArgs']]] match_label_expressions: A list of topology selector requirements by labels.
        """
        if match_label_expressions is not None:
            pulumi.set(__self__, "match_label_expressions", match_label_expressions)

    @property
    @pulumi.getter(name="matchLabelExpressions")
    def match_label_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8StorageClassAllowedTopologiesMatchLabelExpressionArgs']]]]:
        """
        A list of topology selector requirements by labels.
        """
        return pulumi.get(self, "match_label_expressions")

    @match_label_expressions.setter
    def match_label_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8StorageClassAllowedTopologiesMatchLabelExpressionArgs']]]]):
        pulumi.set(self, "match_label_expressions", value)


if not MYPY:
    class K8StorageClassAllowedTopologiesMatchLabelExpressionArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. One value must match the label to be selected.
        """
elif False:
    K8StorageClassAllowedTopologiesMatchLabelExpressionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8StorageClassAllowedTopologiesMatchLabelExpressionArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. One value must match the label to be selected.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. One value must match the label to be selected.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class K8sCronJobMetadataArgsDict(TypedDict):
        annotations: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        An unstructured key value map stored with the cronjob that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
        """
        generate_name: NotRequired[pulumi.Input[str]]
        """
        Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
        """
        generation: NotRequired[pulumi.Input[int]]
        """
        A sequence number representing a specific generation of the desired state.
        """
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the cronjob. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the cronjob, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        namespace: NotRequired[pulumi.Input[str]]
        """
        Namespace defines the space within which name of the cronjob must be unique.
        """
        resource_version: NotRequired[pulumi.Input[str]]
        """
        An opaque value that represents the internal version of this cronjob that can be used by clients to determine when cronjob has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        """
        uid: NotRequired[pulumi.Input[str]]
        """
        The unique in time and space value for this cronjob. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
elif False:
    K8sCronJobMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 generate_name: Optional[pulumi.Input[str]] = None,
                 generation: Optional[pulumi.Input[int]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 resource_version: Optional[pulumi.Input[str]] = None,
                 uid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: An unstructured key value map stored with the cronjob that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
        :param pulumi.Input[str] generate_name: Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
        :param pulumi.Input[int] generation: A sequence number representing a specific generation of the desired state.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the cronjob. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
        :param pulumi.Input[str] name: Name of the cronjob, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] namespace: Namespace defines the space within which name of the cronjob must be unique.
        :param pulumi.Input[str] resource_version: An opaque value that represents the internal version of this cronjob that can be used by clients to determine when cronjob has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        :param pulumi.Input[str] uid: The unique in time and space value for this cronjob. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if generate_name is not None:
            pulumi.set(__self__, "generate_name", generate_name)
        if generation is not None:
            pulumi.set(__self__, "generation", generation)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        An unstructured key value map stored with the cronjob that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="generateName")
    def generate_name(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
        """
        return pulumi.get(self, "generate_name")

    @generate_name.setter
    def generate_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "generate_name", value)

    @property
    @pulumi.getter
    def generation(self) -> Optional[pulumi.Input[int]]:
        """
        A sequence number representing a specific generation of the desired state.
        """
        return pulumi.get(self, "generation")

    @generation.setter
    def generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "generation", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the cronjob. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the cronjob, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace defines the space within which name of the cronjob must be unique.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[pulumi.Input[str]]:
        """
        An opaque value that represents the internal version of this cronjob that can be used by clients to determine when cronjob has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        """
        return pulumi.get(self, "resource_version")

    @resource_version.setter
    def resource_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_version", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        The unique in time and space value for this cronjob. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)


if not MYPY:
    class K8sCronJobSpecArgsDict(TypedDict):
        job_template: pulumi.Input['K8sCronJobSpecJobTemplateArgsDict']
        """
        Describes the pod that will be created when executing a cron job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
        """
        schedule: pulumi.Input[str]
        """
        Cron format string, e.g. 0 * * * * or @hourly, as schedule time of its jobs to be created and executed.
        """
        concurrency_policy: NotRequired[pulumi.Input[str]]
        """
        Specifies how to treat concurrent executions of a Job. Defaults to Allow. Defaults to `Allow`.
        """
        failed_jobs_history_limit: NotRequired[pulumi.Input[int]]
        """
        The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1. Defaults to `1`.
        """
        starting_deadline_seconds: NotRequired[pulumi.Input[int]]
        """
        Optional deadline in seconds for starting the job if it misses scheduled time for any reason. Missed jobs executions will be counted as failed ones. Defaults to `0`.
        """
        successful_jobs_history_limit: NotRequired[pulumi.Input[int]]
        """
        The number of successful finished jobs to retain. Defaults to 3. Defaults to `3`.
        """
        suspend: NotRequired[pulumi.Input[bool]]
        """
        This flag tells the controller to suspend subsequent executions, it does not apply to already started executions. Defaults to false. Defaults to `false`.
        """
elif False:
    K8sCronJobSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecArgs:
    def __init__(__self__, *,
                 job_template: pulumi.Input['K8sCronJobSpecJobTemplateArgs'],
                 schedule: pulumi.Input[str],
                 concurrency_policy: Optional[pulumi.Input[str]] = None,
                 failed_jobs_history_limit: Optional[pulumi.Input[int]] = None,
                 starting_deadline_seconds: Optional[pulumi.Input[int]] = None,
                 successful_jobs_history_limit: Optional[pulumi.Input[int]] = None,
                 suspend: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input['K8sCronJobSpecJobTemplateArgs'] job_template: Describes the pod that will be created when executing a cron job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
        :param pulumi.Input[str] schedule: Cron format string, e.g. 0 * * * * or @hourly, as schedule time of its jobs to be created and executed.
        :param pulumi.Input[str] concurrency_policy: Specifies how to treat concurrent executions of a Job. Defaults to Allow. Defaults to `Allow`.
        :param pulumi.Input[int] failed_jobs_history_limit: The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1. Defaults to `1`.
        :param pulumi.Input[int] starting_deadline_seconds: Optional deadline in seconds for starting the job if it misses scheduled time for any reason. Missed jobs executions will be counted as failed ones. Defaults to `0`.
        :param pulumi.Input[int] successful_jobs_history_limit: The number of successful finished jobs to retain. Defaults to 3. Defaults to `3`.
        :param pulumi.Input[bool] suspend: This flag tells the controller to suspend subsequent executions, it does not apply to already started executions. Defaults to false. Defaults to `false`.
        """
        pulumi.set(__self__, "job_template", job_template)
        pulumi.set(__self__, "schedule", schedule)
        if concurrency_policy is not None:
            pulumi.set(__self__, "concurrency_policy", concurrency_policy)
        if failed_jobs_history_limit is not None:
            pulumi.set(__self__, "failed_jobs_history_limit", failed_jobs_history_limit)
        if starting_deadline_seconds is not None:
            pulumi.set(__self__, "starting_deadline_seconds", starting_deadline_seconds)
        if successful_jobs_history_limit is not None:
            pulumi.set(__self__, "successful_jobs_history_limit", successful_jobs_history_limit)
        if suspend is not None:
            pulumi.set(__self__, "suspend", suspend)

    @property
    @pulumi.getter(name="jobTemplate")
    def job_template(self) -> pulumi.Input['K8sCronJobSpecJobTemplateArgs']:
        """
        Describes the pod that will be created when executing a cron job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
        """
        return pulumi.get(self, "job_template")

    @job_template.setter
    def job_template(self, value: pulumi.Input['K8sCronJobSpecJobTemplateArgs']):
        pulumi.set(self, "job_template", value)

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Input[str]:
        """
        Cron format string, e.g. 0 * * * * or @hourly, as schedule time of its jobs to be created and executed.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: pulumi.Input[str]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter(name="concurrencyPolicy")
    def concurrency_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies how to treat concurrent executions of a Job. Defaults to Allow. Defaults to `Allow`.
        """
        return pulumi.get(self, "concurrency_policy")

    @concurrency_policy.setter
    def concurrency_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "concurrency_policy", value)

    @property
    @pulumi.getter(name="failedJobsHistoryLimit")
    def failed_jobs_history_limit(self) -> Optional[pulumi.Input[int]]:
        """
        The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1. Defaults to `1`.
        """
        return pulumi.get(self, "failed_jobs_history_limit")

    @failed_jobs_history_limit.setter
    def failed_jobs_history_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failed_jobs_history_limit", value)

    @property
    @pulumi.getter(name="startingDeadlineSeconds")
    def starting_deadline_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Optional deadline in seconds for starting the job if it misses scheduled time for any reason. Missed jobs executions will be counted as failed ones. Defaults to `0`.
        """
        return pulumi.get(self, "starting_deadline_seconds")

    @starting_deadline_seconds.setter
    def starting_deadline_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "starting_deadline_seconds", value)

    @property
    @pulumi.getter(name="successfulJobsHistoryLimit")
    def successful_jobs_history_limit(self) -> Optional[pulumi.Input[int]]:
        """
        The number of successful finished jobs to retain. Defaults to 3. Defaults to `3`.
        """
        return pulumi.get(self, "successful_jobs_history_limit")

    @successful_jobs_history_limit.setter
    def successful_jobs_history_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "successful_jobs_history_limit", value)

    @property
    @pulumi.getter
    def suspend(self) -> Optional[pulumi.Input[bool]]:
        """
        This flag tells the controller to suspend subsequent executions, it does not apply to already started executions. Defaults to false. Defaults to `false`.
        """
        return pulumi.get(self, "suspend")

    @suspend.setter
    def suspend(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suspend", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateArgsDict(TypedDict):
        spec: pulumi.Input['K8sCronJobSpecJobTemplateSpecArgsDict']
        """
        Specification of the desired behavior of the job
        """
        metadata: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateMetadataArgsDict']]
        """
        Standard jobTemplateSpec's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
elif False:
    K8sCronJobSpecJobTemplateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateArgs:
    def __init__(__self__, *,
                 spec: pulumi.Input['K8sCronJobSpecJobTemplateSpecArgs'],
                 metadata: Optional[pulumi.Input['K8sCronJobSpecJobTemplateMetadataArgs']] = None):
        """
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecArgs'] spec: Specification of the desired behavior of the job
        :param pulumi.Input['K8sCronJobSpecJobTemplateMetadataArgs'] metadata: Standard jobTemplateSpec's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        pulumi.set(__self__, "spec", spec)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Input['K8sCronJobSpecJobTemplateSpecArgs']:
        """
        Specification of the desired behavior of the job
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: pulumi.Input['K8sCronJobSpecJobTemplateSpecArgs']):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateMetadataArgs']]:
        """
        Standard jobTemplateSpec's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateMetadataArgs']]):
        pulumi.set(self, "metadata", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateMetadataArgsDict(TypedDict):
        annotations: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        An unstructured key value map stored with the jobTemplateSpec that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
        """
        generate_name: NotRequired[pulumi.Input[str]]
        """
        Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
        """
        generation: NotRequired[pulumi.Input[int]]
        """
        A sequence number representing a specific generation of the desired state.
        """
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the jobTemplateSpec. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the jobTemplateSpec, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        resource_version: NotRequired[pulumi.Input[str]]
        """
        An opaque value that represents the internal version of this jobTemplateSpec that can be used by clients to determine when jobTemplateSpec has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        """
        uid: NotRequired[pulumi.Input[str]]
        """
        The unique in time and space value for this jobTemplateSpec. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
elif False:
    K8sCronJobSpecJobTemplateMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 generate_name: Optional[pulumi.Input[str]] = None,
                 generation: Optional[pulumi.Input[int]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resource_version: Optional[pulumi.Input[str]] = None,
                 uid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: An unstructured key value map stored with the jobTemplateSpec that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
        :param pulumi.Input[str] generate_name: Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
        :param pulumi.Input[int] generation: A sequence number representing a specific generation of the desired state.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the jobTemplateSpec. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
        :param pulumi.Input[str] name: Name of the jobTemplateSpec, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] resource_version: An opaque value that represents the internal version of this jobTemplateSpec that can be used by clients to determine when jobTemplateSpec has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        :param pulumi.Input[str] uid: The unique in time and space value for this jobTemplateSpec. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if generate_name is not None:
            pulumi.set(__self__, "generate_name", generate_name)
        if generation is not None:
            pulumi.set(__self__, "generation", generation)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        An unstructured key value map stored with the jobTemplateSpec that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="generateName")
    def generate_name(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
        """
        return pulumi.get(self, "generate_name")

    @generate_name.setter
    def generate_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "generate_name", value)

    @property
    @pulumi.getter
    def generation(self) -> Optional[pulumi.Input[int]]:
        """
        A sequence number representing a specific generation of the desired state.
        """
        return pulumi.get(self, "generation")

    @generation.setter
    def generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "generation", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the jobTemplateSpec. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the jobTemplateSpec, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[pulumi.Input[str]]:
        """
        An opaque value that represents the internal version of this jobTemplateSpec that can be used by clients to determine when jobTemplateSpec has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        """
        return pulumi.get(self, "resource_version")

    @resource_version.setter
    def resource_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_version", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        The unique in time and space value for this jobTemplateSpec. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecArgsDict(TypedDict):
        template: pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateArgsDict']
        """
        Describes the pod that will be created when executing a job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
        """
        active_deadline_seconds: NotRequired[pulumi.Input[int]]
        """
        Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
        """
        backoff_limit: NotRequired[pulumi.Input[int]]
        """
        Specifies the number of retries before marking this job failed. Defaults to 6 Defaults to `6`.
        """
        completion_mode: NotRequired[pulumi.Input[str]]
        """
        Specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`. More info: https://kubernetes.io/docs/concepts/workloads/controllers/job/#completion-mode
        """
        completions: NotRequired[pulumi.Input[int]]
        """
        Specifies the desired number of successfully finished pods the job should be run with. Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value. Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ Defaults to `1`.
        """
        manual_selector: NotRequired[pulumi.Input[bool]]
        """
        Controls generation of pod labels and pod selectors. Leave unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template. When true, the user is responsible for picking unique labels and specifying the selector. Failure to pick a unique label may cause this and other jobs to not function correctly. More info: https://git.k8s.io/community/contributors/design-proposals/selector-generation.md
        """
        parallelism: NotRequired[pulumi.Input[int]]
        """
        Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ Defaults to `1`.
        """
        selector: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecSelectorArgsDict']]
        """
        A label query over volumes to consider for binding.
        """
        ttl_seconds_after_finished: NotRequired[pulumi.Input[str]]
        """
        ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecArgs:
    def __init__(__self__, *,
                 template: pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateArgs'],
                 active_deadline_seconds: Optional[pulumi.Input[int]] = None,
                 backoff_limit: Optional[pulumi.Input[int]] = None,
                 completion_mode: Optional[pulumi.Input[str]] = None,
                 completions: Optional[pulumi.Input[int]] = None,
                 manual_selector: Optional[pulumi.Input[bool]] = None,
                 parallelism: Optional[pulumi.Input[int]] = None,
                 selector: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecSelectorArgs']] = None,
                 ttl_seconds_after_finished: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateArgs'] template: Describes the pod that will be created when executing a job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
        :param pulumi.Input[int] active_deadline_seconds: Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
        :param pulumi.Input[int] backoff_limit: Specifies the number of retries before marking this job failed. Defaults to 6 Defaults to `6`.
        :param pulumi.Input[str] completion_mode: Specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`. More info: https://kubernetes.io/docs/concepts/workloads/controllers/job/#completion-mode
        :param pulumi.Input[int] completions: Specifies the desired number of successfully finished pods the job should be run with. Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value. Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ Defaults to `1`.
        :param pulumi.Input[bool] manual_selector: Controls generation of pod labels and pod selectors. Leave unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template. When true, the user is responsible for picking unique labels and specifying the selector. Failure to pick a unique label may cause this and other jobs to not function correctly. More info: https://git.k8s.io/community/contributors/design-proposals/selector-generation.md
        :param pulumi.Input[int] parallelism: Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ Defaults to `1`.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecSelectorArgs'] selector: A label query over volumes to consider for binding.
        :param pulumi.Input[str] ttl_seconds_after_finished: ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.
        """
        pulumi.set(__self__, "template", template)
        if active_deadline_seconds is not None:
            pulumi.set(__self__, "active_deadline_seconds", active_deadline_seconds)
        if backoff_limit is not None:
            pulumi.set(__self__, "backoff_limit", backoff_limit)
        if completion_mode is not None:
            pulumi.set(__self__, "completion_mode", completion_mode)
        if completions is not None:
            pulumi.set(__self__, "completions", completions)
        if manual_selector is not None:
            pulumi.set(__self__, "manual_selector", manual_selector)
        if parallelism is not None:
            pulumi.set(__self__, "parallelism", parallelism)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if ttl_seconds_after_finished is not None:
            pulumi.set(__self__, "ttl_seconds_after_finished", ttl_seconds_after_finished)

    @property
    @pulumi.getter
    def template(self) -> pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateArgs']:
        """
        Describes the pod that will be created when executing a job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateArgs']):
        pulumi.set(self, "template", value)

    @property
    @pulumi.getter(name="activeDeadlineSeconds")
    def active_deadline_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
        """
        return pulumi.get(self, "active_deadline_seconds")

    @active_deadline_seconds.setter
    def active_deadline_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "active_deadline_seconds", value)

    @property
    @pulumi.getter(name="backoffLimit")
    def backoff_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the number of retries before marking this job failed. Defaults to 6 Defaults to `6`.
        """
        return pulumi.get(self, "backoff_limit")

    @backoff_limit.setter
    def backoff_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backoff_limit", value)

    @property
    @pulumi.getter(name="completionMode")
    def completion_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`. More info: https://kubernetes.io/docs/concepts/workloads/controllers/job/#completion-mode
        """
        return pulumi.get(self, "completion_mode")

    @completion_mode.setter
    def completion_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completion_mode", value)

    @property
    @pulumi.getter
    def completions(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the desired number of successfully finished pods the job should be run with. Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value. Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ Defaults to `1`.
        """
        return pulumi.get(self, "completions")

    @completions.setter
    def completions(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "completions", value)

    @property
    @pulumi.getter(name="manualSelector")
    def manual_selector(self) -> Optional[pulumi.Input[bool]]:
        """
        Controls generation of pod labels and pod selectors. Leave unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template. When true, the user is responsible for picking unique labels and specifying the selector. Failure to pick a unique label may cause this and other jobs to not function correctly. More info: https://git.k8s.io/community/contributors/design-proposals/selector-generation.md
        """
        return pulumi.get(self, "manual_selector")

    @manual_selector.setter
    def manual_selector(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "manual_selector", value)

    @property
    @pulumi.getter
    def parallelism(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ Defaults to `1`.
        """
        return pulumi.get(self, "parallelism")

    @parallelism.setter
    def parallelism(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "parallelism", value)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecSelectorArgs']]:
        """
        A label query over volumes to consider for binding.
        """
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecSelectorArgs']]):
        pulumi.set(self, "selector", value)

    @property
    @pulumi.getter(name="ttlSecondsAfterFinished")
    def ttl_seconds_after_finished(self) -> Optional[pulumi.Input[str]]:
        """
        ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.
        """
        return pulumi.get(self, "ttl_seconds_after_finished")

    @ttl_seconds_after_finished.setter
    def ttl_seconds_after_finished(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ttl_seconds_after_finished", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecSelectorArgsDict(TypedDict):
        match_expressions: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecSelectorMatchExpressionArgsDict']]]]
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecSelectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecSelectorMatchExpressionArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecSelectorMatchExpressionArgs']]] match_expressions: A list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecSelectorMatchExpressionArgs']]]]:
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecSelectorMatchExpressionArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecSelectorMatchExpressionArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecSelectorMatchExpressionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecSelectorMatchExpressionArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateArgsDict(TypedDict):
        metadata: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateMetadataArgsDict']]
        """
        Standard job's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        spec: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecArgsDict']]
        """
        Spec of the pods owned by the job
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateArgs:
    def __init__(__self__, *,
                 metadata: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateMetadataArgs']] = None,
                 spec: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecArgs']] = None):
        """
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateMetadataArgs'] metadata: Standard job's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecArgs'] spec: Spec of the pods owned by the job
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateMetadataArgs']]:
        """
        Standard job's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecArgs']]:
        """
        Spec of the pods owned by the job
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecArgs']]):
        pulumi.set(self, "spec", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateMetadataArgsDict(TypedDict):
        annotations: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        An unstructured key value map stored with the job that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
        """
        generate_name: NotRequired[pulumi.Input[str]]
        """
        Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
        """
        generation: NotRequired[pulumi.Input[int]]
        """
        A sequence number representing a specific generation of the desired state.
        """
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the job. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the job, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        resource_version: NotRequired[pulumi.Input[str]]
        """
        An opaque value that represents the internal version of this job that can be used by clients to determine when job has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        """
        uid: NotRequired[pulumi.Input[str]]
        """
        The unique in time and space value for this job. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 generate_name: Optional[pulumi.Input[str]] = None,
                 generation: Optional[pulumi.Input[int]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resource_version: Optional[pulumi.Input[str]] = None,
                 uid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: An unstructured key value map stored with the job that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
        :param pulumi.Input[str] generate_name: Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
        :param pulumi.Input[int] generation: A sequence number representing a specific generation of the desired state.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the job. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
        :param pulumi.Input[str] name: Name of the job, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] resource_version: An opaque value that represents the internal version of this job that can be used by clients to determine when job has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        :param pulumi.Input[str] uid: The unique in time and space value for this job. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if generate_name is not None:
            pulumi.set(__self__, "generate_name", generate_name)
        if generation is not None:
            pulumi.set(__self__, "generation", generation)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        An unstructured key value map stored with the job that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="generateName")
    def generate_name(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
        """
        return pulumi.get(self, "generate_name")

    @generate_name.setter
    def generate_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "generate_name", value)

    @property
    @pulumi.getter
    def generation(self) -> Optional[pulumi.Input[int]]:
        """
        A sequence number representing a specific generation of the desired state.
        """
        return pulumi.get(self, "generation")

    @generation.setter
    def generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "generation", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the job. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the job, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[pulumi.Input[str]]:
        """
        An opaque value that represents the internal version of this job that can be used by clients to determine when job has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        """
        return pulumi.get(self, "resource_version")

    @resource_version.setter
    def resource_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_version", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        The unique in time and space value for this job. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecArgsDict(TypedDict):
        active_deadline_seconds: NotRequired[pulumi.Input[int]]
        """
        Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
        """
        affinity: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityArgsDict']]
        """
        Optional pod scheduling constraints.
        """
        automount_service_account_token: NotRequired[pulumi.Input[bool]]
        """
        AutomountServiceAccountToken indicates whether a service account token should be automatically mounted. Defaults to `true`.
        """
        containers: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerArgsDict']]]]
        """
        List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/
        """
        dns_config: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfigArgsDict']]
        """
        Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy. Optional: Defaults to empty
        """
        dns_policy: NotRequired[pulumi.Input[str]]
        """
        Set DNS policy for containers within the pod. Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. Defaults to 'ClusterFirst'. More info: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy
        """
        enable_service_links: NotRequired[pulumi.Input[bool]]
        """
        Enables generating environment variables for service discovery. Defaults to true. Defaults to `true`.
        """
        host_aliases: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecHostAliasArgsDict']]]]
        """
        List of hosts and IPs that will be injected into the pod's hosts file if specified. Optional: Defaults to empty.
        """
        host_ipc: NotRequired[pulumi.Input[bool]]
        """
        Use the host's ipc namespace. Optional: Defaults to false.
        """
        host_network: NotRequired[pulumi.Input[bool]]
        """
        Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.
        """
        host_pid: NotRequired[pulumi.Input[bool]]
        """
        Use the host's pid namespace.
        """
        hostname: NotRequired[pulumi.Input[str]]
        """
        Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
        """
        image_pull_secrets: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecImagePullSecretArgsDict']]]]
        """
        ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
        """
        init_containers: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerArgsDict']]]]
        """
        List of init containers belonging to the pod. Init containers always run to completion and each must complete successfully before the next is started. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
        """
        node_name: NotRequired[pulumi.Input[str]]
        """
        NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
        """
        node_selector: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
        """
        priority_class_name: NotRequired[pulumi.Input[str]]
        """
        If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
        """
        readiness_gates: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecReadinessGateArgsDict']]]]
        """
        If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md
        """
        restart_policy: NotRequired[pulumi.Input[str]]
        """
        Restart policy for all containers within the pod. One of OnFailure, Never. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy. Defaults to `Never`.
        """
        runtime_class_name: NotRequired[pulumi.Input[str]]
        """
        RuntimeClassName is a feature for selecting the container runtime configuration. The container runtime configuration is used to run a Pod's containers. More info: https://kubernetes.io/docs/concepts/containers/runtime-class
        """
        scheduler_name: NotRequired[pulumi.Input[str]]
        """
        If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
        """
        security_context: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextArgsDict']]
        """
        SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty
        """
        service_account_name: NotRequired[pulumi.Input[str]]
        """
        ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md.
        """
        share_process_namespace: NotRequired[pulumi.Input[bool]]
        """
        Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Defaults to false. Defaults to `false`.
        """
        subdomain: NotRequired[pulumi.Input[str]]
        """
        If specified, the fully qualified Pod hostname will be "...svc.". If not specified, the pod will not have a domainname at all..
        """
        termination_grace_period_seconds: NotRequired[pulumi.Input[int]]
        """
        Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.
        """
        tolerations: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecTolerationArgsDict']]]]
        """
        If specified, the pod's toleration. Optional: Defaults to empty
        """
        topology_spread_constraints: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintArgsDict']]]]
        """
        describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints.
        """
        volumes: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeArgsDict']]]]
        """
        List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecArgs:
    def __init__(__self__, *,
                 active_deadline_seconds: Optional[pulumi.Input[int]] = None,
                 affinity: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityArgs']] = None,
                 automount_service_account_token: Optional[pulumi.Input[bool]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerArgs']]]] = None,
                 dns_config: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfigArgs']] = None,
                 dns_policy: Optional[pulumi.Input[str]] = None,
                 enable_service_links: Optional[pulumi.Input[bool]] = None,
                 host_aliases: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecHostAliasArgs']]]] = None,
                 host_ipc: Optional[pulumi.Input[bool]] = None,
                 host_network: Optional[pulumi.Input[bool]] = None,
                 host_pid: Optional[pulumi.Input[bool]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 image_pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecImagePullSecretArgs']]]] = None,
                 init_containers: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerArgs']]]] = None,
                 node_name: Optional[pulumi.Input[str]] = None,
                 node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 priority_class_name: Optional[pulumi.Input[str]] = None,
                 readiness_gates: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecReadinessGateArgs']]]] = None,
                 restart_policy: Optional[pulumi.Input[str]] = None,
                 runtime_class_name: Optional[pulumi.Input[str]] = None,
                 scheduler_name: Optional[pulumi.Input[str]] = None,
                 security_context: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextArgs']] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 share_process_namespace: Optional[pulumi.Input[bool]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 termination_grace_period_seconds: Optional[pulumi.Input[int]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecTolerationArgs']]]] = None,
                 topology_spread_constraints: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintArgs']]]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeArgs']]]] = None):
        """
        :param pulumi.Input[int] active_deadline_seconds: Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityArgs'] affinity: Optional pod scheduling constraints.
        :param pulumi.Input[bool] automount_service_account_token: AutomountServiceAccountToken indicates whether a service account token should be automatically mounted. Defaults to `true`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerArgs']]] containers: List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfigArgs'] dns_config: Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy. Optional: Defaults to empty
        :param pulumi.Input[str] dns_policy: Set DNS policy for containers within the pod. Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. Defaults to 'ClusterFirst'. More info: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy
        :param pulumi.Input[bool] enable_service_links: Enables generating environment variables for service discovery. Defaults to true. Defaults to `true`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecHostAliasArgs']]] host_aliases: List of hosts and IPs that will be injected into the pod's hosts file if specified. Optional: Defaults to empty.
        :param pulumi.Input[bool] host_ipc: Use the host's ipc namespace. Optional: Defaults to false.
        :param pulumi.Input[bool] host_network: Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.
        :param pulumi.Input[bool] host_pid: Use the host's pid namespace.
        :param pulumi.Input[str] hostname: Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecImagePullSecretArgs']]] image_pull_secrets: ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerArgs']]] init_containers: List of init containers belonging to the pod. Init containers always run to completion and each must complete successfully before the next is started. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
        :param pulumi.Input[str] node_name: NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] node_selector: NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
        :param pulumi.Input[str] priority_class_name: If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecReadinessGateArgs']]] readiness_gates: If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md
        :param pulumi.Input[str] restart_policy: Restart policy for all containers within the pod. One of OnFailure, Never. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy. Defaults to `Never`.
        :param pulumi.Input[str] runtime_class_name: RuntimeClassName is a feature for selecting the container runtime configuration. The container runtime configuration is used to run a Pod's containers. More info: https://kubernetes.io/docs/concepts/containers/runtime-class
        :param pulumi.Input[str] scheduler_name: If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextArgs'] security_context: SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty
        :param pulumi.Input[str] service_account_name: ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md.
        :param pulumi.Input[bool] share_process_namespace: Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Defaults to false. Defaults to `false`.
        :param pulumi.Input[str] subdomain: If specified, the fully qualified Pod hostname will be "...svc.". If not specified, the pod will not have a domainname at all..
        :param pulumi.Input[int] termination_grace_period_seconds: Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecTolerationArgs']]] tolerations: If specified, the pod's toleration. Optional: Defaults to empty
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintArgs']]] topology_spread_constraints: describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeArgs']]] volumes: List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
        """
        if active_deadline_seconds is not None:
            pulumi.set(__self__, "active_deadline_seconds", active_deadline_seconds)
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if automount_service_account_token is not None:
            pulumi.set(__self__, "automount_service_account_token", automount_service_account_token)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if dns_config is not None:
            pulumi.set(__self__, "dns_config", dns_config)
        if dns_policy is not None:
            pulumi.set(__self__, "dns_policy", dns_policy)
        if enable_service_links is not None:
            pulumi.set(__self__, "enable_service_links", enable_service_links)
        if host_aliases is not None:
            pulumi.set(__self__, "host_aliases", host_aliases)
        if host_ipc is not None:
            pulumi.set(__self__, "host_ipc", host_ipc)
        if host_network is not None:
            pulumi.set(__self__, "host_network", host_network)
        if host_pid is not None:
            pulumi.set(__self__, "host_pid", host_pid)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if init_containers is not None:
            pulumi.set(__self__, "init_containers", init_containers)
        if node_name is not None:
            pulumi.set(__self__, "node_name", node_name)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if readiness_gates is not None:
            pulumi.set(__self__, "readiness_gates", readiness_gates)
        if restart_policy is not None:
            pulumi.set(__self__, "restart_policy", restart_policy)
        if runtime_class_name is not None:
            pulumi.set(__self__, "runtime_class_name", runtime_class_name)
        if scheduler_name is not None:
            pulumi.set(__self__, "scheduler_name", scheduler_name)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if share_process_namespace is not None:
            pulumi.set(__self__, "share_process_namespace", share_process_namespace)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if termination_grace_period_seconds is not None:
            pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)
        if topology_spread_constraints is not None:
            pulumi.set(__self__, "topology_spread_constraints", topology_spread_constraints)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter(name="activeDeadlineSeconds")
    def active_deadline_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
        """
        return pulumi.get(self, "active_deadline_seconds")

    @active_deadline_seconds.setter
    def active_deadline_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "active_deadline_seconds", value)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityArgs']]:
        """
        Optional pod scheduling constraints.
        """
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityArgs']]):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter(name="automountServiceAccountToken")
    def automount_service_account_token(self) -> Optional[pulumi.Input[bool]]:
        """
        AutomountServiceAccountToken indicates whether a service account token should be automatically mounted. Defaults to `true`.
        """
        return pulumi.get(self, "automount_service_account_token")

    @automount_service_account_token.setter
    def automount_service_account_token(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "automount_service_account_token", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerArgs']]]]:
        """
        List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/
        """
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter(name="dnsConfig")
    def dns_config(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfigArgs']]:
        """
        Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy. Optional: Defaults to empty
        """
        return pulumi.get(self, "dns_config")

    @dns_config.setter
    def dns_config(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfigArgs']]):
        pulumi.set(self, "dns_config", value)

    @property
    @pulumi.getter(name="dnsPolicy")
    def dns_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Set DNS policy for containers within the pod. Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. Defaults to 'ClusterFirst'. More info: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy
        """
        return pulumi.get(self, "dns_policy")

    @dns_policy.setter
    def dns_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_policy", value)

    @property
    @pulumi.getter(name="enableServiceLinks")
    def enable_service_links(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables generating environment variables for service discovery. Defaults to true. Defaults to `true`.
        """
        return pulumi.get(self, "enable_service_links")

    @enable_service_links.setter
    def enable_service_links(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_service_links", value)

    @property
    @pulumi.getter(name="hostAliases")
    def host_aliases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecHostAliasArgs']]]]:
        """
        List of hosts and IPs that will be injected into the pod's hosts file if specified. Optional: Defaults to empty.
        """
        return pulumi.get(self, "host_aliases")

    @host_aliases.setter
    def host_aliases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecHostAliasArgs']]]]):
        pulumi.set(self, "host_aliases", value)

    @property
    @pulumi.getter(name="hostIpc")
    def host_ipc(self) -> Optional[pulumi.Input[bool]]:
        """
        Use the host's ipc namespace. Optional: Defaults to false.
        """
        return pulumi.get(self, "host_ipc")

    @host_ipc.setter
    def host_ipc(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "host_ipc", value)

    @property
    @pulumi.getter(name="hostNetwork")
    def host_network(self) -> Optional[pulumi.Input[bool]]:
        """
        Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.
        """
        return pulumi.get(self, "host_network")

    @host_network.setter
    def host_network(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "host_network", value)

    @property
    @pulumi.getter(name="hostPid")
    def host_pid(self) -> Optional[pulumi.Input[bool]]:
        """
        Use the host's pid namespace.
        """
        return pulumi.get(self, "host_pid")

    @host_pid.setter
    def host_pid(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "host_pid", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecImagePullSecretArgs']]]]:
        """
        ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
        """
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecImagePullSecretArgs']]]]):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="initContainers")
    def init_containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerArgs']]]]:
        """
        List of init containers belonging to the pod. Init containers always run to completion and each must complete successfully before the next is started. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
        """
        return pulumi.get(self, "init_containers")

    @init_containers.setter
    def init_containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerArgs']]]]):
        pulumi.set(self, "init_containers", value)

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> Optional[pulumi.Input[str]]:
        """
        NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
        """
        return pulumi.get(self, "node_name")

    @node_name.setter
    def node_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_name", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
        """
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
        """
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter(name="readinessGates")
    def readiness_gates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecReadinessGateArgs']]]]:
        """
        If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md
        """
        return pulumi.get(self, "readiness_gates")

    @readiness_gates.setter
    def readiness_gates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecReadinessGateArgs']]]]):
        pulumi.set(self, "readiness_gates", value)

    @property
    @pulumi.getter(name="restartPolicy")
    def restart_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Restart policy for all containers within the pod. One of OnFailure, Never. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy. Defaults to `Never`.
        """
        return pulumi.get(self, "restart_policy")

    @restart_policy.setter
    def restart_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restart_policy", value)

    @property
    @pulumi.getter(name="runtimeClassName")
    def runtime_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        RuntimeClassName is a feature for selecting the container runtime configuration. The container runtime configuration is used to run a Pod's containers. More info: https://kubernetes.io/docs/concepts/containers/runtime-class
        """
        return pulumi.get(self, "runtime_class_name")

    @runtime_class_name.setter
    def runtime_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runtime_class_name", value)

    @property
    @pulumi.getter(name="schedulerName")
    def scheduler_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
        """
        return pulumi.get(self, "scheduler_name")

    @scheduler_name.setter
    def scheduler_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheduler_name", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextArgs']]:
        """
        SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty
        """
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextArgs']]):
        pulumi.set(self, "security_context", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md.
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter(name="shareProcessNamespace")
    def share_process_namespace(self) -> Optional[pulumi.Input[bool]]:
        """
        Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Defaults to false. Defaults to `false`.
        """
        return pulumi.get(self, "share_process_namespace")

    @share_process_namespace.setter
    def share_process_namespace(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "share_process_namespace", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, the fully qualified Pod hostname will be "...svc.". If not specified, the pod will not have a domainname at all..
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.
        """
        return pulumi.get(self, "termination_grace_period_seconds")

    @termination_grace_period_seconds.setter
    def termination_grace_period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "termination_grace_period_seconds", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecTolerationArgs']]]]:
        """
        If specified, the pod's toleration. Optional: Defaults to empty
        """
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecTolerationArgs']]]]):
        pulumi.set(self, "tolerations", value)

    @property
    @pulumi.getter(name="topologySpreadConstraints")
    def topology_spread_constraints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintArgs']]]]:
        """
        describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints.
        """
        return pulumi.get(self, "topology_spread_constraints")

    @topology_spread_constraints.setter
    def topology_spread_constraints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintArgs']]]]):
        pulumi.set(self, "topology_spread_constraints", value)

    @property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeArgs']]]]:
        """
        List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
        """
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeArgs']]]]):
        pulumi.set(self, "volumes", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityArgsDict(TypedDict):
        node_affinity: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityArgsDict']]
        """
        Node affinity scheduling rules for the pod.
        """
        pod_affinity: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityArgsDict']]
        """
        Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
        """
        pod_anti_affinity: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityArgsDict']]
        """
        Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityArgs:
    def __init__(__self__, *,
                 node_affinity: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityArgs']] = None,
                 pod_affinity: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityArgs']] = None,
                 pod_anti_affinity: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityArgs']] = None):
        """
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityArgs'] node_affinity: Node affinity scheduling rules for the pod.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityArgs'] pod_affinity: Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityArgs'] pod_anti_affinity: Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
        """
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityArgs']]:
        """
        Node affinity scheduling rules for the pod.
        """
        return pulumi.get(self, "node_affinity")

    @node_affinity.setter
    def node_affinity(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityArgs']]):
        pulumi.set(self, "node_affinity", value)

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityArgs']]:
        """
        Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
        """
        return pulumi.get(self, "pod_affinity")

    @pod_affinity.setter
    def pod_affinity(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityArgs']]):
        pulumi.set(self, "pod_affinity", value)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityArgs']]:
        """
        Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
        """
        return pulumi.get(self, "pod_anti_affinity")

    @pod_anti_affinity.setter
    def pod_anti_affinity(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityArgs']]):
        pulumi.set(self, "pod_anti_affinity", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityArgsDict(TypedDict):
        preferred_during_scheduling_ignored_during_executions: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict']]]]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict']]
        """
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a node label update), the system may or may not try to eventually evict the pod from its node.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_executions: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None,
                 required_during_scheduling_ignored_during_execution: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_executions: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs'] required_during_scheduling_ignored_during_execution: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a node label update), the system may or may not try to eventually evict the pod from its node.
        """
        if preferred_during_scheduling_ignored_during_executions is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_executions", preferred_during_scheduling_ignored_during_executions)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecutions")
    def preferred_during_scheduling_ignored_during_executions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_executions")

    @preferred_during_scheduling_ignored_during_executions.setter
    def preferred_during_scheduling_ignored_during_executions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_executions", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]:
        """
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a node label update), the system may or may not try to eventually evict the pod from its node.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict(TypedDict):
        preference: pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgsDict']
        """
        A node selector term, associated with the corresponding weight.
        """
        weight: NotRequired[pulumi.Input[int]]
        """
        weight is in the range 1-100
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 preference: pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs'],
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs'] preference: A node selector term, associated with the corresponding weight.
        :param pulumi.Input[int] weight: weight is in the range 1-100
        """
        pulumi.set(__self__, "preference", preference)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(self) -> pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs']:
        """
        A node selector term, associated with the corresponding weight.
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs']):
        pulumi.set(self, "preference", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        weight is in the range 1-100
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgsDict(TypedDict):
        match_expressions: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionArgsDict']]]]
        """
        List of node selector requirements. The requirements are ANDed.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionArgs']]] match_expressions: List of node selector requirements. The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionArgs']]]]:
        """
        List of node selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionArgs']]]]):
        pulumi.set(self, "match_expressions", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict(TypedDict):
        node_selector_terms: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermArgsDict']]]]
        """
        List of node selector terms. The terms are ORed.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 node_selector_terms: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermArgs']]] node_selector_terms: List of node selector terms. The terms are ORed.
        """
        if node_selector_terms is not None:
            pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermArgs']]]]:
        """
        List of node selector terms. The terms are ORed.
        """
        return pulumi.get(self, "node_selector_terms")

    @node_selector_terms.setter
    def node_selector_terms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermArgs']]]]):
        pulumi.set(self, "node_selector_terms", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermArgsDict(TypedDict):
        match_expressions: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionArgsDict']]]]
        """
        List of node selector requirements. The requirements are ANDed.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionArgs']]] match_expressions: List of node selector requirements. The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionArgs']]]]:
        """
        List of node selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionArgs']]]]):
        pulumi.set(self, "match_expressions", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityArgsDict(TypedDict):
        preferred_during_scheduling_ignored_during_executions: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict']]]]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_executions: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict']]]]
        """
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_executions: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None,
                 required_during_scheduling_ignored_during_executions: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_executions: The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]] required_during_scheduling_ignored_during_executions: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_executions is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_executions", preferred_during_scheduling_ignored_during_executions)
        if required_during_scheduling_ignored_during_executions is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_executions", required_during_scheduling_ignored_during_executions)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecutions")
    def preferred_during_scheduling_ignored_during_executions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_executions")

    @preferred_during_scheduling_ignored_during_executions.setter
    def preferred_during_scheduling_ignored_during_executions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_executions", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecutions")
    def required_during_scheduling_ignored_during_executions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        """
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_executions")

    @required_during_scheduling_ignored_during_executions.setter
    def required_during_scheduling_ignored_during_executions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "required_during_scheduling_ignored_during_executions", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict(TypedDict):
        pod_affinity_term: pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict']
        """
        A pod affinity term, associated with the corresponding weight
        """
        weight: pulumi.Input[int]
        """
        weight associated with matching the corresponding podAffinityTerm, in the range 1-100
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 pod_affinity_term: pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs'],
                 weight: pulumi.Input[int]):
        """
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs'] pod_affinity_term: A pod affinity term, associated with the corresponding weight
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm, in the range 1-100
        """
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']:
        """
        A pod affinity term, associated with the corresponding weight
        """
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(self, value: pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Input[int]:
        """
        weight associated with matching the corresponding podAffinityTerm, in the range 1-100
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: pulumi.Input[int]):
        pulumi.set(self, "weight", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict(TypedDict):
        label_selectors: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict']]]]
        """
        A label query over a set of resources, in this case pods.
        """
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        empty topology key is interpreted by the scheduler as 'all topologies'
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs:
    def __init__(__self__, *,
                 label_selectors: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]]] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 topology_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]] label_selectors: A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
        :param pulumi.Input[str] topology_key: empty topology key is interpreted by the scheduler as 'all topologies'
        """
        if label_selectors is not None:
            pulumi.set(__self__, "label_selectors", label_selectors)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelectors")
    def label_selectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]]]:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selectors")

    @label_selectors.setter
    def label_selectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]]]):
        pulumi.set(self, "label_selectors", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        empty topology key is interpreted by the scheduler as 'all topologies'
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict(TypedDict):
        match_expressions: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgsDict']]]]
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgs']]] match_expressions: A list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgs']]]]:
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict(TypedDict):
        label_selectors: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict']]]]
        """
        A label query over a set of resources, in this case pods.
        """
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        empty topology key is interpreted by the scheduler as 'all topologies'
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 label_selectors: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]]] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 topology_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]] label_selectors: A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
        :param pulumi.Input[str] topology_key: empty topology key is interpreted by the scheduler as 'all topologies'
        """
        if label_selectors is not None:
            pulumi.set(__self__, "label_selectors", label_selectors)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelectors")
    def label_selectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]]]:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selectors")

    @label_selectors.setter
    def label_selectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]]]):
        pulumi.set(self, "label_selectors", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        empty topology key is interpreted by the scheduler as 'all topologies'
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict(TypedDict):
        match_expressions: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgsDict']]]]
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgs']]] match_expressions: A list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgs']]]]:
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityArgsDict(TypedDict):
        preferred_during_scheduling_ignored_during_executions: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict']]]]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_executions: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict']]]]
        """
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_executions: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None,
                 required_during_scheduling_ignored_during_executions: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_executions: The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]] required_during_scheduling_ignored_during_executions: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_executions is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_executions", preferred_during_scheduling_ignored_during_executions)
        if required_during_scheduling_ignored_during_executions is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_executions", required_during_scheduling_ignored_during_executions)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecutions")
    def preferred_during_scheduling_ignored_during_executions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_executions")

    @preferred_during_scheduling_ignored_during_executions.setter
    def preferred_during_scheduling_ignored_during_executions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_executions", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecutions")
    def required_during_scheduling_ignored_during_executions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        """
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_executions")

    @required_during_scheduling_ignored_during_executions.setter
    def required_during_scheduling_ignored_during_executions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "required_during_scheduling_ignored_during_executions", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict(TypedDict):
        pod_affinity_term: pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict']
        """
        A pod affinity term, associated with the corresponding weight
        """
        weight: pulumi.Input[int]
        """
        weight associated with matching the corresponding podAffinityTerm, in the range 1-100
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 pod_affinity_term: pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs'],
                 weight: pulumi.Input[int]):
        """
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs'] pod_affinity_term: A pod affinity term, associated with the corresponding weight
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm, in the range 1-100
        """
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']:
        """
        A pod affinity term, associated with the corresponding weight
        """
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(self, value: pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Input[int]:
        """
        weight associated with matching the corresponding podAffinityTerm, in the range 1-100
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: pulumi.Input[int]):
        pulumi.set(self, "weight", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict(TypedDict):
        label_selectors: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict']]]]
        """
        A label query over a set of resources, in this case pods.
        """
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        empty topology key is interpreted by the scheduler as 'all topologies'
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs:
    def __init__(__self__, *,
                 label_selectors: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]]] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 topology_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]] label_selectors: A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
        :param pulumi.Input[str] topology_key: empty topology key is interpreted by the scheduler as 'all topologies'
        """
        if label_selectors is not None:
            pulumi.set(__self__, "label_selectors", label_selectors)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelectors")
    def label_selectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]]]:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selectors")

    @label_selectors.setter
    def label_selectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]]]):
        pulumi.set(self, "label_selectors", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        empty topology key is interpreted by the scheduler as 'all topologies'
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict(TypedDict):
        match_expressions: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgsDict']]]]
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgs']]] match_expressions: A list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgs']]]]:
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict(TypedDict):
        label_selectors: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict']]]]
        """
        A label query over a set of resources, in this case pods.
        """
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        empty topology key is interpreted by the scheduler as 'all topologies'
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 label_selectors: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]]] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 topology_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]] label_selectors: A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
        :param pulumi.Input[str] topology_key: empty topology key is interpreted by the scheduler as 'all topologies'
        """
        if label_selectors is not None:
            pulumi.set(__self__, "label_selectors", label_selectors)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelectors")
    def label_selectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]]]:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selectors")

    @label_selectors.setter
    def label_selectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]]]):
        pulumi.set(self, "label_selectors", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        empty topology key is interpreted by the scheduler as 'all topologies'
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict(TypedDict):
        match_expressions: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgsDict']]]]
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgs']]] match_expressions: A list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgs']]]]:
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of the container specified as a DNS*LABEL. Each container in a pod must have a unique name (DNS*LABEL). Cannot be updated.
        """
        args: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR*NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        """
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR*NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        """
        env_froms: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromArgsDict']]]]
        """
        List of sources to populate environment variables in the container. The keys defined within a source must be a C*IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
        """
        envs: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvArgsDict']]]]
        """
        List of environment variables to set in the container. Cannot be updated.
        """
        image: NotRequired[pulumi.Input[str]]
        """
        Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
        """
        image_pull_policy: NotRequired[pulumi.Input[str]]
        """
        Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
        """
        lifecycle: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecycleArgsDict']]
        """
        Actions that the management system should take in response to container lifecycle events
        """
        liveness_probe: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeArgsDict']]
        """
        Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        ports: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerPortArgsDict']]]]
        """
        List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
        """
        readiness_probe: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeArgsDict']]
        """
        Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        resources: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerResourcesArgsDict']]
        """
        Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        """
        security_context: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextArgsDict']]
        """
        Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        """
        startup_probe: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeArgsDict']]
        """
        StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        stdin: NotRequired[pulumi.Input[bool]]
        """
        Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.  Defaults to `false`.
        """
        stdin_once: NotRequired[pulumi.Input[bool]]
        """
        Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Defaults to `false`.
        """
        termination_message_path: NotRequired[pulumi.Input[str]]
        """
        Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated. Defaults to `/dev/termination-log`.
        """
        termination_message_policy: NotRequired[pulumi.Input[str]]
        """
        Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
        """
        tty: NotRequired[pulumi.Input[bool]]
        """
        Whether this container should allocate a TTY for itself Defaults to `false`.
        """
        volume_mounts: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerVolumeMountArgsDict']]]]
        """
        Pod volumes to mount into the container's filesystem. Cannot be updated.
        """
        working_dir: NotRequired[pulumi.Input[str]]
        """
        Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 env_froms: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromArgs']]]] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvArgs']]]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 image_pull_policy: Optional[pulumi.Input[str]] = None,
                 lifecycle: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecycleArgs']] = None,
                 liveness_probe: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeArgs']] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerPortArgs']]]] = None,
                 readiness_probe: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeArgs']] = None,
                 resources: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerResourcesArgs']] = None,
                 security_context: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextArgs']] = None,
                 startup_probe: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeArgs']] = None,
                 stdin: Optional[pulumi.Input[bool]] = None,
                 stdin_once: Optional[pulumi.Input[bool]] = None,
                 termination_message_path: Optional[pulumi.Input[str]] = None,
                 termination_message_policy: Optional[pulumi.Input[str]] = None,
                 tty: Optional[pulumi.Input[bool]] = None,
                 volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerVolumeMountArgs']]]] = None,
                 working_dir: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of the container specified as a DNS*LABEL. Each container in a pod must have a unique name (DNS*LABEL). Cannot be updated.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] args: Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR*NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        :param pulumi.Input[Sequence[pulumi.Input[str]]] commands: Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR*NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromArgs']]] env_froms: List of sources to populate environment variables in the container. The keys defined within a source must be a C*IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvArgs']]] envs: List of environment variables to set in the container. Cannot be updated.
        :param pulumi.Input[str] image: Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
        :param pulumi.Input[str] image_pull_policy: Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecycleArgs'] lifecycle: Actions that the management system should take in response to container lifecycle events
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeArgs'] liveness_probe: Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerPortArgs']]] ports: List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeArgs'] readiness_probe: Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerResourcesArgs'] resources: Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextArgs'] security_context: Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeArgs'] startup_probe: StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param pulumi.Input[bool] stdin: Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.  Defaults to `false`.
        :param pulumi.Input[bool] stdin_once: Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Defaults to `false`.
        :param pulumi.Input[str] termination_message_path: Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated. Defaults to `/dev/termination-log`.
        :param pulumi.Input[str] termination_message_policy: Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
        :param pulumi.Input[bool] tty: Whether this container should allocate a TTY for itself Defaults to `false`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerVolumeMountArgs']]] volume_mounts: Pod volumes to mount into the container's filesystem. Cannot be updated.
        :param pulumi.Input[str] working_dir: Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
        """
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if env_froms is not None:
            pulumi.set(__self__, "env_froms", env_froms)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if startup_probe is not None:
            pulumi.set(__self__, "startup_probe", startup_probe)
        if stdin is not None:
            pulumi.set(__self__, "stdin", stdin)
        if stdin_once is not None:
            pulumi.set(__self__, "stdin_once", stdin_once)
        if termination_message_path is not None:
            pulumi.set(__self__, "termination_message_path", termination_message_path)
        if termination_message_policy is not None:
            pulumi.set(__self__, "termination_message_policy", termination_message_policy)
        if tty is not None:
            pulumi.set(__self__, "tty", tty)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the container specified as a DNS*LABEL. Each container in a pod must have a unique name (DNS*LABEL). Cannot be updated.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR*NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        """
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "args", value)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR*NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)

    @property
    @pulumi.getter(name="envFroms")
    def env_froms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromArgs']]]]:
        """
        List of sources to populate environment variables in the container. The keys defined within a source must be a C*IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
        """
        return pulumi.get(self, "env_froms")

    @env_froms.setter
    def env_froms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromArgs']]]]):
        pulumi.set(self, "env_froms", value)

    @property
    @pulumi.getter
    def envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvArgs']]]]:
        """
        List of environment variables to set in the container. Cannot be updated.
        """
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvArgs']]]]):
        pulumi.set(self, "envs", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
        """
        return pulumi.get(self, "image_pull_policy")

    @image_pull_policy.setter
    def image_pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_policy", value)

    @property
    @pulumi.getter
    def lifecycle(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecycleArgs']]:
        """
        Actions that the management system should take in response to container lifecycle events
        """
        return pulumi.get(self, "lifecycle")

    @lifecycle.setter
    def lifecycle(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecycleArgs']]):
        pulumi.set(self, "lifecycle", value)

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeArgs']]:
        """
        Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        return pulumi.get(self, "liveness_probe")

    @liveness_probe.setter
    def liveness_probe(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeArgs']]):
        pulumi.set(self, "liveness_probe", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerPortArgs']]]]:
        """
        List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerPortArgs']]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeArgs']]:
        """
        Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        return pulumi.get(self, "readiness_probe")

    @readiness_probe.setter
    def readiness_probe(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeArgs']]):
        pulumi.set(self, "readiness_probe", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerResourcesArgs']]:
        """
        Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextArgs']]:
        """
        Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        """
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextArgs']]):
        pulumi.set(self, "security_context", value)

    @property
    @pulumi.getter(name="startupProbe")
    def startup_probe(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeArgs']]:
        """
        StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "startup_probe")

    @startup_probe.setter
    def startup_probe(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeArgs']]):
        pulumi.set(self, "startup_probe", value)

    @property
    @pulumi.getter
    def stdin(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.  Defaults to `false`.
        """
        return pulumi.get(self, "stdin")

    @stdin.setter
    def stdin(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stdin", value)

    @property
    @pulumi.getter(name="stdinOnce")
    def stdin_once(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Defaults to `false`.
        """
        return pulumi.get(self, "stdin_once")

    @stdin_once.setter
    def stdin_once(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stdin_once", value)

    @property
    @pulumi.getter(name="terminationMessagePath")
    def termination_message_path(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated. Defaults to `/dev/termination-log`.
        """
        return pulumi.get(self, "termination_message_path")

    @termination_message_path.setter
    def termination_message_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "termination_message_path", value)

    @property
    @pulumi.getter(name="terminationMessagePolicy")
    def termination_message_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
        """
        return pulumi.get(self, "termination_message_policy")

    @termination_message_policy.setter
    def termination_message_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "termination_message_policy", value)

    @property
    @pulumi.getter
    def tty(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this container should allocate a TTY for itself Defaults to `false`.
        """
        return pulumi.get(self, "tty")

    @tty.setter
    def tty(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tty", value)

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerVolumeMountArgs']]]]:
        """
        Pod volumes to mount into the container's filesystem. Cannot be updated.
        """
        return pulumi.get(self, "volume_mounts")

    @volume_mounts.setter
    def volume_mounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerVolumeMountArgs']]]]):
        pulumi.set(self, "volume_mounts", value)

    @property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[pulumi.Input[str]]:
        """
        Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
        """
        return pulumi.get(self, "working_dir")

    @working_dir.setter
    def working_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "working_dir", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of the environment variable. Must be a C_IDENTIFIER
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Variable references $(VAR*NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        value_from: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromArgsDict']]
        """
        Source for the environment variable's value
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None,
                 value_from: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromArgs']] = None):
        """
        :param pulumi.Input[str] name: Name of the environment variable. Must be a C_IDENTIFIER
        :param pulumi.Input[str] value: Variable references $(VAR*NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromArgs'] value_from: Source for the environment variable's value
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the environment variable. Must be a C_IDENTIFIER
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Variable references $(VAR*NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromArgs']]:
        """
        Source for the environment variable's value
        """
        return pulumi.get(self, "value_from")

    @value_from.setter
    def value_from(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromArgs']]):
        pulumi.set(self, "value_from", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromArgsDict(TypedDict):
        config_map_ref: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromConfigMapRefArgsDict']]
        """
        The ConfigMap to select from
        """
        prefix: NotRequired[pulumi.Input[str]]
        """
        An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
        """
        secret_ref: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromSecretRefArgsDict']]
        """
        The Secret to select from
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromArgs:
    def __init__(__self__, *,
                 config_map_ref: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromConfigMapRefArgs']] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 secret_ref: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromSecretRefArgs']] = None):
        """
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromConfigMapRefArgs'] config_map_ref: The ConfigMap to select from
        :param pulumi.Input[str] prefix: An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromSecretRefArgs'] secret_ref: The Secret to select from
        """
        if config_map_ref is not None:
            pulumi.set(__self__, "config_map_ref", config_map_ref)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="configMapRef")
    def config_map_ref(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromConfigMapRefArgs']]:
        """
        The ConfigMap to select from
        """
        return pulumi.get(self, "config_map_ref")

    @config_map_ref.setter
    def config_map_ref(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromConfigMapRefArgs']]):
        pulumi.set(self, "config_map_ref", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromSecretRefArgs']]:
        """
        The Secret to select from
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromConfigMapRefArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        optional: NotRequired[pulumi.Input[bool]]
        """
        Specify whether the ConfigMap must be defined
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromConfigMapRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromConfigMapRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap must be defined
        """
        pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromSecretRefArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        optional: NotRequired[pulumi.Input[bool]]
        """
        Specify whether the Secret must be defined
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromSecretRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromSecretRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[bool] optional: Specify whether the Secret must be defined
        """
        pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromArgsDict(TypedDict):
        config_map_key_ref: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromConfigMapKeyRefArgsDict']]
        """
        Selects a key of a ConfigMap.
        """
        field_ref: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromFieldRefArgsDict']]
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
        """
        resource_field_ref: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromResourceFieldRefArgsDict']]
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        secret_key_ref: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromSecretKeyRefArgsDict']]
        """
        Selects a key of a secret in the pod's namespace.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromArgs:
    def __init__(__self__, *,
                 config_map_key_ref: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromConfigMapKeyRefArgs']] = None,
                 field_ref: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromFieldRefArgs']] = None,
                 resource_field_ref: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromResourceFieldRefArgs']] = None,
                 secret_key_ref: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromSecretKeyRefArgs']] = None):
        """
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromConfigMapKeyRefArgs'] config_map_key_ref: Selects a key of a ConfigMap.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromFieldRefArgs'] field_ref: Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromSecretKeyRefArgs'] secret_key_ref: Selects a key of a secret in the pod's namespace.
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromConfigMapKeyRefArgs']]:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @config_map_key_ref.setter
    def config_map_key_ref(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromConfigMapKeyRefArgs']]):
        pulumi.set(self, "config_map_key_ref", value)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromFieldRefArgs']]:
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromFieldRefArgs']]):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromSecretKeyRefArgs']]:
        """
        Selects a key of a secret in the pod's namespace.
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromSecretKeyRefArgs']]):
        pulumi.set(self, "secret_key_ref", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromConfigMapKeyRefArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        The key to select.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        optional: NotRequired[pulumi.Input[bool]]
        """
        Specify whether the ConfigMap or its key must be defined.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromConfigMapKeyRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromConfigMapKeyRefArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] key: The key to select.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap or its key must be defined.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap or its key must be defined.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromFieldRefArgsDict(TypedDict):
        api_version: NotRequired[pulumi.Input[str]]
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1". Defaults to `v1`.
        """
        field_path: NotRequired[pulumi.Input[str]]
        """
        Path of the field to select in the specified API version
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromFieldRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromFieldRefArgs:
    def __init__(__self__, *,
                 api_version: Optional[pulumi.Input[str]] = None,
                 field_path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1". Defaults to `v1`.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if field_path is not None:
            pulumi.set(__self__, "field_path", field_path)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1". Defaults to `v1`.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path of the field to select in the specified API version
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_path", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromResourceFieldRefArgsDict(TypedDict):
        resource: pulumi.Input[str]
        """
        Resource to select
        """
        container_name: NotRequired[pulumi.Input[str]]
        divisor: NotRequired[pulumi.Input[str]]
        """
        Defaults to `1`.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromResourceFieldRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromResourceFieldRefArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 container_name: Optional[pulumi.Input[str]] = None,
                 divisor: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] resource: Resource to select
        :param pulumi.Input[str] divisor: Defaults to `1`.
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `1`.
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "divisor", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromSecretKeyRefArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        The key of the secret to select from. Must be a valid secret key.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        optional: NotRequired[pulumi.Input[bool]]
        """
        Specify whether the Secret or its key must be defined.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromSecretKeyRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromSecretKeyRefArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] key: The key of the secret to select from. Must be a valid secret key.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[bool] optional: Specify whether the Secret or its key must be defined.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the secret to select from. Must be a valid secret key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret or its key must be defined.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecycleArgsDict(TypedDict):
        post_starts: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartArgsDict']]]]
        """
        post*start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        pre_stops: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopArgsDict']]]]
        """
        pre*stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecycleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecycleArgs:
    def __init__(__self__, *,
                 post_starts: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartArgs']]]] = None,
                 pre_stops: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartArgs']]] post_starts: post*start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopArgs']]] pre_stops: pre*stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        if post_starts is not None:
            pulumi.set(__self__, "post_starts", post_starts)
        if pre_stops is not None:
            pulumi.set(__self__, "pre_stops", pre_stops)

    @property
    @pulumi.getter(name="postStarts")
    def post_starts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartArgs']]]]:
        """
        post*start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        return pulumi.get(self, "post_starts")

    @post_starts.setter
    def post_starts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartArgs']]]]):
        pulumi.set(self, "post_starts", value)

    @property
    @pulumi.getter(name="preStops")
    def pre_stops(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopArgs']]]]:
        """
        pre*stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        return pulumi.get(self, "pre_stops")

    @pre_stops.setter
    def pre_stops(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopArgs']]]]):
        pulumi.set(self, "pre_stops", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartArgsDict(TypedDict):
        exec_: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartExecArgsDict']]
        """
        exec specifies the action to take.
        """
        http_get: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGetArgsDict']]
        """
        Specifies the http request to perform.
        """
        tcp_sockets: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartTcpSocketArgsDict']]]]
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartExecArgs']] = None,
                 http_get: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGetArgs']] = None,
                 tcp_sockets: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartTcpSocketArgs']]]] = None):
        """
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartExecArgs'] exec_: exec specifies the action to take.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGetArgs'] http_get: Specifies the http request to perform.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartTcpSocketArgs']]] tcp_sockets: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_sockets is not None:
            pulumi.set(__self__, "tcp_sockets", tcp_sockets)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartExecArgs']]:
        """
        exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGetArgs']]:
        """
        Specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="tcpSockets")
    def tcp_sockets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartTcpSocketArgs']]]]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        return pulumi.get(self, "tcp_sockets")

    @tcp_sockets.setter
    def tcp_sockets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartTcpSocketArgs']]]]):
        pulumi.set(self, "tcp_sockets", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartExecArgsDict(TypedDict):
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartExecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartExecArgs:
    def __init__(__self__, *,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] commands: Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGetArgsDict(TypedDict):
        host: NotRequired[pulumi.Input[str]]
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        http_headers: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeaderArgsDict']]]]
        """
        Scheme to use for connecting to the host.
        """
        path: NotRequired[pulumi.Input[str]]
        """
        Path to access on the HTTP server.
        """
        port: NotRequired[pulumi.Input[str]]
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        scheme: NotRequired[pulumi.Input[str]]
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGetArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeaderArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeaderArgs']]] http_headers: Scheme to use for connecting to the host.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeaderArgs']]]]:
        """
        Scheme to use for connecting to the host.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeaderArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeaderArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The header field name
        """
        value: NotRequired[pulumi.Input[str]]
        """
        The header field value
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeaderArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartTcpSocketArgsDict(TypedDict):
        port: pulumi.Input[str]
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartTcpSocketArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[str]):
        """
        :param pulumi.Input[str] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[str]:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[str]):
        pulumi.set(self, "port", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopArgsDict(TypedDict):
        exec_: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopExecArgsDict']]
        """
        exec specifies the action to take.
        """
        http_get: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGetArgsDict']]
        """
        Specifies the http request to perform.
        """
        tcp_sockets: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopTcpSocketArgsDict']]]]
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopExecArgs']] = None,
                 http_get: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGetArgs']] = None,
                 tcp_sockets: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopTcpSocketArgs']]]] = None):
        """
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopExecArgs'] exec_: exec specifies the action to take.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGetArgs'] http_get: Specifies the http request to perform.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopTcpSocketArgs']]] tcp_sockets: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_sockets is not None:
            pulumi.set(__self__, "tcp_sockets", tcp_sockets)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopExecArgs']]:
        """
        exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGetArgs']]:
        """
        Specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="tcpSockets")
    def tcp_sockets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopTcpSocketArgs']]]]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        return pulumi.get(self, "tcp_sockets")

    @tcp_sockets.setter
    def tcp_sockets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopTcpSocketArgs']]]]):
        pulumi.set(self, "tcp_sockets", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopExecArgsDict(TypedDict):
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopExecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopExecArgs:
    def __init__(__self__, *,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] commands: Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGetArgsDict(TypedDict):
        host: NotRequired[pulumi.Input[str]]
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        http_headers: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeaderArgsDict']]]]
        """
        Scheme to use for connecting to the host.
        """
        path: NotRequired[pulumi.Input[str]]
        """
        Path to access on the HTTP server.
        """
        port: NotRequired[pulumi.Input[str]]
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        scheme: NotRequired[pulumi.Input[str]]
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGetArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeaderArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeaderArgs']]] http_headers: Scheme to use for connecting to the host.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeaderArgs']]]]:
        """
        Scheme to use for connecting to the host.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeaderArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeaderArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The header field name
        """
        value: NotRequired[pulumi.Input[str]]
        """
        The header field value
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeaderArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopTcpSocketArgsDict(TypedDict):
        port: pulumi.Input[str]
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopTcpSocketArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[str]):
        """
        :param pulumi.Input[str] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[str]:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[str]):
        pulumi.set(self, "port", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeArgsDict(TypedDict):
        exec_: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeExecArgsDict']]
        """
        exec specifies the action to take.
        """
        failure_threshold: NotRequired[pulumi.Input[int]]
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        """
        grpcs: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeGrpcArgsDict']]]]
        """
        GRPC specifies an action involving a GRPC port.
        """
        http_get: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGetArgsDict']]
        """
        Specifies the http request to perform.
        """
        initial_delay_seconds: NotRequired[pulumi.Input[int]]
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        period_seconds: NotRequired[pulumi.Input[int]]
        """
        How often (in seconds) to perform the probe Defaults to `10`.
        """
        success_threshold: NotRequired[pulumi.Input[int]]
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        """
        tcp_sockets: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeTcpSocketArgsDict']]]]
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        timeout_seconds: NotRequired[pulumi.Input[int]]
        """
        Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeExecArgs']] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 grpcs: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeGrpcArgs']]]] = None,
                 http_get: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 tcp_sockets: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeTcpSocketArgs']]]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeExecArgs'] exec_: exec specifies the action to take.
        :param pulumi.Input[int] failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeGrpcArgs']]] grpcs: GRPC specifies an action involving a GRPC port.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGetArgs'] http_get: Specifies the http request to perform.
        :param pulumi.Input[int] initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        :param pulumi.Input[int] period_seconds: How often (in seconds) to perform the probe Defaults to `10`.
        :param pulumi.Input[int] success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeTcpSocketArgs']]] tcp_sockets: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        :param pulumi.Input[int] timeout_seconds: Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if grpcs is not None:
            pulumi.set(__self__, "grpcs", grpcs)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_sockets is not None:
            pulumi.set(__self__, "tcp_sockets", tcp_sockets)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeExecArgs']]:
        """
        exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter
    def grpcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeGrpcArgs']]]]:
        """
        GRPC specifies an action involving a GRPC port.
        """
        return pulumi.get(self, "grpcs")

    @grpcs.setter
    def grpcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeGrpcArgs']]]]):
        pulumi.set(self, "grpcs", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGetArgs']]:
        """
        Specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        How often (in seconds) to perform the probe Defaults to `10`.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="tcpSockets")
    def tcp_sockets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeTcpSocketArgs']]]]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        return pulumi.get(self, "tcp_sockets")

    @tcp_sockets.setter
    def tcp_sockets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeTcpSocketArgs']]]]):
        pulumi.set(self, "tcp_sockets", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeExecArgsDict(TypedDict):
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeExecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeExecArgs:
    def __init__(__self__, *,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] commands: Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeGrpcArgsDict(TypedDict):
        port: pulumi.Input[int]
        """
        Number of the port to access on the container. Number must be in the range 1 to 65535.
        """
        service: NotRequired[pulumi.Input[str]]
        """
        Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeGrpcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeGrpcArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 service: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] port: Number of the port to access on the container. Number must be in the range 1 to 65535.
        :param pulumi.Input[str] service: Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
        pulumi.set(__self__, "port", port)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        Number of the port to access on the container. Number must be in the range 1 to 65535.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGetArgsDict(TypedDict):
        host: NotRequired[pulumi.Input[str]]
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        http_headers: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeaderArgsDict']]]]
        """
        Scheme to use for connecting to the host.
        """
        path: NotRequired[pulumi.Input[str]]
        """
        Path to access on the HTTP server.
        """
        port: NotRequired[pulumi.Input[str]]
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        scheme: NotRequired[pulumi.Input[str]]
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGetArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeaderArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeaderArgs']]] http_headers: Scheme to use for connecting to the host.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeaderArgs']]]]:
        """
        Scheme to use for connecting to the host.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeaderArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeaderArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The header field name
        """
        value: NotRequired[pulumi.Input[str]]
        """
        The header field value
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeaderArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeTcpSocketArgsDict(TypedDict):
        port: pulumi.Input[str]
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeTcpSocketArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[str]):
        """
        :param pulumi.Input[str] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[str]:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[str]):
        pulumi.set(self, "port", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerPortArgsDict(TypedDict):
        container_port: pulumi.Input[int]
        """
        Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
        """
        host_ip: NotRequired[pulumi.Input[str]]
        """
        What host IP to bind the external port to.
        """
        host_port: NotRequired[pulumi.Input[int]]
        """
        Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        If specified, this must be an IANA*SVC*NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
        """
        protocol: NotRequired[pulumi.Input[str]]
        """
        Protocol for port. Must be UDP or TCP. Defaults to "TCP". Defaults to `TCP`.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerPortArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerPortArgs:
    def __init__(__self__, *,
                 container_port: pulumi.Input[int],
                 host_ip: Optional[pulumi.Input[str]] = None,
                 host_port: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] container_port: Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
        :param pulumi.Input[str] host_ip: What host IP to bind the external port to.
        :param pulumi.Input[int] host_port: Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        :param pulumi.Input[str] name: If specified, this must be an IANA*SVC*NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
        :param pulumi.Input[str] protocol: Protocol for port. Must be UDP or TCP. Defaults to "TCP". Defaults to `TCP`.
        """
        pulumi.set(__self__, "container_port", container_port)
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if host_port is not None:
            pulumi.set(__self__, "host_port", host_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> pulumi.Input[int]:
        """
        Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
        """
        return pulumi.get(self, "container_port")

    @container_port.setter
    def container_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "container_port", value)

    @property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> Optional[pulumi.Input[str]]:
        """
        What host IP to bind the external port to.
        """
        return pulumi.get(self, "host_ip")

    @host_ip.setter
    def host_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_ip", value)

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> Optional[pulumi.Input[int]]:
        """
        Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        """
        return pulumi.get(self, "host_port")

    @host_port.setter
    def host_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "host_port", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, this must be an IANA*SVC*NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol for port. Must be UDP or TCP. Defaults to "TCP". Defaults to `TCP`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeArgsDict(TypedDict):
        exec_: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeExecArgsDict']]
        """
        exec specifies the action to take.
        """
        failure_threshold: NotRequired[pulumi.Input[int]]
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        """
        grpcs: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeGrpcArgsDict']]]]
        """
        GRPC specifies an action involving a GRPC port.
        """
        http_get: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGetArgsDict']]
        """
        Specifies the http request to perform.
        """
        initial_delay_seconds: NotRequired[pulumi.Input[int]]
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        period_seconds: NotRequired[pulumi.Input[int]]
        """
        How often (in seconds) to perform the probe Defaults to `10`.
        """
        success_threshold: NotRequired[pulumi.Input[int]]
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        """
        tcp_sockets: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeTcpSocketArgsDict']]]]
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        timeout_seconds: NotRequired[pulumi.Input[int]]
        """
        Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeExecArgs']] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 grpcs: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeGrpcArgs']]]] = None,
                 http_get: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 tcp_sockets: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeTcpSocketArgs']]]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeExecArgs'] exec_: exec specifies the action to take.
        :param pulumi.Input[int] failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeGrpcArgs']]] grpcs: GRPC specifies an action involving a GRPC port.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGetArgs'] http_get: Specifies the http request to perform.
        :param pulumi.Input[int] initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        :param pulumi.Input[int] period_seconds: How often (in seconds) to perform the probe Defaults to `10`.
        :param pulumi.Input[int] success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeTcpSocketArgs']]] tcp_sockets: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        :param pulumi.Input[int] timeout_seconds: Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if grpcs is not None:
            pulumi.set(__self__, "grpcs", grpcs)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_sockets is not None:
            pulumi.set(__self__, "tcp_sockets", tcp_sockets)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeExecArgs']]:
        """
        exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter
    def grpcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeGrpcArgs']]]]:
        """
        GRPC specifies an action involving a GRPC port.
        """
        return pulumi.get(self, "grpcs")

    @grpcs.setter
    def grpcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeGrpcArgs']]]]):
        pulumi.set(self, "grpcs", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGetArgs']]:
        """
        Specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        How often (in seconds) to perform the probe Defaults to `10`.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="tcpSockets")
    def tcp_sockets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeTcpSocketArgs']]]]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        return pulumi.get(self, "tcp_sockets")

    @tcp_sockets.setter
    def tcp_sockets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeTcpSocketArgs']]]]):
        pulumi.set(self, "tcp_sockets", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeExecArgsDict(TypedDict):
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeExecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeExecArgs:
    def __init__(__self__, *,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] commands: Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeGrpcArgsDict(TypedDict):
        port: pulumi.Input[int]
        """
        Number of the port to access on the container. Number must be in the range 1 to 65535.
        """
        service: NotRequired[pulumi.Input[str]]
        """
        Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeGrpcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeGrpcArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 service: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] port: Number of the port to access on the container. Number must be in the range 1 to 65535.
        :param pulumi.Input[str] service: Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
        pulumi.set(__self__, "port", port)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        Number of the port to access on the container. Number must be in the range 1 to 65535.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGetArgsDict(TypedDict):
        host: NotRequired[pulumi.Input[str]]
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        http_headers: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeaderArgsDict']]]]
        """
        Scheme to use for connecting to the host.
        """
        path: NotRequired[pulumi.Input[str]]
        """
        Path to access on the HTTP server.
        """
        port: NotRequired[pulumi.Input[str]]
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        scheme: NotRequired[pulumi.Input[str]]
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGetArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeaderArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeaderArgs']]] http_headers: Scheme to use for connecting to the host.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeaderArgs']]]]:
        """
        Scheme to use for connecting to the host.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeaderArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeaderArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The header field name
        """
        value: NotRequired[pulumi.Input[str]]
        """
        The header field value
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeaderArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeTcpSocketArgsDict(TypedDict):
        port: pulumi.Input[str]
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeTcpSocketArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[str]):
        """
        :param pulumi.Input[str] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[str]:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[str]):
        pulumi.set(self, "port", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerResourcesArgsDict(TypedDict):
        limits: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        """
        requests: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerResourcesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] limits: Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "requests", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextArgsDict(TypedDict):
        allow_privilege_escalation: NotRequired[pulumi.Input[bool]]
        """
        AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no*new*privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP*SYS*ADMIN Defaults to `true`.
        """
        capabilities: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextCapabilitiesArgsDict']]
        """
        The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        """
        privileged: NotRequired[pulumi.Input[bool]]
        """
        Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Defaults to `false`.
        """
        read_only_root_filesystem: NotRequired[pulumi.Input[bool]]
        """
        Whether this container has a read-only root filesystem. Default is false. Defaults to `false`.
        """
        run_as_group: NotRequired[pulumi.Input[str]]
        """
        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        run_as_non_root: NotRequired[pulumi.Input[bool]]
        """
        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        run_as_user: NotRequired[pulumi.Input[str]]
        """
        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        se_linux_options: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeLinuxOptionsArgsDict']]
        """
        The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        seccomp_profile: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeccompProfileArgsDict']]
        """
        The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextArgs:
    def __init__(__self__, *,
                 allow_privilege_escalation: Optional[pulumi.Input[bool]] = None,
                 capabilities: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextCapabilitiesArgs']] = None,
                 privileged: Optional[pulumi.Input[bool]] = None,
                 read_only_root_filesystem: Optional[pulumi.Input[bool]] = None,
                 run_as_group: Optional[pulumi.Input[str]] = None,
                 run_as_non_root: Optional[pulumi.Input[bool]] = None,
                 run_as_user: Optional[pulumi.Input[str]] = None,
                 se_linux_options: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeLinuxOptionsArgs']] = None,
                 seccomp_profile: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeccompProfileArgs']] = None):
        """
        :param pulumi.Input[bool] allow_privilege_escalation: AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no*new*privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP*SYS*ADMIN Defaults to `true`.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextCapabilitiesArgs'] capabilities: The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        :param pulumi.Input[bool] privileged: Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Defaults to `false`.
        :param pulumi.Input[bool] read_only_root_filesystem: Whether this container has a read-only root filesystem. Default is false. Defaults to `false`.
        :param pulumi.Input[str] run_as_group: The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[bool] run_as_non_root: Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[str] run_as_user: The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeLinuxOptionsArgs'] se_linux_options: The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeccompProfileArgs'] seccomp_profile: The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
        """
        if allow_privilege_escalation is not None:
            pulumi.set(__self__, "allow_privilege_escalation", allow_privilege_escalation)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if read_only_root_filesystem is not None:
            pulumi.set(__self__, "read_only_root_filesystem", read_only_root_filesystem)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if seccomp_profile is not None:
            pulumi.set(__self__, "seccomp_profile", seccomp_profile)

    @property
    @pulumi.getter(name="allowPrivilegeEscalation")
    def allow_privilege_escalation(self) -> Optional[pulumi.Input[bool]]:
        """
        AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no*new*privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP*SYS*ADMIN Defaults to `true`.
        """
        return pulumi.get(self, "allow_privilege_escalation")

    @allow_privilege_escalation.setter
    def allow_privilege_escalation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_privilege_escalation", value)

    @property
    @pulumi.getter
    def capabilities(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextCapabilitiesArgs']]:
        """
        The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        """
        return pulumi.get(self, "capabilities")

    @capabilities.setter
    def capabilities(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextCapabilitiesArgs']]):
        pulumi.set(self, "capabilities", value)

    @property
    @pulumi.getter
    def privileged(self) -> Optional[pulumi.Input[bool]]:
        """
        Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Defaults to `false`.
        """
        return pulumi.get(self, "privileged")

    @privileged.setter
    def privileged(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "privileged", value)

    @property
    @pulumi.getter(name="readOnlyRootFilesystem")
    def read_only_root_filesystem(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this container has a read-only root filesystem. Default is false. Defaults to `false`.
        """
        return pulumi.get(self, "read_only_root_filesystem")

    @read_only_root_filesystem.setter
    def read_only_root_filesystem(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only_root_filesystem", value)

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[pulumi.Input[str]]:
        """
        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_group")

    @run_as_group.setter
    def run_as_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_group", value)

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_non_root")

    @run_as_non_root.setter
    def run_as_non_root(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_as_non_root", value)

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[str]]:
        """
        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_user", value)

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeLinuxOptionsArgs']]:
        """
        The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "se_linux_options")

    @se_linux_options.setter
    def se_linux_options(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeLinuxOptionsArgs']]):
        pulumi.set(self, "se_linux_options", value)

    @property
    @pulumi.getter(name="seccompProfile")
    def seccomp_profile(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeccompProfileArgs']]:
        """
        The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "seccomp_profile")

    @seccomp_profile.setter
    def seccomp_profile(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeccompProfileArgs']]):
        pulumi.set(self, "seccomp_profile", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextCapabilitiesArgsDict(TypedDict):
        adds: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Added capabilities
        """
        drops: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Removed capabilities
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextCapabilitiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextCapabilitiesArgs:
    def __init__(__self__, *,
                 adds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 drops: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] adds: Added capabilities
        :param pulumi.Input[Sequence[pulumi.Input[str]]] drops: Removed capabilities
        """
        if adds is not None:
            pulumi.set(__self__, "adds", adds)
        if drops is not None:
            pulumi.set(__self__, "drops", drops)

    @property
    @pulumi.getter
    def adds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Added capabilities
        """
        return pulumi.get(self, "adds")

    @adds.setter
    def adds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "adds", value)

    @property
    @pulumi.getter
    def drops(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Removed capabilities
        """
        return pulumi.get(self, "drops")

    @drops.setter
    def drops(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "drops", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeLinuxOptionsArgsDict(TypedDict):
        level: NotRequired[pulumi.Input[str]]
        """
        Level is SELinux level label that applies to the container.
        """
        role: NotRequired[pulumi.Input[str]]
        """
        Role is a SELinux role label that applies to the container.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type is a SELinux type label that applies to the container.
        """
        user: NotRequired[pulumi.Input[str]]
        """
        User is a SELinux user label that applies to the container.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeLinuxOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeLinuxOptionsArgs:
    def __init__(__self__, *,
                 level: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] level: Level is SELinux level label that applies to the container.
        :param pulumi.Input[str] role: Role is a SELinux role label that applies to the container.
        :param pulumi.Input[str] type: Type is a SELinux type label that applies to the container.
        :param pulumi.Input[str] user: User is a SELinux user label that applies to the container.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        Level is SELinux level label that applies to the container.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role is a SELinux role label that applies to the container.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type is a SELinux type label that applies to the container.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User is a SELinux user label that applies to the container.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeccompProfileArgsDict(TypedDict):
        localhost_profile: NotRequired[pulumi.Input[str]]
        """
        Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Defaults to ``.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined. Defaults to `Unconfined`.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeccompProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeccompProfileArgs:
    def __init__(__self__, *,
                 localhost_profile: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] localhost_profile: Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Defaults to ``.
        :param pulumi.Input[str] type: Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined. Defaults to `Unconfined`.
        """
        if localhost_profile is not None:
            pulumi.set(__self__, "localhost_profile", localhost_profile)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="localhostProfile")
    def localhost_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Defaults to ``.
        """
        return pulumi.get(self, "localhost_profile")

    @localhost_profile.setter
    def localhost_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "localhost_profile", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined. Defaults to `Unconfined`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeArgsDict(TypedDict):
        exec_: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeExecArgsDict']]
        """
        exec specifies the action to take.
        """
        failure_threshold: NotRequired[pulumi.Input[int]]
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        """
        grpcs: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeGrpcArgsDict']]]]
        """
        GRPC specifies an action involving a GRPC port.
        """
        http_get: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGetArgsDict']]
        """
        Specifies the http request to perform.
        """
        initial_delay_seconds: NotRequired[pulumi.Input[int]]
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        period_seconds: NotRequired[pulumi.Input[int]]
        """
        How often (in seconds) to perform the probe Defaults to `10`.
        """
        success_threshold: NotRequired[pulumi.Input[int]]
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        """
        tcp_sockets: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeTcpSocketArgsDict']]]]
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        timeout_seconds: NotRequired[pulumi.Input[int]]
        """
        Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeExecArgs']] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 grpcs: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeGrpcArgs']]]] = None,
                 http_get: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 tcp_sockets: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeTcpSocketArgs']]]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeExecArgs'] exec_: exec specifies the action to take.
        :param pulumi.Input[int] failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeGrpcArgs']]] grpcs: GRPC specifies an action involving a GRPC port.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGetArgs'] http_get: Specifies the http request to perform.
        :param pulumi.Input[int] initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        :param pulumi.Input[int] period_seconds: How often (in seconds) to perform the probe Defaults to `10`.
        :param pulumi.Input[int] success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeTcpSocketArgs']]] tcp_sockets: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        :param pulumi.Input[int] timeout_seconds: Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if grpcs is not None:
            pulumi.set(__self__, "grpcs", grpcs)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_sockets is not None:
            pulumi.set(__self__, "tcp_sockets", tcp_sockets)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeExecArgs']]:
        """
        exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter
    def grpcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeGrpcArgs']]]]:
        """
        GRPC specifies an action involving a GRPC port.
        """
        return pulumi.get(self, "grpcs")

    @grpcs.setter
    def grpcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeGrpcArgs']]]]):
        pulumi.set(self, "grpcs", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGetArgs']]:
        """
        Specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        How often (in seconds) to perform the probe Defaults to `10`.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="tcpSockets")
    def tcp_sockets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeTcpSocketArgs']]]]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        return pulumi.get(self, "tcp_sockets")

    @tcp_sockets.setter
    def tcp_sockets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeTcpSocketArgs']]]]):
        pulumi.set(self, "tcp_sockets", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeExecArgsDict(TypedDict):
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeExecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeExecArgs:
    def __init__(__self__, *,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] commands: Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeGrpcArgsDict(TypedDict):
        port: pulumi.Input[int]
        """
        Number of the port to access on the container. Number must be in the range 1 to 65535.
        """
        service: NotRequired[pulumi.Input[str]]
        """
        Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeGrpcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeGrpcArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 service: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] port: Number of the port to access on the container. Number must be in the range 1 to 65535.
        :param pulumi.Input[str] service: Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
        pulumi.set(__self__, "port", port)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        Number of the port to access on the container. Number must be in the range 1 to 65535.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGetArgsDict(TypedDict):
        host: NotRequired[pulumi.Input[str]]
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        http_headers: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGetHttpHeaderArgsDict']]]]
        """
        Scheme to use for connecting to the host.
        """
        path: NotRequired[pulumi.Input[str]]
        """
        Path to access on the HTTP server.
        """
        port: NotRequired[pulumi.Input[str]]
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        scheme: NotRequired[pulumi.Input[str]]
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGetArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGetHttpHeaderArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGetHttpHeaderArgs']]] http_headers: Scheme to use for connecting to the host.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGetHttpHeaderArgs']]]]:
        """
        Scheme to use for connecting to the host.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGetHttpHeaderArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGetHttpHeaderArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The header field name
        """
        value: NotRequired[pulumi.Input[str]]
        """
        The header field value
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGetHttpHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGetHttpHeaderArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeTcpSocketArgsDict(TypedDict):
        port: pulumi.Input[str]
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeTcpSocketArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[str]):
        """
        :param pulumi.Input[str] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[str]:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[str]):
        pulumi.set(self, "port", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerVolumeMountArgsDict(TypedDict):
        mount_path: pulumi.Input[str]
        """
        Path within the container at which the volume should be mounted. Must not contain ':'.
        """
        name: pulumi.Input[str]
        """
        This must match the Name of a Volume.
        """
        mount_propagation: NotRequired[pulumi.Input[str]]
        """
        Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional. Defaults to `None`.
        """
        read_only: NotRequired[pulumi.Input[bool]]
        """
        Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false. Defaults to `false`.
        """
        sub_path: NotRequired[pulumi.Input[str]]
        """
        Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecContainerVolumeMountArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecContainerVolumeMountArgs:
    def __init__(__self__, *,
                 mount_path: pulumi.Input[str],
                 name: pulumi.Input[str],
                 mount_propagation: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 sub_path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] mount_path: Path within the container at which the volume should be mounted. Must not contain ':'.
        :param pulumi.Input[str] name: This must match the Name of a Volume.
        :param pulumi.Input[str] mount_propagation: Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional. Defaults to `None`.
        :param pulumi.Input[bool] read_only: Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false. Defaults to `false`.
        :param pulumi.Input[str] sub_path: Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        """
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> pulumi.Input[str]:
        """
        Path within the container at which the volume should be mounted. Must not contain ':'.
        """
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        This must match the Name of a Volume.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[pulumi.Input[str]]:
        """
        Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional. Defaults to `None`.
        """
        return pulumi.get(self, "mount_propagation")

    @mount_propagation.setter
    def mount_propagation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_propagation", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false. Defaults to `false`.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        """
        return pulumi.get(self, "sub_path")

    @sub_path.setter
    def sub_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfigArgsDict(TypedDict):
        nameservers: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
        """
        options: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfigOptionArgsDict']]]]
        """
        A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
        """
        searches: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfigArgs:
    def __init__(__self__, *,
                 nameservers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 options: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfigOptionArgs']]]] = None,
                 searches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] nameservers: A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfigOptionArgs']]] options: A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] searches: A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
        """
        if nameservers is not None:
            pulumi.set(__self__, "nameservers", nameservers)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if searches is not None:
            pulumi.set(__self__, "searches", searches)

    @property
    @pulumi.getter
    def nameservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
        """
        return pulumi.get(self, "nameservers")

    @nameservers.setter
    def nameservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "nameservers", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfigOptionArgs']]]]:
        """
        A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfigOptionArgs']]]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def searches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
        """
        return pulumi.get(self, "searches")

    @searches.setter
    def searches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "searches", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfigOptionArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of the option.
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Value of the option. Optional: Defaults to empty.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfigOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecDnsConfigOptionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of the option.
        :param pulumi.Input[str] value: Value of the option. Optional: Defaults to empty.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the option.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of the option. Optional: Defaults to empty.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecHostAliasArgsDict(TypedDict):
        hostnames: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        Hostnames for the IP address.
        """
        ip: pulumi.Input[str]
        """
        IP address of the host file entry.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecHostAliasArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecHostAliasArgs:
    def __init__(__self__, *,
                 hostnames: pulumi.Input[Sequence[pulumi.Input[str]]],
                 ip: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] hostnames: Hostnames for the IP address.
        :param pulumi.Input[str] ip: IP address of the host file entry.
        """
        pulumi.set(__self__, "hostnames", hostnames)
        pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def hostnames(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Hostnames for the IP address.
        """
        return pulumi.get(self, "hostnames")

    @hostnames.setter
    def hostnames(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "hostnames", value)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[str]:
        """
        IP address of the host file entry.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecImagePullSecretArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecImagePullSecretArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecImagePullSecretArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of the container specified as a DNS*LABEL. Each container in a pod must have a unique name (DNS*LABEL). Cannot be updated.
        """
        args: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR*NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        """
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR*NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        """
        env_froms: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromArgsDict']]]]
        """
        List of sources to populate environment variables in the container. The keys defined within a source must be a C*IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
        """
        envs: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvArgsDict']]]]
        """
        List of environment variables to set in the container. Cannot be updated.
        """
        image: NotRequired[pulumi.Input[str]]
        """
        Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
        """
        image_pull_policy: NotRequired[pulumi.Input[str]]
        """
        Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
        """
        lifecycle: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecycleArgsDict']]
        """
        Actions that the management system should take in response to container lifecycle events
        """
        liveness_probe: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeArgsDict']]
        """
        Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        ports: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerPortArgsDict']]]]
        """
        List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
        """
        readiness_probe: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeArgsDict']]
        """
        Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        resources: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerResourcesArgsDict']]
        """
        Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        """
        security_context: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextArgsDict']]
        """
        Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        """
        startup_probe: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeArgsDict']]
        """
        StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        stdin: NotRequired[pulumi.Input[bool]]
        """
        Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.  Defaults to `false`.
        """
        stdin_once: NotRequired[pulumi.Input[bool]]
        """
        Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Defaults to `false`.
        """
        termination_message_path: NotRequired[pulumi.Input[str]]
        """
        Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated. Defaults to `/dev/termination-log`.
        """
        termination_message_policy: NotRequired[pulumi.Input[str]]
        """
        Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
        """
        tty: NotRequired[pulumi.Input[bool]]
        """
        Whether this container should allocate a TTY for itself Defaults to `false`.
        """
        volume_mounts: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerVolumeMountArgsDict']]]]
        """
        Pod volumes to mount into the container's filesystem. Cannot be updated.
        """
        working_dir: NotRequired[pulumi.Input[str]]
        """
        Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 env_froms: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromArgs']]]] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvArgs']]]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 image_pull_policy: Optional[pulumi.Input[str]] = None,
                 lifecycle: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecycleArgs']] = None,
                 liveness_probe: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeArgs']] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerPortArgs']]]] = None,
                 readiness_probe: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeArgs']] = None,
                 resources: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerResourcesArgs']] = None,
                 security_context: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextArgs']] = None,
                 startup_probe: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeArgs']] = None,
                 stdin: Optional[pulumi.Input[bool]] = None,
                 stdin_once: Optional[pulumi.Input[bool]] = None,
                 termination_message_path: Optional[pulumi.Input[str]] = None,
                 termination_message_policy: Optional[pulumi.Input[str]] = None,
                 tty: Optional[pulumi.Input[bool]] = None,
                 volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerVolumeMountArgs']]]] = None,
                 working_dir: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of the container specified as a DNS*LABEL. Each container in a pod must have a unique name (DNS*LABEL). Cannot be updated.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] args: Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR*NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        :param pulumi.Input[Sequence[pulumi.Input[str]]] commands: Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR*NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromArgs']]] env_froms: List of sources to populate environment variables in the container. The keys defined within a source must be a C*IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvArgs']]] envs: List of environment variables to set in the container. Cannot be updated.
        :param pulumi.Input[str] image: Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
        :param pulumi.Input[str] image_pull_policy: Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecycleArgs'] lifecycle: Actions that the management system should take in response to container lifecycle events
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeArgs'] liveness_probe: Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerPortArgs']]] ports: List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeArgs'] readiness_probe: Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerResourcesArgs'] resources: Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextArgs'] security_context: Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeArgs'] startup_probe: StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param pulumi.Input[bool] stdin: Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.  Defaults to `false`.
        :param pulumi.Input[bool] stdin_once: Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Defaults to `false`.
        :param pulumi.Input[str] termination_message_path: Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated. Defaults to `/dev/termination-log`.
        :param pulumi.Input[str] termination_message_policy: Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
        :param pulumi.Input[bool] tty: Whether this container should allocate a TTY for itself Defaults to `false`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerVolumeMountArgs']]] volume_mounts: Pod volumes to mount into the container's filesystem. Cannot be updated.
        :param pulumi.Input[str] working_dir: Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
        """
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if env_froms is not None:
            pulumi.set(__self__, "env_froms", env_froms)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if startup_probe is not None:
            pulumi.set(__self__, "startup_probe", startup_probe)
        if stdin is not None:
            pulumi.set(__self__, "stdin", stdin)
        if stdin_once is not None:
            pulumi.set(__self__, "stdin_once", stdin_once)
        if termination_message_path is not None:
            pulumi.set(__self__, "termination_message_path", termination_message_path)
        if termination_message_policy is not None:
            pulumi.set(__self__, "termination_message_policy", termination_message_policy)
        if tty is not None:
            pulumi.set(__self__, "tty", tty)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the container specified as a DNS*LABEL. Each container in a pod must have a unique name (DNS*LABEL). Cannot be updated.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR*NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        """
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "args", value)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR*NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)

    @property
    @pulumi.getter(name="envFroms")
    def env_froms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromArgs']]]]:
        """
        List of sources to populate environment variables in the container. The keys defined within a source must be a C*IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
        """
        return pulumi.get(self, "env_froms")

    @env_froms.setter
    def env_froms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromArgs']]]]):
        pulumi.set(self, "env_froms", value)

    @property
    @pulumi.getter
    def envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvArgs']]]]:
        """
        List of environment variables to set in the container. Cannot be updated.
        """
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvArgs']]]]):
        pulumi.set(self, "envs", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
        """
        return pulumi.get(self, "image_pull_policy")

    @image_pull_policy.setter
    def image_pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_policy", value)

    @property
    @pulumi.getter
    def lifecycle(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecycleArgs']]:
        """
        Actions that the management system should take in response to container lifecycle events
        """
        return pulumi.get(self, "lifecycle")

    @lifecycle.setter
    def lifecycle(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecycleArgs']]):
        pulumi.set(self, "lifecycle", value)

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeArgs']]:
        """
        Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        return pulumi.get(self, "liveness_probe")

    @liveness_probe.setter
    def liveness_probe(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeArgs']]):
        pulumi.set(self, "liveness_probe", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerPortArgs']]]]:
        """
        List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerPortArgs']]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeArgs']]:
        """
        Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        return pulumi.get(self, "readiness_probe")

    @readiness_probe.setter
    def readiness_probe(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeArgs']]):
        pulumi.set(self, "readiness_probe", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerResourcesArgs']]:
        """
        Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextArgs']]:
        """
        Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        """
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextArgs']]):
        pulumi.set(self, "security_context", value)

    @property
    @pulumi.getter(name="startupProbe")
    def startup_probe(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeArgs']]:
        """
        StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "startup_probe")

    @startup_probe.setter
    def startup_probe(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeArgs']]):
        pulumi.set(self, "startup_probe", value)

    @property
    @pulumi.getter
    def stdin(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.  Defaults to `false`.
        """
        return pulumi.get(self, "stdin")

    @stdin.setter
    def stdin(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stdin", value)

    @property
    @pulumi.getter(name="stdinOnce")
    def stdin_once(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Defaults to `false`.
        """
        return pulumi.get(self, "stdin_once")

    @stdin_once.setter
    def stdin_once(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stdin_once", value)

    @property
    @pulumi.getter(name="terminationMessagePath")
    def termination_message_path(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated. Defaults to `/dev/termination-log`.
        """
        return pulumi.get(self, "termination_message_path")

    @termination_message_path.setter
    def termination_message_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "termination_message_path", value)

    @property
    @pulumi.getter(name="terminationMessagePolicy")
    def termination_message_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
        """
        return pulumi.get(self, "termination_message_policy")

    @termination_message_policy.setter
    def termination_message_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "termination_message_policy", value)

    @property
    @pulumi.getter
    def tty(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this container should allocate a TTY for itself Defaults to `false`.
        """
        return pulumi.get(self, "tty")

    @tty.setter
    def tty(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tty", value)

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerVolumeMountArgs']]]]:
        """
        Pod volumes to mount into the container's filesystem. Cannot be updated.
        """
        return pulumi.get(self, "volume_mounts")

    @volume_mounts.setter
    def volume_mounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerVolumeMountArgs']]]]):
        pulumi.set(self, "volume_mounts", value)

    @property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[pulumi.Input[str]]:
        """
        Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
        """
        return pulumi.get(self, "working_dir")

    @working_dir.setter
    def working_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "working_dir", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of the environment variable. Must be a C_IDENTIFIER
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Variable references $(VAR*NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        value_from: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromArgsDict']]
        """
        Source for the environment variable's value
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None,
                 value_from: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromArgs']] = None):
        """
        :param pulumi.Input[str] name: Name of the environment variable. Must be a C_IDENTIFIER
        :param pulumi.Input[str] value: Variable references $(VAR*NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromArgs'] value_from: Source for the environment variable's value
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the environment variable. Must be a C_IDENTIFIER
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Variable references $(VAR*NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromArgs']]:
        """
        Source for the environment variable's value
        """
        return pulumi.get(self, "value_from")

    @value_from.setter
    def value_from(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromArgs']]):
        pulumi.set(self, "value_from", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromArgsDict(TypedDict):
        config_map_ref: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromConfigMapRefArgsDict']]
        """
        The ConfigMap to select from
        """
        prefix: NotRequired[pulumi.Input[str]]
        """
        An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
        """
        secret_ref: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromSecretRefArgsDict']]
        """
        The Secret to select from
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromArgs:
    def __init__(__self__, *,
                 config_map_ref: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromConfigMapRefArgs']] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 secret_ref: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromSecretRefArgs']] = None):
        """
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromConfigMapRefArgs'] config_map_ref: The ConfigMap to select from
        :param pulumi.Input[str] prefix: An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromSecretRefArgs'] secret_ref: The Secret to select from
        """
        if config_map_ref is not None:
            pulumi.set(__self__, "config_map_ref", config_map_ref)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="configMapRef")
    def config_map_ref(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromConfigMapRefArgs']]:
        """
        The ConfigMap to select from
        """
        return pulumi.get(self, "config_map_ref")

    @config_map_ref.setter
    def config_map_ref(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromConfigMapRefArgs']]):
        pulumi.set(self, "config_map_ref", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromSecretRefArgs']]:
        """
        The Secret to select from
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromConfigMapRefArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        optional: NotRequired[pulumi.Input[bool]]
        """
        Specify whether the ConfigMap must be defined
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromConfigMapRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromConfigMapRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap must be defined
        """
        pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromSecretRefArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        optional: NotRequired[pulumi.Input[bool]]
        """
        Specify whether the Secret must be defined
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromSecretRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromSecretRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[bool] optional: Specify whether the Secret must be defined
        """
        pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromArgsDict(TypedDict):
        config_map_key_ref: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRefArgsDict']]
        """
        Selects a key of a ConfigMap.
        """
        field_ref: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromFieldRefArgsDict']]
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
        """
        resource_field_ref: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromResourceFieldRefArgsDict']]
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        secret_key_ref: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromSecretKeyRefArgsDict']]
        """
        Selects a key of a secret in the pod's namespace.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromArgs:
    def __init__(__self__, *,
                 config_map_key_ref: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRefArgs']] = None,
                 field_ref: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromFieldRefArgs']] = None,
                 resource_field_ref: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromResourceFieldRefArgs']] = None,
                 secret_key_ref: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromSecretKeyRefArgs']] = None):
        """
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRefArgs'] config_map_key_ref: Selects a key of a ConfigMap.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromFieldRefArgs'] field_ref: Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromSecretKeyRefArgs'] secret_key_ref: Selects a key of a secret in the pod's namespace.
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRefArgs']]:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @config_map_key_ref.setter
    def config_map_key_ref(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRefArgs']]):
        pulumi.set(self, "config_map_key_ref", value)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromFieldRefArgs']]:
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromFieldRefArgs']]):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromSecretKeyRefArgs']]:
        """
        Selects a key of a secret in the pod's namespace.
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromSecretKeyRefArgs']]):
        pulumi.set(self, "secret_key_ref", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRefArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        The key to select.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        optional: NotRequired[pulumi.Input[bool]]
        """
        Specify whether the ConfigMap or its key must be defined.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRefArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] key: The key to select.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap or its key must be defined.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap or its key must be defined.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromFieldRefArgsDict(TypedDict):
        api_version: NotRequired[pulumi.Input[str]]
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1". Defaults to `v1`.
        """
        field_path: NotRequired[pulumi.Input[str]]
        """
        Path of the field to select in the specified API version
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromFieldRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromFieldRefArgs:
    def __init__(__self__, *,
                 api_version: Optional[pulumi.Input[str]] = None,
                 field_path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1". Defaults to `v1`.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if field_path is not None:
            pulumi.set(__self__, "field_path", field_path)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1". Defaults to `v1`.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path of the field to select in the specified API version
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_path", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromResourceFieldRefArgsDict(TypedDict):
        resource: pulumi.Input[str]
        """
        Resource to select
        """
        container_name: NotRequired[pulumi.Input[str]]
        divisor: NotRequired[pulumi.Input[str]]
        """
        Defaults to `1`.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromResourceFieldRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromResourceFieldRefArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 container_name: Optional[pulumi.Input[str]] = None,
                 divisor: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] resource: Resource to select
        :param pulumi.Input[str] divisor: Defaults to `1`.
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `1`.
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "divisor", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromSecretKeyRefArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        The key of the secret to select from. Must be a valid secret key.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        optional: NotRequired[pulumi.Input[bool]]
        """
        Specify whether the Secret or its key must be defined.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromSecretKeyRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromSecretKeyRefArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] key: The key of the secret to select from. Must be a valid secret key.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[bool] optional: Specify whether the Secret or its key must be defined.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the secret to select from. Must be a valid secret key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret or its key must be defined.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecycleArgsDict(TypedDict):
        post_starts: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartArgsDict']]]]
        """
        post*start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        pre_stops: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopArgsDict']]]]
        """
        pre*stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecycleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecycleArgs:
    def __init__(__self__, *,
                 post_starts: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartArgs']]]] = None,
                 pre_stops: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartArgs']]] post_starts: post*start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopArgs']]] pre_stops: pre*stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        if post_starts is not None:
            pulumi.set(__self__, "post_starts", post_starts)
        if pre_stops is not None:
            pulumi.set(__self__, "pre_stops", pre_stops)

    @property
    @pulumi.getter(name="postStarts")
    def post_starts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartArgs']]]]:
        """
        post*start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        return pulumi.get(self, "post_starts")

    @post_starts.setter
    def post_starts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartArgs']]]]):
        pulumi.set(self, "post_starts", value)

    @property
    @pulumi.getter(name="preStops")
    def pre_stops(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopArgs']]]]:
        """
        pre*stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        return pulumi.get(self, "pre_stops")

    @pre_stops.setter
    def pre_stops(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopArgs']]]]):
        pulumi.set(self, "pre_stops", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartArgsDict(TypedDict):
        exec_: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartExecArgsDict']]
        """
        exec specifies the action to take.
        """
        http_get: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGetArgsDict']]
        """
        Specifies the http request to perform.
        """
        tcp_sockets: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartTcpSocketArgsDict']]]]
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartExecArgs']] = None,
                 http_get: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGetArgs']] = None,
                 tcp_sockets: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartTcpSocketArgs']]]] = None):
        """
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartExecArgs'] exec_: exec specifies the action to take.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGetArgs'] http_get: Specifies the http request to perform.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartTcpSocketArgs']]] tcp_sockets: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_sockets is not None:
            pulumi.set(__self__, "tcp_sockets", tcp_sockets)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartExecArgs']]:
        """
        exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGetArgs']]:
        """
        Specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="tcpSockets")
    def tcp_sockets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartTcpSocketArgs']]]]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        return pulumi.get(self, "tcp_sockets")

    @tcp_sockets.setter
    def tcp_sockets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartTcpSocketArgs']]]]):
        pulumi.set(self, "tcp_sockets", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartExecArgsDict(TypedDict):
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartExecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartExecArgs:
    def __init__(__self__, *,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] commands: Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGetArgsDict(TypedDict):
        host: NotRequired[pulumi.Input[str]]
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        http_headers: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeaderArgsDict']]]]
        """
        Scheme to use for connecting to the host.
        """
        path: NotRequired[pulumi.Input[str]]
        """
        Path to access on the HTTP server.
        """
        port: NotRequired[pulumi.Input[str]]
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        scheme: NotRequired[pulumi.Input[str]]
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGetArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeaderArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeaderArgs']]] http_headers: Scheme to use for connecting to the host.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeaderArgs']]]]:
        """
        Scheme to use for connecting to the host.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeaderArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeaderArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The header field name
        """
        value: NotRequired[pulumi.Input[str]]
        """
        The header field value
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeaderArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartTcpSocketArgsDict(TypedDict):
        port: pulumi.Input[str]
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartTcpSocketArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[str]):
        """
        :param pulumi.Input[str] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[str]:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[str]):
        pulumi.set(self, "port", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopArgsDict(TypedDict):
        exec_: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopExecArgsDict']]
        """
        exec specifies the action to take.
        """
        http_get: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGetArgsDict']]
        """
        Specifies the http request to perform.
        """
        tcp_sockets: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopTcpSocketArgsDict']]]]
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopExecArgs']] = None,
                 http_get: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGetArgs']] = None,
                 tcp_sockets: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopTcpSocketArgs']]]] = None):
        """
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopExecArgs'] exec_: exec specifies the action to take.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGetArgs'] http_get: Specifies the http request to perform.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopTcpSocketArgs']]] tcp_sockets: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_sockets is not None:
            pulumi.set(__self__, "tcp_sockets", tcp_sockets)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopExecArgs']]:
        """
        exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGetArgs']]:
        """
        Specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="tcpSockets")
    def tcp_sockets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopTcpSocketArgs']]]]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        return pulumi.get(self, "tcp_sockets")

    @tcp_sockets.setter
    def tcp_sockets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopTcpSocketArgs']]]]):
        pulumi.set(self, "tcp_sockets", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopExecArgsDict(TypedDict):
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopExecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopExecArgs:
    def __init__(__self__, *,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] commands: Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGetArgsDict(TypedDict):
        host: NotRequired[pulumi.Input[str]]
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        http_headers: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeaderArgsDict']]]]
        """
        Scheme to use for connecting to the host.
        """
        path: NotRequired[pulumi.Input[str]]
        """
        Path to access on the HTTP server.
        """
        port: NotRequired[pulumi.Input[str]]
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        scheme: NotRequired[pulumi.Input[str]]
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGetArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeaderArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeaderArgs']]] http_headers: Scheme to use for connecting to the host.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeaderArgs']]]]:
        """
        Scheme to use for connecting to the host.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeaderArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeaderArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The header field name
        """
        value: NotRequired[pulumi.Input[str]]
        """
        The header field value
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeaderArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopTcpSocketArgsDict(TypedDict):
        port: pulumi.Input[str]
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopTcpSocketArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[str]):
        """
        :param pulumi.Input[str] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[str]:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[str]):
        pulumi.set(self, "port", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeArgsDict(TypedDict):
        exec_: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeExecArgsDict']]
        """
        exec specifies the action to take.
        """
        failure_threshold: NotRequired[pulumi.Input[int]]
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        """
        grpcs: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeGrpcArgsDict']]]]
        """
        GRPC specifies an action involving a GRPC port.
        """
        http_get: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGetArgsDict']]
        """
        Specifies the http request to perform.
        """
        initial_delay_seconds: NotRequired[pulumi.Input[int]]
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        period_seconds: NotRequired[pulumi.Input[int]]
        """
        How often (in seconds) to perform the probe Defaults to `10`.
        """
        success_threshold: NotRequired[pulumi.Input[int]]
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        """
        tcp_sockets: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeTcpSocketArgsDict']]]]
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        timeout_seconds: NotRequired[pulumi.Input[int]]
        """
        Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeExecArgs']] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 grpcs: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeGrpcArgs']]]] = None,
                 http_get: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 tcp_sockets: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeTcpSocketArgs']]]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeExecArgs'] exec_: exec specifies the action to take.
        :param pulumi.Input[int] failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeGrpcArgs']]] grpcs: GRPC specifies an action involving a GRPC port.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGetArgs'] http_get: Specifies the http request to perform.
        :param pulumi.Input[int] initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        :param pulumi.Input[int] period_seconds: How often (in seconds) to perform the probe Defaults to `10`.
        :param pulumi.Input[int] success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeTcpSocketArgs']]] tcp_sockets: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        :param pulumi.Input[int] timeout_seconds: Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if grpcs is not None:
            pulumi.set(__self__, "grpcs", grpcs)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_sockets is not None:
            pulumi.set(__self__, "tcp_sockets", tcp_sockets)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeExecArgs']]:
        """
        exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter
    def grpcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeGrpcArgs']]]]:
        """
        GRPC specifies an action involving a GRPC port.
        """
        return pulumi.get(self, "grpcs")

    @grpcs.setter
    def grpcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeGrpcArgs']]]]):
        pulumi.set(self, "grpcs", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGetArgs']]:
        """
        Specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        How often (in seconds) to perform the probe Defaults to `10`.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="tcpSockets")
    def tcp_sockets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeTcpSocketArgs']]]]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        return pulumi.get(self, "tcp_sockets")

    @tcp_sockets.setter
    def tcp_sockets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeTcpSocketArgs']]]]):
        pulumi.set(self, "tcp_sockets", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeExecArgsDict(TypedDict):
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeExecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeExecArgs:
    def __init__(__self__, *,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] commands: Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeGrpcArgsDict(TypedDict):
        port: pulumi.Input[int]
        """
        Number of the port to access on the container. Number must be in the range 1 to 65535.
        """
        service: NotRequired[pulumi.Input[str]]
        """
        Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeGrpcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeGrpcArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 service: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] port: Number of the port to access on the container. Number must be in the range 1 to 65535.
        :param pulumi.Input[str] service: Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
        pulumi.set(__self__, "port", port)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        Number of the port to access on the container. Number must be in the range 1 to 65535.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGetArgsDict(TypedDict):
        host: NotRequired[pulumi.Input[str]]
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        http_headers: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeaderArgsDict']]]]
        """
        Scheme to use for connecting to the host.
        """
        path: NotRequired[pulumi.Input[str]]
        """
        Path to access on the HTTP server.
        """
        port: NotRequired[pulumi.Input[str]]
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        scheme: NotRequired[pulumi.Input[str]]
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGetArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeaderArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeaderArgs']]] http_headers: Scheme to use for connecting to the host.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeaderArgs']]]]:
        """
        Scheme to use for connecting to the host.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeaderArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeaderArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The header field name
        """
        value: NotRequired[pulumi.Input[str]]
        """
        The header field value
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeaderArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeTcpSocketArgsDict(TypedDict):
        port: pulumi.Input[str]
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeTcpSocketArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[str]):
        """
        :param pulumi.Input[str] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[str]:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[str]):
        pulumi.set(self, "port", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerPortArgsDict(TypedDict):
        container_port: pulumi.Input[int]
        """
        Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
        """
        host_ip: NotRequired[pulumi.Input[str]]
        """
        What host IP to bind the external port to.
        """
        host_port: NotRequired[pulumi.Input[int]]
        """
        Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        If specified, this must be an IANA*SVC*NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
        """
        protocol: NotRequired[pulumi.Input[str]]
        """
        Protocol for port. Must be UDP or TCP. Defaults to "TCP". Defaults to `TCP`.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerPortArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerPortArgs:
    def __init__(__self__, *,
                 container_port: pulumi.Input[int],
                 host_ip: Optional[pulumi.Input[str]] = None,
                 host_port: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] container_port: Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
        :param pulumi.Input[str] host_ip: What host IP to bind the external port to.
        :param pulumi.Input[int] host_port: Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        :param pulumi.Input[str] name: If specified, this must be an IANA*SVC*NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
        :param pulumi.Input[str] protocol: Protocol for port. Must be UDP or TCP. Defaults to "TCP". Defaults to `TCP`.
        """
        pulumi.set(__self__, "container_port", container_port)
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if host_port is not None:
            pulumi.set(__self__, "host_port", host_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> pulumi.Input[int]:
        """
        Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
        """
        return pulumi.get(self, "container_port")

    @container_port.setter
    def container_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "container_port", value)

    @property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> Optional[pulumi.Input[str]]:
        """
        What host IP to bind the external port to.
        """
        return pulumi.get(self, "host_ip")

    @host_ip.setter
    def host_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_ip", value)

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> Optional[pulumi.Input[int]]:
        """
        Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        """
        return pulumi.get(self, "host_port")

    @host_port.setter
    def host_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "host_port", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, this must be an IANA*SVC*NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol for port. Must be UDP or TCP. Defaults to "TCP". Defaults to `TCP`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeArgsDict(TypedDict):
        exec_: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeExecArgsDict']]
        """
        exec specifies the action to take.
        """
        failure_threshold: NotRequired[pulumi.Input[int]]
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        """
        grpcs: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeGrpcArgsDict']]]]
        """
        GRPC specifies an action involving a GRPC port.
        """
        http_get: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGetArgsDict']]
        """
        Specifies the http request to perform.
        """
        initial_delay_seconds: NotRequired[pulumi.Input[int]]
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        period_seconds: NotRequired[pulumi.Input[int]]
        """
        How often (in seconds) to perform the probe Defaults to `10`.
        """
        success_threshold: NotRequired[pulumi.Input[int]]
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        """
        tcp_sockets: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeTcpSocketArgsDict']]]]
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        timeout_seconds: NotRequired[pulumi.Input[int]]
        """
        Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeExecArgs']] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 grpcs: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeGrpcArgs']]]] = None,
                 http_get: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 tcp_sockets: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeTcpSocketArgs']]]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeExecArgs'] exec_: exec specifies the action to take.
        :param pulumi.Input[int] failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeGrpcArgs']]] grpcs: GRPC specifies an action involving a GRPC port.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGetArgs'] http_get: Specifies the http request to perform.
        :param pulumi.Input[int] initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        :param pulumi.Input[int] period_seconds: How often (in seconds) to perform the probe Defaults to `10`.
        :param pulumi.Input[int] success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeTcpSocketArgs']]] tcp_sockets: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        :param pulumi.Input[int] timeout_seconds: Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if grpcs is not None:
            pulumi.set(__self__, "grpcs", grpcs)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_sockets is not None:
            pulumi.set(__self__, "tcp_sockets", tcp_sockets)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeExecArgs']]:
        """
        exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter
    def grpcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeGrpcArgs']]]]:
        """
        GRPC specifies an action involving a GRPC port.
        """
        return pulumi.get(self, "grpcs")

    @grpcs.setter
    def grpcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeGrpcArgs']]]]):
        pulumi.set(self, "grpcs", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGetArgs']]:
        """
        Specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        How often (in seconds) to perform the probe Defaults to `10`.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="tcpSockets")
    def tcp_sockets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeTcpSocketArgs']]]]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        return pulumi.get(self, "tcp_sockets")

    @tcp_sockets.setter
    def tcp_sockets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeTcpSocketArgs']]]]):
        pulumi.set(self, "tcp_sockets", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeExecArgsDict(TypedDict):
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeExecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeExecArgs:
    def __init__(__self__, *,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] commands: Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeGrpcArgsDict(TypedDict):
        port: pulumi.Input[int]
        """
        Number of the port to access on the container. Number must be in the range 1 to 65535.
        """
        service: NotRequired[pulumi.Input[str]]
        """
        Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeGrpcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeGrpcArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 service: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] port: Number of the port to access on the container. Number must be in the range 1 to 65535.
        :param pulumi.Input[str] service: Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
        pulumi.set(__self__, "port", port)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        Number of the port to access on the container. Number must be in the range 1 to 65535.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGetArgsDict(TypedDict):
        host: NotRequired[pulumi.Input[str]]
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        http_headers: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeaderArgsDict']]]]
        """
        Scheme to use for connecting to the host.
        """
        path: NotRequired[pulumi.Input[str]]
        """
        Path to access on the HTTP server.
        """
        port: NotRequired[pulumi.Input[str]]
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        scheme: NotRequired[pulumi.Input[str]]
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGetArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeaderArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeaderArgs']]] http_headers: Scheme to use for connecting to the host.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeaderArgs']]]]:
        """
        Scheme to use for connecting to the host.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeaderArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeaderArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The header field name
        """
        value: NotRequired[pulumi.Input[str]]
        """
        The header field value
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeaderArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeTcpSocketArgsDict(TypedDict):
        port: pulumi.Input[str]
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeTcpSocketArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[str]):
        """
        :param pulumi.Input[str] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[str]:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[str]):
        pulumi.set(self, "port", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerResourcesArgsDict(TypedDict):
        limits: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        """
        requests: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerResourcesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] limits: Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "requests", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextArgsDict(TypedDict):
        allow_privilege_escalation: NotRequired[pulumi.Input[bool]]
        """
        AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no*new*privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP*SYS*ADMIN Defaults to `true`.
        """
        capabilities: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextCapabilitiesArgsDict']]
        """
        The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        """
        privileged: NotRequired[pulumi.Input[bool]]
        """
        Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Defaults to `false`.
        """
        read_only_root_filesystem: NotRequired[pulumi.Input[bool]]
        """
        Whether this container has a read-only root filesystem. Default is false. Defaults to `false`.
        """
        run_as_group: NotRequired[pulumi.Input[str]]
        """
        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        run_as_non_root: NotRequired[pulumi.Input[bool]]
        """
        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        run_as_user: NotRequired[pulumi.Input[str]]
        """
        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        se_linux_options: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeLinuxOptionsArgsDict']]
        """
        The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        seccomp_profile: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeccompProfileArgsDict']]
        """
        The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextArgs:
    def __init__(__self__, *,
                 allow_privilege_escalation: Optional[pulumi.Input[bool]] = None,
                 capabilities: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextCapabilitiesArgs']] = None,
                 privileged: Optional[pulumi.Input[bool]] = None,
                 read_only_root_filesystem: Optional[pulumi.Input[bool]] = None,
                 run_as_group: Optional[pulumi.Input[str]] = None,
                 run_as_non_root: Optional[pulumi.Input[bool]] = None,
                 run_as_user: Optional[pulumi.Input[str]] = None,
                 se_linux_options: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeLinuxOptionsArgs']] = None,
                 seccomp_profile: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeccompProfileArgs']] = None):
        """
        :param pulumi.Input[bool] allow_privilege_escalation: AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no*new*privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP*SYS*ADMIN Defaults to `true`.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextCapabilitiesArgs'] capabilities: The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        :param pulumi.Input[bool] privileged: Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Defaults to `false`.
        :param pulumi.Input[bool] read_only_root_filesystem: Whether this container has a read-only root filesystem. Default is false. Defaults to `false`.
        :param pulumi.Input[str] run_as_group: The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[bool] run_as_non_root: Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[str] run_as_user: The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeLinuxOptionsArgs'] se_linux_options: The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeccompProfileArgs'] seccomp_profile: The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
        """
        if allow_privilege_escalation is not None:
            pulumi.set(__self__, "allow_privilege_escalation", allow_privilege_escalation)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if read_only_root_filesystem is not None:
            pulumi.set(__self__, "read_only_root_filesystem", read_only_root_filesystem)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if seccomp_profile is not None:
            pulumi.set(__self__, "seccomp_profile", seccomp_profile)

    @property
    @pulumi.getter(name="allowPrivilegeEscalation")
    def allow_privilege_escalation(self) -> Optional[pulumi.Input[bool]]:
        """
        AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no*new*privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP*SYS*ADMIN Defaults to `true`.
        """
        return pulumi.get(self, "allow_privilege_escalation")

    @allow_privilege_escalation.setter
    def allow_privilege_escalation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_privilege_escalation", value)

    @property
    @pulumi.getter
    def capabilities(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextCapabilitiesArgs']]:
        """
        The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        """
        return pulumi.get(self, "capabilities")

    @capabilities.setter
    def capabilities(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextCapabilitiesArgs']]):
        pulumi.set(self, "capabilities", value)

    @property
    @pulumi.getter
    def privileged(self) -> Optional[pulumi.Input[bool]]:
        """
        Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Defaults to `false`.
        """
        return pulumi.get(self, "privileged")

    @privileged.setter
    def privileged(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "privileged", value)

    @property
    @pulumi.getter(name="readOnlyRootFilesystem")
    def read_only_root_filesystem(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this container has a read-only root filesystem. Default is false. Defaults to `false`.
        """
        return pulumi.get(self, "read_only_root_filesystem")

    @read_only_root_filesystem.setter
    def read_only_root_filesystem(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only_root_filesystem", value)

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[pulumi.Input[str]]:
        """
        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_group")

    @run_as_group.setter
    def run_as_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_group", value)

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_non_root")

    @run_as_non_root.setter
    def run_as_non_root(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_as_non_root", value)

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[str]]:
        """
        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_user", value)

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeLinuxOptionsArgs']]:
        """
        The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "se_linux_options")

    @se_linux_options.setter
    def se_linux_options(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeLinuxOptionsArgs']]):
        pulumi.set(self, "se_linux_options", value)

    @property
    @pulumi.getter(name="seccompProfile")
    def seccomp_profile(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeccompProfileArgs']]:
        """
        The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "seccomp_profile")

    @seccomp_profile.setter
    def seccomp_profile(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeccompProfileArgs']]):
        pulumi.set(self, "seccomp_profile", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextCapabilitiesArgsDict(TypedDict):
        adds: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Added capabilities
        """
        drops: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Removed capabilities
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextCapabilitiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextCapabilitiesArgs:
    def __init__(__self__, *,
                 adds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 drops: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] adds: Added capabilities
        :param pulumi.Input[Sequence[pulumi.Input[str]]] drops: Removed capabilities
        """
        if adds is not None:
            pulumi.set(__self__, "adds", adds)
        if drops is not None:
            pulumi.set(__self__, "drops", drops)

    @property
    @pulumi.getter
    def adds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Added capabilities
        """
        return pulumi.get(self, "adds")

    @adds.setter
    def adds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "adds", value)

    @property
    @pulumi.getter
    def drops(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Removed capabilities
        """
        return pulumi.get(self, "drops")

    @drops.setter
    def drops(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "drops", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeLinuxOptionsArgsDict(TypedDict):
        level: NotRequired[pulumi.Input[str]]
        """
        Level is SELinux level label that applies to the container.
        """
        role: NotRequired[pulumi.Input[str]]
        """
        Role is a SELinux role label that applies to the container.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type is a SELinux type label that applies to the container.
        """
        user: NotRequired[pulumi.Input[str]]
        """
        User is a SELinux user label that applies to the container.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeLinuxOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeLinuxOptionsArgs:
    def __init__(__self__, *,
                 level: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] level: Level is SELinux level label that applies to the container.
        :param pulumi.Input[str] role: Role is a SELinux role label that applies to the container.
        :param pulumi.Input[str] type: Type is a SELinux type label that applies to the container.
        :param pulumi.Input[str] user: User is a SELinux user label that applies to the container.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        Level is SELinux level label that applies to the container.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role is a SELinux role label that applies to the container.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type is a SELinux type label that applies to the container.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User is a SELinux user label that applies to the container.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeccompProfileArgsDict(TypedDict):
        localhost_profile: NotRequired[pulumi.Input[str]]
        """
        Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Defaults to ``.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined. Defaults to `Unconfined`.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeccompProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeccompProfileArgs:
    def __init__(__self__, *,
                 localhost_profile: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] localhost_profile: Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Defaults to ``.
        :param pulumi.Input[str] type: Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined. Defaults to `Unconfined`.
        """
        if localhost_profile is not None:
            pulumi.set(__self__, "localhost_profile", localhost_profile)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="localhostProfile")
    def localhost_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Defaults to ``.
        """
        return pulumi.get(self, "localhost_profile")

    @localhost_profile.setter
    def localhost_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "localhost_profile", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined. Defaults to `Unconfined`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeArgsDict(TypedDict):
        exec_: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeExecArgsDict']]
        """
        exec specifies the action to take.
        """
        failure_threshold: NotRequired[pulumi.Input[int]]
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        """
        grpcs: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeGrpcArgsDict']]]]
        """
        GRPC specifies an action involving a GRPC port.
        """
        http_get: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGetArgsDict']]
        """
        Specifies the http request to perform.
        """
        initial_delay_seconds: NotRequired[pulumi.Input[int]]
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        period_seconds: NotRequired[pulumi.Input[int]]
        """
        How often (in seconds) to perform the probe Defaults to `10`.
        """
        success_threshold: NotRequired[pulumi.Input[int]]
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        """
        tcp_sockets: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeTcpSocketArgsDict']]]]
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        timeout_seconds: NotRequired[pulumi.Input[int]]
        """
        Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeExecArgs']] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 grpcs: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeGrpcArgs']]]] = None,
                 http_get: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 tcp_sockets: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeTcpSocketArgs']]]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeExecArgs'] exec_: exec specifies the action to take.
        :param pulumi.Input[int] failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeGrpcArgs']]] grpcs: GRPC specifies an action involving a GRPC port.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGetArgs'] http_get: Specifies the http request to perform.
        :param pulumi.Input[int] initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        :param pulumi.Input[int] period_seconds: How often (in seconds) to perform the probe Defaults to `10`.
        :param pulumi.Input[int] success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeTcpSocketArgs']]] tcp_sockets: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        :param pulumi.Input[int] timeout_seconds: Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if grpcs is not None:
            pulumi.set(__self__, "grpcs", grpcs)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_sockets is not None:
            pulumi.set(__self__, "tcp_sockets", tcp_sockets)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeExecArgs']]:
        """
        exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter
    def grpcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeGrpcArgs']]]]:
        """
        GRPC specifies an action involving a GRPC port.
        """
        return pulumi.get(self, "grpcs")

    @grpcs.setter
    def grpcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeGrpcArgs']]]]):
        pulumi.set(self, "grpcs", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGetArgs']]:
        """
        Specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        How often (in seconds) to perform the probe Defaults to `10`.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="tcpSockets")
    def tcp_sockets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeTcpSocketArgs']]]]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        return pulumi.get(self, "tcp_sockets")

    @tcp_sockets.setter
    def tcp_sockets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeTcpSocketArgs']]]]):
        pulumi.set(self, "tcp_sockets", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeExecArgsDict(TypedDict):
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeExecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeExecArgs:
    def __init__(__self__, *,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] commands: Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeGrpcArgsDict(TypedDict):
        port: pulumi.Input[int]
        """
        Number of the port to access on the container. Number must be in the range 1 to 65535.
        """
        service: NotRequired[pulumi.Input[str]]
        """
        Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeGrpcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeGrpcArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 service: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] port: Number of the port to access on the container. Number must be in the range 1 to 65535.
        :param pulumi.Input[str] service: Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
        pulumi.set(__self__, "port", port)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        Number of the port to access on the container. Number must be in the range 1 to 65535.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGetArgsDict(TypedDict):
        host: NotRequired[pulumi.Input[str]]
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        http_headers: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeaderArgsDict']]]]
        """
        Scheme to use for connecting to the host.
        """
        path: NotRequired[pulumi.Input[str]]
        """
        Path to access on the HTTP server.
        """
        port: NotRequired[pulumi.Input[str]]
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        scheme: NotRequired[pulumi.Input[str]]
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGetArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeaderArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeaderArgs']]] http_headers: Scheme to use for connecting to the host.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeaderArgs']]]]:
        """
        Scheme to use for connecting to the host.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeaderArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeaderArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The header field name
        """
        value: NotRequired[pulumi.Input[str]]
        """
        The header field value
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeaderArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeTcpSocketArgsDict(TypedDict):
        port: pulumi.Input[str]
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeTcpSocketArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[str]):
        """
        :param pulumi.Input[str] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[str]:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[str]):
        pulumi.set(self, "port", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerVolumeMountArgsDict(TypedDict):
        mount_path: pulumi.Input[str]
        """
        Path within the container at which the volume should be mounted. Must not contain ':'.
        """
        name: pulumi.Input[str]
        """
        This must match the Name of a Volume.
        """
        mount_propagation: NotRequired[pulumi.Input[str]]
        """
        Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional. Defaults to `None`.
        """
        read_only: NotRequired[pulumi.Input[bool]]
        """
        Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false. Defaults to `false`.
        """
        sub_path: NotRequired[pulumi.Input[str]]
        """
        Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerVolumeMountArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecInitContainerVolumeMountArgs:
    def __init__(__self__, *,
                 mount_path: pulumi.Input[str],
                 name: pulumi.Input[str],
                 mount_propagation: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 sub_path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] mount_path: Path within the container at which the volume should be mounted. Must not contain ':'.
        :param pulumi.Input[str] name: This must match the Name of a Volume.
        :param pulumi.Input[str] mount_propagation: Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional. Defaults to `None`.
        :param pulumi.Input[bool] read_only: Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false. Defaults to `false`.
        :param pulumi.Input[str] sub_path: Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        """
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> pulumi.Input[str]:
        """
        Path within the container at which the volume should be mounted. Must not contain ':'.
        """
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        This must match the Name of a Volume.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[pulumi.Input[str]]:
        """
        Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional. Defaults to `None`.
        """
        return pulumi.get(self, "mount_propagation")

    @mount_propagation.setter
    def mount_propagation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_propagation", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false. Defaults to `false`.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        """
        return pulumi.get(self, "sub_path")

    @sub_path.setter
    def sub_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecReadinessGateArgsDict(TypedDict):
        condition_type: pulumi.Input[str]
        """
        refers to a condition in the pod's condition list with matching type.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecReadinessGateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecReadinessGateArgs:
    def __init__(__self__, *,
                 condition_type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] condition_type: refers to a condition in the pod's condition list with matching type.
        """
        pulumi.set(__self__, "condition_type", condition_type)

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> pulumi.Input[str]:
        """
        refers to a condition in the pod's condition list with matching type.
        """
        return pulumi.get(self, "condition_type")

    @condition_type.setter
    def condition_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "condition_type", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextArgsDict(TypedDict):
        fs_group: NotRequired[pulumi.Input[str]]
        """
        A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- If unset, the Kubelet will not modify the ownership and permissions of any volume.
        """
        fs_group_change_policy: NotRequired[pulumi.Input[str]]
        """
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir.
        """
        run_as_group: NotRequired[pulumi.Input[str]]
        """
        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        """
        run_as_non_root: NotRequired[pulumi.Input[bool]]
        """
        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        run_as_user: NotRequired[pulumi.Input[str]]
        """
        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        """
        se_linux_options: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeLinuxOptionsArgsDict']]
        """
        The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        """
        seccomp_profile: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeccompProfileArgsDict']]
        """
        The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
        """
        supplemental_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[int]]]]
        """
        A list of groups applied to the first process run in each container, in addition to the container's primary GID. If unspecified, no groups will be added to any container.
        """
        sysctls: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSysctlArgsDict']]]]
        """
        holds a list of namespaced sysctls used for the pod.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextArgs:
    def __init__(__self__, *,
                 fs_group: Optional[pulumi.Input[str]] = None,
                 fs_group_change_policy: Optional[pulumi.Input[str]] = None,
                 run_as_group: Optional[pulumi.Input[str]] = None,
                 run_as_non_root: Optional[pulumi.Input[bool]] = None,
                 run_as_user: Optional[pulumi.Input[str]] = None,
                 se_linux_options: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeLinuxOptionsArgs']] = None,
                 seccomp_profile: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeccompProfileArgs']] = None,
                 supplemental_groups: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 sysctls: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSysctlArgs']]]] = None):
        """
        :param pulumi.Input[str] fs_group: A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- If unset, the Kubelet will not modify the ownership and permissions of any volume.
        :param pulumi.Input[str] fs_group_change_policy: fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir.
        :param pulumi.Input[str] run_as_group: The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        :param pulumi.Input[bool] run_as_non_root: Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[str] run_as_user: The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeLinuxOptionsArgs'] se_linux_options: The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeccompProfileArgs'] seccomp_profile: The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] supplemental_groups: A list of groups applied to the first process run in each container, in addition to the container's primary GID. If unspecified, no groups will be added to any container.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSysctlArgs']]] sysctls: holds a list of namespaced sysctls used for the pod.
        """
        if fs_group is not None:
            pulumi.set(__self__, "fs_group", fs_group)
        if fs_group_change_policy is not None:
            pulumi.set(__self__, "fs_group_change_policy", fs_group_change_policy)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if seccomp_profile is not None:
            pulumi.set(__self__, "seccomp_profile", seccomp_profile)
        if supplemental_groups is not None:
            pulumi.set(__self__, "supplemental_groups", supplemental_groups)
        if sysctls is not None:
            pulumi.set(__self__, "sysctls", sysctls)

    @property
    @pulumi.getter(name="fsGroup")
    def fs_group(self) -> Optional[pulumi.Input[str]]:
        """
        A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- If unset, the Kubelet will not modify the ownership and permissions of any volume.
        """
        return pulumi.get(self, "fs_group")

    @fs_group.setter
    def fs_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_group", value)

    @property
    @pulumi.getter(name="fsGroupChangePolicy")
    def fs_group_change_policy(self) -> Optional[pulumi.Input[str]]:
        """
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir.
        """
        return pulumi.get(self, "fs_group_change_policy")

    @fs_group_change_policy.setter
    def fs_group_change_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_group_change_policy", value)

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[pulumi.Input[str]]:
        """
        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        """
        return pulumi.get(self, "run_as_group")

    @run_as_group.setter
    def run_as_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_group", value)

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_non_root")

    @run_as_non_root.setter
    def run_as_non_root(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_as_non_root", value)

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[str]]:
        """
        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        """
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_user", value)

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeLinuxOptionsArgs']]:
        """
        The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        """
        return pulumi.get(self, "se_linux_options")

    @se_linux_options.setter
    def se_linux_options(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeLinuxOptionsArgs']]):
        pulumi.set(self, "se_linux_options", value)

    @property
    @pulumi.getter(name="seccompProfile")
    def seccomp_profile(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeccompProfileArgs']]:
        """
        The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "seccomp_profile")

    @seccomp_profile.setter
    def seccomp_profile(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeccompProfileArgs']]):
        pulumi.set(self, "seccomp_profile", value)

    @property
    @pulumi.getter(name="supplementalGroups")
    def supplemental_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A list of groups applied to the first process run in each container, in addition to the container's primary GID. If unspecified, no groups will be added to any container.
        """
        return pulumi.get(self, "supplemental_groups")

    @supplemental_groups.setter
    def supplemental_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "supplemental_groups", value)

    @property
    @pulumi.getter
    def sysctls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSysctlArgs']]]]:
        """
        holds a list of namespaced sysctls used for the pod.
        """
        return pulumi.get(self, "sysctls")

    @sysctls.setter
    def sysctls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSysctlArgs']]]]):
        pulumi.set(self, "sysctls", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeLinuxOptionsArgsDict(TypedDict):
        level: NotRequired[pulumi.Input[str]]
        """
        Level is SELinux level label that applies to the container.
        """
        role: NotRequired[pulumi.Input[str]]
        """
        Role is a SELinux role label that applies to the container.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type is a SELinux type label that applies to the container.
        """
        user: NotRequired[pulumi.Input[str]]
        """
        User is a SELinux user label that applies to the container.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeLinuxOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeLinuxOptionsArgs:
    def __init__(__self__, *,
                 level: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] level: Level is SELinux level label that applies to the container.
        :param pulumi.Input[str] role: Role is a SELinux role label that applies to the container.
        :param pulumi.Input[str] type: Type is a SELinux type label that applies to the container.
        :param pulumi.Input[str] user: User is a SELinux user label that applies to the container.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        Level is SELinux level label that applies to the container.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role is a SELinux role label that applies to the container.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type is a SELinux type label that applies to the container.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User is a SELinux user label that applies to the container.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeccompProfileArgsDict(TypedDict):
        localhost_profile: NotRequired[pulumi.Input[str]]
        """
        Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Defaults to ``.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined. Defaults to `Unconfined`.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeccompProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeccompProfileArgs:
    def __init__(__self__, *,
                 localhost_profile: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] localhost_profile: Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Defaults to ``.
        :param pulumi.Input[str] type: Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined. Defaults to `Unconfined`.
        """
        if localhost_profile is not None:
            pulumi.set(__self__, "localhost_profile", localhost_profile)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="localhostProfile")
    def localhost_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Defaults to ``.
        """
        return pulumi.get(self, "localhost_profile")

    @localhost_profile.setter
    def localhost_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "localhost_profile", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined. Defaults to `Unconfined`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSysctlArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of a property to set.
        """
        value: pulumi.Input[str]
        """
        Value of a property to set.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSysctlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecSecurityContextSysctlArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Name of a property to set.
        :param pulumi.Input[str] value: Value of a property to set.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of a property to set.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value of a property to set.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecTolerationArgsDict(TypedDict):
        effect: NotRequired[pulumi.Input[str]]
        """
        Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category. Defaults to `Equal`.
        """
        toleration_seconds: NotRequired[pulumi.Input[str]]
        """
        TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecTolerationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecTolerationArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 toleration_seconds: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] effect: Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        :param pulumi.Input[str] key: Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        :param pulumi.Input[str] operator: Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category. Defaults to `Equal`.
        :param pulumi.Input[str] toleration_seconds: TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
        :param pulumi.Input[str] value: Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category. Defaults to `Equal`.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[str]]:
        """
        TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
        """
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintArgsDict(TypedDict):
        label_selectors: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelectorArgsDict']]]]
        """
        A label query over a set of resources, in this case pods.
        """
        max_skew: NotRequired[pulumi.Input[int]]
        """
        describes the degree to which pods may be unevenly distributed. Defaults to `1`.
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology.
        """
        when_unsatisfiable: NotRequired[pulumi.Input[str]]
        """
        indicates how to deal with a pod if it doesn't satisfy the spread constraint. Defaults to `DoNotSchedule`.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintArgs:
    def __init__(__self__, *,
                 label_selectors: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelectorArgs']]]] = None,
                 max_skew: Optional[pulumi.Input[int]] = None,
                 topology_key: Optional[pulumi.Input[str]] = None,
                 when_unsatisfiable: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelectorArgs']]] label_selectors: A label query over a set of resources, in this case pods.
        :param pulumi.Input[int] max_skew: describes the degree to which pods may be unevenly distributed. Defaults to `1`.
        :param pulumi.Input[str] topology_key: the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology.
        :param pulumi.Input[str] when_unsatisfiable: indicates how to deal with a pod if it doesn't satisfy the spread constraint. Defaults to `DoNotSchedule`.
        """
        if label_selectors is not None:
            pulumi.set(__self__, "label_selectors", label_selectors)
        if max_skew is not None:
            pulumi.set(__self__, "max_skew", max_skew)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if when_unsatisfiable is not None:
            pulumi.set(__self__, "when_unsatisfiable", when_unsatisfiable)

    @property
    @pulumi.getter(name="labelSelectors")
    def label_selectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelectorArgs']]]]:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selectors")

    @label_selectors.setter
    def label_selectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelectorArgs']]]]):
        pulumi.set(self, "label_selectors", value)

    @property
    @pulumi.getter(name="maxSkew")
    def max_skew(self) -> Optional[pulumi.Input[int]]:
        """
        describes the degree to which pods may be unevenly distributed. Defaults to `1`.
        """
        return pulumi.get(self, "max_skew")

    @max_skew.setter
    def max_skew(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_skew", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter(name="whenUnsatisfiable")
    def when_unsatisfiable(self) -> Optional[pulumi.Input[str]]:
        """
        indicates how to deal with a pod if it doesn't satisfy the spread constraint. Defaults to `DoNotSchedule`.
        """
        return pulumi.get(self, "when_unsatisfiable")

    @when_unsatisfiable.setter
    def when_unsatisfiable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "when_unsatisfiable", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelectorArgsDict(TypedDict):
        match_expressions: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpressionArgsDict']]]]
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpressionArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpressionArgs']]] match_expressions: A list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpressionArgs']]]]:
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpressionArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpressionArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpressionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpressionArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeArgsDict(TypedDict):
        aws_elastic_block_store: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAwsElasticBlockStoreArgsDict']]
        """
        Represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        azure_disk: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureDiskArgsDict']]
        """
        Represents an Azure Data Disk mount on the host and bind mount to the pod.
        """
        azure_file: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureFileArgsDict']]
        """
        Represents an Azure File Service mount on the host and bind mount to the pod.
        """
        ceph_fs: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFsArgsDict']]
        """
        Represents a Ceph FS mount on the host that shares a pod's lifetime
        """
        cinder: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCinderArgsDict']]
        """
        Represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        config_map: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMapArgsDict']]
        """
        ConfigMap represents a configMap that should populate this volume
        """
        csi: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsiArgsDict']]
        """
        Represents a CSI Volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
        """
        downward_api: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiArgsDict']]
        """
        DownwardAPI represents downward API about the pod that should populate this volume
        """
        empty_dir: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEmptyDirArgsDict']]
        """
        EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        """
        ephemeral: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralArgsDict']]
        """
        Represents an ephemeral volume that is handled by a normal storage driver. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
        """
        fc: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFcArgsDict']]
        """
        Represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
        """
        flex_volume: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolumeArgsDict']]
        """
        Represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
        """
        flocker: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlockerArgsDict']]
        """
        Represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
        """
        gce_persistent_disk: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGcePersistentDiskArgsDict']]
        """
        Represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        git_repo: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGitRepoArgsDict']]
        """
        GitRepo represents a git repository at a particular revision.
        """
        glusterfs: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGlusterfsArgsDict']]
        """
        Represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
        """
        host_path: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeHostPathArgsDict']]
        """
        Represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        """
        iscsi: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeIscsiArgsDict']]
        """
        Represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
        """
        local: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeLocalArgsDict']]
        """
        Represents a mounted local storage device such as a disk, partition or directory. Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported yet. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        nfs: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeNfsArgsDict']]
        """
        Represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        persistent_volume_claim: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumePersistentVolumeClaimArgsDict']]
        """
        The specification of a persistent volume.
        """
        photon_persistent_disk: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumePhotonPersistentDiskArgsDict']]
        """
        Represents a PhotonController persistent disk attached and mounted on kubelets host machine
        """
        projected: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedArgsDict']]
        """
        Projected represents a single volume that projects several volume sources into the same directory. More info: https://kubernetes.io/docs/concepts/storage/volumes/#projected
        """
        quobyte: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeQuobyteArgsDict']]
        """
        Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
        """
        rbd: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbdArgsDict']]
        """
        Represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
        """
        secret: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecretArgsDict']]
        """
        Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
        """
        vsphere_volume: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeVsphereVolumeArgsDict']]
        """
        Represents a vSphere volume attached and mounted on kubelets host machine
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeArgs:
    def __init__(__self__, *,
                 aws_elastic_block_store: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAwsElasticBlockStoreArgs']] = None,
                 azure_disk: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureDiskArgs']] = None,
                 azure_file: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureFileArgs']] = None,
                 ceph_fs: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFsArgs']] = None,
                 cinder: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCinderArgs']] = None,
                 config_map: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMapArgs']] = None,
                 csi: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsiArgs']] = None,
                 downward_api: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiArgs']] = None,
                 empty_dir: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEmptyDirArgs']] = None,
                 ephemeral: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralArgs']] = None,
                 fc: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFcArgs']] = None,
                 flex_volume: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolumeArgs']] = None,
                 flocker: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlockerArgs']] = None,
                 gce_persistent_disk: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGcePersistentDiskArgs']] = None,
                 git_repo: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGitRepoArgs']] = None,
                 glusterfs: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGlusterfsArgs']] = None,
                 host_path: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeHostPathArgs']] = None,
                 iscsi: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeIscsiArgs']] = None,
                 local: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeLocalArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nfs: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeNfsArgs']] = None,
                 persistent_volume_claim: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumePersistentVolumeClaimArgs']] = None,
                 photon_persistent_disk: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumePhotonPersistentDiskArgs']] = None,
                 projected: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedArgs']] = None,
                 quobyte: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeQuobyteArgs']] = None,
                 rbd: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbdArgs']] = None,
                 secret: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecretArgs']] = None,
                 vsphere_volume: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeVsphereVolumeArgs']] = None):
        """
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAwsElasticBlockStoreArgs'] aws_elastic_block_store: Represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureDiskArgs'] azure_disk: Represents an Azure Data Disk mount on the host and bind mount to the pod.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureFileArgs'] azure_file: Represents an Azure File Service mount on the host and bind mount to the pod.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFsArgs'] ceph_fs: Represents a Ceph FS mount on the host that shares a pod's lifetime
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCinderArgs'] cinder: Represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMapArgs'] config_map: ConfigMap represents a configMap that should populate this volume
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsiArgs'] csi: Represents a CSI Volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiArgs'] downward_api: DownwardAPI represents downward API about the pod that should populate this volume
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEmptyDirArgs'] empty_dir: EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralArgs'] ephemeral: Represents an ephemeral volume that is handled by a normal storage driver. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFcArgs'] fc: Represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolumeArgs'] flex_volume: Represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlockerArgs'] flocker: Represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGcePersistentDiskArgs'] gce_persistent_disk: Represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGitRepoArgs'] git_repo: GitRepo represents a git repository at a particular revision.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGlusterfsArgs'] glusterfs: Represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeHostPathArgs'] host_path: Represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeIscsiArgs'] iscsi: Represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeLocalArgs'] local: Represents a mounted local storage device such as a disk, partition or directory. Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported yet. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
        :param pulumi.Input[str] name: Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeNfsArgs'] nfs: Represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumePersistentVolumeClaimArgs'] persistent_volume_claim: The specification of a persistent volume.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumePhotonPersistentDiskArgs'] photon_persistent_disk: Represents a PhotonController persistent disk attached and mounted on kubelets host machine
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedArgs'] projected: Projected represents a single volume that projects several volume sources into the same directory. More info: https://kubernetes.io/docs/concepts/storage/volumes/#projected
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeQuobyteArgs'] quobyte: Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbdArgs'] rbd: Represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecretArgs'] secret: Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeVsphereVolumeArgs'] vsphere_volume: Represents a vSphere volume attached and mounted on kubelets host machine
        """
        if aws_elastic_block_store is not None:
            pulumi.set(__self__, "aws_elastic_block_store", aws_elastic_block_store)
        if azure_disk is not None:
            pulumi.set(__self__, "azure_disk", azure_disk)
        if azure_file is not None:
            pulumi.set(__self__, "azure_file", azure_file)
        if ceph_fs is not None:
            pulumi.set(__self__, "ceph_fs", ceph_fs)
        if cinder is not None:
            pulumi.set(__self__, "cinder", cinder)
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if csi is not None:
            pulumi.set(__self__, "csi", csi)
        if downward_api is not None:
            pulumi.set(__self__, "downward_api", downward_api)
        if empty_dir is not None:
            pulumi.set(__self__, "empty_dir", empty_dir)
        if ephemeral is not None:
            pulumi.set(__self__, "ephemeral", ephemeral)
        if fc is not None:
            pulumi.set(__self__, "fc", fc)
        if flex_volume is not None:
            pulumi.set(__self__, "flex_volume", flex_volume)
        if flocker is not None:
            pulumi.set(__self__, "flocker", flocker)
        if gce_persistent_disk is not None:
            pulumi.set(__self__, "gce_persistent_disk", gce_persistent_disk)
        if git_repo is not None:
            pulumi.set(__self__, "git_repo", git_repo)
        if glusterfs is not None:
            pulumi.set(__self__, "glusterfs", glusterfs)
        if host_path is not None:
            pulumi.set(__self__, "host_path", host_path)
        if iscsi is not None:
            pulumi.set(__self__, "iscsi", iscsi)
        if local is not None:
            pulumi.set(__self__, "local", local)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nfs is not None:
            pulumi.set(__self__, "nfs", nfs)
        if persistent_volume_claim is not None:
            pulumi.set(__self__, "persistent_volume_claim", persistent_volume_claim)
        if photon_persistent_disk is not None:
            pulumi.set(__self__, "photon_persistent_disk", photon_persistent_disk)
        if projected is not None:
            pulumi.set(__self__, "projected", projected)
        if quobyte is not None:
            pulumi.set(__self__, "quobyte", quobyte)
        if rbd is not None:
            pulumi.set(__self__, "rbd", rbd)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if vsphere_volume is not None:
            pulumi.set(__self__, "vsphere_volume", vsphere_volume)

    @property
    @pulumi.getter(name="awsElasticBlockStore")
    def aws_elastic_block_store(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAwsElasticBlockStoreArgs']]:
        """
        Represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        return pulumi.get(self, "aws_elastic_block_store")

    @aws_elastic_block_store.setter
    def aws_elastic_block_store(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAwsElasticBlockStoreArgs']]):
        pulumi.set(self, "aws_elastic_block_store", value)

    @property
    @pulumi.getter(name="azureDisk")
    def azure_disk(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureDiskArgs']]:
        """
        Represents an Azure Data Disk mount on the host and bind mount to the pod.
        """
        return pulumi.get(self, "azure_disk")

    @azure_disk.setter
    def azure_disk(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureDiskArgs']]):
        pulumi.set(self, "azure_disk", value)

    @property
    @pulumi.getter(name="azureFile")
    def azure_file(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureFileArgs']]:
        """
        Represents an Azure File Service mount on the host and bind mount to the pod.
        """
        return pulumi.get(self, "azure_file")

    @azure_file.setter
    def azure_file(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureFileArgs']]):
        pulumi.set(self, "azure_file", value)

    @property
    @pulumi.getter(name="cephFs")
    def ceph_fs(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFsArgs']]:
        """
        Represents a Ceph FS mount on the host that shares a pod's lifetime
        """
        return pulumi.get(self, "ceph_fs")

    @ceph_fs.setter
    def ceph_fs(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFsArgs']]):
        pulumi.set(self, "ceph_fs", value)

    @property
    @pulumi.getter
    def cinder(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCinderArgs']]:
        """
        Represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        return pulumi.get(self, "cinder")

    @cinder.setter
    def cinder(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCinderArgs']]):
        pulumi.set(self, "cinder", value)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMapArgs']]:
        """
        ConfigMap represents a configMap that should populate this volume
        """
        return pulumi.get(self, "config_map")

    @config_map.setter
    def config_map(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMapArgs']]):
        pulumi.set(self, "config_map", value)

    @property
    @pulumi.getter
    def csi(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsiArgs']]:
        """
        Represents a CSI Volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
        """
        return pulumi.get(self, "csi")

    @csi.setter
    def csi(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsiArgs']]):
        pulumi.set(self, "csi", value)

    @property
    @pulumi.getter(name="downwardApi")
    def downward_api(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiArgs']]:
        """
        DownwardAPI represents downward API about the pod that should populate this volume
        """
        return pulumi.get(self, "downward_api")

    @downward_api.setter
    def downward_api(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiArgs']]):
        pulumi.set(self, "downward_api", value)

    @property
    @pulumi.getter(name="emptyDir")
    def empty_dir(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEmptyDirArgs']]:
        """
        EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        """
        return pulumi.get(self, "empty_dir")

    @empty_dir.setter
    def empty_dir(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEmptyDirArgs']]):
        pulumi.set(self, "empty_dir", value)

    @property
    @pulumi.getter
    def ephemeral(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralArgs']]:
        """
        Represents an ephemeral volume that is handled by a normal storage driver. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
        """
        return pulumi.get(self, "ephemeral")

    @ephemeral.setter
    def ephemeral(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralArgs']]):
        pulumi.set(self, "ephemeral", value)

    @property
    @pulumi.getter
    def fc(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFcArgs']]:
        """
        Represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
        """
        return pulumi.get(self, "fc")

    @fc.setter
    def fc(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFcArgs']]):
        pulumi.set(self, "fc", value)

    @property
    @pulumi.getter(name="flexVolume")
    def flex_volume(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolumeArgs']]:
        """
        Represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
        """
        return pulumi.get(self, "flex_volume")

    @flex_volume.setter
    def flex_volume(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolumeArgs']]):
        pulumi.set(self, "flex_volume", value)

    @property
    @pulumi.getter
    def flocker(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlockerArgs']]:
        """
        Represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
        """
        return pulumi.get(self, "flocker")

    @flocker.setter
    def flocker(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlockerArgs']]):
        pulumi.set(self, "flocker", value)

    @property
    @pulumi.getter(name="gcePersistentDisk")
    def gce_persistent_disk(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGcePersistentDiskArgs']]:
        """
        Represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        return pulumi.get(self, "gce_persistent_disk")

    @gce_persistent_disk.setter
    def gce_persistent_disk(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGcePersistentDiskArgs']]):
        pulumi.set(self, "gce_persistent_disk", value)

    @property
    @pulumi.getter(name="gitRepo")
    def git_repo(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGitRepoArgs']]:
        """
        GitRepo represents a git repository at a particular revision.
        """
        return pulumi.get(self, "git_repo")

    @git_repo.setter
    def git_repo(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGitRepoArgs']]):
        pulumi.set(self, "git_repo", value)

    @property
    @pulumi.getter
    def glusterfs(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGlusterfsArgs']]:
        """
        Represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
        """
        return pulumi.get(self, "glusterfs")

    @glusterfs.setter
    def glusterfs(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGlusterfsArgs']]):
        pulumi.set(self, "glusterfs", value)

    @property
    @pulumi.getter(name="hostPath")
    def host_path(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeHostPathArgs']]:
        """
        Represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        """
        return pulumi.get(self, "host_path")

    @host_path.setter
    def host_path(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeHostPathArgs']]):
        pulumi.set(self, "host_path", value)

    @property
    @pulumi.getter
    def iscsi(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeIscsiArgs']]:
        """
        Represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
        """
        return pulumi.get(self, "iscsi")

    @iscsi.setter
    def iscsi(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeIscsiArgs']]):
        pulumi.set(self, "iscsi", value)

    @property
    @pulumi.getter
    def local(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeLocalArgs']]:
        """
        Represents a mounted local storage device such as a disk, partition or directory. Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported yet. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
        """
        return pulumi.get(self, "local")

    @local.setter
    def local(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeLocalArgs']]):
        pulumi.set(self, "local", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nfs(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeNfsArgs']]:
        """
        Represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        return pulumi.get(self, "nfs")

    @nfs.setter
    def nfs(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeNfsArgs']]):
        pulumi.set(self, "nfs", value)

    @property
    @pulumi.getter(name="persistentVolumeClaim")
    def persistent_volume_claim(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumePersistentVolumeClaimArgs']]:
        """
        The specification of a persistent volume.
        """
        return pulumi.get(self, "persistent_volume_claim")

    @persistent_volume_claim.setter
    def persistent_volume_claim(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumePersistentVolumeClaimArgs']]):
        pulumi.set(self, "persistent_volume_claim", value)

    @property
    @pulumi.getter(name="photonPersistentDisk")
    def photon_persistent_disk(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumePhotonPersistentDiskArgs']]:
        """
        Represents a PhotonController persistent disk attached and mounted on kubelets host machine
        """
        return pulumi.get(self, "photon_persistent_disk")

    @photon_persistent_disk.setter
    def photon_persistent_disk(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumePhotonPersistentDiskArgs']]):
        pulumi.set(self, "photon_persistent_disk", value)

    @property
    @pulumi.getter
    def projected(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedArgs']]:
        """
        Projected represents a single volume that projects several volume sources into the same directory. More info: https://kubernetes.io/docs/concepts/storage/volumes/#projected
        """
        return pulumi.get(self, "projected")

    @projected.setter
    def projected(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedArgs']]):
        pulumi.set(self, "projected", value)

    @property
    @pulumi.getter
    def quobyte(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeQuobyteArgs']]:
        """
        Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
        """
        return pulumi.get(self, "quobyte")

    @quobyte.setter
    def quobyte(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeQuobyteArgs']]):
        pulumi.set(self, "quobyte", value)

    @property
    @pulumi.getter
    def rbd(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbdArgs']]:
        """
        Represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
        """
        return pulumi.get(self, "rbd")

    @rbd.setter
    def rbd(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbdArgs']]):
        pulumi.set(self, "rbd", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecretArgs']]:
        """
        Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecretArgs']]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="vsphereVolume")
    def vsphere_volume(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeVsphereVolumeArgs']]:
        """
        Represents a vSphere volume attached and mounted on kubelets host machine
        """
        return pulumi.get(self, "vsphere_volume")

    @vsphere_volume.setter
    def vsphere_volume(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeVsphereVolumeArgs']]):
        pulumi.set(self, "vsphere_volume", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAwsElasticBlockStoreArgsDict(TypedDict):
        volume_id: pulumi.Input[str]
        """
        Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        fs_type: NotRequired[pulumi.Input[str]]
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        partition: NotRequired[pulumi.Input[int]]
        """
        The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
        """
        read_only: NotRequired[pulumi.Input[bool]]
        """
        Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAwsElasticBlockStoreArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAwsElasticBlockStoreArgs:
    def __init__(__self__, *,
                 volume_id: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 partition: Optional[pulumi.Input[int]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] volume_id: Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        :param pulumi.Input[str] fs_type: Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        :param pulumi.Input[int] partition: The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
        :param pulumi.Input[bool] read_only: Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Input[str]:
        """
        Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume_id", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def partition(self) -> Optional[pulumi.Input[int]]:
        """
        The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
        """
        return pulumi.get(self, "partition")

    @partition.setter
    def partition(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "partition", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureDiskArgsDict(TypedDict):
        caching_mode: pulumi.Input[str]
        """
        Host Caching mode: None, Read Only, Read Write.
        """
        data_disk_uri: pulumi.Input[str]
        """
        The URI the data disk in the blob storage
        """
        disk_name: pulumi.Input[str]
        """
        The Name of the data disk in the blob storage
        """
        fs_type: NotRequired[pulumi.Input[str]]
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        The type for the data disk. Expected values: Shared, Dedicated, Managed. Defaults to Shared
        """
        read_only: NotRequired[pulumi.Input[bool]]
        """
        Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). Defaults to `false`.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureDiskArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureDiskArgs:
    def __init__(__self__, *,
                 caching_mode: pulumi.Input[str],
                 data_disk_uri: pulumi.Input[str],
                 disk_name: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] caching_mode: Host Caching mode: None, Read Only, Read Write.
        :param pulumi.Input[str] data_disk_uri: The URI the data disk in the blob storage
        :param pulumi.Input[str] disk_name: The Name of the data disk in the blob storage
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        :param pulumi.Input[str] kind: The type for the data disk. Expected values: Shared, Dedicated, Managed. Defaults to Shared
        :param pulumi.Input[bool] read_only: Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). Defaults to `false`.
        """
        pulumi.set(__self__, "caching_mode", caching_mode)
        pulumi.set(__self__, "data_disk_uri", data_disk_uri)
        pulumi.set(__self__, "disk_name", disk_name)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="cachingMode")
    def caching_mode(self) -> pulumi.Input[str]:
        """
        Host Caching mode: None, Read Only, Read Write.
        """
        return pulumi.get(self, "caching_mode")

    @caching_mode.setter
    def caching_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "caching_mode", value)

    @property
    @pulumi.getter(name="dataDiskUri")
    def data_disk_uri(self) -> pulumi.Input[str]:
        """
        The URI the data disk in the blob storage
        """
        return pulumi.get(self, "data_disk_uri")

    @data_disk_uri.setter
    def data_disk_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_disk_uri", value)

    @property
    @pulumi.getter(name="diskName")
    def disk_name(self) -> pulumi.Input[str]:
        """
        The Name of the data disk in the blob storage
        """
        return pulumi.get(self, "disk_name")

    @disk_name.setter
    def disk_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_name", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        The type for the data disk. Expected values: Shared, Dedicated, Managed. Defaults to Shared
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). Defaults to `false`.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureFileArgsDict(TypedDict):
        secret_name: pulumi.Input[str]
        """
        The name of secret that contains Azure Storage Account Name and Key
        """
        share_name: pulumi.Input[str]
        """
        Share Name
        """
        read_only: NotRequired[pulumi.Input[bool]]
        """
        Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
        """
        secret_namespace: NotRequired[pulumi.Input[str]]
        """
        The namespace of the secret that contains Azure Storage Account Name and Key. For Kubernetes up to 1.18.x the default is the same as the Pod. For Kubernetes 1.19.x and later the default is "default" namespace.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureFileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeAzureFileArgs:
    def __init__(__self__, *,
                 secret_name: pulumi.Input[str],
                 share_name: pulumi.Input[str],
                 read_only: Optional[pulumi.Input[bool]] = None,
                 secret_namespace: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] secret_name: The name of secret that contains Azure Storage Account Name and Key
        :param pulumi.Input[str] share_name: Share Name
        :param pulumi.Input[bool] read_only: Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
        :param pulumi.Input[str] secret_namespace: The namespace of the secret that contains Azure Storage Account Name and Key. For Kubernetes up to 1.18.x the default is the same as the Pod. For Kubernetes 1.19.x and later the default is "default" namespace.
        """
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "share_name", share_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_namespace is not None:
            pulumi.set(__self__, "secret_namespace", secret_namespace)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        The name of secret that contains Azure Storage Account Name and Key
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter(name="shareName")
    def share_name(self) -> pulumi.Input[str]:
        """
        Share Name
        """
        return pulumi.get(self, "share_name")

    @share_name.setter
    def share_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "share_name", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="secretNamespace")
    def secret_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The namespace of the secret that contains Azure Storage Account Name and Key. For Kubernetes up to 1.18.x the default is the same as the Pod. For Kubernetes 1.19.x and later the default is "default" namespace.
        """
        return pulumi.get(self, "secret_namespace")

    @secret_namespace.setter
    def secret_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_namespace", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFsArgsDict(TypedDict):
        monitors: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        Monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        path: NotRequired[pulumi.Input[str]]
        """
        Used as the mounted root, rather than the full Ceph tree, default is /
        """
        read_only: NotRequired[pulumi.Input[bool]]
        """
        Whether to force the read-only setting in VolumeMounts. Defaults to `false` (read/write). More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        secret_file: NotRequired[pulumi.Input[str]]
        """
        The path to key ring for User, default is `/etc/ceph/user.secret`. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        secret_ref: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFsSecretRefArgsDict']]
        """
        Reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        user: NotRequired[pulumi.Input[str]]
        """
        User is the rados user name, default is admin. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFsArgs:
    def __init__(__self__, *,
                 monitors: pulumi.Input[Sequence[pulumi.Input[str]]],
                 path: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 secret_file: Optional[pulumi.Input[str]] = None,
                 secret_ref: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFsSecretRefArgs']] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] monitors: Monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input[str] path: Used as the mounted root, rather than the full Ceph tree, default is /
        :param pulumi.Input[bool] read_only: Whether to force the read-only setting in VolumeMounts. Defaults to `false` (read/write). More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input[str] secret_file: The path to key ring for User, default is `/etc/ceph/user.secret`. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFsSecretRefArgs'] secret_ref: Reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input[str] user: User is the rados user name, default is admin. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        pulumi.set(__self__, "monitors", monitors)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_file is not None:
            pulumi.set(__self__, "secret_file", secret_file)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def monitors(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "monitors")

    @monitors.setter
    def monitors(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "monitors", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Used as the mounted root, rather than the full Ceph tree, default is /
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force the read-only setting in VolumeMounts. Defaults to `false` (read/write). More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="secretFile")
    def secret_file(self) -> Optional[pulumi.Input[str]]:
        """
        The path to key ring for User, default is `/etc/ceph/user.secret`. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "secret_file")

    @secret_file.setter
    def secret_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_file", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFsSecretRefArgs']]:
        """
        Reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFsSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User is the rados user name, default is admin. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFsSecretRefArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        namespace: NotRequired[pulumi.Input[str]]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFsSecretRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCephFsSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] namespace: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCinderArgsDict(TypedDict):
        volume_id: pulumi.Input[str]
        """
        Volume ID used to identify the volume in Cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        fs_type: NotRequired[pulumi.Input[str]]
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        read_only: NotRequired[pulumi.Input[bool]]
        """
        Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCinderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCinderArgs:
    def __init__(__self__, *,
                 volume_id: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] volume_id: Volume ID used to identify the volume in Cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param pulumi.Input[bool] read_only: Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Input[str]:
        """
        Volume ID used to identify the volume in Cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume_id", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMapArgsDict(TypedDict):
        default_mode: NotRequired[pulumi.Input[str]]
        """
        Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Defaults to `0644`.
        """
        items: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMapItemArgsDict']]]]
        """
        If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        optional: NotRequired[pulumi.Input[bool]]
        """
        Optional: Specify whether the ConfigMap or its keys must be defined.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMapArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMapArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[str]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMapItemArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] default_mode: Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Defaults to `0644`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMapItemArgs']]] items: If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[bool] optional: Optional: Specify whether the ConfigMap or its keys must be defined.
        """
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Defaults to `0644`.
        """
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMapItemArgs']]]]:
        """
        If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMapItemArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional: Specify whether the ConfigMap or its keys must be defined.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMapItemArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        The key to project.
        """
        mode: NotRequired[pulumi.Input[str]]
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        path: NotRequired[pulumi.Input[str]]
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMapItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMapItemArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: The key to project.
        :param pulumi.Input[str] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input[str] path: The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key to project.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsiArgsDict(TypedDict):
        driver: pulumi.Input[str]
        """
        the name of the volume driver to use. More info: https://kubernetes.io/docs/concepts/storage/volumes/#csi
        """
        fs_type: NotRequired[pulumi.Input[str]]
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        node_publish_secret_ref: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsiNodePublishSecretRefArgsDict']]
        """
        A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls.
        """
        read_only: NotRequired[pulumi.Input[bool]]
        """
        Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
        """
        volume_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Attributes of the volume to publish.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsiArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsiArgs:
    def __init__(__self__, *,
                 driver: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 node_publish_secret_ref: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsiNodePublishSecretRefArgs']] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 volume_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] driver: the name of the volume driver to use. More info: https://kubernetes.io/docs/concepts/storage/volumes/#csi
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsiNodePublishSecretRefArgs'] node_publish_secret_ref: A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls.
        :param pulumi.Input[bool] read_only: Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] volume_attributes: Attributes of the volume to publish.
        """
        pulumi.set(__self__, "driver", driver)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if node_publish_secret_ref is not None:
            pulumi.set(__self__, "node_publish_secret_ref", node_publish_secret_ref)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if volume_attributes is not None:
            pulumi.set(__self__, "volume_attributes", volume_attributes)

    @property
    @pulumi.getter
    def driver(self) -> pulumi.Input[str]:
        """
        the name of the volume driver to use. More info: https://kubernetes.io/docs/concepts/storage/volumes/#csi
        """
        return pulumi.get(self, "driver")

    @driver.setter
    def driver(self, value: pulumi.Input[str]):
        pulumi.set(self, "driver", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="nodePublishSecretRef")
    def node_publish_secret_ref(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsiNodePublishSecretRefArgs']]:
        """
        A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls.
        """
        return pulumi.get(self, "node_publish_secret_ref")

    @node_publish_secret_ref.setter
    def node_publish_secret_ref(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsiNodePublishSecretRefArgs']]):
        pulumi.set(self, "node_publish_secret_ref", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="volumeAttributes")
    def volume_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Attributes of the volume to publish.
        """
        return pulumi.get(self, "volume_attributes")

    @volume_attributes.setter
    def volume_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "volume_attributes", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsiNodePublishSecretRefArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsiNodePublishSecretRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeCsiNodePublishSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiArgsDict(TypedDict):
        default_mode: NotRequired[pulumi.Input[str]]
        """
        Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Defaults to `0644`.
        """
        items: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemArgsDict']]]]
        """
        If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[str]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemArgs']]]] = None):
        """
        :param pulumi.Input[str] default_mode: Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Defaults to `0644`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemArgs']]] items: If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Defaults to `0644`.
        """
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemArgs']]]]:
        """
        If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemArgs']]]]):
        pulumi.set(self, "items", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemArgsDict(TypedDict):
        field_ref: pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemFieldRefArgsDict']
        """
        Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        """
        path: pulumi.Input[str]
        """
        Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        """
        mode: NotRequired[pulumi.Input[str]]
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        resource_field_ref: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemResourceFieldRefArgsDict']]
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemArgs:
    def __init__(__self__, *,
                 field_ref: pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemFieldRefArgs'],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[str]] = None,
                 resource_field_ref: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemResourceFieldRefArgs']] = None):
        """
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemFieldRefArgs'] field_ref: Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        :param pulumi.Input[str] path: Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        :param pulumi.Input[str] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        """
        pulumi.set(__self__, "field_ref", field_ref)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemFieldRefArgs']:
        """
        Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemFieldRefArgs']):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemFieldRefArgsDict(TypedDict):
        api_version: NotRequired[pulumi.Input[str]]
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1". Defaults to `v1`.
        """
        field_path: NotRequired[pulumi.Input[str]]
        """
        Path of the field to select in the specified API version
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemFieldRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemFieldRefArgs:
    def __init__(__self__, *,
                 api_version: Optional[pulumi.Input[str]] = None,
                 field_path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1". Defaults to `v1`.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if field_path is not None:
            pulumi.set(__self__, "field_path", field_path)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1". Defaults to `v1`.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path of the field to select in the specified API version
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_path", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemResourceFieldRefArgsDict(TypedDict):
        container_name: pulumi.Input[str]
        resource: pulumi.Input[str]
        """
        Resource to select
        """
        divisor: NotRequired[pulumi.Input[str]]
        """
        Defaults to `1`.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemResourceFieldRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemResourceFieldRefArgs:
    def __init__(__self__, *,
                 container_name: pulumi.Input[str],
                 resource: pulumi.Input[str],
                 divisor: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] resource: Resource to select
        :param pulumi.Input[str] divisor: Defaults to `1`.
        """
        pulumi.set(__self__, "container_name", container_name)
        pulumi.set(__self__, "resource", resource)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `1`.
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "divisor", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEmptyDirArgsDict(TypedDict):
        medium: NotRequired[pulumi.Input[str]]
        """
        What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir Defaults to ``.
        """
        size_limit: NotRequired[pulumi.Input[str]]
        """
        Total amount of local storage required for this EmptyDir volume.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEmptyDirArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEmptyDirArgs:
    def __init__(__self__, *,
                 medium: Optional[pulumi.Input[str]] = None,
                 size_limit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] medium: What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir Defaults to ``.
        :param pulumi.Input[str] size_limit: Total amount of local storage required for this EmptyDir volume.
        """
        if medium is not None:
            pulumi.set(__self__, "medium", medium)
        if size_limit is not None:
            pulumi.set(__self__, "size_limit", size_limit)

    @property
    @pulumi.getter
    def medium(self) -> Optional[pulumi.Input[str]]:
        """
        What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir Defaults to ``.
        """
        return pulumi.get(self, "medium")

    @medium.setter
    def medium(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "medium", value)

    @property
    @pulumi.getter(name="sizeLimit")
    def size_limit(self) -> Optional[pulumi.Input[str]]:
        """
        Total amount of local storage required for this EmptyDir volume.
        """
        return pulumi.get(self, "size_limit")

    @size_limit.setter
    def size_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size_limit", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralArgsDict(TypedDict):
        volume_claim_template: pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateArgsDict']
        """
        Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralArgs:
    def __init__(__self__, *,
                 volume_claim_template: pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateArgs']):
        """
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateArgs'] volume_claim_template: Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC.
        """
        pulumi.set(__self__, "volume_claim_template", volume_claim_template)

    @property
    @pulumi.getter(name="volumeClaimTemplate")
    def volume_claim_template(self) -> pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateArgs']:
        """
        Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC.
        """
        return pulumi.get(self, "volume_claim_template")

    @volume_claim_template.setter
    def volume_claim_template(self, value: pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateArgs']):
        pulumi.set(self, "volume_claim_template", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateArgsDict(TypedDict):
        spec: pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecArgsDict']
        """
        The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
        """
        metadata: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadataArgsDict']]
        """
        May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateArgs:
    def __init__(__self__, *,
                 spec: pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecArgs'],
                 metadata: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadataArgs']] = None):
        """
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecArgs'] spec: The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadataArgs'] metadata: May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
        """
        pulumi.set(__self__, "spec", spec)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecArgs']:
        """
        The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecArgs']):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadataArgs']]:
        """
        May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadataArgs']]):
        pulumi.set(self, "metadata", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadataArgsDict(TypedDict):
        annotations: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        An unstructured key value map stored with the persistent volume claim that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
        """
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the persistent volume claim. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: An unstructured key value map stored with the persistent volume claim that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the persistent volume claim. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        An unstructured key value map stored with the persistent volume claim that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the persistent volume claim. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecArgsDict(TypedDict):
        access_modes: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        A set of the desired access modes the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#access-modes-1
        """
        resources: pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResourcesArgsDict']
        """
        A list of the minimum resources the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#resources
        """
        storage_class_name: NotRequired[pulumi.Input[str]]
        """
        Name of the storage class requested by the claim
        """
        volume_mode: NotRequired[pulumi.Input[str]]
        """
        Kubernetes supports two volumeModes of PersistentVolumes: `Filesystem` and `Block`.
        """
        volume_name: NotRequired[pulumi.Input[str]]
        """
        The binding reference to the PersistentVolume backing this claim.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecArgs:
    def __init__(__self__, *,
                 access_modes: pulumi.Input[Sequence[pulumi.Input[str]]],
                 resources: pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResourcesArgs'],
                 storage_class_name: Optional[pulumi.Input[str]] = None,
                 volume_mode: Optional[pulumi.Input[str]] = None,
                 volume_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] access_modes: A set of the desired access modes the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#access-modes-1
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResourcesArgs'] resources: A list of the minimum resources the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#resources
        :param pulumi.Input[str] storage_class_name: Name of the storage class requested by the claim
        :param pulumi.Input[str] volume_mode: Kubernetes supports two volumeModes of PersistentVolumes: `Filesystem` and `Block`.
        :param pulumi.Input[str] volume_name: The binding reference to the PersistentVolume backing this claim.
        """
        pulumi.set(__self__, "access_modes", access_modes)
        pulumi.set(__self__, "resources", resources)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)
        if volume_mode is not None:
            pulumi.set(__self__, "volume_mode", volume_mode)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)

    @property
    @pulumi.getter(name="accessModes")
    def access_modes(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A set of the desired access modes the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#access-modes-1
        """
        return pulumi.get(self, "access_modes")

    @access_modes.setter
    def access_modes(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "access_modes", value)

    @property
    @pulumi.getter
    def resources(self) -> pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResourcesArgs']:
        """
        A list of the minimum resources the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#resources
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResourcesArgs']):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the storage class requested by the claim
        """
        return pulumi.get(self, "storage_class_name")

    @storage_class_name.setter
    def storage_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_class_name", value)

    @property
    @pulumi.getter(name="volumeMode")
    def volume_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Kubernetes supports two volumeModes of PersistentVolumes: `Filesystem` and `Block`.
        """
        return pulumi.get(self, "volume_mode")

    @volume_mode.setter
    def volume_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_mode", value)

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[pulumi.Input[str]]:
        """
        The binding reference to the PersistentVolume backing this claim.
        """
        return pulumi.get(self, "volume_name")

    @volume_name.setter
    def volume_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_name", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResourcesArgsDict(TypedDict):
        limits: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map describing the maximum amount of compute resources allowed. More info: http://kubernetes.io/docs/user-guide/compute-resources/
        """
        requests: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map describing the minimum amount of compute resources required. If this is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. More info: http://kubernetes.io/docs/user-guide/compute-resources/
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResourcesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] limits: Map describing the maximum amount of compute resources allowed. More info: http://kubernetes.io/docs/user-guide/compute-resources/
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] requests: Map describing the minimum amount of compute resources required. If this is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. More info: http://kubernetes.io/docs/user-guide/compute-resources/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map describing the maximum amount of compute resources allowed. More info: http://kubernetes.io/docs/user-guide/compute-resources/
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map describing the minimum amount of compute resources required. If this is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. More info: http://kubernetes.io/docs/user-guide/compute-resources/
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "requests", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFcArgsDict(TypedDict):
        lun: pulumi.Input[int]
        """
        FC target lun number
        """
        target_ww_ns: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        FC target worldwide names (WWNs)
        """
        fs_type: NotRequired[pulumi.Input[str]]
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        read_only: NotRequired[pulumi.Input[bool]]
        """
        Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFcArgs:
    def __init__(__self__, *,
                 lun: pulumi.Input[int],
                 target_ww_ns: pulumi.Input[Sequence[pulumi.Input[str]]],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[int] lun: FC target lun number
        :param pulumi.Input[Sequence[pulumi.Input[str]]] target_ww_ns: FC target worldwide names (WWNs)
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        :param pulumi.Input[bool] read_only: Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
        """
        pulumi.set(__self__, "lun", lun)
        pulumi.set(__self__, "target_ww_ns", target_ww_ns)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def lun(self) -> pulumi.Input[int]:
        """
        FC target lun number
        """
        return pulumi.get(self, "lun")

    @lun.setter
    def lun(self, value: pulumi.Input[int]):
        pulumi.set(self, "lun", value)

    @property
    @pulumi.getter(name="targetWwNs")
    def target_ww_ns(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        FC target worldwide names (WWNs)
        """
        return pulumi.get(self, "target_ww_ns")

    @target_ww_ns.setter
    def target_ww_ns(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "target_ww_ns", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolumeArgsDict(TypedDict):
        driver: pulumi.Input[str]
        """
        Driver is the name of the driver to use for this volume.
        """
        fs_type: NotRequired[pulumi.Input[str]]
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
        """
        options: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Extra command options if any.
        """
        read_only: NotRequired[pulumi.Input[bool]]
        """
        Whether to force the ReadOnly setting in VolumeMounts. Defaults to false (read/write).
        """
        secret_ref: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolumeSecretRefArgsDict']]
        """
        Reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolumeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolumeArgs:
    def __init__(__self__, *,
                 driver: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 secret_ref: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolumeSecretRefArgs']] = None):
        """
        :param pulumi.Input[str] driver: Driver is the name of the driver to use for this volume.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] options: Extra command options if any.
        :param pulumi.Input[bool] read_only: Whether to force the ReadOnly setting in VolumeMounts. Defaults to false (read/write).
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolumeSecretRefArgs'] secret_ref: Reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
        """
        pulumi.set(__self__, "driver", driver)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def driver(self) -> pulumi.Input[str]:
        """
        Driver is the name of the driver to use for this volume.
        """
        return pulumi.get(self, "driver")

    @driver.setter
    def driver(self, value: pulumi.Input[str]):
        pulumi.set(self, "driver", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Extra command options if any.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force the ReadOnly setting in VolumeMounts. Defaults to false (read/write).
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolumeSecretRefArgs']]:
        """
        Reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolumeSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolumeSecretRefArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        namespace: NotRequired[pulumi.Input[str]]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolumeSecretRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolumeSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] namespace: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlockerArgsDict(TypedDict):
        dataset_name: NotRequired[pulumi.Input[str]]
        """
        Name of the dataset stored as metadata > name on the dataset for Flocker should be considered as deprecated
        """
        dataset_uuid: NotRequired[pulumi.Input[str]]
        """
        UUID of the dataset. This is unique identifier of a Flocker dataset
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlockerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeFlockerArgs:
    def __init__(__self__, *,
                 dataset_name: Optional[pulumi.Input[str]] = None,
                 dataset_uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] dataset_name: Name of the dataset stored as metadata > name on the dataset for Flocker should be considered as deprecated
        :param pulumi.Input[str] dataset_uuid: UUID of the dataset. This is unique identifier of a Flocker dataset
        """
        if dataset_name is not None:
            pulumi.set(__self__, "dataset_name", dataset_name)
        if dataset_uuid is not None:
            pulumi.set(__self__, "dataset_uuid", dataset_uuid)

    @property
    @pulumi.getter(name="datasetName")
    def dataset_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the dataset stored as metadata > name on the dataset for Flocker should be considered as deprecated
        """
        return pulumi.get(self, "dataset_name")

    @dataset_name.setter
    def dataset_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset_name", value)

    @property
    @pulumi.getter(name="datasetUuid")
    def dataset_uuid(self) -> Optional[pulumi.Input[str]]:
        """
        UUID of the dataset. This is unique identifier of a Flocker dataset
        """
        return pulumi.get(self, "dataset_uuid")

    @dataset_uuid.setter
    def dataset_uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset_uuid", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGcePersistentDiskArgsDict(TypedDict):
        pd_name: pulumi.Input[str]
        """
        Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        fs_type: NotRequired[pulumi.Input[str]]
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        partition: NotRequired[pulumi.Input[int]]
        """
        The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        read_only: NotRequired[pulumi.Input[bool]]
        """
        Whether to force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGcePersistentDiskArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGcePersistentDiskArgs:
    def __init__(__self__, *,
                 pd_name: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 partition: Optional[pulumi.Input[int]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] pd_name: Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        :param pulumi.Input[str] fs_type: Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        :param pulumi.Input[int] partition: The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        :param pulumi.Input[bool] read_only: Whether to force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        pulumi.set(__self__, "pd_name", pd_name)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="pdName")
    def pd_name(self) -> pulumi.Input[str]:
        """
        Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        return pulumi.get(self, "pd_name")

    @pd_name.setter
    def pd_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "pd_name", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def partition(self) -> Optional[pulumi.Input[int]]:
        """
        The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        return pulumi.get(self, "partition")

    @partition.setter
    def partition(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "partition", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGitRepoArgsDict(TypedDict):
        directory: NotRequired[pulumi.Input[str]]
        """
        Target directory name. Must not contain or start with '..'. If '.' is supplied, the volume directory will be the git repository. Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
        """
        repository: NotRequired[pulumi.Input[str]]
        """
        Repository URL
        """
        revision: NotRequired[pulumi.Input[str]]
        """
        Commit hash for the specified revision.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGitRepoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGitRepoArgs:
    def __init__(__self__, *,
                 directory: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 revision: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] directory: Target directory name. Must not contain or start with '..'. If '.' is supplied, the volume directory will be the git repository. Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
        :param pulumi.Input[str] repository: Repository URL
        :param pulumi.Input[str] revision: Commit hash for the specified revision.
        """
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)

    @property
    @pulumi.getter
    def directory(self) -> Optional[pulumi.Input[str]]:
        """
        Target directory name. Must not contain or start with '..'. If '.' is supplied, the volume directory will be the git repository. Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
        """
        return pulumi.get(self, "directory")

    @directory.setter
    def directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "directory", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        Repository URL
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter
    def revision(self) -> Optional[pulumi.Input[str]]:
        """
        Commit hash for the specified revision.
        """
        return pulumi.get(self, "revision")

    @revision.setter
    def revision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revision", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGlusterfsArgsDict(TypedDict):
        endpoints_name: pulumi.Input[str]
        """
        The endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
        path: pulumi.Input[str]
        """
        The Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
        read_only: NotRequired[pulumi.Input[bool]]
        """
        Whether to force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGlusterfsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeGlusterfsArgs:
    def __init__(__self__, *,
                 endpoints_name: pulumi.Input[str],
                 path: pulumi.Input[str],
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] endpoints_name: The endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        :param pulumi.Input[str] path: The Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        :param pulumi.Input[bool] read_only: Whether to force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
        pulumi.set(__self__, "endpoints_name", endpoints_name)
        pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="endpointsName")
    def endpoints_name(self) -> pulumi.Input[str]:
        """
        The endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
        return pulumi.get(self, "endpoints_name")

    @endpoints_name.setter
    def endpoints_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoints_name", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeHostPathArgsDict(TypedDict):
        path: NotRequired[pulumi.Input[str]]
        """
        Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type for HostPath volume. Allowed values are "" (default), DirectoryOrCreate, Directory, FileOrCreate, File, Socket, CharDevice and BlockDevice
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeHostPathArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeHostPathArgs:
    def __init__(__self__, *,
                 path: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] path: Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        :param pulumi.Input[str] type: Type for HostPath volume. Allowed values are "" (default), DirectoryOrCreate, Directory, FileOrCreate, File, Socket, CharDevice and BlockDevice
        """
        if path is not None:
            pulumi.set(__self__, "path", path)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type for HostPath volume. Allowed values are "" (default), DirectoryOrCreate, Directory, FileOrCreate, File, Socket, CharDevice and BlockDevice
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeIscsiArgsDict(TypedDict):
        iqn: pulumi.Input[str]
        """
        Target iSCSI Qualified Name.
        """
        target_portal: pulumi.Input[str]
        """
        iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        """
        fs_type: NotRequired[pulumi.Input[str]]
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
        """
        iscsi_interface: NotRequired[pulumi.Input[str]]
        """
        iSCSI interface name that uses an iSCSI transport. Defaults to 'default' (tcp). Defaults to `default`.
        """
        lun: NotRequired[pulumi.Input[int]]
        """
        iSCSI target lun number.
        """
        read_only: NotRequired[pulumi.Input[bool]]
        """
        Whether to force the read-only setting in VolumeMounts. Defaults to false.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeIscsiArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeIscsiArgs:
    def __init__(__self__, *,
                 iqn: pulumi.Input[str],
                 target_portal: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 iscsi_interface: Optional[pulumi.Input[str]] = None,
                 lun: Optional[pulumi.Input[int]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] iqn: Target iSCSI Qualified Name.
        :param pulumi.Input[str] target_portal: iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        :param pulumi.Input[str] fs_type: Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
        :param pulumi.Input[str] iscsi_interface: iSCSI interface name that uses an iSCSI transport. Defaults to 'default' (tcp). Defaults to `default`.
        :param pulumi.Input[int] lun: iSCSI target lun number.
        :param pulumi.Input[bool] read_only: Whether to force the read-only setting in VolumeMounts. Defaults to false.
        """
        pulumi.set(__self__, "iqn", iqn)
        pulumi.set(__self__, "target_portal", target_portal)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if iscsi_interface is not None:
            pulumi.set(__self__, "iscsi_interface", iscsi_interface)
        if lun is not None:
            pulumi.set(__self__, "lun", lun)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def iqn(self) -> pulumi.Input[str]:
        """
        Target iSCSI Qualified Name.
        """
        return pulumi.get(self, "iqn")

    @iqn.setter
    def iqn(self, value: pulumi.Input[str]):
        pulumi.set(self, "iqn", value)

    @property
    @pulumi.getter(name="targetPortal")
    def target_portal(self) -> pulumi.Input[str]:
        """
        iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        """
        return pulumi.get(self, "target_portal")

    @target_portal.setter
    def target_portal(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_portal", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="iscsiInterface")
    def iscsi_interface(self) -> Optional[pulumi.Input[str]]:
        """
        iSCSI interface name that uses an iSCSI transport. Defaults to 'default' (tcp). Defaults to `default`.
        """
        return pulumi.get(self, "iscsi_interface")

    @iscsi_interface.setter
    def iscsi_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iscsi_interface", value)

    @property
    @pulumi.getter
    def lun(self) -> Optional[pulumi.Input[int]]:
        """
        iSCSI target lun number.
        """
        return pulumi.get(self, "lun")

    @lun.setter
    def lun(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lun", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force the read-only setting in VolumeMounts. Defaults to false.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeLocalArgsDict(TypedDict):
        path: NotRequired[pulumi.Input[str]]
        """
        Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeLocalArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeLocalArgs:
    def __init__(__self__, *,
                 path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] path: Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
        """
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeNfsArgsDict(TypedDict):
        path: pulumi.Input[str]
        """
        Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        server: pulumi.Input[str]
        """
        Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        read_only: NotRequired[pulumi.Input[bool]]
        """
        Whether to force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeNfsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeNfsArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 server: pulumi.Input[str],
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] path: Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        :param pulumi.Input[str] server: Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        :param pulumi.Input[bool] read_only: Whether to force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "server", server)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        """
        Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumePersistentVolumeClaimArgsDict(TypedDict):
        claim_name: NotRequired[pulumi.Input[str]]
        """
        ClaimName is the name of a PersistentVolumeClaim in the same
        """
        read_only: NotRequired[pulumi.Input[bool]]
        """
        Will force the ReadOnly setting in VolumeMounts. Defaults to `false`.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumePersistentVolumeClaimArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumePersistentVolumeClaimArgs:
    def __init__(__self__, *,
                 claim_name: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] claim_name: ClaimName is the name of a PersistentVolumeClaim in the same
        :param pulumi.Input[bool] read_only: Will force the ReadOnly setting in VolumeMounts. Defaults to `false`.
        """
        if claim_name is not None:
            pulumi.set(__self__, "claim_name", claim_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="claimName")
    def claim_name(self) -> Optional[pulumi.Input[str]]:
        """
        ClaimName is the name of a PersistentVolumeClaim in the same
        """
        return pulumi.get(self, "claim_name")

    @claim_name.setter
    def claim_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "claim_name", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Will force the ReadOnly setting in VolumeMounts. Defaults to `false`.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumePhotonPersistentDiskArgsDict(TypedDict):
        pd_id: pulumi.Input[str]
        """
        ID that identifies Photon Controller persistent disk
        """
        fs_type: NotRequired[pulumi.Input[str]]
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumePhotonPersistentDiskArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumePhotonPersistentDiskArgs:
    def __init__(__self__, *,
                 pd_id: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] pd_id: ID that identifies Photon Controller persistent disk
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        pulumi.set(__self__, "pd_id", pd_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)

    @property
    @pulumi.getter(name="pdId")
    def pd_id(self) -> pulumi.Input[str]:
        """
        ID that identifies Photon Controller persistent disk
        """
        return pulumi.get(self, "pd_id")

    @pd_id.setter
    def pd_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "pd_id", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedArgsDict(TypedDict):
        sources: pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceArgsDict']]]
        """
        Source of the volume to project in the directory.
        """
        default_mode: NotRequired[pulumi.Input[str]]
        """
        Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Defaults to `0644`.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceArgs']]],
                 default_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceArgs']]] sources: Source of the volume to project in the directory.
        :param pulumi.Input[str] default_mode: Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Defaults to `0644`.
        """
        pulumi.set(__self__, "sources", sources)
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceArgs']]]:
        """
        Source of the volume to project in the directory.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceArgs']]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Defaults to `0644`.
        """
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_mode", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceArgsDict(TypedDict):
        config_maps: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMapArgsDict']]]]
        """
        ConfigMap represents a configMap that should populate this volume
        """
        downward_api: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiArgsDict']]
        """
        DownwardAPI represents downward API about the pod that should populate this volume
        """
        secrets: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecretArgsDict']]]]
        """
        Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
        """
        service_account_token: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceServiceAccountTokenArgsDict']]
        """
        A projected service account token volume
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceArgs:
    def __init__(__self__, *,
                 config_maps: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMapArgs']]]] = None,
                 downward_api: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiArgs']] = None,
                 secrets: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecretArgs']]]] = None,
                 service_account_token: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceServiceAccountTokenArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMapArgs']]] config_maps: ConfigMap represents a configMap that should populate this volume
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiArgs'] downward_api: DownwardAPI represents downward API about the pod that should populate this volume
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecretArgs']]] secrets: Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceServiceAccountTokenArgs'] service_account_token: A projected service account token volume
        """
        if config_maps is not None:
            pulumi.set(__self__, "config_maps", config_maps)
        if downward_api is not None:
            pulumi.set(__self__, "downward_api", downward_api)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)
        if service_account_token is not None:
            pulumi.set(__self__, "service_account_token", service_account_token)

    @property
    @pulumi.getter(name="configMaps")
    def config_maps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMapArgs']]]]:
        """
        ConfigMap represents a configMap that should populate this volume
        """
        return pulumi.get(self, "config_maps")

    @config_maps.setter
    def config_maps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMapArgs']]]]):
        pulumi.set(self, "config_maps", value)

    @property
    @pulumi.getter(name="downwardApi")
    def downward_api(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiArgs']]:
        """
        DownwardAPI represents downward API about the pod that should populate this volume
        """
        return pulumi.get(self, "downward_api")

    @downward_api.setter
    def downward_api(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiArgs']]):
        pulumi.set(self, "downward_api", value)

    @property
    @pulumi.getter
    def secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecretArgs']]]]:
        """
        Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
        """
        return pulumi.get(self, "secrets")

    @secrets.setter
    def secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecretArgs']]]]):
        pulumi.set(self, "secrets", value)

    @property
    @pulumi.getter(name="serviceAccountToken")
    def service_account_token(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceServiceAccountTokenArgs']]:
        """
        A projected service account token volume
        """
        return pulumi.get(self, "service_account_token")

    @service_account_token.setter
    def service_account_token(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceServiceAccountTokenArgs']]):
        pulumi.set(self, "service_account_token", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMapArgsDict(TypedDict):
        items: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMapItemArgsDict']]]]
        """
        If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        optional: NotRequired[pulumi.Input[bool]]
        """
        Optional: Specify whether the ConfigMap or it's keys must be defined.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMapArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMapArgs:
    def __init__(__self__, *,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMapItemArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMapItemArgs']]] items: If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[bool] optional: Optional: Specify whether the ConfigMap or it's keys must be defined.
        """
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMapItemArgs']]]]:
        """
        If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMapItemArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional: Specify whether the ConfigMap or it's keys must be defined.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMapItemArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        The key to project.
        """
        mode: NotRequired[pulumi.Input[str]]
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        path: NotRequired[pulumi.Input[str]]
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMapItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMapItemArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: The key to project.
        :param pulumi.Input[str] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input[str] path: The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key to project.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiArgsDict(TypedDict):
        items: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemArgsDict']]]]
        """
        Represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiArgs:
    def __init__(__self__, *,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemArgs']]] items: Represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
        """
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemArgs']]]]:
        """
        Represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemArgs']]]]):
        pulumi.set(self, "items", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemArgsDict(TypedDict):
        path: pulumi.Input[str]
        """
        Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        """
        field_ref: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRefArgsDict']]
        """
        Selects a field of the pod: only annotations, labels, name and namespace are supported.
        """
        mode: NotRequired[pulumi.Input[str]]
        """
        Mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        resource_field_ref: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRefArgsDict']]
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 field_ref: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRefArgs']] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 resource_field_ref: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRefArgs']] = None):
        """
        :param pulumi.Input[str] path: Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRefArgs'] field_ref: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        :param pulumi.Input[str] mode: Mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        """
        pulumi.set(__self__, "path", path)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRefArgs']]:
        """
        Selects a field of the pod: only annotations, labels, name and namespace are supported.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRefArgs']]):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRefArgsDict(TypedDict):
        api_version: NotRequired[pulumi.Input[str]]
        """
        Version of the schema the FieldPath is written in terms of, defaults to 'v1'. Defaults to `v1`.
        """
        field_path: NotRequired[pulumi.Input[str]]
        """
        Path of the field to select in the specified API version
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRefArgs:
    def __init__(__self__, *,
                 api_version: Optional[pulumi.Input[str]] = None,
                 field_path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to 'v1'. Defaults to `v1`.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if field_path is not None:
            pulumi.set(__self__, "field_path", field_path)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to 'v1'. Defaults to `v1`.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path of the field to select in the specified API version
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_path", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRefArgsDict(TypedDict):
        container_name: pulumi.Input[str]
        resource: pulumi.Input[str]
        """
        Resource to select
        """
        divisor: NotRequired[pulumi.Input[str]]
        """
        Defaults to `1`.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRefArgs:
    def __init__(__self__, *,
                 container_name: pulumi.Input[str],
                 resource: pulumi.Input[str],
                 divisor: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] resource: Resource to select
        :param pulumi.Input[str] divisor: Defaults to `1`.
        """
        pulumi.set(__self__, "container_name", container_name)
        pulumi.set(__self__, "resource", resource)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `1`.
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "divisor", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecretArgsDict(TypedDict):
        items: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecretItemArgsDict']]]]
        """
        If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
        """
        optional: NotRequired[pulumi.Input[bool]]
        """
        Optional: Specify whether the Secret or it's keys must be defined.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecretArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecretArgs:
    def __init__(__self__, *,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecretItemArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecretItemArgs']]] items: If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        :param pulumi.Input[str] name: Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
        :param pulumi.Input[bool] optional: Optional: Specify whether the Secret or it's keys must be defined.
        """
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecretItemArgs']]]]:
        """
        If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecretItemArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional: Specify whether the Secret or it's keys must be defined.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecretItemArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        The key to project.
        """
        mode: NotRequired[pulumi.Input[str]]
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        path: NotRequired[pulumi.Input[str]]
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecretItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecretItemArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: The key to project.
        :param pulumi.Input[str] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input[str] path: The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key to project.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceServiceAccountTokenArgsDict(TypedDict):
        path: pulumi.Input[str]
        """
        Path specifies a relative path to the mount point of the projected volume.
        """
        audience: NotRequired[pulumi.Input[str]]
        """
        Audience is the intended audience of the token
        """
        expiration_seconds: NotRequired[pulumi.Input[int]]
        """
        ExpirationSeconds is the expected duration of validity of the service account token. It defaults to 1 hour and must be at least 10 minutes (600 seconds). Defaults to `3600`.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceServiceAccountTokenArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceServiceAccountTokenArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 audience: Optional[pulumi.Input[str]] = None,
                 expiration_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] path: Path specifies a relative path to the mount point of the projected volume.
        :param pulumi.Input[str] audience: Audience is the intended audience of the token
        :param pulumi.Input[int] expiration_seconds: ExpirationSeconds is the expected duration of validity of the service account token. It defaults to 1 hour and must be at least 10 minutes (600 seconds). Defaults to `3600`.
        """
        pulumi.set(__self__, "path", path)
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if expiration_seconds is not None:
            pulumi.set(__self__, "expiration_seconds", expiration_seconds)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path specifies a relative path to the mount point of the projected volume.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def audience(self) -> Optional[pulumi.Input[str]]:
        """
        Audience is the intended audience of the token
        """
        return pulumi.get(self, "audience")

    @audience.setter
    def audience(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audience", value)

    @property
    @pulumi.getter(name="expirationSeconds")
    def expiration_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        ExpirationSeconds is the expected duration of validity of the service account token. It defaults to 1 hour and must be at least 10 minutes (600 seconds). Defaults to `3600`.
        """
        return pulumi.get(self, "expiration_seconds")

    @expiration_seconds.setter
    def expiration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expiration_seconds", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeQuobyteArgsDict(TypedDict):
        registry: pulumi.Input[str]
        """
        Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
        """
        volume: pulumi.Input[str]
        """
        Volume is a string that references an already created Quobyte volume by name.
        """
        group: NotRequired[pulumi.Input[str]]
        """
        Group to map volume access to Default is no group
        """
        read_only: NotRequired[pulumi.Input[bool]]
        """
        Whether to force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
        """
        user: NotRequired[pulumi.Input[str]]
        """
        User to map volume access to Defaults to serivceaccount user
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeQuobyteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeQuobyteArgs:
    def __init__(__self__, *,
                 registry: pulumi.Input[str],
                 volume: pulumi.Input[str],
                 group: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] registry: Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
        :param pulumi.Input[str] volume: Volume is a string that references an already created Quobyte volume by name.
        :param pulumi.Input[str] group: Group to map volume access to Default is no group
        :param pulumi.Input[bool] read_only: Whether to force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
        :param pulumi.Input[str] user: User to map volume access to Defaults to serivceaccount user
        """
        pulumi.set(__self__, "registry", registry)
        pulumi.set(__self__, "volume", volume)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def registry(self) -> pulumi.Input[str]:
        """
        Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
        """
        return pulumi.get(self, "registry")

    @registry.setter
    def registry(self, value: pulumi.Input[str]):
        pulumi.set(self, "registry", value)

    @property
    @pulumi.getter
    def volume(self) -> pulumi.Input[str]:
        """
        Volume is a string that references an already created Quobyte volume by name.
        """
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        Group to map volume access to Default is no group
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User to map volume access to Defaults to serivceaccount user
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbdArgsDict(TypedDict):
        ceph_monitors: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        rbd_image: pulumi.Input[str]
        """
        The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        fs_type: NotRequired[pulumi.Input[str]]
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
        """
        keyring: NotRequired[pulumi.Input[str]]
        """
        Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        rados_user: NotRequired[pulumi.Input[str]]
        """
        The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it Defaults to `admin`.
        """
        rbd_pool: NotRequired[pulumi.Input[str]]
        """
        The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it. Defaults to `rbd`.
        """
        read_only: NotRequired[pulumi.Input[bool]]
        """
        Whether to force the read-only setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it Defaults to `false`.
        """
        secret_ref: NotRequired[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbdSecretRefArgsDict']]
        """
        Name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbdArgs:
    def __init__(__self__, *,
                 ceph_monitors: pulumi.Input[Sequence[pulumi.Input[str]]],
                 rbd_image: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 keyring: Optional[pulumi.Input[str]] = None,
                 rados_user: Optional[pulumi.Input[str]] = None,
                 rbd_pool: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 secret_ref: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbdSecretRefArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ceph_monitors: A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[str] rbd_image: The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[str] fs_type: Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
        :param pulumi.Input[str] keyring: Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[str] rados_user: The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it Defaults to `admin`.
        :param pulumi.Input[str] rbd_pool: The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it. Defaults to `rbd`.
        :param pulumi.Input[bool] read_only: Whether to force the read-only setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it Defaults to `false`.
        :param pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbdSecretRefArgs'] secret_ref: Name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        pulumi.set(__self__, "ceph_monitors", ceph_monitors)
        pulumi.set(__self__, "rbd_image", rbd_image)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if keyring is not None:
            pulumi.set(__self__, "keyring", keyring)
        if rados_user is not None:
            pulumi.set(__self__, "rados_user", rados_user)
        if rbd_pool is not None:
            pulumi.set(__self__, "rbd_pool", rbd_pool)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="cephMonitors")
    def ceph_monitors(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "ceph_monitors")

    @ceph_monitors.setter
    def ceph_monitors(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "ceph_monitors", value)

    @property
    @pulumi.getter(name="rbdImage")
    def rbd_image(self) -> pulumi.Input[str]:
        """
        The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "rbd_image")

    @rbd_image.setter
    def rbd_image(self, value: pulumi.Input[str]):
        pulumi.set(self, "rbd_image", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def keyring(self) -> Optional[pulumi.Input[str]]:
        """
        Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "keyring")

    @keyring.setter
    def keyring(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyring", value)

    @property
    @pulumi.getter(name="radosUser")
    def rados_user(self) -> Optional[pulumi.Input[str]]:
        """
        The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it Defaults to `admin`.
        """
        return pulumi.get(self, "rados_user")

    @rados_user.setter
    def rados_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rados_user", value)

    @property
    @pulumi.getter(name="rbdPool")
    def rbd_pool(self) -> Optional[pulumi.Input[str]]:
        """
        The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it. Defaults to `rbd`.
        """
        return pulumi.get(self, "rbd_pool")

    @rbd_pool.setter
    def rbd_pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rbd_pool", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force the read-only setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it Defaults to `false`.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbdSecretRefArgs']]:
        """
        Name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbdSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbdSecretRefArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        namespace: NotRequired[pulumi.Input[str]]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbdSecretRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeRbdSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] namespace: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecretArgsDict(TypedDict):
        default_mode: NotRequired[pulumi.Input[str]]
        """
        Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Defaults to `0644`.
        """
        items: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecretItemArgsDict']]]]
        """
        If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        optional: NotRequired[pulumi.Input[bool]]
        """
        Optional: Specify whether the Secret or its keys must be defined.
        """
        secret_name: NotRequired[pulumi.Input[str]]
        """
        Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecretArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecretArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[str]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecretItemArgs']]]] = None,
                 optional: Optional[pulumi.Input[bool]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] default_mode: Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Defaults to `0644`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecretItemArgs']]] items: If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        :param pulumi.Input[bool] optional: Optional: Specify whether the Secret or its keys must be defined.
        :param pulumi.Input[str] secret_name: Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
        """
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Defaults to `0644`.
        """
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecretItemArgs']]]]:
        """
        If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecretItemArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional: Specify whether the Secret or its keys must be defined.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecretItemArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        The key to project.
        """
        mode: NotRequired[pulumi.Input[str]]
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        path: NotRequired[pulumi.Input[str]]
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecretItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeSecretItemArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: The key to project.
        :param pulumi.Input[str] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input[str] path: The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key to project.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


if not MYPY:
    class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeVsphereVolumeArgsDict(TypedDict):
        volume_path: pulumi.Input[str]
        """
        Path that identifies vSphere volume vmdk
        """
        fs_type: NotRequired[pulumi.Input[str]]
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
elif False:
    K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeVsphereVolumeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sCronJobSpecJobTemplateSpecTemplateSpecVolumeVsphereVolumeArgs:
    def __init__(__self__, *,
                 volume_path: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] volume_path: Path that identifies vSphere volume vmdk
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        pulumi.set(__self__, "volume_path", volume_path)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)

    @property
    @pulumi.getter(name="volumePath")
    def volume_path(self) -> pulumi.Input[str]:
        """
        Path that identifies vSphere volume vmdk
        """
        return pulumi.get(self, "volume_path")

    @volume_path.setter
    def volume_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume_path", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)


if not MYPY:
    class K8sJobMetadataArgsDict(TypedDict):
        annotations: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        An unstructured key value map stored with the job that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
        """
        generate_name: NotRequired[pulumi.Input[str]]
        """
        Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
        """
        generation: NotRequired[pulumi.Input[int]]
        """
        A sequence number representing a specific generation of the desired state.
        """
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the job. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the job, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        namespace: NotRequired[pulumi.Input[str]]
        """
        Namespace defines the space within which name of the job must be unique.
        """
        resource_version: NotRequired[pulumi.Input[str]]
        """
        An opaque value that represents the internal version of this job that can be used by clients to determine when job has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        """
        uid: NotRequired[pulumi.Input[str]]
        """
        The unique in time and space value for this job. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
elif False:
    K8sJobMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 generate_name: Optional[pulumi.Input[str]] = None,
                 generation: Optional[pulumi.Input[int]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 resource_version: Optional[pulumi.Input[str]] = None,
                 uid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: An unstructured key value map stored with the job that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
        :param pulumi.Input[str] generate_name: Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
        :param pulumi.Input[int] generation: A sequence number representing a specific generation of the desired state.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the job. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
        :param pulumi.Input[str] name: Name of the job, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] namespace: Namespace defines the space within which name of the job must be unique.
        :param pulumi.Input[str] resource_version: An opaque value that represents the internal version of this job that can be used by clients to determine when job has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        :param pulumi.Input[str] uid: The unique in time and space value for this job. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if generate_name is not None:
            pulumi.set(__self__, "generate_name", generate_name)
        if generation is not None:
            pulumi.set(__self__, "generation", generation)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        An unstructured key value map stored with the job that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="generateName")
    def generate_name(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
        """
        return pulumi.get(self, "generate_name")

    @generate_name.setter
    def generate_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "generate_name", value)

    @property
    @pulumi.getter
    def generation(self) -> Optional[pulumi.Input[int]]:
        """
        A sequence number representing a specific generation of the desired state.
        """
        return pulumi.get(self, "generation")

    @generation.setter
    def generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "generation", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the job. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the job, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace defines the space within which name of the job must be unique.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[pulumi.Input[str]]:
        """
        An opaque value that represents the internal version of this job that can be used by clients to determine when job has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        """
        return pulumi.get(self, "resource_version")

    @resource_version.setter
    def resource_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_version", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        The unique in time and space value for this job. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)


if not MYPY:
    class K8sJobSpecArgsDict(TypedDict):
        template: pulumi.Input['K8sJobSpecTemplateArgsDict']
        """
        Describes the pod that will be created when executing a job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
        """
        active_deadline_seconds: NotRequired[pulumi.Input[int]]
        """
        Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
        """
        backoff_limit: NotRequired[pulumi.Input[int]]
        """
        Specifies the number of retries before marking this job failed. Defaults to 6 Defaults to `6`.
        """
        completion_mode: NotRequired[pulumi.Input[str]]
        """
        Specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`. More info: https://kubernetes.io/docs/concepts/workloads/controllers/job/#completion-mode
        """
        completions: NotRequired[pulumi.Input[int]]
        """
        Specifies the desired number of successfully finished pods the job should be run with. Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value. Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ Defaults to `1`.
        """
        manual_selector: NotRequired[pulumi.Input[bool]]
        """
        Controls generation of pod labels and pod selectors. Leave unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template. When true, the user is responsible for picking unique labels and specifying the selector. Failure to pick a unique label may cause this and other jobs to not function correctly. More info: https://git.k8s.io/community/contributors/design-proposals/selector-generation.md
        """
        parallelism: NotRequired[pulumi.Input[int]]
        """
        Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ Defaults to `1`.
        """
        selector: NotRequired[pulumi.Input['K8sJobSpecSelectorArgsDict']]
        """
        A label query over volumes to consider for binding.
        """
        ttl_seconds_after_finished: NotRequired[pulumi.Input[str]]
        """
        ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.
        """
elif False:
    K8sJobSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecArgs:
    def __init__(__self__, *,
                 template: pulumi.Input['K8sJobSpecTemplateArgs'],
                 active_deadline_seconds: Optional[pulumi.Input[int]] = None,
                 backoff_limit: Optional[pulumi.Input[int]] = None,
                 completion_mode: Optional[pulumi.Input[str]] = None,
                 completions: Optional[pulumi.Input[int]] = None,
                 manual_selector: Optional[pulumi.Input[bool]] = None,
                 parallelism: Optional[pulumi.Input[int]] = None,
                 selector: Optional[pulumi.Input['K8sJobSpecSelectorArgs']] = None,
                 ttl_seconds_after_finished: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['K8sJobSpecTemplateArgs'] template: Describes the pod that will be created when executing a job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
        :param pulumi.Input[int] active_deadline_seconds: Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
        :param pulumi.Input[int] backoff_limit: Specifies the number of retries before marking this job failed. Defaults to 6 Defaults to `6`.
        :param pulumi.Input[str] completion_mode: Specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`. More info: https://kubernetes.io/docs/concepts/workloads/controllers/job/#completion-mode
        :param pulumi.Input[int] completions: Specifies the desired number of successfully finished pods the job should be run with. Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value. Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ Defaults to `1`.
        :param pulumi.Input[bool] manual_selector: Controls generation of pod labels and pod selectors. Leave unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template. When true, the user is responsible for picking unique labels and specifying the selector. Failure to pick a unique label may cause this and other jobs to not function correctly. More info: https://git.k8s.io/community/contributors/design-proposals/selector-generation.md
        :param pulumi.Input[int] parallelism: Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ Defaults to `1`.
        :param pulumi.Input['K8sJobSpecSelectorArgs'] selector: A label query over volumes to consider for binding.
        :param pulumi.Input[str] ttl_seconds_after_finished: ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.
        """
        pulumi.set(__self__, "template", template)
        if active_deadline_seconds is not None:
            pulumi.set(__self__, "active_deadline_seconds", active_deadline_seconds)
        if backoff_limit is not None:
            pulumi.set(__self__, "backoff_limit", backoff_limit)
        if completion_mode is not None:
            pulumi.set(__self__, "completion_mode", completion_mode)
        if completions is not None:
            pulumi.set(__self__, "completions", completions)
        if manual_selector is not None:
            pulumi.set(__self__, "manual_selector", manual_selector)
        if parallelism is not None:
            pulumi.set(__self__, "parallelism", parallelism)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if ttl_seconds_after_finished is not None:
            pulumi.set(__self__, "ttl_seconds_after_finished", ttl_seconds_after_finished)

    @property
    @pulumi.getter
    def template(self) -> pulumi.Input['K8sJobSpecTemplateArgs']:
        """
        Describes the pod that will be created when executing a job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: pulumi.Input['K8sJobSpecTemplateArgs']):
        pulumi.set(self, "template", value)

    @property
    @pulumi.getter(name="activeDeadlineSeconds")
    def active_deadline_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
        """
        return pulumi.get(self, "active_deadline_seconds")

    @active_deadline_seconds.setter
    def active_deadline_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "active_deadline_seconds", value)

    @property
    @pulumi.getter(name="backoffLimit")
    def backoff_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the number of retries before marking this job failed. Defaults to 6 Defaults to `6`.
        """
        return pulumi.get(self, "backoff_limit")

    @backoff_limit.setter
    def backoff_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backoff_limit", value)

    @property
    @pulumi.getter(name="completionMode")
    def completion_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`. More info: https://kubernetes.io/docs/concepts/workloads/controllers/job/#completion-mode
        """
        return pulumi.get(self, "completion_mode")

    @completion_mode.setter
    def completion_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completion_mode", value)

    @property
    @pulumi.getter
    def completions(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the desired number of successfully finished pods the job should be run with. Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value. Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ Defaults to `1`.
        """
        return pulumi.get(self, "completions")

    @completions.setter
    def completions(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "completions", value)

    @property
    @pulumi.getter(name="manualSelector")
    def manual_selector(self) -> Optional[pulumi.Input[bool]]:
        """
        Controls generation of pod labels and pod selectors. Leave unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template. When true, the user is responsible for picking unique labels and specifying the selector. Failure to pick a unique label may cause this and other jobs to not function correctly. More info: https://git.k8s.io/community/contributors/design-proposals/selector-generation.md
        """
        return pulumi.get(self, "manual_selector")

    @manual_selector.setter
    def manual_selector(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "manual_selector", value)

    @property
    @pulumi.getter
    def parallelism(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ Defaults to `1`.
        """
        return pulumi.get(self, "parallelism")

    @parallelism.setter
    def parallelism(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "parallelism", value)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input['K8sJobSpecSelectorArgs']]:
        """
        A label query over volumes to consider for binding.
        """
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input['K8sJobSpecSelectorArgs']]):
        pulumi.set(self, "selector", value)

    @property
    @pulumi.getter(name="ttlSecondsAfterFinished")
    def ttl_seconds_after_finished(self) -> Optional[pulumi.Input[str]]:
        """
        ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.
        """
        return pulumi.get(self, "ttl_seconds_after_finished")

    @ttl_seconds_after_finished.setter
    def ttl_seconds_after_finished(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ttl_seconds_after_finished", value)


if not MYPY:
    class K8sJobSpecSelectorArgsDict(TypedDict):
        match_expressions: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecSelectorMatchExpressionArgsDict']]]]
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
elif False:
    K8sJobSpecSelectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecSelectorMatchExpressionArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecSelectorMatchExpressionArgs']]] match_expressions: A list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecSelectorMatchExpressionArgs']]]]:
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecSelectorMatchExpressionArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


if not MYPY:
    class K8sJobSpecSelectorMatchExpressionArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
elif False:
    K8sJobSpecSelectorMatchExpressionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecSelectorMatchExpressionArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class K8sJobSpecTemplateArgsDict(TypedDict):
        metadata: NotRequired[pulumi.Input['K8sJobSpecTemplateMetadataArgsDict']]
        """
        Standard job's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        spec: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecArgsDict']]
        """
        Spec of the pods owned by the job
        """
elif False:
    K8sJobSpecTemplateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateArgs:
    def __init__(__self__, *,
                 metadata: Optional[pulumi.Input['K8sJobSpecTemplateMetadataArgs']] = None,
                 spec: Optional[pulumi.Input['K8sJobSpecTemplateSpecArgs']] = None):
        """
        :param pulumi.Input['K8sJobSpecTemplateMetadataArgs'] metadata: Standard job's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
        :param pulumi.Input['K8sJobSpecTemplateSpecArgs'] spec: Spec of the pods owned by the job
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['K8sJobSpecTemplateMetadataArgs']]:
        """
        Standard job's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['K8sJobSpecTemplateMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecArgs']]:
        """
        Spec of the pods owned by the job
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecArgs']]):
        pulumi.set(self, "spec", value)


if not MYPY:
    class K8sJobSpecTemplateMetadataArgsDict(TypedDict):
        annotations: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        An unstructured key value map stored with the job that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
        """
        generate_name: NotRequired[pulumi.Input[str]]
        """
        Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
        """
        generation: NotRequired[pulumi.Input[int]]
        """
        A sequence number representing a specific generation of the desired state.
        """
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the job. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the job, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        resource_version: NotRequired[pulumi.Input[str]]
        """
        An opaque value that represents the internal version of this job that can be used by clients to determine when job has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        """
        uid: NotRequired[pulumi.Input[str]]
        """
        The unique in time and space value for this job. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
elif False:
    K8sJobSpecTemplateMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 generate_name: Optional[pulumi.Input[str]] = None,
                 generation: Optional[pulumi.Input[int]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resource_version: Optional[pulumi.Input[str]] = None,
                 uid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: An unstructured key value map stored with the job that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
        :param pulumi.Input[str] generate_name: Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
        :param pulumi.Input[int] generation: A sequence number representing a specific generation of the desired state.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the job. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
        :param pulumi.Input[str] name: Name of the job, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] resource_version: An opaque value that represents the internal version of this job that can be used by clients to determine when job has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        :param pulumi.Input[str] uid: The unique in time and space value for this job. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if generate_name is not None:
            pulumi.set(__self__, "generate_name", generate_name)
        if generation is not None:
            pulumi.set(__self__, "generation", generation)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        An unstructured key value map stored with the job that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="generateName")
    def generate_name(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
        """
        return pulumi.get(self, "generate_name")

    @generate_name.setter
    def generate_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "generate_name", value)

    @property
    @pulumi.getter
    def generation(self) -> Optional[pulumi.Input[int]]:
        """
        A sequence number representing a specific generation of the desired state.
        """
        return pulumi.get(self, "generation")

    @generation.setter
    def generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "generation", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the job. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the job, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[pulumi.Input[str]]:
        """
        An opaque value that represents the internal version of this job that can be used by clients to determine when job has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        """
        return pulumi.get(self, "resource_version")

    @resource_version.setter
    def resource_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_version", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        The unique in time and space value for this job. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)


if not MYPY:
    class K8sJobSpecTemplateSpecArgsDict(TypedDict):
        active_deadline_seconds: NotRequired[pulumi.Input[int]]
        """
        Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
        """
        affinity: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecAffinityArgsDict']]
        """
        Optional pod scheduling constraints.
        """
        automount_service_account_token: NotRequired[pulumi.Input[bool]]
        """
        AutomountServiceAccountToken indicates whether a service account token should be automatically mounted. Defaults to `true`.
        """
        containers: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerArgsDict']]]]
        """
        List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/
        """
        dns_config: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecDnsConfigArgsDict']]
        """
        Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy. Optional: Defaults to empty
        """
        dns_policy: NotRequired[pulumi.Input[str]]
        """
        Set DNS policy for containers within the pod. Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. Defaults to 'ClusterFirst'. More info: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy
        """
        enable_service_links: NotRequired[pulumi.Input[bool]]
        """
        Enables generating environment variables for service discovery. Defaults to true. Defaults to `true`.
        """
        host_aliases: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecHostAliasArgsDict']]]]
        """
        List of hosts and IPs that will be injected into the pod's hosts file if specified. Optional: Defaults to empty.
        """
        host_ipc: NotRequired[pulumi.Input[bool]]
        """
        Use the host's ipc namespace. Optional: Defaults to false.
        """
        host_network: NotRequired[pulumi.Input[bool]]
        """
        Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.
        """
        host_pid: NotRequired[pulumi.Input[bool]]
        """
        Use the host's pid namespace.
        """
        hostname: NotRequired[pulumi.Input[str]]
        """
        Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
        """
        image_pull_secrets: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecImagePullSecretArgsDict']]]]
        """
        ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
        """
        init_containers: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerArgsDict']]]]
        """
        List of init containers belonging to the pod. Init containers always run to completion and each must complete successfully before the next is started. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
        """
        node_name: NotRequired[pulumi.Input[str]]
        """
        NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
        """
        node_selector: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
        """
        priority_class_name: NotRequired[pulumi.Input[str]]
        """
        If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
        """
        readiness_gates: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecReadinessGateArgsDict']]]]
        """
        If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md
        """
        restart_policy: NotRequired[pulumi.Input[str]]
        """
        Restart policy for all containers within the pod. One of OnFailure, Never. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy. Defaults to `Never`.
        """
        runtime_class_name: NotRequired[pulumi.Input[str]]
        """
        RuntimeClassName is a feature for selecting the container runtime configuration. The container runtime configuration is used to run a Pod's containers. More info: https://kubernetes.io/docs/concepts/containers/runtime-class
        """
        scheduler_name: NotRequired[pulumi.Input[str]]
        """
        If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
        """
        security_context: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecSecurityContextArgsDict']]
        """
        SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty
        """
        service_account_name: NotRequired[pulumi.Input[str]]
        """
        ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md.
        """
        share_process_namespace: NotRequired[pulumi.Input[bool]]
        """
        Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Defaults to false. Defaults to `false`.
        """
        subdomain: NotRequired[pulumi.Input[str]]
        """
        If specified, the fully qualified Pod hostname will be "...svc.". If not specified, the pod will not have a domainname at all..
        """
        termination_grace_period_seconds: NotRequired[pulumi.Input[int]]
        """
        Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.
        """
        tolerations: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecTolerationArgsDict']]]]
        """
        If specified, the pod's toleration. Optional: Defaults to empty
        """
        topology_spread_constraints: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecTopologySpreadConstraintArgsDict']]]]
        """
        describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints.
        """
        volumes: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeArgsDict']]]]
        """
        List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
        """
elif False:
    K8sJobSpecTemplateSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecArgs:
    def __init__(__self__, *,
                 active_deadline_seconds: Optional[pulumi.Input[int]] = None,
                 affinity: Optional[pulumi.Input['K8sJobSpecTemplateSpecAffinityArgs']] = None,
                 automount_service_account_token: Optional[pulumi.Input[bool]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerArgs']]]] = None,
                 dns_config: Optional[pulumi.Input['K8sJobSpecTemplateSpecDnsConfigArgs']] = None,
                 dns_policy: Optional[pulumi.Input[str]] = None,
                 enable_service_links: Optional[pulumi.Input[bool]] = None,
                 host_aliases: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecHostAliasArgs']]]] = None,
                 host_ipc: Optional[pulumi.Input[bool]] = None,
                 host_network: Optional[pulumi.Input[bool]] = None,
                 host_pid: Optional[pulumi.Input[bool]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 image_pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecImagePullSecretArgs']]]] = None,
                 init_containers: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerArgs']]]] = None,
                 node_name: Optional[pulumi.Input[str]] = None,
                 node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 priority_class_name: Optional[pulumi.Input[str]] = None,
                 readiness_gates: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecReadinessGateArgs']]]] = None,
                 restart_policy: Optional[pulumi.Input[str]] = None,
                 runtime_class_name: Optional[pulumi.Input[str]] = None,
                 scheduler_name: Optional[pulumi.Input[str]] = None,
                 security_context: Optional[pulumi.Input['K8sJobSpecTemplateSpecSecurityContextArgs']] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 share_process_namespace: Optional[pulumi.Input[bool]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 termination_grace_period_seconds: Optional[pulumi.Input[int]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecTolerationArgs']]]] = None,
                 topology_spread_constraints: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecTopologySpreadConstraintArgs']]]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeArgs']]]] = None):
        """
        :param pulumi.Input[int] active_deadline_seconds: Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
        :param pulumi.Input['K8sJobSpecTemplateSpecAffinityArgs'] affinity: Optional pod scheduling constraints.
        :param pulumi.Input[bool] automount_service_account_token: AutomountServiceAccountToken indicates whether a service account token should be automatically mounted. Defaults to `true`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerArgs']]] containers: List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/
        :param pulumi.Input['K8sJobSpecTemplateSpecDnsConfigArgs'] dns_config: Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy. Optional: Defaults to empty
        :param pulumi.Input[str] dns_policy: Set DNS policy for containers within the pod. Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. Defaults to 'ClusterFirst'. More info: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy
        :param pulumi.Input[bool] enable_service_links: Enables generating environment variables for service discovery. Defaults to true. Defaults to `true`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecHostAliasArgs']]] host_aliases: List of hosts and IPs that will be injected into the pod's hosts file if specified. Optional: Defaults to empty.
        :param pulumi.Input[bool] host_ipc: Use the host's ipc namespace. Optional: Defaults to false.
        :param pulumi.Input[bool] host_network: Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.
        :param pulumi.Input[bool] host_pid: Use the host's pid namespace.
        :param pulumi.Input[str] hostname: Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecImagePullSecretArgs']]] image_pull_secrets: ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerArgs']]] init_containers: List of init containers belonging to the pod. Init containers always run to completion and each must complete successfully before the next is started. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
        :param pulumi.Input[str] node_name: NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] node_selector: NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
        :param pulumi.Input[str] priority_class_name: If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecReadinessGateArgs']]] readiness_gates: If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md
        :param pulumi.Input[str] restart_policy: Restart policy for all containers within the pod. One of OnFailure, Never. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy. Defaults to `Never`.
        :param pulumi.Input[str] runtime_class_name: RuntimeClassName is a feature for selecting the container runtime configuration. The container runtime configuration is used to run a Pod's containers. More info: https://kubernetes.io/docs/concepts/containers/runtime-class
        :param pulumi.Input[str] scheduler_name: If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
        :param pulumi.Input['K8sJobSpecTemplateSpecSecurityContextArgs'] security_context: SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty
        :param pulumi.Input[str] service_account_name: ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md.
        :param pulumi.Input[bool] share_process_namespace: Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Defaults to false. Defaults to `false`.
        :param pulumi.Input[str] subdomain: If specified, the fully qualified Pod hostname will be "...svc.". If not specified, the pod will not have a domainname at all..
        :param pulumi.Input[int] termination_grace_period_seconds: Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecTolerationArgs']]] tolerations: If specified, the pod's toleration. Optional: Defaults to empty
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecTopologySpreadConstraintArgs']]] topology_spread_constraints: describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeArgs']]] volumes: List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
        """
        if active_deadline_seconds is not None:
            pulumi.set(__self__, "active_deadline_seconds", active_deadline_seconds)
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if automount_service_account_token is not None:
            pulumi.set(__self__, "automount_service_account_token", automount_service_account_token)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if dns_config is not None:
            pulumi.set(__self__, "dns_config", dns_config)
        if dns_policy is not None:
            pulumi.set(__self__, "dns_policy", dns_policy)
        if enable_service_links is not None:
            pulumi.set(__self__, "enable_service_links", enable_service_links)
        if host_aliases is not None:
            pulumi.set(__self__, "host_aliases", host_aliases)
        if host_ipc is not None:
            pulumi.set(__self__, "host_ipc", host_ipc)
        if host_network is not None:
            pulumi.set(__self__, "host_network", host_network)
        if host_pid is not None:
            pulumi.set(__self__, "host_pid", host_pid)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if init_containers is not None:
            pulumi.set(__self__, "init_containers", init_containers)
        if node_name is not None:
            pulumi.set(__self__, "node_name", node_name)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if readiness_gates is not None:
            pulumi.set(__self__, "readiness_gates", readiness_gates)
        if restart_policy is not None:
            pulumi.set(__self__, "restart_policy", restart_policy)
        if runtime_class_name is not None:
            pulumi.set(__self__, "runtime_class_name", runtime_class_name)
        if scheduler_name is not None:
            pulumi.set(__self__, "scheduler_name", scheduler_name)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if share_process_namespace is not None:
            pulumi.set(__self__, "share_process_namespace", share_process_namespace)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if termination_grace_period_seconds is not None:
            pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)
        if topology_spread_constraints is not None:
            pulumi.set(__self__, "topology_spread_constraints", topology_spread_constraints)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter(name="activeDeadlineSeconds")
    def active_deadline_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
        """
        return pulumi.get(self, "active_deadline_seconds")

    @active_deadline_seconds.setter
    def active_deadline_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "active_deadline_seconds", value)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecAffinityArgs']]:
        """
        Optional pod scheduling constraints.
        """
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecAffinityArgs']]):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter(name="automountServiceAccountToken")
    def automount_service_account_token(self) -> Optional[pulumi.Input[bool]]:
        """
        AutomountServiceAccountToken indicates whether a service account token should be automatically mounted. Defaults to `true`.
        """
        return pulumi.get(self, "automount_service_account_token")

    @automount_service_account_token.setter
    def automount_service_account_token(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "automount_service_account_token", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerArgs']]]]:
        """
        List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/
        """
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter(name="dnsConfig")
    def dns_config(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecDnsConfigArgs']]:
        """
        Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy. Optional: Defaults to empty
        """
        return pulumi.get(self, "dns_config")

    @dns_config.setter
    def dns_config(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecDnsConfigArgs']]):
        pulumi.set(self, "dns_config", value)

    @property
    @pulumi.getter(name="dnsPolicy")
    def dns_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Set DNS policy for containers within the pod. Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. Defaults to 'ClusterFirst'. More info: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy
        """
        return pulumi.get(self, "dns_policy")

    @dns_policy.setter
    def dns_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_policy", value)

    @property
    @pulumi.getter(name="enableServiceLinks")
    def enable_service_links(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables generating environment variables for service discovery. Defaults to true. Defaults to `true`.
        """
        return pulumi.get(self, "enable_service_links")

    @enable_service_links.setter
    def enable_service_links(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_service_links", value)

    @property
    @pulumi.getter(name="hostAliases")
    def host_aliases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecHostAliasArgs']]]]:
        """
        List of hosts and IPs that will be injected into the pod's hosts file if specified. Optional: Defaults to empty.
        """
        return pulumi.get(self, "host_aliases")

    @host_aliases.setter
    def host_aliases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecHostAliasArgs']]]]):
        pulumi.set(self, "host_aliases", value)

    @property
    @pulumi.getter(name="hostIpc")
    def host_ipc(self) -> Optional[pulumi.Input[bool]]:
        """
        Use the host's ipc namespace. Optional: Defaults to false.
        """
        return pulumi.get(self, "host_ipc")

    @host_ipc.setter
    def host_ipc(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "host_ipc", value)

    @property
    @pulumi.getter(name="hostNetwork")
    def host_network(self) -> Optional[pulumi.Input[bool]]:
        """
        Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.
        """
        return pulumi.get(self, "host_network")

    @host_network.setter
    def host_network(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "host_network", value)

    @property
    @pulumi.getter(name="hostPid")
    def host_pid(self) -> Optional[pulumi.Input[bool]]:
        """
        Use the host's pid namespace.
        """
        return pulumi.get(self, "host_pid")

    @host_pid.setter
    def host_pid(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "host_pid", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecImagePullSecretArgs']]]]:
        """
        ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
        """
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecImagePullSecretArgs']]]]):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="initContainers")
    def init_containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerArgs']]]]:
        """
        List of init containers belonging to the pod. Init containers always run to completion and each must complete successfully before the next is started. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
        """
        return pulumi.get(self, "init_containers")

    @init_containers.setter
    def init_containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerArgs']]]]):
        pulumi.set(self, "init_containers", value)

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> Optional[pulumi.Input[str]]:
        """
        NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
        """
        return pulumi.get(self, "node_name")

    @node_name.setter
    def node_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_name", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
        """
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
        """
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter(name="readinessGates")
    def readiness_gates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecReadinessGateArgs']]]]:
        """
        If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md
        """
        return pulumi.get(self, "readiness_gates")

    @readiness_gates.setter
    def readiness_gates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecReadinessGateArgs']]]]):
        pulumi.set(self, "readiness_gates", value)

    @property
    @pulumi.getter(name="restartPolicy")
    def restart_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Restart policy for all containers within the pod. One of OnFailure, Never. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy. Defaults to `Never`.
        """
        return pulumi.get(self, "restart_policy")

    @restart_policy.setter
    def restart_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restart_policy", value)

    @property
    @pulumi.getter(name="runtimeClassName")
    def runtime_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        RuntimeClassName is a feature for selecting the container runtime configuration. The container runtime configuration is used to run a Pod's containers. More info: https://kubernetes.io/docs/concepts/containers/runtime-class
        """
        return pulumi.get(self, "runtime_class_name")

    @runtime_class_name.setter
    def runtime_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runtime_class_name", value)

    @property
    @pulumi.getter(name="schedulerName")
    def scheduler_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
        """
        return pulumi.get(self, "scheduler_name")

    @scheduler_name.setter
    def scheduler_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheduler_name", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecSecurityContextArgs']]:
        """
        SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty
        """
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecSecurityContextArgs']]):
        pulumi.set(self, "security_context", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md.
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter(name="shareProcessNamespace")
    def share_process_namespace(self) -> Optional[pulumi.Input[bool]]:
        """
        Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Defaults to false. Defaults to `false`.
        """
        return pulumi.get(self, "share_process_namespace")

    @share_process_namespace.setter
    def share_process_namespace(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "share_process_namespace", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, the fully qualified Pod hostname will be "...svc.". If not specified, the pod will not have a domainname at all..
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.
        """
        return pulumi.get(self, "termination_grace_period_seconds")

    @termination_grace_period_seconds.setter
    def termination_grace_period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "termination_grace_period_seconds", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecTolerationArgs']]]]:
        """
        If specified, the pod's toleration. Optional: Defaults to empty
        """
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecTolerationArgs']]]]):
        pulumi.set(self, "tolerations", value)

    @property
    @pulumi.getter(name="topologySpreadConstraints")
    def topology_spread_constraints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecTopologySpreadConstraintArgs']]]]:
        """
        describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints.
        """
        return pulumi.get(self, "topology_spread_constraints")

    @topology_spread_constraints.setter
    def topology_spread_constraints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecTopologySpreadConstraintArgs']]]]):
        pulumi.set(self, "topology_spread_constraints", value)

    @property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeArgs']]]]:
        """
        List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
        """
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeArgs']]]]):
        pulumi.set(self, "volumes", value)


if not MYPY:
    class K8sJobSpecTemplateSpecAffinityArgsDict(TypedDict):
        node_affinity: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityArgsDict']]
        """
        Node affinity scheduling rules for the pod.
        """
        pod_affinity: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityArgsDict']]
        """
        Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
        """
        pod_anti_affinity: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityArgsDict']]
        """
        Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
        """
elif False:
    K8sJobSpecTemplateSpecAffinityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecAffinityArgs:
    def __init__(__self__, *,
                 node_affinity: Optional[pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityArgs']] = None,
                 pod_affinity: Optional[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityArgs']] = None,
                 pod_anti_affinity: Optional[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityArgs']] = None):
        """
        :param pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityArgs'] node_affinity: Node affinity scheduling rules for the pod.
        :param pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityArgs'] pod_affinity: Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
        :param pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityArgs'] pod_anti_affinity: Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
        """
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityArgs']]:
        """
        Node affinity scheduling rules for the pod.
        """
        return pulumi.get(self, "node_affinity")

    @node_affinity.setter
    def node_affinity(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityArgs']]):
        pulumi.set(self, "node_affinity", value)

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityArgs']]:
        """
        Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
        """
        return pulumi.get(self, "pod_affinity")

    @pod_affinity.setter
    def pod_affinity(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityArgs']]):
        pulumi.set(self, "pod_affinity", value)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityArgs']]:
        """
        Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
        """
        return pulumi.get(self, "pod_anti_affinity")

    @pod_anti_affinity.setter
    def pod_anti_affinity(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityArgs']]):
        pulumi.set(self, "pod_anti_affinity", value)


if not MYPY:
    class K8sJobSpecTemplateSpecAffinityNodeAffinityArgsDict(TypedDict):
        preferred_during_scheduling_ignored_during_executions: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict']]]]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_execution: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict']]
        """
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a node label update), the system may or may not try to eventually evict the pod from its node.
        """
elif False:
    K8sJobSpecTemplateSpecAffinityNodeAffinityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecAffinityNodeAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_executions: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None,
                 required_during_scheduling_ignored_during_execution: Optional[pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_executions: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
        :param pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs'] required_during_scheduling_ignored_during_execution: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a node label update), the system may or may not try to eventually evict the pod from its node.
        """
        if preferred_during_scheduling_ignored_during_executions is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_executions", preferred_during_scheduling_ignored_during_executions)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecutions")
    def preferred_during_scheduling_ignored_during_executions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_executions")

    @preferred_during_scheduling_ignored_during_executions.setter
    def preferred_during_scheduling_ignored_during_executions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_executions", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]:
        """
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a node label update), the system may or may not try to eventually evict the pod from its node.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


if not MYPY:
    class K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict(TypedDict):
        preference: pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgsDict']
        """
        A node selector term, associated with the corresponding weight.
        """
        weight: NotRequired[pulumi.Input[int]]
        """
        weight is in the range 1-100
        """
elif False:
    K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 preference: pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs'],
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs'] preference: A node selector term, associated with the corresponding weight.
        :param pulumi.Input[int] weight: weight is in the range 1-100
        """
        pulumi.set(__self__, "preference", preference)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(self) -> pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs']:
        """
        A node selector term, associated with the corresponding weight.
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs']):
        pulumi.set(self, "preference", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        weight is in the range 1-100
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


if not MYPY:
    class K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgsDict(TypedDict):
        match_expressions: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionArgsDict']]]]
        """
        List of node selector requirements. The requirements are ANDed.
        """
elif False:
    K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionArgs']]] match_expressions: List of node selector requirements. The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionArgs']]]]:
        """
        List of node selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionArgs']]]]):
        pulumi.set(self, "match_expressions", value)


if not MYPY:
    class K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
elif False:
    K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict(TypedDict):
        node_selector_terms: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermArgsDict']]]]
        """
        List of node selector terms. The terms are ORed.
        """
elif False:
    K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 node_selector_terms: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermArgs']]] node_selector_terms: List of node selector terms. The terms are ORed.
        """
        if node_selector_terms is not None:
            pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermArgs']]]]:
        """
        List of node selector terms. The terms are ORed.
        """
        return pulumi.get(self, "node_selector_terms")

    @node_selector_terms.setter
    def node_selector_terms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermArgs']]]]):
        pulumi.set(self, "node_selector_terms", value)


if not MYPY:
    class K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermArgsDict(TypedDict):
        match_expressions: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionArgsDict']]]]
        """
        List of node selector requirements. The requirements are ANDed.
        """
elif False:
    K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionArgs']]] match_expressions: List of node selector requirements. The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionArgs']]]]:
        """
        List of node selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionArgs']]]]):
        pulumi.set(self, "match_expressions", value)


if not MYPY:
    class K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
elif False:
    K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpressionArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class K8sJobSpecTemplateSpecAffinityPodAffinityArgsDict(TypedDict):
        preferred_during_scheduling_ignored_during_executions: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict']]]]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_executions: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict']]]]
        """
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
elif False:
    K8sJobSpecTemplateSpecAffinityPodAffinityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecAffinityPodAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_executions: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None,
                 required_during_scheduling_ignored_during_executions: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_executions: The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]] required_during_scheduling_ignored_during_executions: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_executions is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_executions", preferred_during_scheduling_ignored_during_executions)
        if required_during_scheduling_ignored_during_executions is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_executions", required_during_scheduling_ignored_during_executions)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecutions")
    def preferred_during_scheduling_ignored_during_executions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_executions")

    @preferred_during_scheduling_ignored_during_executions.setter
    def preferred_during_scheduling_ignored_during_executions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_executions", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecutions")
    def required_during_scheduling_ignored_during_executions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        """
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_executions")

    @required_during_scheduling_ignored_during_executions.setter
    def required_during_scheduling_ignored_during_executions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "required_during_scheduling_ignored_during_executions", value)


if not MYPY:
    class K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict(TypedDict):
        pod_affinity_term: pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict']
        """
        A pod affinity term, associated with the corresponding weight
        """
        weight: pulumi.Input[int]
        """
        weight associated with matching the corresponding podAffinityTerm, in the range 1-100
        """
elif False:
    K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 pod_affinity_term: pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs'],
                 weight: pulumi.Input[int]):
        """
        :param pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs'] pod_affinity_term: A pod affinity term, associated with the corresponding weight
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm, in the range 1-100
        """
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']:
        """
        A pod affinity term, associated with the corresponding weight
        """
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(self, value: pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Input[int]:
        """
        weight associated with matching the corresponding podAffinityTerm, in the range 1-100
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: pulumi.Input[int]):
        pulumi.set(self, "weight", value)


if not MYPY:
    class K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict(TypedDict):
        label_selectors: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict']]]]
        """
        A label query over a set of resources, in this case pods.
        """
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        empty topology key is interpreted by the scheduler as 'all topologies'
        """
elif False:
    K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs:
    def __init__(__self__, *,
                 label_selectors: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]]] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 topology_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]] label_selectors: A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
        :param pulumi.Input[str] topology_key: empty topology key is interpreted by the scheduler as 'all topologies'
        """
        if label_selectors is not None:
            pulumi.set(__self__, "label_selectors", label_selectors)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelectors")
    def label_selectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]]]:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selectors")

    @label_selectors.setter
    def label_selectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]]]):
        pulumi.set(self, "label_selectors", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        empty topology key is interpreted by the scheduler as 'all topologies'
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:
    class K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict(TypedDict):
        match_expressions: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgsDict']]]]
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
elif False:
    K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgs']]] match_expressions: A list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgs']]]]:
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


if not MYPY:
    class K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
elif False:
    K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict(TypedDict):
        label_selectors: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict']]]]
        """
        A label query over a set of resources, in this case pods.
        """
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        empty topology key is interpreted by the scheduler as 'all topologies'
        """
elif False:
    K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 label_selectors: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]]] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 topology_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]] label_selectors: A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
        :param pulumi.Input[str] topology_key: empty topology key is interpreted by the scheduler as 'all topologies'
        """
        if label_selectors is not None:
            pulumi.set(__self__, "label_selectors", label_selectors)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelectors")
    def label_selectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]]]:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selectors")

    @label_selectors.setter
    def label_selectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]]]):
        pulumi.set(self, "label_selectors", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        empty topology key is interpreted by the scheduler as 'all topologies'
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:
    class K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict(TypedDict):
        match_expressions: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgsDict']]]]
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
elif False:
    K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgs']]] match_expressions: A list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgs']]]]:
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


if not MYPY:
    class K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
elif False:
    K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class K8sJobSpecTemplateSpecAffinityPodAntiAffinityArgsDict(TypedDict):
        preferred_during_scheduling_ignored_during_executions: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict']]]]
        """
        The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
        """
        required_during_scheduling_ignored_during_executions: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict']]]]
        """
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
elif False:
    K8sJobSpecTemplateSpecAffinityPodAntiAffinityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecAffinityPodAntiAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_executions: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None,
                 required_during_scheduling_ignored_during_executions: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_executions: The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]] required_during_scheduling_ignored_during_executions: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_executions is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_executions", preferred_during_scheduling_ignored_during_executions)
        if required_during_scheduling_ignored_during_executions is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_executions", required_during_scheduling_ignored_during_executions)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecutions")
    def preferred_during_scheduling_ignored_during_executions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_executions")

    @preferred_during_scheduling_ignored_during_executions.setter
    def preferred_during_scheduling_ignored_during_executions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_executions", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecutions")
    def required_during_scheduling_ignored_during_executions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        """
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_executions")

    @required_during_scheduling_ignored_during_executions.setter
    def required_during_scheduling_ignored_during_executions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "required_during_scheduling_ignored_during_executions", value)


if not MYPY:
    class K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict(TypedDict):
        pod_affinity_term: pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict']
        """
        A pod affinity term, associated with the corresponding weight
        """
        weight: pulumi.Input[int]
        """
        weight associated with matching the corresponding podAffinityTerm, in the range 1-100
        """
elif False:
    K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 pod_affinity_term: pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs'],
                 weight: pulumi.Input[int]):
        """
        :param pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs'] pod_affinity_term: A pod affinity term, associated with the corresponding weight
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm, in the range 1-100
        """
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']:
        """
        A pod affinity term, associated with the corresponding weight
        """
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(self, value: pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Input[int]:
        """
        weight associated with matching the corresponding podAffinityTerm, in the range 1-100
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: pulumi.Input[int]):
        pulumi.set(self, "weight", value)


if not MYPY:
    class K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict(TypedDict):
        label_selectors: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict']]]]
        """
        A label query over a set of resources, in this case pods.
        """
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        empty topology key is interpreted by the scheduler as 'all topologies'
        """
elif False:
    K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs:
    def __init__(__self__, *,
                 label_selectors: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]]] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 topology_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]] label_selectors: A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
        :param pulumi.Input[str] topology_key: empty topology key is interpreted by the scheduler as 'all topologies'
        """
        if label_selectors is not None:
            pulumi.set(__self__, "label_selectors", label_selectors)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelectors")
    def label_selectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]]]:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selectors")

    @label_selectors.setter
    def label_selectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]]]):
        pulumi.set(self, "label_selectors", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        empty topology key is interpreted by the scheduler as 'all topologies'
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:
    class K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict(TypedDict):
        match_expressions: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgsDict']]]]
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
elif False:
    K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgs']]] match_expressions: A list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgs']]]]:
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


if not MYPY:
    class K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
elif False:
    K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict(TypedDict):
        label_selectors: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict']]]]
        """
        A label query over a set of resources, in this case pods.
        """
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        empty topology key is interpreted by the scheduler as 'all topologies'
        """
elif False:
    K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 label_selectors: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]]] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 topology_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]] label_selectors: A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
        :param pulumi.Input[str] topology_key: empty topology key is interpreted by the scheduler as 'all topologies'
        """
        if label_selectors is not None:
            pulumi.set(__self__, "label_selectors", label_selectors)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelectors")
    def label_selectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]]]:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selectors")

    @label_selectors.setter
    def label_selectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]]]):
        pulumi.set(self, "label_selectors", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        empty topology key is interpreted by the scheduler as 'all topologies'
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


if not MYPY:
    class K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict(TypedDict):
        match_expressions: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgsDict']]]]
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
elif False:
    K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgs']]] match_expressions: A list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgs']]]]:
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


if not MYPY:
    class K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
elif False:
    K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of the container specified as a DNS*LABEL. Each container in a pod must have a unique name (DNS*LABEL). Cannot be updated.
        """
        args: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR*NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        """
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR*NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        """
        env_froms: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvFromArgsDict']]]]
        """
        List of sources to populate environment variables in the container. The keys defined within a source must be a C*IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
        """
        envs: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvArgsDict']]]]
        """
        List of environment variables to set in the container. Cannot be updated.
        """
        image: NotRequired[pulumi.Input[str]]
        """
        Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
        """
        image_pull_policy: NotRequired[pulumi.Input[str]]
        """
        Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
        """
        lifecycle: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecycleArgsDict']]
        """
        Actions that the management system should take in response to container lifecycle events
        """
        liveness_probe: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecContainerLivenessProbeArgsDict']]
        """
        Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        ports: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerPortArgsDict']]]]
        """
        List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
        """
        readiness_probe: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecContainerReadinessProbeArgsDict']]
        """
        Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        resources: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecContainerResourcesArgsDict']]
        """
        Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        """
        security_context: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecContainerSecurityContextArgsDict']]
        """
        Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        """
        startup_probe: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecContainerStartupProbeArgsDict']]
        """
        StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        stdin: NotRequired[pulumi.Input[bool]]
        """
        Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.  Defaults to `false`.
        """
        stdin_once: NotRequired[pulumi.Input[bool]]
        """
        Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Defaults to `false`.
        """
        termination_message_path: NotRequired[pulumi.Input[str]]
        """
        Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated. Defaults to `/dev/termination-log`.
        """
        termination_message_policy: NotRequired[pulumi.Input[str]]
        """
        Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
        """
        tty: NotRequired[pulumi.Input[bool]]
        """
        Whether this container should allocate a TTY for itself Defaults to `false`.
        """
        volume_mounts: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerVolumeMountArgsDict']]]]
        """
        Pod volumes to mount into the container's filesystem. Cannot be updated.
        """
        working_dir: NotRequired[pulumi.Input[str]]
        """
        Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
        """
elif False:
    K8sJobSpecTemplateSpecContainerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 env_froms: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvFromArgs']]]] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvArgs']]]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 image_pull_policy: Optional[pulumi.Input[str]] = None,
                 lifecycle: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecycleArgs']] = None,
                 liveness_probe: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerLivenessProbeArgs']] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerPortArgs']]]] = None,
                 readiness_probe: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerReadinessProbeArgs']] = None,
                 resources: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerResourcesArgs']] = None,
                 security_context: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerSecurityContextArgs']] = None,
                 startup_probe: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerStartupProbeArgs']] = None,
                 stdin: Optional[pulumi.Input[bool]] = None,
                 stdin_once: Optional[pulumi.Input[bool]] = None,
                 termination_message_path: Optional[pulumi.Input[str]] = None,
                 termination_message_policy: Optional[pulumi.Input[str]] = None,
                 tty: Optional[pulumi.Input[bool]] = None,
                 volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerVolumeMountArgs']]]] = None,
                 working_dir: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of the container specified as a DNS*LABEL. Each container in a pod must have a unique name (DNS*LABEL). Cannot be updated.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] args: Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR*NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        :param pulumi.Input[Sequence[pulumi.Input[str]]] commands: Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR*NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvFromArgs']]] env_froms: List of sources to populate environment variables in the container. The keys defined within a source must be a C*IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvArgs']]] envs: List of environment variables to set in the container. Cannot be updated.
        :param pulumi.Input[str] image: Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
        :param pulumi.Input[str] image_pull_policy: Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
        :param pulumi.Input['K8sJobSpecTemplateSpecContainerLifecycleArgs'] lifecycle: Actions that the management system should take in response to container lifecycle events
        :param pulumi.Input['K8sJobSpecTemplateSpecContainerLivenessProbeArgs'] liveness_probe: Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerPortArgs']]] ports: List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
        :param pulumi.Input['K8sJobSpecTemplateSpecContainerReadinessProbeArgs'] readiness_probe: Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        :param pulumi.Input['K8sJobSpecTemplateSpecContainerResourcesArgs'] resources: Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        :param pulumi.Input['K8sJobSpecTemplateSpecContainerSecurityContextArgs'] security_context: Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        :param pulumi.Input['K8sJobSpecTemplateSpecContainerStartupProbeArgs'] startup_probe: StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param pulumi.Input[bool] stdin: Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.  Defaults to `false`.
        :param pulumi.Input[bool] stdin_once: Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Defaults to `false`.
        :param pulumi.Input[str] termination_message_path: Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated. Defaults to `/dev/termination-log`.
        :param pulumi.Input[str] termination_message_policy: Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
        :param pulumi.Input[bool] tty: Whether this container should allocate a TTY for itself Defaults to `false`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerVolumeMountArgs']]] volume_mounts: Pod volumes to mount into the container's filesystem. Cannot be updated.
        :param pulumi.Input[str] working_dir: Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
        """
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if env_froms is not None:
            pulumi.set(__self__, "env_froms", env_froms)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if startup_probe is not None:
            pulumi.set(__self__, "startup_probe", startup_probe)
        if stdin is not None:
            pulumi.set(__self__, "stdin", stdin)
        if stdin_once is not None:
            pulumi.set(__self__, "stdin_once", stdin_once)
        if termination_message_path is not None:
            pulumi.set(__self__, "termination_message_path", termination_message_path)
        if termination_message_policy is not None:
            pulumi.set(__self__, "termination_message_policy", termination_message_policy)
        if tty is not None:
            pulumi.set(__self__, "tty", tty)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the container specified as a DNS*LABEL. Each container in a pod must have a unique name (DNS*LABEL). Cannot be updated.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR*NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        """
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "args", value)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR*NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)

    @property
    @pulumi.getter(name="envFroms")
    def env_froms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvFromArgs']]]]:
        """
        List of sources to populate environment variables in the container. The keys defined within a source must be a C*IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
        """
        return pulumi.get(self, "env_froms")

    @env_froms.setter
    def env_froms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvFromArgs']]]]):
        pulumi.set(self, "env_froms", value)

    @property
    @pulumi.getter
    def envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvArgs']]]]:
        """
        List of environment variables to set in the container. Cannot be updated.
        """
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvArgs']]]]):
        pulumi.set(self, "envs", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
        """
        return pulumi.get(self, "image_pull_policy")

    @image_pull_policy.setter
    def image_pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_policy", value)

    @property
    @pulumi.getter
    def lifecycle(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecycleArgs']]:
        """
        Actions that the management system should take in response to container lifecycle events
        """
        return pulumi.get(self, "lifecycle")

    @lifecycle.setter
    def lifecycle(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecycleArgs']]):
        pulumi.set(self, "lifecycle", value)

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerLivenessProbeArgs']]:
        """
        Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        return pulumi.get(self, "liveness_probe")

    @liveness_probe.setter
    def liveness_probe(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerLivenessProbeArgs']]):
        pulumi.set(self, "liveness_probe", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerPortArgs']]]]:
        """
        List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerPortArgs']]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerReadinessProbeArgs']]:
        """
        Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        return pulumi.get(self, "readiness_probe")

    @readiness_probe.setter
    def readiness_probe(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerReadinessProbeArgs']]):
        pulumi.set(self, "readiness_probe", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerResourcesArgs']]:
        """
        Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerSecurityContextArgs']]:
        """
        Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        """
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerSecurityContextArgs']]):
        pulumi.set(self, "security_context", value)

    @property
    @pulumi.getter(name="startupProbe")
    def startup_probe(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerStartupProbeArgs']]:
        """
        StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "startup_probe")

    @startup_probe.setter
    def startup_probe(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerStartupProbeArgs']]):
        pulumi.set(self, "startup_probe", value)

    @property
    @pulumi.getter
    def stdin(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.  Defaults to `false`.
        """
        return pulumi.get(self, "stdin")

    @stdin.setter
    def stdin(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stdin", value)

    @property
    @pulumi.getter(name="stdinOnce")
    def stdin_once(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Defaults to `false`.
        """
        return pulumi.get(self, "stdin_once")

    @stdin_once.setter
    def stdin_once(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stdin_once", value)

    @property
    @pulumi.getter(name="terminationMessagePath")
    def termination_message_path(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated. Defaults to `/dev/termination-log`.
        """
        return pulumi.get(self, "termination_message_path")

    @termination_message_path.setter
    def termination_message_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "termination_message_path", value)

    @property
    @pulumi.getter(name="terminationMessagePolicy")
    def termination_message_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
        """
        return pulumi.get(self, "termination_message_policy")

    @termination_message_policy.setter
    def termination_message_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "termination_message_policy", value)

    @property
    @pulumi.getter
    def tty(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this container should allocate a TTY for itself Defaults to `false`.
        """
        return pulumi.get(self, "tty")

    @tty.setter
    def tty(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tty", value)

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerVolumeMountArgs']]]]:
        """
        Pod volumes to mount into the container's filesystem. Cannot be updated.
        """
        return pulumi.get(self, "volume_mounts")

    @volume_mounts.setter
    def volume_mounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerVolumeMountArgs']]]]):
        pulumi.set(self, "volume_mounts", value)

    @property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[pulumi.Input[str]]:
        """
        Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
        """
        return pulumi.get(self, "working_dir")

    @working_dir.setter
    def working_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "working_dir", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerEnvArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of the environment variable. Must be a C_IDENTIFIER
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Variable references $(VAR*NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        value_from: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvValueFromArgsDict']]
        """
        Source for the environment variable's value
        """
elif False:
    K8sJobSpecTemplateSpecContainerEnvArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerEnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None,
                 value_from: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvValueFromArgs']] = None):
        """
        :param pulumi.Input[str] name: Name of the environment variable. Must be a C_IDENTIFIER
        :param pulumi.Input[str] value: Variable references $(VAR*NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        :param pulumi.Input['K8sJobSpecTemplateSpecContainerEnvValueFromArgs'] value_from: Source for the environment variable's value
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the environment variable. Must be a C_IDENTIFIER
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Variable references $(VAR*NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvValueFromArgs']]:
        """
        Source for the environment variable's value
        """
        return pulumi.get(self, "value_from")

    @value_from.setter
    def value_from(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvValueFromArgs']]):
        pulumi.set(self, "value_from", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerEnvFromArgsDict(TypedDict):
        config_map_ref: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvFromConfigMapRefArgsDict']]
        """
        The ConfigMap to select from
        """
        prefix: NotRequired[pulumi.Input[str]]
        """
        An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
        """
        secret_ref: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvFromSecretRefArgsDict']]
        """
        The Secret to select from
        """
elif False:
    K8sJobSpecTemplateSpecContainerEnvFromArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerEnvFromArgs:
    def __init__(__self__, *,
                 config_map_ref: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvFromConfigMapRefArgs']] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 secret_ref: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvFromSecretRefArgs']] = None):
        """
        :param pulumi.Input['K8sJobSpecTemplateSpecContainerEnvFromConfigMapRefArgs'] config_map_ref: The ConfigMap to select from
        :param pulumi.Input[str] prefix: An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
        :param pulumi.Input['K8sJobSpecTemplateSpecContainerEnvFromSecretRefArgs'] secret_ref: The Secret to select from
        """
        if config_map_ref is not None:
            pulumi.set(__self__, "config_map_ref", config_map_ref)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="configMapRef")
    def config_map_ref(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvFromConfigMapRefArgs']]:
        """
        The ConfigMap to select from
        """
        return pulumi.get(self, "config_map_ref")

    @config_map_ref.setter
    def config_map_ref(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvFromConfigMapRefArgs']]):
        pulumi.set(self, "config_map_ref", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvFromSecretRefArgs']]:
        """
        The Secret to select from
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvFromSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerEnvFromConfigMapRefArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        optional: NotRequired[pulumi.Input[bool]]
        """
        Specify whether the ConfigMap must be defined
        """
elif False:
    K8sJobSpecTemplateSpecContainerEnvFromConfigMapRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerEnvFromConfigMapRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap must be defined
        """
        pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerEnvFromSecretRefArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        optional: NotRequired[pulumi.Input[bool]]
        """
        Specify whether the Secret must be defined
        """
elif False:
    K8sJobSpecTemplateSpecContainerEnvFromSecretRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerEnvFromSecretRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[bool] optional: Specify whether the Secret must be defined
        """
        pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerEnvValueFromArgsDict(TypedDict):
        config_map_key_ref: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvValueFromConfigMapKeyRefArgsDict']]
        """
        Selects a key of a ConfigMap.
        """
        field_ref: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvValueFromFieldRefArgsDict']]
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
        """
        resource_field_ref: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvValueFromResourceFieldRefArgsDict']]
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        secret_key_ref: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvValueFromSecretKeyRefArgsDict']]
        """
        Selects a key of a secret in the pod's namespace.
        """
elif False:
    K8sJobSpecTemplateSpecContainerEnvValueFromArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerEnvValueFromArgs:
    def __init__(__self__, *,
                 config_map_key_ref: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvValueFromConfigMapKeyRefArgs']] = None,
                 field_ref: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvValueFromFieldRefArgs']] = None,
                 resource_field_ref: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvValueFromResourceFieldRefArgs']] = None,
                 secret_key_ref: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvValueFromSecretKeyRefArgs']] = None):
        """
        :param pulumi.Input['K8sJobSpecTemplateSpecContainerEnvValueFromConfigMapKeyRefArgs'] config_map_key_ref: Selects a key of a ConfigMap.
        :param pulumi.Input['K8sJobSpecTemplateSpecContainerEnvValueFromFieldRefArgs'] field_ref: Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
        :param pulumi.Input['K8sJobSpecTemplateSpecContainerEnvValueFromResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input['K8sJobSpecTemplateSpecContainerEnvValueFromSecretKeyRefArgs'] secret_key_ref: Selects a key of a secret in the pod's namespace.
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvValueFromConfigMapKeyRefArgs']]:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @config_map_key_ref.setter
    def config_map_key_ref(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvValueFromConfigMapKeyRefArgs']]):
        pulumi.set(self, "config_map_key_ref", value)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvValueFromFieldRefArgs']]:
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvValueFromFieldRefArgs']]):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvValueFromResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvValueFromResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvValueFromSecretKeyRefArgs']]:
        """
        Selects a key of a secret in the pod's namespace.
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerEnvValueFromSecretKeyRefArgs']]):
        pulumi.set(self, "secret_key_ref", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerEnvValueFromConfigMapKeyRefArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        The key to select.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        optional: NotRequired[pulumi.Input[bool]]
        """
        Specify whether the ConfigMap or its key must be defined.
        """
elif False:
    K8sJobSpecTemplateSpecContainerEnvValueFromConfigMapKeyRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerEnvValueFromConfigMapKeyRefArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] key: The key to select.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap or its key must be defined.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap or its key must be defined.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerEnvValueFromFieldRefArgsDict(TypedDict):
        api_version: NotRequired[pulumi.Input[str]]
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1". Defaults to `v1`.
        """
        field_path: NotRequired[pulumi.Input[str]]
        """
        Path of the field to select in the specified API version
        """
elif False:
    K8sJobSpecTemplateSpecContainerEnvValueFromFieldRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerEnvValueFromFieldRefArgs:
    def __init__(__self__, *,
                 api_version: Optional[pulumi.Input[str]] = None,
                 field_path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1". Defaults to `v1`.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if field_path is not None:
            pulumi.set(__self__, "field_path", field_path)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1". Defaults to `v1`.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path of the field to select in the specified API version
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_path", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerEnvValueFromResourceFieldRefArgsDict(TypedDict):
        resource: pulumi.Input[str]
        """
        Resource to select
        """
        container_name: NotRequired[pulumi.Input[str]]
        divisor: NotRequired[pulumi.Input[str]]
        """
        Defaults to `1`.
        """
elif False:
    K8sJobSpecTemplateSpecContainerEnvValueFromResourceFieldRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerEnvValueFromResourceFieldRefArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 container_name: Optional[pulumi.Input[str]] = None,
                 divisor: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] resource: Resource to select
        :param pulumi.Input[str] divisor: Defaults to `1`.
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `1`.
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "divisor", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerEnvValueFromSecretKeyRefArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        The key of the secret to select from. Must be a valid secret key.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        optional: NotRequired[pulumi.Input[bool]]
        """
        Specify whether the Secret or its key must be defined.
        """
elif False:
    K8sJobSpecTemplateSpecContainerEnvValueFromSecretKeyRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerEnvValueFromSecretKeyRefArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] key: The key of the secret to select from. Must be a valid secret key.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[bool] optional: Specify whether the Secret or its key must be defined.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the secret to select from. Must be a valid secret key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret or its key must be defined.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerLifecycleArgsDict(TypedDict):
        post_starts: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePostStartArgsDict']]]]
        """
        post*start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        pre_stops: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePreStopArgsDict']]]]
        """
        pre*stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
elif False:
    K8sJobSpecTemplateSpecContainerLifecycleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerLifecycleArgs:
    def __init__(__self__, *,
                 post_starts: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePostStartArgs']]]] = None,
                 pre_stops: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePreStopArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePostStartArgs']]] post_starts: post*start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePreStopArgs']]] pre_stops: pre*stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        if post_starts is not None:
            pulumi.set(__self__, "post_starts", post_starts)
        if pre_stops is not None:
            pulumi.set(__self__, "pre_stops", pre_stops)

    @property
    @pulumi.getter(name="postStarts")
    def post_starts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePostStartArgs']]]]:
        """
        post*start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        return pulumi.get(self, "post_starts")

    @post_starts.setter
    def post_starts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePostStartArgs']]]]):
        pulumi.set(self, "post_starts", value)

    @property
    @pulumi.getter(name="preStops")
    def pre_stops(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePreStopArgs']]]]:
        """
        pre*stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        return pulumi.get(self, "pre_stops")

    @pre_stops.setter
    def pre_stops(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePreStopArgs']]]]):
        pulumi.set(self, "pre_stops", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerLifecyclePostStartArgsDict(TypedDict):
        exec_: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePostStartExecArgsDict']]
        """
        exec specifies the action to take.
        """
        http_get: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGetArgsDict']]
        """
        Specifies the http request to perform.
        """
        tcp_sockets: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePostStartTcpSocketArgsDict']]]]
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
elif False:
    K8sJobSpecTemplateSpecContainerLifecyclePostStartArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerLifecyclePostStartArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePostStartExecArgs']] = None,
                 http_get: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGetArgs']] = None,
                 tcp_sockets: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePostStartTcpSocketArgs']]]] = None):
        """
        :param pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePostStartExecArgs'] exec_: exec specifies the action to take.
        :param pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGetArgs'] http_get: Specifies the http request to perform.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePostStartTcpSocketArgs']]] tcp_sockets: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_sockets is not None:
            pulumi.set(__self__, "tcp_sockets", tcp_sockets)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePostStartExecArgs']]:
        """
        exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePostStartExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGetArgs']]:
        """
        Specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="tcpSockets")
    def tcp_sockets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePostStartTcpSocketArgs']]]]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        return pulumi.get(self, "tcp_sockets")

    @tcp_sockets.setter
    def tcp_sockets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePostStartTcpSocketArgs']]]]):
        pulumi.set(self, "tcp_sockets", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerLifecyclePostStartExecArgsDict(TypedDict):
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
elif False:
    K8sJobSpecTemplateSpecContainerLifecyclePostStartExecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerLifecyclePostStartExecArgs:
    def __init__(__self__, *,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] commands: Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGetArgsDict(TypedDict):
        host: NotRequired[pulumi.Input[str]]
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        http_headers: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeaderArgsDict']]]]
        """
        Scheme to use for connecting to the host.
        """
        path: NotRequired[pulumi.Input[str]]
        """
        Path to access on the HTTP server.
        """
        port: NotRequired[pulumi.Input[str]]
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        scheme: NotRequired[pulumi.Input[str]]
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
elif False:
    K8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGetArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeaderArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeaderArgs']]] http_headers: Scheme to use for connecting to the host.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeaderArgs']]]]:
        """
        Scheme to use for connecting to the host.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeaderArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeaderArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The header field name
        """
        value: NotRequired[pulumi.Input[str]]
        """
        The header field value
        """
elif False:
    K8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeaderArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerLifecyclePostStartTcpSocketArgsDict(TypedDict):
        port: pulumi.Input[str]
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
elif False:
    K8sJobSpecTemplateSpecContainerLifecyclePostStartTcpSocketArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerLifecyclePostStartTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[str]):
        """
        :param pulumi.Input[str] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[str]:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[str]):
        pulumi.set(self, "port", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerLifecyclePreStopArgsDict(TypedDict):
        exec_: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePreStopExecArgsDict']]
        """
        exec specifies the action to take.
        """
        http_get: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGetArgsDict']]
        """
        Specifies the http request to perform.
        """
        tcp_sockets: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePreStopTcpSocketArgsDict']]]]
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
elif False:
    K8sJobSpecTemplateSpecContainerLifecyclePreStopArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerLifecyclePreStopArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePreStopExecArgs']] = None,
                 http_get: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGetArgs']] = None,
                 tcp_sockets: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePreStopTcpSocketArgs']]]] = None):
        """
        :param pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePreStopExecArgs'] exec_: exec specifies the action to take.
        :param pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGetArgs'] http_get: Specifies the http request to perform.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePreStopTcpSocketArgs']]] tcp_sockets: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_sockets is not None:
            pulumi.set(__self__, "tcp_sockets", tcp_sockets)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePreStopExecArgs']]:
        """
        exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePreStopExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGetArgs']]:
        """
        Specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="tcpSockets")
    def tcp_sockets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePreStopTcpSocketArgs']]]]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        return pulumi.get(self, "tcp_sockets")

    @tcp_sockets.setter
    def tcp_sockets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePreStopTcpSocketArgs']]]]):
        pulumi.set(self, "tcp_sockets", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerLifecyclePreStopExecArgsDict(TypedDict):
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
elif False:
    K8sJobSpecTemplateSpecContainerLifecyclePreStopExecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerLifecyclePreStopExecArgs:
    def __init__(__self__, *,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] commands: Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGetArgsDict(TypedDict):
        host: NotRequired[pulumi.Input[str]]
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        http_headers: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeaderArgsDict']]]]
        """
        Scheme to use for connecting to the host.
        """
        path: NotRequired[pulumi.Input[str]]
        """
        Path to access on the HTTP server.
        """
        port: NotRequired[pulumi.Input[str]]
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        scheme: NotRequired[pulumi.Input[str]]
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
elif False:
    K8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGetArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeaderArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeaderArgs']]] http_headers: Scheme to use for connecting to the host.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeaderArgs']]]]:
        """
        Scheme to use for connecting to the host.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeaderArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeaderArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The header field name
        """
        value: NotRequired[pulumi.Input[str]]
        """
        The header field value
        """
elif False:
    K8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeaderArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerLifecyclePreStopTcpSocketArgsDict(TypedDict):
        port: pulumi.Input[str]
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
elif False:
    K8sJobSpecTemplateSpecContainerLifecyclePreStopTcpSocketArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerLifecyclePreStopTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[str]):
        """
        :param pulumi.Input[str] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[str]:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[str]):
        pulumi.set(self, "port", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerLivenessProbeArgsDict(TypedDict):
        exec_: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecContainerLivenessProbeExecArgsDict']]
        """
        exec specifies the action to take.
        """
        failure_threshold: NotRequired[pulumi.Input[int]]
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        """
        grpcs: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLivenessProbeGrpcArgsDict']]]]
        """
        GRPC specifies an action involving a GRPC port.
        """
        http_get: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecContainerLivenessProbeHttpGetArgsDict']]
        """
        Specifies the http request to perform.
        """
        initial_delay_seconds: NotRequired[pulumi.Input[int]]
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        period_seconds: NotRequired[pulumi.Input[int]]
        """
        How often (in seconds) to perform the probe Defaults to `10`.
        """
        success_threshold: NotRequired[pulumi.Input[int]]
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        """
        tcp_sockets: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLivenessProbeTcpSocketArgsDict']]]]
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        timeout_seconds: NotRequired[pulumi.Input[int]]
        """
        Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
elif False:
    K8sJobSpecTemplateSpecContainerLivenessProbeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerLivenessProbeArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerLivenessProbeExecArgs']] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 grpcs: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLivenessProbeGrpcArgs']]]] = None,
                 http_get: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerLivenessProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 tcp_sockets: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLivenessProbeTcpSocketArgs']]]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['K8sJobSpecTemplateSpecContainerLivenessProbeExecArgs'] exec_: exec specifies the action to take.
        :param pulumi.Input[int] failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLivenessProbeGrpcArgs']]] grpcs: GRPC specifies an action involving a GRPC port.
        :param pulumi.Input['K8sJobSpecTemplateSpecContainerLivenessProbeHttpGetArgs'] http_get: Specifies the http request to perform.
        :param pulumi.Input[int] initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        :param pulumi.Input[int] period_seconds: How often (in seconds) to perform the probe Defaults to `10`.
        :param pulumi.Input[int] success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLivenessProbeTcpSocketArgs']]] tcp_sockets: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        :param pulumi.Input[int] timeout_seconds: Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if grpcs is not None:
            pulumi.set(__self__, "grpcs", grpcs)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_sockets is not None:
            pulumi.set(__self__, "tcp_sockets", tcp_sockets)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerLivenessProbeExecArgs']]:
        """
        exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerLivenessProbeExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter
    def grpcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLivenessProbeGrpcArgs']]]]:
        """
        GRPC specifies an action involving a GRPC port.
        """
        return pulumi.get(self, "grpcs")

    @grpcs.setter
    def grpcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLivenessProbeGrpcArgs']]]]):
        pulumi.set(self, "grpcs", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerLivenessProbeHttpGetArgs']]:
        """
        Specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerLivenessProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        How often (in seconds) to perform the probe Defaults to `10`.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="tcpSockets")
    def tcp_sockets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLivenessProbeTcpSocketArgs']]]]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        return pulumi.get(self, "tcp_sockets")

    @tcp_sockets.setter
    def tcp_sockets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLivenessProbeTcpSocketArgs']]]]):
        pulumi.set(self, "tcp_sockets", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerLivenessProbeExecArgsDict(TypedDict):
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
elif False:
    K8sJobSpecTemplateSpecContainerLivenessProbeExecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerLivenessProbeExecArgs:
    def __init__(__self__, *,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] commands: Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerLivenessProbeGrpcArgsDict(TypedDict):
        port: pulumi.Input[int]
        """
        Number of the port to access on the container. Number must be in the range 1 to 65535.
        """
        service: NotRequired[pulumi.Input[str]]
        """
        Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
elif False:
    K8sJobSpecTemplateSpecContainerLivenessProbeGrpcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerLivenessProbeGrpcArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 service: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] port: Number of the port to access on the container. Number must be in the range 1 to 65535.
        :param pulumi.Input[str] service: Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
        pulumi.set(__self__, "port", port)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        Number of the port to access on the container. Number must be in the range 1 to 65535.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerLivenessProbeHttpGetArgsDict(TypedDict):
        host: NotRequired[pulumi.Input[str]]
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        http_headers: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeaderArgsDict']]]]
        """
        Scheme to use for connecting to the host.
        """
        path: NotRequired[pulumi.Input[str]]
        """
        Path to access on the HTTP server.
        """
        port: NotRequired[pulumi.Input[str]]
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        scheme: NotRequired[pulumi.Input[str]]
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
elif False:
    K8sJobSpecTemplateSpecContainerLivenessProbeHttpGetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerLivenessProbeHttpGetArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeaderArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeaderArgs']]] http_headers: Scheme to use for connecting to the host.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeaderArgs']]]]:
        """
        Scheme to use for connecting to the host.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeaderArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeaderArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The header field name
        """
        value: NotRequired[pulumi.Input[str]]
        """
        The header field value
        """
elif False:
    K8sJobSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeaderArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerLivenessProbeTcpSocketArgsDict(TypedDict):
        port: pulumi.Input[str]
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
elif False:
    K8sJobSpecTemplateSpecContainerLivenessProbeTcpSocketArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerLivenessProbeTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[str]):
        """
        :param pulumi.Input[str] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[str]:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[str]):
        pulumi.set(self, "port", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerPortArgsDict(TypedDict):
        container_port: pulumi.Input[int]
        """
        Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
        """
        host_ip: NotRequired[pulumi.Input[str]]
        """
        What host IP to bind the external port to.
        """
        host_port: NotRequired[pulumi.Input[int]]
        """
        Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        If specified, this must be an IANA*SVC*NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
        """
        protocol: NotRequired[pulumi.Input[str]]
        """
        Protocol for port. Must be UDP or TCP. Defaults to "TCP". Defaults to `TCP`.
        """
elif False:
    K8sJobSpecTemplateSpecContainerPortArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerPortArgs:
    def __init__(__self__, *,
                 container_port: pulumi.Input[int],
                 host_ip: Optional[pulumi.Input[str]] = None,
                 host_port: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] container_port: Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
        :param pulumi.Input[str] host_ip: What host IP to bind the external port to.
        :param pulumi.Input[int] host_port: Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        :param pulumi.Input[str] name: If specified, this must be an IANA*SVC*NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
        :param pulumi.Input[str] protocol: Protocol for port. Must be UDP or TCP. Defaults to "TCP". Defaults to `TCP`.
        """
        pulumi.set(__self__, "container_port", container_port)
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if host_port is not None:
            pulumi.set(__self__, "host_port", host_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> pulumi.Input[int]:
        """
        Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
        """
        return pulumi.get(self, "container_port")

    @container_port.setter
    def container_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "container_port", value)

    @property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> Optional[pulumi.Input[str]]:
        """
        What host IP to bind the external port to.
        """
        return pulumi.get(self, "host_ip")

    @host_ip.setter
    def host_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_ip", value)

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> Optional[pulumi.Input[int]]:
        """
        Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        """
        return pulumi.get(self, "host_port")

    @host_port.setter
    def host_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "host_port", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, this must be an IANA*SVC*NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol for port. Must be UDP or TCP. Defaults to "TCP". Defaults to `TCP`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerReadinessProbeArgsDict(TypedDict):
        exec_: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecContainerReadinessProbeExecArgsDict']]
        """
        exec specifies the action to take.
        """
        failure_threshold: NotRequired[pulumi.Input[int]]
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        """
        grpcs: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerReadinessProbeGrpcArgsDict']]]]
        """
        GRPC specifies an action involving a GRPC port.
        """
        http_get: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecContainerReadinessProbeHttpGetArgsDict']]
        """
        Specifies the http request to perform.
        """
        initial_delay_seconds: NotRequired[pulumi.Input[int]]
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        period_seconds: NotRequired[pulumi.Input[int]]
        """
        How often (in seconds) to perform the probe Defaults to `10`.
        """
        success_threshold: NotRequired[pulumi.Input[int]]
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        """
        tcp_sockets: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerReadinessProbeTcpSocketArgsDict']]]]
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        timeout_seconds: NotRequired[pulumi.Input[int]]
        """
        Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
elif False:
    K8sJobSpecTemplateSpecContainerReadinessProbeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerReadinessProbeArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerReadinessProbeExecArgs']] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 grpcs: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerReadinessProbeGrpcArgs']]]] = None,
                 http_get: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerReadinessProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 tcp_sockets: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerReadinessProbeTcpSocketArgs']]]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['K8sJobSpecTemplateSpecContainerReadinessProbeExecArgs'] exec_: exec specifies the action to take.
        :param pulumi.Input[int] failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerReadinessProbeGrpcArgs']]] grpcs: GRPC specifies an action involving a GRPC port.
        :param pulumi.Input['K8sJobSpecTemplateSpecContainerReadinessProbeHttpGetArgs'] http_get: Specifies the http request to perform.
        :param pulumi.Input[int] initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        :param pulumi.Input[int] period_seconds: How often (in seconds) to perform the probe Defaults to `10`.
        :param pulumi.Input[int] success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerReadinessProbeTcpSocketArgs']]] tcp_sockets: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        :param pulumi.Input[int] timeout_seconds: Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if grpcs is not None:
            pulumi.set(__self__, "grpcs", grpcs)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_sockets is not None:
            pulumi.set(__self__, "tcp_sockets", tcp_sockets)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerReadinessProbeExecArgs']]:
        """
        exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerReadinessProbeExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter
    def grpcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerReadinessProbeGrpcArgs']]]]:
        """
        GRPC specifies an action involving a GRPC port.
        """
        return pulumi.get(self, "grpcs")

    @grpcs.setter
    def grpcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerReadinessProbeGrpcArgs']]]]):
        pulumi.set(self, "grpcs", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerReadinessProbeHttpGetArgs']]:
        """
        Specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerReadinessProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        How often (in seconds) to perform the probe Defaults to `10`.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="tcpSockets")
    def tcp_sockets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerReadinessProbeTcpSocketArgs']]]]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        return pulumi.get(self, "tcp_sockets")

    @tcp_sockets.setter
    def tcp_sockets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerReadinessProbeTcpSocketArgs']]]]):
        pulumi.set(self, "tcp_sockets", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerReadinessProbeExecArgsDict(TypedDict):
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
elif False:
    K8sJobSpecTemplateSpecContainerReadinessProbeExecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerReadinessProbeExecArgs:
    def __init__(__self__, *,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] commands: Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerReadinessProbeGrpcArgsDict(TypedDict):
        port: pulumi.Input[int]
        """
        Number of the port to access on the container. Number must be in the range 1 to 65535.
        """
        service: NotRequired[pulumi.Input[str]]
        """
        Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
elif False:
    K8sJobSpecTemplateSpecContainerReadinessProbeGrpcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerReadinessProbeGrpcArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 service: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] port: Number of the port to access on the container. Number must be in the range 1 to 65535.
        :param pulumi.Input[str] service: Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
        pulumi.set(__self__, "port", port)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        Number of the port to access on the container. Number must be in the range 1 to 65535.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerReadinessProbeHttpGetArgsDict(TypedDict):
        host: NotRequired[pulumi.Input[str]]
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        http_headers: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeaderArgsDict']]]]
        """
        Scheme to use for connecting to the host.
        """
        path: NotRequired[pulumi.Input[str]]
        """
        Path to access on the HTTP server.
        """
        port: NotRequired[pulumi.Input[str]]
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        scheme: NotRequired[pulumi.Input[str]]
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
elif False:
    K8sJobSpecTemplateSpecContainerReadinessProbeHttpGetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerReadinessProbeHttpGetArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeaderArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeaderArgs']]] http_headers: Scheme to use for connecting to the host.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeaderArgs']]]]:
        """
        Scheme to use for connecting to the host.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeaderArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeaderArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The header field name
        """
        value: NotRequired[pulumi.Input[str]]
        """
        The header field value
        """
elif False:
    K8sJobSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeaderArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerReadinessProbeTcpSocketArgsDict(TypedDict):
        port: pulumi.Input[str]
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
elif False:
    K8sJobSpecTemplateSpecContainerReadinessProbeTcpSocketArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerReadinessProbeTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[str]):
        """
        :param pulumi.Input[str] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[str]:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[str]):
        pulumi.set(self, "port", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerResourcesArgsDict(TypedDict):
        limits: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        """
        requests: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
elif False:
    K8sJobSpecTemplateSpecContainerResourcesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] limits: Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "requests", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerSecurityContextArgsDict(TypedDict):
        allow_privilege_escalation: NotRequired[pulumi.Input[bool]]
        """
        AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no*new*privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP*SYS*ADMIN Defaults to `true`.
        """
        capabilities: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecContainerSecurityContextCapabilitiesArgsDict']]
        """
        The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        """
        privileged: NotRequired[pulumi.Input[bool]]
        """
        Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Defaults to `false`.
        """
        read_only_root_filesystem: NotRequired[pulumi.Input[bool]]
        """
        Whether this container has a read-only root filesystem. Default is false. Defaults to `false`.
        """
        run_as_group: NotRequired[pulumi.Input[str]]
        """
        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        run_as_non_root: NotRequired[pulumi.Input[bool]]
        """
        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        run_as_user: NotRequired[pulumi.Input[str]]
        """
        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        se_linux_options: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecContainerSecurityContextSeLinuxOptionsArgsDict']]
        """
        The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        seccomp_profile: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecContainerSecurityContextSeccompProfileArgsDict']]
        """
        The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
        """
elif False:
    K8sJobSpecTemplateSpecContainerSecurityContextArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerSecurityContextArgs:
    def __init__(__self__, *,
                 allow_privilege_escalation: Optional[pulumi.Input[bool]] = None,
                 capabilities: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerSecurityContextCapabilitiesArgs']] = None,
                 privileged: Optional[pulumi.Input[bool]] = None,
                 read_only_root_filesystem: Optional[pulumi.Input[bool]] = None,
                 run_as_group: Optional[pulumi.Input[str]] = None,
                 run_as_non_root: Optional[pulumi.Input[bool]] = None,
                 run_as_user: Optional[pulumi.Input[str]] = None,
                 se_linux_options: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerSecurityContextSeLinuxOptionsArgs']] = None,
                 seccomp_profile: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerSecurityContextSeccompProfileArgs']] = None):
        """
        :param pulumi.Input[bool] allow_privilege_escalation: AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no*new*privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP*SYS*ADMIN Defaults to `true`.
        :param pulumi.Input['K8sJobSpecTemplateSpecContainerSecurityContextCapabilitiesArgs'] capabilities: The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        :param pulumi.Input[bool] privileged: Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Defaults to `false`.
        :param pulumi.Input[bool] read_only_root_filesystem: Whether this container has a read-only root filesystem. Default is false. Defaults to `false`.
        :param pulumi.Input[str] run_as_group: The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[bool] run_as_non_root: Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[str] run_as_user: The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input['K8sJobSpecTemplateSpecContainerSecurityContextSeLinuxOptionsArgs'] se_linux_options: The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input['K8sJobSpecTemplateSpecContainerSecurityContextSeccompProfileArgs'] seccomp_profile: The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
        """
        if allow_privilege_escalation is not None:
            pulumi.set(__self__, "allow_privilege_escalation", allow_privilege_escalation)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if read_only_root_filesystem is not None:
            pulumi.set(__self__, "read_only_root_filesystem", read_only_root_filesystem)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if seccomp_profile is not None:
            pulumi.set(__self__, "seccomp_profile", seccomp_profile)

    @property
    @pulumi.getter(name="allowPrivilegeEscalation")
    def allow_privilege_escalation(self) -> Optional[pulumi.Input[bool]]:
        """
        AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no*new*privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP*SYS*ADMIN Defaults to `true`.
        """
        return pulumi.get(self, "allow_privilege_escalation")

    @allow_privilege_escalation.setter
    def allow_privilege_escalation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_privilege_escalation", value)

    @property
    @pulumi.getter
    def capabilities(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerSecurityContextCapabilitiesArgs']]:
        """
        The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        """
        return pulumi.get(self, "capabilities")

    @capabilities.setter
    def capabilities(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerSecurityContextCapabilitiesArgs']]):
        pulumi.set(self, "capabilities", value)

    @property
    @pulumi.getter
    def privileged(self) -> Optional[pulumi.Input[bool]]:
        """
        Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Defaults to `false`.
        """
        return pulumi.get(self, "privileged")

    @privileged.setter
    def privileged(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "privileged", value)

    @property
    @pulumi.getter(name="readOnlyRootFilesystem")
    def read_only_root_filesystem(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this container has a read-only root filesystem. Default is false. Defaults to `false`.
        """
        return pulumi.get(self, "read_only_root_filesystem")

    @read_only_root_filesystem.setter
    def read_only_root_filesystem(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only_root_filesystem", value)

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[pulumi.Input[str]]:
        """
        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_group")

    @run_as_group.setter
    def run_as_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_group", value)

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_non_root")

    @run_as_non_root.setter
    def run_as_non_root(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_as_non_root", value)

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[str]]:
        """
        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_user", value)

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerSecurityContextSeLinuxOptionsArgs']]:
        """
        The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "se_linux_options")

    @se_linux_options.setter
    def se_linux_options(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerSecurityContextSeLinuxOptionsArgs']]):
        pulumi.set(self, "se_linux_options", value)

    @property
    @pulumi.getter(name="seccompProfile")
    def seccomp_profile(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerSecurityContextSeccompProfileArgs']]:
        """
        The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "seccomp_profile")

    @seccomp_profile.setter
    def seccomp_profile(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerSecurityContextSeccompProfileArgs']]):
        pulumi.set(self, "seccomp_profile", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerSecurityContextCapabilitiesArgsDict(TypedDict):
        adds: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Added capabilities
        """
        drops: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Removed capabilities
        """
elif False:
    K8sJobSpecTemplateSpecContainerSecurityContextCapabilitiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerSecurityContextCapabilitiesArgs:
    def __init__(__self__, *,
                 adds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 drops: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] adds: Added capabilities
        :param pulumi.Input[Sequence[pulumi.Input[str]]] drops: Removed capabilities
        """
        if adds is not None:
            pulumi.set(__self__, "adds", adds)
        if drops is not None:
            pulumi.set(__self__, "drops", drops)

    @property
    @pulumi.getter
    def adds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Added capabilities
        """
        return pulumi.get(self, "adds")

    @adds.setter
    def adds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "adds", value)

    @property
    @pulumi.getter
    def drops(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Removed capabilities
        """
        return pulumi.get(self, "drops")

    @drops.setter
    def drops(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "drops", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerSecurityContextSeLinuxOptionsArgsDict(TypedDict):
        level: NotRequired[pulumi.Input[str]]
        """
        Level is SELinux level label that applies to the container.
        """
        role: NotRequired[pulumi.Input[str]]
        """
        Role is a SELinux role label that applies to the container.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type is a SELinux type label that applies to the container.
        """
        user: NotRequired[pulumi.Input[str]]
        """
        User is a SELinux user label that applies to the container.
        """
elif False:
    K8sJobSpecTemplateSpecContainerSecurityContextSeLinuxOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerSecurityContextSeLinuxOptionsArgs:
    def __init__(__self__, *,
                 level: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] level: Level is SELinux level label that applies to the container.
        :param pulumi.Input[str] role: Role is a SELinux role label that applies to the container.
        :param pulumi.Input[str] type: Type is a SELinux type label that applies to the container.
        :param pulumi.Input[str] user: User is a SELinux user label that applies to the container.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        Level is SELinux level label that applies to the container.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role is a SELinux role label that applies to the container.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type is a SELinux type label that applies to the container.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User is a SELinux user label that applies to the container.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerSecurityContextSeccompProfileArgsDict(TypedDict):
        localhost_profile: NotRequired[pulumi.Input[str]]
        """
        Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Defaults to ``.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined. Defaults to `Unconfined`.
        """
elif False:
    K8sJobSpecTemplateSpecContainerSecurityContextSeccompProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerSecurityContextSeccompProfileArgs:
    def __init__(__self__, *,
                 localhost_profile: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] localhost_profile: Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Defaults to ``.
        :param pulumi.Input[str] type: Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined. Defaults to `Unconfined`.
        """
        if localhost_profile is not None:
            pulumi.set(__self__, "localhost_profile", localhost_profile)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="localhostProfile")
    def localhost_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Defaults to ``.
        """
        return pulumi.get(self, "localhost_profile")

    @localhost_profile.setter
    def localhost_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "localhost_profile", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined. Defaults to `Unconfined`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerStartupProbeArgsDict(TypedDict):
        exec_: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecContainerStartupProbeExecArgsDict']]
        """
        exec specifies the action to take.
        """
        failure_threshold: NotRequired[pulumi.Input[int]]
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        """
        grpcs: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerStartupProbeGrpcArgsDict']]]]
        """
        GRPC specifies an action involving a GRPC port.
        """
        http_get: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecContainerStartupProbeHttpGetArgsDict']]
        """
        Specifies the http request to perform.
        """
        initial_delay_seconds: NotRequired[pulumi.Input[int]]
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        period_seconds: NotRequired[pulumi.Input[int]]
        """
        How often (in seconds) to perform the probe Defaults to `10`.
        """
        success_threshold: NotRequired[pulumi.Input[int]]
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        """
        tcp_sockets: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerStartupProbeTcpSocketArgsDict']]]]
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        timeout_seconds: NotRequired[pulumi.Input[int]]
        """
        Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
elif False:
    K8sJobSpecTemplateSpecContainerStartupProbeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerStartupProbeArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerStartupProbeExecArgs']] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 grpcs: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerStartupProbeGrpcArgs']]]] = None,
                 http_get: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerStartupProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 tcp_sockets: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerStartupProbeTcpSocketArgs']]]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['K8sJobSpecTemplateSpecContainerStartupProbeExecArgs'] exec_: exec specifies the action to take.
        :param pulumi.Input[int] failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerStartupProbeGrpcArgs']]] grpcs: GRPC specifies an action involving a GRPC port.
        :param pulumi.Input['K8sJobSpecTemplateSpecContainerStartupProbeHttpGetArgs'] http_get: Specifies the http request to perform.
        :param pulumi.Input[int] initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        :param pulumi.Input[int] period_seconds: How often (in seconds) to perform the probe Defaults to `10`.
        :param pulumi.Input[int] success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerStartupProbeTcpSocketArgs']]] tcp_sockets: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        :param pulumi.Input[int] timeout_seconds: Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if grpcs is not None:
            pulumi.set(__self__, "grpcs", grpcs)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_sockets is not None:
            pulumi.set(__self__, "tcp_sockets", tcp_sockets)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerStartupProbeExecArgs']]:
        """
        exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerStartupProbeExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter
    def grpcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerStartupProbeGrpcArgs']]]]:
        """
        GRPC specifies an action involving a GRPC port.
        """
        return pulumi.get(self, "grpcs")

    @grpcs.setter
    def grpcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerStartupProbeGrpcArgs']]]]):
        pulumi.set(self, "grpcs", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerStartupProbeHttpGetArgs']]:
        """
        Specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecContainerStartupProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        How often (in seconds) to perform the probe Defaults to `10`.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="tcpSockets")
    def tcp_sockets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerStartupProbeTcpSocketArgs']]]]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        return pulumi.get(self, "tcp_sockets")

    @tcp_sockets.setter
    def tcp_sockets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerStartupProbeTcpSocketArgs']]]]):
        pulumi.set(self, "tcp_sockets", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerStartupProbeExecArgsDict(TypedDict):
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
elif False:
    K8sJobSpecTemplateSpecContainerStartupProbeExecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerStartupProbeExecArgs:
    def __init__(__self__, *,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] commands: Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerStartupProbeGrpcArgsDict(TypedDict):
        port: pulumi.Input[int]
        """
        Number of the port to access on the container. Number must be in the range 1 to 65535.
        """
        service: NotRequired[pulumi.Input[str]]
        """
        Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
elif False:
    K8sJobSpecTemplateSpecContainerStartupProbeGrpcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerStartupProbeGrpcArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 service: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] port: Number of the port to access on the container. Number must be in the range 1 to 65535.
        :param pulumi.Input[str] service: Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
        pulumi.set(__self__, "port", port)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        Number of the port to access on the container. Number must be in the range 1 to 65535.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerStartupProbeHttpGetArgsDict(TypedDict):
        host: NotRequired[pulumi.Input[str]]
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        http_headers: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerStartupProbeHttpGetHttpHeaderArgsDict']]]]
        """
        Scheme to use for connecting to the host.
        """
        path: NotRequired[pulumi.Input[str]]
        """
        Path to access on the HTTP server.
        """
        port: NotRequired[pulumi.Input[str]]
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        scheme: NotRequired[pulumi.Input[str]]
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
elif False:
    K8sJobSpecTemplateSpecContainerStartupProbeHttpGetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerStartupProbeHttpGetArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerStartupProbeHttpGetHttpHeaderArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerStartupProbeHttpGetHttpHeaderArgs']]] http_headers: Scheme to use for connecting to the host.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerStartupProbeHttpGetHttpHeaderArgs']]]]:
        """
        Scheme to use for connecting to the host.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecContainerStartupProbeHttpGetHttpHeaderArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerStartupProbeHttpGetHttpHeaderArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The header field name
        """
        value: NotRequired[pulumi.Input[str]]
        """
        The header field value
        """
elif False:
    K8sJobSpecTemplateSpecContainerStartupProbeHttpGetHttpHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerStartupProbeHttpGetHttpHeaderArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerStartupProbeTcpSocketArgsDict(TypedDict):
        port: pulumi.Input[str]
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
elif False:
    K8sJobSpecTemplateSpecContainerStartupProbeTcpSocketArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerStartupProbeTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[str]):
        """
        :param pulumi.Input[str] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[str]:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[str]):
        pulumi.set(self, "port", value)


if not MYPY:
    class K8sJobSpecTemplateSpecContainerVolumeMountArgsDict(TypedDict):
        mount_path: pulumi.Input[str]
        """
        Path within the container at which the volume should be mounted. Must not contain ':'.
        """
        name: pulumi.Input[str]
        """
        This must match the Name of a Volume.
        """
        mount_propagation: NotRequired[pulumi.Input[str]]
        """
        Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional. Defaults to `None`.
        """
        read_only: NotRequired[pulumi.Input[bool]]
        """
        Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false. Defaults to `false`.
        """
        sub_path: NotRequired[pulumi.Input[str]]
        """
        Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        """
elif False:
    K8sJobSpecTemplateSpecContainerVolumeMountArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecContainerVolumeMountArgs:
    def __init__(__self__, *,
                 mount_path: pulumi.Input[str],
                 name: pulumi.Input[str],
                 mount_propagation: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 sub_path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] mount_path: Path within the container at which the volume should be mounted. Must not contain ':'.
        :param pulumi.Input[str] name: This must match the Name of a Volume.
        :param pulumi.Input[str] mount_propagation: Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional. Defaults to `None`.
        :param pulumi.Input[bool] read_only: Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false. Defaults to `false`.
        :param pulumi.Input[str] sub_path: Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        """
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> pulumi.Input[str]:
        """
        Path within the container at which the volume should be mounted. Must not contain ':'.
        """
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        This must match the Name of a Volume.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[pulumi.Input[str]]:
        """
        Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional. Defaults to `None`.
        """
        return pulumi.get(self, "mount_propagation")

    @mount_propagation.setter
    def mount_propagation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_propagation", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false. Defaults to `false`.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        """
        return pulumi.get(self, "sub_path")

    @sub_path.setter
    def sub_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path", value)


if not MYPY:
    class K8sJobSpecTemplateSpecDnsConfigArgsDict(TypedDict):
        nameservers: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
        """
        options: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecDnsConfigOptionArgsDict']]]]
        """
        A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
        """
        searches: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
        """
elif False:
    K8sJobSpecTemplateSpecDnsConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecDnsConfigArgs:
    def __init__(__self__, *,
                 nameservers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 options: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecDnsConfigOptionArgs']]]] = None,
                 searches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] nameservers: A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecDnsConfigOptionArgs']]] options: A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] searches: A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
        """
        if nameservers is not None:
            pulumi.set(__self__, "nameservers", nameservers)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if searches is not None:
            pulumi.set(__self__, "searches", searches)

    @property
    @pulumi.getter
    def nameservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
        """
        return pulumi.get(self, "nameservers")

    @nameservers.setter
    def nameservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "nameservers", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecDnsConfigOptionArgs']]]]:
        """
        A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecDnsConfigOptionArgs']]]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def searches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
        """
        return pulumi.get(self, "searches")

    @searches.setter
    def searches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "searches", value)


if not MYPY:
    class K8sJobSpecTemplateSpecDnsConfigOptionArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of the option.
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Value of the option. Optional: Defaults to empty.
        """
elif False:
    K8sJobSpecTemplateSpecDnsConfigOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecDnsConfigOptionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of the option.
        :param pulumi.Input[str] value: Value of the option. Optional: Defaults to empty.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the option.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of the option. Optional: Defaults to empty.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class K8sJobSpecTemplateSpecHostAliasArgsDict(TypedDict):
        hostnames: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        Hostnames for the IP address.
        """
        ip: pulumi.Input[str]
        """
        IP address of the host file entry.
        """
elif False:
    K8sJobSpecTemplateSpecHostAliasArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecHostAliasArgs:
    def __init__(__self__, *,
                 hostnames: pulumi.Input[Sequence[pulumi.Input[str]]],
                 ip: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] hostnames: Hostnames for the IP address.
        :param pulumi.Input[str] ip: IP address of the host file entry.
        """
        pulumi.set(__self__, "hostnames", hostnames)
        pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def hostnames(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Hostnames for the IP address.
        """
        return pulumi.get(self, "hostnames")

    @hostnames.setter
    def hostnames(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "hostnames", value)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[str]:
        """
        IP address of the host file entry.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip", value)


if not MYPY:
    class K8sJobSpecTemplateSpecImagePullSecretArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
elif False:
    K8sJobSpecTemplateSpecImagePullSecretArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecImagePullSecretArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of the container specified as a DNS*LABEL. Each container in a pod must have a unique name (DNS*LABEL). Cannot be updated.
        """
        args: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR*NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        """
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR*NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        """
        env_froms: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvFromArgsDict']]]]
        """
        List of sources to populate environment variables in the container. The keys defined within a source must be a C*IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
        """
        envs: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvArgsDict']]]]
        """
        List of environment variables to set in the container. Cannot be updated.
        """
        image: NotRequired[pulumi.Input[str]]
        """
        Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
        """
        image_pull_policy: NotRequired[pulumi.Input[str]]
        """
        Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
        """
        lifecycle: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecycleArgsDict']]
        """
        Actions that the management system should take in response to container lifecycle events
        """
        liveness_probe: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLivenessProbeArgsDict']]
        """
        Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        ports: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerPortArgsDict']]]]
        """
        List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
        """
        readiness_probe: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecInitContainerReadinessProbeArgsDict']]
        """
        Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        resources: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecInitContainerResourcesArgsDict']]
        """
        Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        """
        security_context: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecInitContainerSecurityContextArgsDict']]
        """
        Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        """
        startup_probe: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecInitContainerStartupProbeArgsDict']]
        """
        StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        stdin: NotRequired[pulumi.Input[bool]]
        """
        Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.  Defaults to `false`.
        """
        stdin_once: NotRequired[pulumi.Input[bool]]
        """
        Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Defaults to `false`.
        """
        termination_message_path: NotRequired[pulumi.Input[str]]
        """
        Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated. Defaults to `/dev/termination-log`.
        """
        termination_message_policy: NotRequired[pulumi.Input[str]]
        """
        Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
        """
        tty: NotRequired[pulumi.Input[bool]]
        """
        Whether this container should allocate a TTY for itself Defaults to `false`.
        """
        volume_mounts: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerVolumeMountArgsDict']]]]
        """
        Pod volumes to mount into the container's filesystem. Cannot be updated.
        """
        working_dir: NotRequired[pulumi.Input[str]]
        """
        Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 env_froms: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvFromArgs']]]] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvArgs']]]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 image_pull_policy: Optional[pulumi.Input[str]] = None,
                 lifecycle: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecycleArgs']] = None,
                 liveness_probe: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLivenessProbeArgs']] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerPortArgs']]]] = None,
                 readiness_probe: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerReadinessProbeArgs']] = None,
                 resources: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerResourcesArgs']] = None,
                 security_context: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerSecurityContextArgs']] = None,
                 startup_probe: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerStartupProbeArgs']] = None,
                 stdin: Optional[pulumi.Input[bool]] = None,
                 stdin_once: Optional[pulumi.Input[bool]] = None,
                 termination_message_path: Optional[pulumi.Input[str]] = None,
                 termination_message_policy: Optional[pulumi.Input[str]] = None,
                 tty: Optional[pulumi.Input[bool]] = None,
                 volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerVolumeMountArgs']]]] = None,
                 working_dir: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of the container specified as a DNS*LABEL. Each container in a pod must have a unique name (DNS*LABEL). Cannot be updated.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] args: Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR*NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        :param pulumi.Input[Sequence[pulumi.Input[str]]] commands: Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR*NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvFromArgs']]] env_froms: List of sources to populate environment variables in the container. The keys defined within a source must be a C*IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvArgs']]] envs: List of environment variables to set in the container. Cannot be updated.
        :param pulumi.Input[str] image: Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
        :param pulumi.Input[str] image_pull_policy: Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
        :param pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecycleArgs'] lifecycle: Actions that the management system should take in response to container lifecycle events
        :param pulumi.Input['K8sJobSpecTemplateSpecInitContainerLivenessProbeArgs'] liveness_probe: Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerPortArgs']]] ports: List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
        :param pulumi.Input['K8sJobSpecTemplateSpecInitContainerReadinessProbeArgs'] readiness_probe: Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        :param pulumi.Input['K8sJobSpecTemplateSpecInitContainerResourcesArgs'] resources: Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        :param pulumi.Input['K8sJobSpecTemplateSpecInitContainerSecurityContextArgs'] security_context: Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        :param pulumi.Input['K8sJobSpecTemplateSpecInitContainerStartupProbeArgs'] startup_probe: StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param pulumi.Input[bool] stdin: Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.  Defaults to `false`.
        :param pulumi.Input[bool] stdin_once: Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Defaults to `false`.
        :param pulumi.Input[str] termination_message_path: Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated. Defaults to `/dev/termination-log`.
        :param pulumi.Input[str] termination_message_policy: Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
        :param pulumi.Input[bool] tty: Whether this container should allocate a TTY for itself Defaults to `false`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerVolumeMountArgs']]] volume_mounts: Pod volumes to mount into the container's filesystem. Cannot be updated.
        :param pulumi.Input[str] working_dir: Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
        """
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if env_froms is not None:
            pulumi.set(__self__, "env_froms", env_froms)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if startup_probe is not None:
            pulumi.set(__self__, "startup_probe", startup_probe)
        if stdin is not None:
            pulumi.set(__self__, "stdin", stdin)
        if stdin_once is not None:
            pulumi.set(__self__, "stdin_once", stdin_once)
        if termination_message_path is not None:
            pulumi.set(__self__, "termination_message_path", termination_message_path)
        if termination_message_policy is not None:
            pulumi.set(__self__, "termination_message_policy", termination_message_policy)
        if tty is not None:
            pulumi.set(__self__, "tty", tty)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the container specified as a DNS*LABEL. Each container in a pod must have a unique name (DNS*LABEL). Cannot be updated.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR*NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        """
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "args", value)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR*NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)

    @property
    @pulumi.getter(name="envFroms")
    def env_froms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvFromArgs']]]]:
        """
        List of sources to populate environment variables in the container. The keys defined within a source must be a C*IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
        """
        return pulumi.get(self, "env_froms")

    @env_froms.setter
    def env_froms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvFromArgs']]]]):
        pulumi.set(self, "env_froms", value)

    @property
    @pulumi.getter
    def envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvArgs']]]]:
        """
        List of environment variables to set in the container. Cannot be updated.
        """
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvArgs']]]]):
        pulumi.set(self, "envs", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
        """
        return pulumi.get(self, "image_pull_policy")

    @image_pull_policy.setter
    def image_pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_policy", value)

    @property
    @pulumi.getter
    def lifecycle(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecycleArgs']]:
        """
        Actions that the management system should take in response to container lifecycle events
        """
        return pulumi.get(self, "lifecycle")

    @lifecycle.setter
    def lifecycle(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecycleArgs']]):
        pulumi.set(self, "lifecycle", value)

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLivenessProbeArgs']]:
        """
        Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        return pulumi.get(self, "liveness_probe")

    @liveness_probe.setter
    def liveness_probe(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLivenessProbeArgs']]):
        pulumi.set(self, "liveness_probe", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerPortArgs']]]]:
        """
        List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerPortArgs']]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerReadinessProbeArgs']]:
        """
        Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        return pulumi.get(self, "readiness_probe")

    @readiness_probe.setter
    def readiness_probe(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerReadinessProbeArgs']]):
        pulumi.set(self, "readiness_probe", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerResourcesArgs']]:
        """
        Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerSecurityContextArgs']]:
        """
        Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        """
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerSecurityContextArgs']]):
        pulumi.set(self, "security_context", value)

    @property
    @pulumi.getter(name="startupProbe")
    def startup_probe(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerStartupProbeArgs']]:
        """
        StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "startup_probe")

    @startup_probe.setter
    def startup_probe(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerStartupProbeArgs']]):
        pulumi.set(self, "startup_probe", value)

    @property
    @pulumi.getter
    def stdin(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.  Defaults to `false`.
        """
        return pulumi.get(self, "stdin")

    @stdin.setter
    def stdin(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stdin", value)

    @property
    @pulumi.getter(name="stdinOnce")
    def stdin_once(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Defaults to `false`.
        """
        return pulumi.get(self, "stdin_once")

    @stdin_once.setter
    def stdin_once(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stdin_once", value)

    @property
    @pulumi.getter(name="terminationMessagePath")
    def termination_message_path(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated. Defaults to `/dev/termination-log`.
        """
        return pulumi.get(self, "termination_message_path")

    @termination_message_path.setter
    def termination_message_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "termination_message_path", value)

    @property
    @pulumi.getter(name="terminationMessagePolicy")
    def termination_message_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
        """
        return pulumi.get(self, "termination_message_policy")

    @termination_message_policy.setter
    def termination_message_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "termination_message_policy", value)

    @property
    @pulumi.getter
    def tty(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this container should allocate a TTY for itself Defaults to `false`.
        """
        return pulumi.get(self, "tty")

    @tty.setter
    def tty(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tty", value)

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerVolumeMountArgs']]]]:
        """
        Pod volumes to mount into the container's filesystem. Cannot be updated.
        """
        return pulumi.get(self, "volume_mounts")

    @volume_mounts.setter
    def volume_mounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerVolumeMountArgs']]]]):
        pulumi.set(self, "volume_mounts", value)

    @property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[pulumi.Input[str]]:
        """
        Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
        """
        return pulumi.get(self, "working_dir")

    @working_dir.setter
    def working_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "working_dir", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerEnvArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of the environment variable. Must be a C_IDENTIFIER
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Variable references $(VAR*NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        value_from: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvValueFromArgsDict']]
        """
        Source for the environment variable's value
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerEnvArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerEnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None,
                 value_from: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvValueFromArgs']] = None):
        """
        :param pulumi.Input[str] name: Name of the environment variable. Must be a C_IDENTIFIER
        :param pulumi.Input[str] value: Variable references $(VAR*NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        :param pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvValueFromArgs'] value_from: Source for the environment variable's value
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the environment variable. Must be a C_IDENTIFIER
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Variable references $(VAR*NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR*NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvValueFromArgs']]:
        """
        Source for the environment variable's value
        """
        return pulumi.get(self, "value_from")

    @value_from.setter
    def value_from(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvValueFromArgs']]):
        pulumi.set(self, "value_from", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerEnvFromArgsDict(TypedDict):
        config_map_ref: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvFromConfigMapRefArgsDict']]
        """
        The ConfigMap to select from
        """
        prefix: NotRequired[pulumi.Input[str]]
        """
        An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
        """
        secret_ref: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvFromSecretRefArgsDict']]
        """
        The Secret to select from
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerEnvFromArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerEnvFromArgs:
    def __init__(__self__, *,
                 config_map_ref: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvFromConfigMapRefArgs']] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 secret_ref: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvFromSecretRefArgs']] = None):
        """
        :param pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvFromConfigMapRefArgs'] config_map_ref: The ConfigMap to select from
        :param pulumi.Input[str] prefix: An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
        :param pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvFromSecretRefArgs'] secret_ref: The Secret to select from
        """
        if config_map_ref is not None:
            pulumi.set(__self__, "config_map_ref", config_map_ref)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="configMapRef")
    def config_map_ref(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvFromConfigMapRefArgs']]:
        """
        The ConfigMap to select from
        """
        return pulumi.get(self, "config_map_ref")

    @config_map_ref.setter
    def config_map_ref(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvFromConfigMapRefArgs']]):
        pulumi.set(self, "config_map_ref", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvFromSecretRefArgs']]:
        """
        The Secret to select from
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvFromSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerEnvFromConfigMapRefArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        optional: NotRequired[pulumi.Input[bool]]
        """
        Specify whether the ConfigMap must be defined
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerEnvFromConfigMapRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerEnvFromConfigMapRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap must be defined
        """
        pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerEnvFromSecretRefArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        optional: NotRequired[pulumi.Input[bool]]
        """
        Specify whether the Secret must be defined
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerEnvFromSecretRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerEnvFromSecretRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[bool] optional: Specify whether the Secret must be defined
        """
        pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerEnvValueFromArgsDict(TypedDict):
        config_map_key_ref: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRefArgsDict']]
        """
        Selects a key of a ConfigMap.
        """
        field_ref: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvValueFromFieldRefArgsDict']]
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
        """
        resource_field_ref: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvValueFromResourceFieldRefArgsDict']]
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        secret_key_ref: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvValueFromSecretKeyRefArgsDict']]
        """
        Selects a key of a secret in the pod's namespace.
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerEnvValueFromArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerEnvValueFromArgs:
    def __init__(__self__, *,
                 config_map_key_ref: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRefArgs']] = None,
                 field_ref: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvValueFromFieldRefArgs']] = None,
                 resource_field_ref: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvValueFromResourceFieldRefArgs']] = None,
                 secret_key_ref: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvValueFromSecretKeyRefArgs']] = None):
        """
        :param pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRefArgs'] config_map_key_ref: Selects a key of a ConfigMap.
        :param pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvValueFromFieldRefArgs'] field_ref: Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
        :param pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvValueFromResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvValueFromSecretKeyRefArgs'] secret_key_ref: Selects a key of a secret in the pod's namespace.
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRefArgs']]:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @config_map_key_ref.setter
    def config_map_key_ref(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRefArgs']]):
        pulumi.set(self, "config_map_key_ref", value)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvValueFromFieldRefArgs']]:
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvValueFromFieldRefArgs']]):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvValueFromResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvValueFromResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvValueFromSecretKeyRefArgs']]:
        """
        Selects a key of a secret in the pod's namespace.
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerEnvValueFromSecretKeyRefArgs']]):
        pulumi.set(self, "secret_key_ref", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRefArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        The key to select.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        optional: NotRequired[pulumi.Input[bool]]
        """
        Specify whether the ConfigMap or its key must be defined.
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRefArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] key: The key to select.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap or its key must be defined.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap or its key must be defined.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerEnvValueFromFieldRefArgsDict(TypedDict):
        api_version: NotRequired[pulumi.Input[str]]
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1". Defaults to `v1`.
        """
        field_path: NotRequired[pulumi.Input[str]]
        """
        Path of the field to select in the specified API version
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerEnvValueFromFieldRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerEnvValueFromFieldRefArgs:
    def __init__(__self__, *,
                 api_version: Optional[pulumi.Input[str]] = None,
                 field_path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1". Defaults to `v1`.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if field_path is not None:
            pulumi.set(__self__, "field_path", field_path)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1". Defaults to `v1`.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path of the field to select in the specified API version
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_path", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerEnvValueFromResourceFieldRefArgsDict(TypedDict):
        resource: pulumi.Input[str]
        """
        Resource to select
        """
        container_name: NotRequired[pulumi.Input[str]]
        divisor: NotRequired[pulumi.Input[str]]
        """
        Defaults to `1`.
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerEnvValueFromResourceFieldRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerEnvValueFromResourceFieldRefArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 container_name: Optional[pulumi.Input[str]] = None,
                 divisor: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] resource: Resource to select
        :param pulumi.Input[str] divisor: Defaults to `1`.
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `1`.
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "divisor", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerEnvValueFromSecretKeyRefArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        The key of the secret to select from. Must be a valid secret key.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        optional: NotRequired[pulumi.Input[bool]]
        """
        Specify whether the Secret or its key must be defined.
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerEnvValueFromSecretKeyRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerEnvValueFromSecretKeyRefArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] key: The key of the secret to select from. Must be a valid secret key.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[bool] optional: Specify whether the Secret or its key must be defined.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the secret to select from. Must be a valid secret key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret or its key must be defined.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerLifecycleArgsDict(TypedDict):
        post_starts: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePostStartArgsDict']]]]
        """
        post*start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        pre_stops: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePreStopArgsDict']]]]
        """
        pre*stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerLifecycleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerLifecycleArgs:
    def __init__(__self__, *,
                 post_starts: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePostStartArgs']]]] = None,
                 pre_stops: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePreStopArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePostStartArgs']]] post_starts: post*start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePreStopArgs']]] pre_stops: pre*stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        if post_starts is not None:
            pulumi.set(__self__, "post_starts", post_starts)
        if pre_stops is not None:
            pulumi.set(__self__, "pre_stops", pre_stops)

    @property
    @pulumi.getter(name="postStarts")
    def post_starts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePostStartArgs']]]]:
        """
        post*start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        return pulumi.get(self, "post_starts")

    @post_starts.setter
    def post_starts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePostStartArgs']]]]):
        pulumi.set(self, "post_starts", value)

    @property
    @pulumi.getter(name="preStops")
    def pre_stops(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePreStopArgs']]]]:
        """
        pre*stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        return pulumi.get(self, "pre_stops")

    @pre_stops.setter
    def pre_stops(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePreStopArgs']]]]):
        pulumi.set(self, "pre_stops", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerLifecyclePostStartArgsDict(TypedDict):
        exec_: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePostStartExecArgsDict']]
        """
        exec specifies the action to take.
        """
        http_get: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGetArgsDict']]
        """
        Specifies the http request to perform.
        """
        tcp_sockets: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePostStartTcpSocketArgsDict']]]]
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerLifecyclePostStartArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerLifecyclePostStartArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePostStartExecArgs']] = None,
                 http_get: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGetArgs']] = None,
                 tcp_sockets: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePostStartTcpSocketArgs']]]] = None):
        """
        :param pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePostStartExecArgs'] exec_: exec specifies the action to take.
        :param pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGetArgs'] http_get: Specifies the http request to perform.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePostStartTcpSocketArgs']]] tcp_sockets: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_sockets is not None:
            pulumi.set(__self__, "tcp_sockets", tcp_sockets)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePostStartExecArgs']]:
        """
        exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePostStartExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGetArgs']]:
        """
        Specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="tcpSockets")
    def tcp_sockets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePostStartTcpSocketArgs']]]]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        return pulumi.get(self, "tcp_sockets")

    @tcp_sockets.setter
    def tcp_sockets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePostStartTcpSocketArgs']]]]):
        pulumi.set(self, "tcp_sockets", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerLifecyclePostStartExecArgsDict(TypedDict):
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerLifecyclePostStartExecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerLifecyclePostStartExecArgs:
    def __init__(__self__, *,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] commands: Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGetArgsDict(TypedDict):
        host: NotRequired[pulumi.Input[str]]
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        http_headers: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeaderArgsDict']]]]
        """
        Scheme to use for connecting to the host.
        """
        path: NotRequired[pulumi.Input[str]]
        """
        Path to access on the HTTP server.
        """
        port: NotRequired[pulumi.Input[str]]
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        scheme: NotRequired[pulumi.Input[str]]
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGetArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeaderArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeaderArgs']]] http_headers: Scheme to use for connecting to the host.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeaderArgs']]]]:
        """
        Scheme to use for connecting to the host.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeaderArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeaderArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The header field name
        """
        value: NotRequired[pulumi.Input[str]]
        """
        The header field value
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeaderArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerLifecyclePostStartTcpSocketArgsDict(TypedDict):
        port: pulumi.Input[str]
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerLifecyclePostStartTcpSocketArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerLifecyclePostStartTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[str]):
        """
        :param pulumi.Input[str] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[str]:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[str]):
        pulumi.set(self, "port", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerLifecyclePreStopArgsDict(TypedDict):
        exec_: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePreStopExecArgsDict']]
        """
        exec specifies the action to take.
        """
        http_get: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGetArgsDict']]
        """
        Specifies the http request to perform.
        """
        tcp_sockets: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePreStopTcpSocketArgsDict']]]]
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerLifecyclePreStopArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerLifecyclePreStopArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePreStopExecArgs']] = None,
                 http_get: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGetArgs']] = None,
                 tcp_sockets: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePreStopTcpSocketArgs']]]] = None):
        """
        :param pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePreStopExecArgs'] exec_: exec specifies the action to take.
        :param pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGetArgs'] http_get: Specifies the http request to perform.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePreStopTcpSocketArgs']]] tcp_sockets: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_sockets is not None:
            pulumi.set(__self__, "tcp_sockets", tcp_sockets)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePreStopExecArgs']]:
        """
        exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePreStopExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGetArgs']]:
        """
        Specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="tcpSockets")
    def tcp_sockets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePreStopTcpSocketArgs']]]]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        return pulumi.get(self, "tcp_sockets")

    @tcp_sockets.setter
    def tcp_sockets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePreStopTcpSocketArgs']]]]):
        pulumi.set(self, "tcp_sockets", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerLifecyclePreStopExecArgsDict(TypedDict):
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerLifecyclePreStopExecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerLifecyclePreStopExecArgs:
    def __init__(__self__, *,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] commands: Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGetArgsDict(TypedDict):
        host: NotRequired[pulumi.Input[str]]
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        http_headers: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeaderArgsDict']]]]
        """
        Scheme to use for connecting to the host.
        """
        path: NotRequired[pulumi.Input[str]]
        """
        Path to access on the HTTP server.
        """
        port: NotRequired[pulumi.Input[str]]
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        scheme: NotRequired[pulumi.Input[str]]
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGetArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeaderArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeaderArgs']]] http_headers: Scheme to use for connecting to the host.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeaderArgs']]]]:
        """
        Scheme to use for connecting to the host.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeaderArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeaderArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The header field name
        """
        value: NotRequired[pulumi.Input[str]]
        """
        The header field value
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeaderArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerLifecyclePreStopTcpSocketArgsDict(TypedDict):
        port: pulumi.Input[str]
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerLifecyclePreStopTcpSocketArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerLifecyclePreStopTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[str]):
        """
        :param pulumi.Input[str] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[str]:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[str]):
        pulumi.set(self, "port", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerLivenessProbeArgsDict(TypedDict):
        exec_: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLivenessProbeExecArgsDict']]
        """
        exec specifies the action to take.
        """
        failure_threshold: NotRequired[pulumi.Input[int]]
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        """
        grpcs: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLivenessProbeGrpcArgsDict']]]]
        """
        GRPC specifies an action involving a GRPC port.
        """
        http_get: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGetArgsDict']]
        """
        Specifies the http request to perform.
        """
        initial_delay_seconds: NotRequired[pulumi.Input[int]]
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        period_seconds: NotRequired[pulumi.Input[int]]
        """
        How often (in seconds) to perform the probe Defaults to `10`.
        """
        success_threshold: NotRequired[pulumi.Input[int]]
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        """
        tcp_sockets: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLivenessProbeTcpSocketArgsDict']]]]
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        timeout_seconds: NotRequired[pulumi.Input[int]]
        """
        Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerLivenessProbeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerLivenessProbeArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLivenessProbeExecArgs']] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 grpcs: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLivenessProbeGrpcArgs']]]] = None,
                 http_get: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 tcp_sockets: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLivenessProbeTcpSocketArgs']]]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['K8sJobSpecTemplateSpecInitContainerLivenessProbeExecArgs'] exec_: exec specifies the action to take.
        :param pulumi.Input[int] failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLivenessProbeGrpcArgs']]] grpcs: GRPC specifies an action involving a GRPC port.
        :param pulumi.Input['K8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGetArgs'] http_get: Specifies the http request to perform.
        :param pulumi.Input[int] initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        :param pulumi.Input[int] period_seconds: How often (in seconds) to perform the probe Defaults to `10`.
        :param pulumi.Input[int] success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLivenessProbeTcpSocketArgs']]] tcp_sockets: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        :param pulumi.Input[int] timeout_seconds: Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if grpcs is not None:
            pulumi.set(__self__, "grpcs", grpcs)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_sockets is not None:
            pulumi.set(__self__, "tcp_sockets", tcp_sockets)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLivenessProbeExecArgs']]:
        """
        exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLivenessProbeExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter
    def grpcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLivenessProbeGrpcArgs']]]]:
        """
        GRPC specifies an action involving a GRPC port.
        """
        return pulumi.get(self, "grpcs")

    @grpcs.setter
    def grpcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLivenessProbeGrpcArgs']]]]):
        pulumi.set(self, "grpcs", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGetArgs']]:
        """
        Specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        How often (in seconds) to perform the probe Defaults to `10`.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="tcpSockets")
    def tcp_sockets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLivenessProbeTcpSocketArgs']]]]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        return pulumi.get(self, "tcp_sockets")

    @tcp_sockets.setter
    def tcp_sockets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLivenessProbeTcpSocketArgs']]]]):
        pulumi.set(self, "tcp_sockets", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerLivenessProbeExecArgsDict(TypedDict):
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerLivenessProbeExecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerLivenessProbeExecArgs:
    def __init__(__self__, *,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] commands: Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerLivenessProbeGrpcArgsDict(TypedDict):
        port: pulumi.Input[int]
        """
        Number of the port to access on the container. Number must be in the range 1 to 65535.
        """
        service: NotRequired[pulumi.Input[str]]
        """
        Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerLivenessProbeGrpcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerLivenessProbeGrpcArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 service: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] port: Number of the port to access on the container. Number must be in the range 1 to 65535.
        :param pulumi.Input[str] service: Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
        pulumi.set(__self__, "port", port)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        Number of the port to access on the container. Number must be in the range 1 to 65535.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGetArgsDict(TypedDict):
        host: NotRequired[pulumi.Input[str]]
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        http_headers: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeaderArgsDict']]]]
        """
        Scheme to use for connecting to the host.
        """
        path: NotRequired[pulumi.Input[str]]
        """
        Path to access on the HTTP server.
        """
        port: NotRequired[pulumi.Input[str]]
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        scheme: NotRequired[pulumi.Input[str]]
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGetArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeaderArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeaderArgs']]] http_headers: Scheme to use for connecting to the host.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeaderArgs']]]]:
        """
        Scheme to use for connecting to the host.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeaderArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeaderArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The header field name
        """
        value: NotRequired[pulumi.Input[str]]
        """
        The header field value
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeaderArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerLivenessProbeTcpSocketArgsDict(TypedDict):
        port: pulumi.Input[str]
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerLivenessProbeTcpSocketArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerLivenessProbeTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[str]):
        """
        :param pulumi.Input[str] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[str]:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[str]):
        pulumi.set(self, "port", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerPortArgsDict(TypedDict):
        container_port: pulumi.Input[int]
        """
        Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
        """
        host_ip: NotRequired[pulumi.Input[str]]
        """
        What host IP to bind the external port to.
        """
        host_port: NotRequired[pulumi.Input[int]]
        """
        Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        If specified, this must be an IANA*SVC*NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
        """
        protocol: NotRequired[pulumi.Input[str]]
        """
        Protocol for port. Must be UDP or TCP. Defaults to "TCP". Defaults to `TCP`.
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerPortArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerPortArgs:
    def __init__(__self__, *,
                 container_port: pulumi.Input[int],
                 host_ip: Optional[pulumi.Input[str]] = None,
                 host_port: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] container_port: Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
        :param pulumi.Input[str] host_ip: What host IP to bind the external port to.
        :param pulumi.Input[int] host_port: Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        :param pulumi.Input[str] name: If specified, this must be an IANA*SVC*NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
        :param pulumi.Input[str] protocol: Protocol for port. Must be UDP or TCP. Defaults to "TCP". Defaults to `TCP`.
        """
        pulumi.set(__self__, "container_port", container_port)
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if host_port is not None:
            pulumi.set(__self__, "host_port", host_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> pulumi.Input[int]:
        """
        Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
        """
        return pulumi.get(self, "container_port")

    @container_port.setter
    def container_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "container_port", value)

    @property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> Optional[pulumi.Input[str]]:
        """
        What host IP to bind the external port to.
        """
        return pulumi.get(self, "host_ip")

    @host_ip.setter
    def host_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_ip", value)

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> Optional[pulumi.Input[int]]:
        """
        Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        """
        return pulumi.get(self, "host_port")

    @host_port.setter
    def host_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "host_port", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, this must be an IANA*SVC*NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol for port. Must be UDP or TCP. Defaults to "TCP". Defaults to `TCP`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerReadinessProbeArgsDict(TypedDict):
        exec_: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecInitContainerReadinessProbeExecArgsDict']]
        """
        exec specifies the action to take.
        """
        failure_threshold: NotRequired[pulumi.Input[int]]
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        """
        grpcs: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerReadinessProbeGrpcArgsDict']]]]
        """
        GRPC specifies an action involving a GRPC port.
        """
        http_get: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGetArgsDict']]
        """
        Specifies the http request to perform.
        """
        initial_delay_seconds: NotRequired[pulumi.Input[int]]
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        period_seconds: NotRequired[pulumi.Input[int]]
        """
        How often (in seconds) to perform the probe Defaults to `10`.
        """
        success_threshold: NotRequired[pulumi.Input[int]]
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        """
        tcp_sockets: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerReadinessProbeTcpSocketArgsDict']]]]
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        timeout_seconds: NotRequired[pulumi.Input[int]]
        """
        Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerReadinessProbeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerReadinessProbeArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerReadinessProbeExecArgs']] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 grpcs: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerReadinessProbeGrpcArgs']]]] = None,
                 http_get: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 tcp_sockets: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerReadinessProbeTcpSocketArgs']]]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['K8sJobSpecTemplateSpecInitContainerReadinessProbeExecArgs'] exec_: exec specifies the action to take.
        :param pulumi.Input[int] failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerReadinessProbeGrpcArgs']]] grpcs: GRPC specifies an action involving a GRPC port.
        :param pulumi.Input['K8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGetArgs'] http_get: Specifies the http request to perform.
        :param pulumi.Input[int] initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        :param pulumi.Input[int] period_seconds: How often (in seconds) to perform the probe Defaults to `10`.
        :param pulumi.Input[int] success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerReadinessProbeTcpSocketArgs']]] tcp_sockets: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        :param pulumi.Input[int] timeout_seconds: Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if grpcs is not None:
            pulumi.set(__self__, "grpcs", grpcs)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_sockets is not None:
            pulumi.set(__self__, "tcp_sockets", tcp_sockets)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerReadinessProbeExecArgs']]:
        """
        exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerReadinessProbeExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter
    def grpcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerReadinessProbeGrpcArgs']]]]:
        """
        GRPC specifies an action involving a GRPC port.
        """
        return pulumi.get(self, "grpcs")

    @grpcs.setter
    def grpcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerReadinessProbeGrpcArgs']]]]):
        pulumi.set(self, "grpcs", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGetArgs']]:
        """
        Specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        How often (in seconds) to perform the probe Defaults to `10`.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="tcpSockets")
    def tcp_sockets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerReadinessProbeTcpSocketArgs']]]]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        return pulumi.get(self, "tcp_sockets")

    @tcp_sockets.setter
    def tcp_sockets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerReadinessProbeTcpSocketArgs']]]]):
        pulumi.set(self, "tcp_sockets", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerReadinessProbeExecArgsDict(TypedDict):
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerReadinessProbeExecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerReadinessProbeExecArgs:
    def __init__(__self__, *,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] commands: Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerReadinessProbeGrpcArgsDict(TypedDict):
        port: pulumi.Input[int]
        """
        Number of the port to access on the container. Number must be in the range 1 to 65535.
        """
        service: NotRequired[pulumi.Input[str]]
        """
        Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerReadinessProbeGrpcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerReadinessProbeGrpcArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 service: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] port: Number of the port to access on the container. Number must be in the range 1 to 65535.
        :param pulumi.Input[str] service: Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
        pulumi.set(__self__, "port", port)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        Number of the port to access on the container. Number must be in the range 1 to 65535.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGetArgsDict(TypedDict):
        host: NotRequired[pulumi.Input[str]]
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        http_headers: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeaderArgsDict']]]]
        """
        Scheme to use for connecting to the host.
        """
        path: NotRequired[pulumi.Input[str]]
        """
        Path to access on the HTTP server.
        """
        port: NotRequired[pulumi.Input[str]]
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        scheme: NotRequired[pulumi.Input[str]]
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGetArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeaderArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeaderArgs']]] http_headers: Scheme to use for connecting to the host.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeaderArgs']]]]:
        """
        Scheme to use for connecting to the host.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeaderArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeaderArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The header field name
        """
        value: NotRequired[pulumi.Input[str]]
        """
        The header field value
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeaderArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerReadinessProbeTcpSocketArgsDict(TypedDict):
        port: pulumi.Input[str]
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerReadinessProbeTcpSocketArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerReadinessProbeTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[str]):
        """
        :param pulumi.Input[str] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[str]:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[str]):
        pulumi.set(self, "port", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerResourcesArgsDict(TypedDict):
        limits: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        """
        requests: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerResourcesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] limits: Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "requests", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerSecurityContextArgsDict(TypedDict):
        allow_privilege_escalation: NotRequired[pulumi.Input[bool]]
        """
        AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no*new*privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP*SYS*ADMIN Defaults to `true`.
        """
        capabilities: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecInitContainerSecurityContextCapabilitiesArgsDict']]
        """
        The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        """
        privileged: NotRequired[pulumi.Input[bool]]
        """
        Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Defaults to `false`.
        """
        read_only_root_filesystem: NotRequired[pulumi.Input[bool]]
        """
        Whether this container has a read-only root filesystem. Default is false. Defaults to `false`.
        """
        run_as_group: NotRequired[pulumi.Input[str]]
        """
        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        run_as_non_root: NotRequired[pulumi.Input[bool]]
        """
        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        run_as_user: NotRequired[pulumi.Input[str]]
        """
        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        se_linux_options: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecInitContainerSecurityContextSeLinuxOptionsArgsDict']]
        """
        The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        seccomp_profile: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecInitContainerSecurityContextSeccompProfileArgsDict']]
        """
        The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerSecurityContextArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerSecurityContextArgs:
    def __init__(__self__, *,
                 allow_privilege_escalation: Optional[pulumi.Input[bool]] = None,
                 capabilities: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerSecurityContextCapabilitiesArgs']] = None,
                 privileged: Optional[pulumi.Input[bool]] = None,
                 read_only_root_filesystem: Optional[pulumi.Input[bool]] = None,
                 run_as_group: Optional[pulumi.Input[str]] = None,
                 run_as_non_root: Optional[pulumi.Input[bool]] = None,
                 run_as_user: Optional[pulumi.Input[str]] = None,
                 se_linux_options: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerSecurityContextSeLinuxOptionsArgs']] = None,
                 seccomp_profile: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerSecurityContextSeccompProfileArgs']] = None):
        """
        :param pulumi.Input[bool] allow_privilege_escalation: AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no*new*privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP*SYS*ADMIN Defaults to `true`.
        :param pulumi.Input['K8sJobSpecTemplateSpecInitContainerSecurityContextCapabilitiesArgs'] capabilities: The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        :param pulumi.Input[bool] privileged: Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Defaults to `false`.
        :param pulumi.Input[bool] read_only_root_filesystem: Whether this container has a read-only root filesystem. Default is false. Defaults to `false`.
        :param pulumi.Input[str] run_as_group: The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[bool] run_as_non_root: Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[str] run_as_user: The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input['K8sJobSpecTemplateSpecInitContainerSecurityContextSeLinuxOptionsArgs'] se_linux_options: The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input['K8sJobSpecTemplateSpecInitContainerSecurityContextSeccompProfileArgs'] seccomp_profile: The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
        """
        if allow_privilege_escalation is not None:
            pulumi.set(__self__, "allow_privilege_escalation", allow_privilege_escalation)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if read_only_root_filesystem is not None:
            pulumi.set(__self__, "read_only_root_filesystem", read_only_root_filesystem)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if seccomp_profile is not None:
            pulumi.set(__self__, "seccomp_profile", seccomp_profile)

    @property
    @pulumi.getter(name="allowPrivilegeEscalation")
    def allow_privilege_escalation(self) -> Optional[pulumi.Input[bool]]:
        """
        AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no*new*privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP*SYS*ADMIN Defaults to `true`.
        """
        return pulumi.get(self, "allow_privilege_escalation")

    @allow_privilege_escalation.setter
    def allow_privilege_escalation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_privilege_escalation", value)

    @property
    @pulumi.getter
    def capabilities(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerSecurityContextCapabilitiesArgs']]:
        """
        The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        """
        return pulumi.get(self, "capabilities")

    @capabilities.setter
    def capabilities(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerSecurityContextCapabilitiesArgs']]):
        pulumi.set(self, "capabilities", value)

    @property
    @pulumi.getter
    def privileged(self) -> Optional[pulumi.Input[bool]]:
        """
        Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Defaults to `false`.
        """
        return pulumi.get(self, "privileged")

    @privileged.setter
    def privileged(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "privileged", value)

    @property
    @pulumi.getter(name="readOnlyRootFilesystem")
    def read_only_root_filesystem(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this container has a read-only root filesystem. Default is false. Defaults to `false`.
        """
        return pulumi.get(self, "read_only_root_filesystem")

    @read_only_root_filesystem.setter
    def read_only_root_filesystem(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only_root_filesystem", value)

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[pulumi.Input[str]]:
        """
        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_group")

    @run_as_group.setter
    def run_as_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_group", value)

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_non_root")

    @run_as_non_root.setter
    def run_as_non_root(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_as_non_root", value)

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[str]]:
        """
        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_user", value)

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerSecurityContextSeLinuxOptionsArgs']]:
        """
        The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "se_linux_options")

    @se_linux_options.setter
    def se_linux_options(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerSecurityContextSeLinuxOptionsArgs']]):
        pulumi.set(self, "se_linux_options", value)

    @property
    @pulumi.getter(name="seccompProfile")
    def seccomp_profile(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerSecurityContextSeccompProfileArgs']]:
        """
        The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "seccomp_profile")

    @seccomp_profile.setter
    def seccomp_profile(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerSecurityContextSeccompProfileArgs']]):
        pulumi.set(self, "seccomp_profile", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerSecurityContextCapabilitiesArgsDict(TypedDict):
        adds: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Added capabilities
        """
        drops: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Removed capabilities
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerSecurityContextCapabilitiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerSecurityContextCapabilitiesArgs:
    def __init__(__self__, *,
                 adds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 drops: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] adds: Added capabilities
        :param pulumi.Input[Sequence[pulumi.Input[str]]] drops: Removed capabilities
        """
        if adds is not None:
            pulumi.set(__self__, "adds", adds)
        if drops is not None:
            pulumi.set(__self__, "drops", drops)

    @property
    @pulumi.getter
    def adds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Added capabilities
        """
        return pulumi.get(self, "adds")

    @adds.setter
    def adds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "adds", value)

    @property
    @pulumi.getter
    def drops(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Removed capabilities
        """
        return pulumi.get(self, "drops")

    @drops.setter
    def drops(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "drops", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerSecurityContextSeLinuxOptionsArgsDict(TypedDict):
        level: NotRequired[pulumi.Input[str]]
        """
        Level is SELinux level label that applies to the container.
        """
        role: NotRequired[pulumi.Input[str]]
        """
        Role is a SELinux role label that applies to the container.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type is a SELinux type label that applies to the container.
        """
        user: NotRequired[pulumi.Input[str]]
        """
        User is a SELinux user label that applies to the container.
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerSecurityContextSeLinuxOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerSecurityContextSeLinuxOptionsArgs:
    def __init__(__self__, *,
                 level: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] level: Level is SELinux level label that applies to the container.
        :param pulumi.Input[str] role: Role is a SELinux role label that applies to the container.
        :param pulumi.Input[str] type: Type is a SELinux type label that applies to the container.
        :param pulumi.Input[str] user: User is a SELinux user label that applies to the container.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        Level is SELinux level label that applies to the container.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role is a SELinux role label that applies to the container.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type is a SELinux type label that applies to the container.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User is a SELinux user label that applies to the container.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerSecurityContextSeccompProfileArgsDict(TypedDict):
        localhost_profile: NotRequired[pulumi.Input[str]]
        """
        Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Defaults to ``.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined. Defaults to `Unconfined`.
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerSecurityContextSeccompProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerSecurityContextSeccompProfileArgs:
    def __init__(__self__, *,
                 localhost_profile: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] localhost_profile: Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Defaults to ``.
        :param pulumi.Input[str] type: Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined. Defaults to `Unconfined`.
        """
        if localhost_profile is not None:
            pulumi.set(__self__, "localhost_profile", localhost_profile)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="localhostProfile")
    def localhost_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Defaults to ``.
        """
        return pulumi.get(self, "localhost_profile")

    @localhost_profile.setter
    def localhost_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "localhost_profile", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined. Defaults to `Unconfined`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerStartupProbeArgsDict(TypedDict):
        exec_: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecInitContainerStartupProbeExecArgsDict']]
        """
        exec specifies the action to take.
        """
        failure_threshold: NotRequired[pulumi.Input[int]]
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        """
        grpcs: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerStartupProbeGrpcArgsDict']]]]
        """
        GRPC specifies an action involving a GRPC port.
        """
        http_get: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecInitContainerStartupProbeHttpGetArgsDict']]
        """
        Specifies the http request to perform.
        """
        initial_delay_seconds: NotRequired[pulumi.Input[int]]
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        period_seconds: NotRequired[pulumi.Input[int]]
        """
        How often (in seconds) to perform the probe Defaults to `10`.
        """
        success_threshold: NotRequired[pulumi.Input[int]]
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        """
        tcp_sockets: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerStartupProbeTcpSocketArgsDict']]]]
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        timeout_seconds: NotRequired[pulumi.Input[int]]
        """
        Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerStartupProbeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerStartupProbeArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerStartupProbeExecArgs']] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 grpcs: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerStartupProbeGrpcArgs']]]] = None,
                 http_get: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerStartupProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 tcp_sockets: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerStartupProbeTcpSocketArgs']]]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['K8sJobSpecTemplateSpecInitContainerStartupProbeExecArgs'] exec_: exec specifies the action to take.
        :param pulumi.Input[int] failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerStartupProbeGrpcArgs']]] grpcs: GRPC specifies an action involving a GRPC port.
        :param pulumi.Input['K8sJobSpecTemplateSpecInitContainerStartupProbeHttpGetArgs'] http_get: Specifies the http request to perform.
        :param pulumi.Input[int] initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        :param pulumi.Input[int] period_seconds: How often (in seconds) to perform the probe Defaults to `10`.
        :param pulumi.Input[int] success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerStartupProbeTcpSocketArgs']]] tcp_sockets: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        :param pulumi.Input[int] timeout_seconds: Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if grpcs is not None:
            pulumi.set(__self__, "grpcs", grpcs)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_sockets is not None:
            pulumi.set(__self__, "tcp_sockets", tcp_sockets)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerStartupProbeExecArgs']]:
        """
        exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerStartupProbeExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to `3`.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter
    def grpcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerStartupProbeGrpcArgs']]]]:
        """
        GRPC specifies an action involving a GRPC port.
        """
        return pulumi.get(self, "grpcs")

    @grpcs.setter
    def grpcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerStartupProbeGrpcArgs']]]]):
        pulumi.set(self, "grpcs", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerStartupProbeHttpGetArgs']]:
        """
        Specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecInitContainerStartupProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        How often (in seconds) to perform the probe Defaults to `10`.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to `1`.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="tcpSockets")
    def tcp_sockets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerStartupProbeTcpSocketArgs']]]]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        return pulumi.get(self, "tcp_sockets")

    @tcp_sockets.setter
    def tcp_sockets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerStartupProbeTcpSocketArgs']]]]):
        pulumi.set(self, "tcp_sockets", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes Defaults to `1`.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerStartupProbeExecArgsDict(TypedDict):
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerStartupProbeExecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerStartupProbeExecArgs:
    def __init__(__self__, *,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] commands: Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerStartupProbeGrpcArgsDict(TypedDict):
        port: pulumi.Input[int]
        """
        Number of the port to access on the container. Number must be in the range 1 to 65535.
        """
        service: NotRequired[pulumi.Input[str]]
        """
        Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerStartupProbeGrpcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerStartupProbeGrpcArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 service: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] port: Number of the port to access on the container. Number must be in the range 1 to 65535.
        :param pulumi.Input[str] service: Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
        pulumi.set(__self__, "port", port)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        Number of the port to access on the container. Number must be in the range 1 to 65535.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerStartupProbeHttpGetArgsDict(TypedDict):
        host: NotRequired[pulumi.Input[str]]
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        http_headers: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeaderArgsDict']]]]
        """
        Scheme to use for connecting to the host.
        """
        path: NotRequired[pulumi.Input[str]]
        """
        Path to access on the HTTP server.
        """
        port: NotRequired[pulumi.Input[str]]
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        scheme: NotRequired[pulumi.Input[str]]
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerStartupProbeHttpGetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerStartupProbeHttpGetArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeaderArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeaderArgs']]] http_headers: Scheme to use for connecting to the host.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeaderArgs']]]]:
        """
        Scheme to use for connecting to the host.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeaderArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to `HTTP`.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeaderArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The header field name
        """
        value: NotRequired[pulumi.Input[str]]
        """
        The header field value
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeaderArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerStartupProbeTcpSocketArgsDict(TypedDict):
        port: pulumi.Input[str]
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerStartupProbeTcpSocketArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerStartupProbeTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[str]):
        """
        :param pulumi.Input[str] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[str]:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA*SVC*NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[str]):
        pulumi.set(self, "port", value)


if not MYPY:
    class K8sJobSpecTemplateSpecInitContainerVolumeMountArgsDict(TypedDict):
        mount_path: pulumi.Input[str]
        """
        Path within the container at which the volume should be mounted. Must not contain ':'.
        """
        name: pulumi.Input[str]
        """
        This must match the Name of a Volume.
        """
        mount_propagation: NotRequired[pulumi.Input[str]]
        """
        Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional. Defaults to `None`.
        """
        read_only: NotRequired[pulumi.Input[bool]]
        """
        Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false. Defaults to `false`.
        """
        sub_path: NotRequired[pulumi.Input[str]]
        """
        Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        """
elif False:
    K8sJobSpecTemplateSpecInitContainerVolumeMountArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecInitContainerVolumeMountArgs:
    def __init__(__self__, *,
                 mount_path: pulumi.Input[str],
                 name: pulumi.Input[str],
                 mount_propagation: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 sub_path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] mount_path: Path within the container at which the volume should be mounted. Must not contain ':'.
        :param pulumi.Input[str] name: This must match the Name of a Volume.
        :param pulumi.Input[str] mount_propagation: Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional. Defaults to `None`.
        :param pulumi.Input[bool] read_only: Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false. Defaults to `false`.
        :param pulumi.Input[str] sub_path: Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        """
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> pulumi.Input[str]:
        """
        Path within the container at which the volume should be mounted. Must not contain ':'.
        """
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        This must match the Name of a Volume.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[pulumi.Input[str]]:
        """
        Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional. Defaults to `None`.
        """
        return pulumi.get(self, "mount_propagation")

    @mount_propagation.setter
    def mount_propagation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_propagation", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false. Defaults to `false`.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        """
        return pulumi.get(self, "sub_path")

    @sub_path.setter
    def sub_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path", value)


if not MYPY:
    class K8sJobSpecTemplateSpecReadinessGateArgsDict(TypedDict):
        condition_type: pulumi.Input[str]
        """
        refers to a condition in the pod's condition list with matching type.
        """
elif False:
    K8sJobSpecTemplateSpecReadinessGateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecReadinessGateArgs:
    def __init__(__self__, *,
                 condition_type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] condition_type: refers to a condition in the pod's condition list with matching type.
        """
        pulumi.set(__self__, "condition_type", condition_type)

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> pulumi.Input[str]:
        """
        refers to a condition in the pod's condition list with matching type.
        """
        return pulumi.get(self, "condition_type")

    @condition_type.setter
    def condition_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "condition_type", value)


if not MYPY:
    class K8sJobSpecTemplateSpecSecurityContextArgsDict(TypedDict):
        fs_group: NotRequired[pulumi.Input[str]]
        """
        A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- If unset, the Kubelet will not modify the ownership and permissions of any volume.
        """
        fs_group_change_policy: NotRequired[pulumi.Input[str]]
        """
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir.
        """
        run_as_group: NotRequired[pulumi.Input[str]]
        """
        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        """
        run_as_non_root: NotRequired[pulumi.Input[bool]]
        """
        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        run_as_user: NotRequired[pulumi.Input[str]]
        """
        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        """
        se_linux_options: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecSecurityContextSeLinuxOptionsArgsDict']]
        """
        The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        """
        seccomp_profile: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecSecurityContextSeccompProfileArgsDict']]
        """
        The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
        """
        supplemental_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[int]]]]
        """
        A list of groups applied to the first process run in each container, in addition to the container's primary GID. If unspecified, no groups will be added to any container.
        """
        sysctls: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecSecurityContextSysctlArgsDict']]]]
        """
        holds a list of namespaced sysctls used for the pod.
        """
elif False:
    K8sJobSpecTemplateSpecSecurityContextArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecSecurityContextArgs:
    def __init__(__self__, *,
                 fs_group: Optional[pulumi.Input[str]] = None,
                 fs_group_change_policy: Optional[pulumi.Input[str]] = None,
                 run_as_group: Optional[pulumi.Input[str]] = None,
                 run_as_non_root: Optional[pulumi.Input[bool]] = None,
                 run_as_user: Optional[pulumi.Input[str]] = None,
                 se_linux_options: Optional[pulumi.Input['K8sJobSpecTemplateSpecSecurityContextSeLinuxOptionsArgs']] = None,
                 seccomp_profile: Optional[pulumi.Input['K8sJobSpecTemplateSpecSecurityContextSeccompProfileArgs']] = None,
                 supplemental_groups: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 sysctls: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecSecurityContextSysctlArgs']]]] = None):
        """
        :param pulumi.Input[str] fs_group: A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- If unset, the Kubelet will not modify the ownership and permissions of any volume.
        :param pulumi.Input[str] fs_group_change_policy: fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir.
        :param pulumi.Input[str] run_as_group: The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        :param pulumi.Input[bool] run_as_non_root: Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[str] run_as_user: The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        :param pulumi.Input['K8sJobSpecTemplateSpecSecurityContextSeLinuxOptionsArgs'] se_linux_options: The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        :param pulumi.Input['K8sJobSpecTemplateSpecSecurityContextSeccompProfileArgs'] seccomp_profile: The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] supplemental_groups: A list of groups applied to the first process run in each container, in addition to the container's primary GID. If unspecified, no groups will be added to any container.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecSecurityContextSysctlArgs']]] sysctls: holds a list of namespaced sysctls used for the pod.
        """
        if fs_group is not None:
            pulumi.set(__self__, "fs_group", fs_group)
        if fs_group_change_policy is not None:
            pulumi.set(__self__, "fs_group_change_policy", fs_group_change_policy)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if seccomp_profile is not None:
            pulumi.set(__self__, "seccomp_profile", seccomp_profile)
        if supplemental_groups is not None:
            pulumi.set(__self__, "supplemental_groups", supplemental_groups)
        if sysctls is not None:
            pulumi.set(__self__, "sysctls", sysctls)

    @property
    @pulumi.getter(name="fsGroup")
    def fs_group(self) -> Optional[pulumi.Input[str]]:
        """
        A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- If unset, the Kubelet will not modify the ownership and permissions of any volume.
        """
        return pulumi.get(self, "fs_group")

    @fs_group.setter
    def fs_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_group", value)

    @property
    @pulumi.getter(name="fsGroupChangePolicy")
    def fs_group_change_policy(self) -> Optional[pulumi.Input[str]]:
        """
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir.
        """
        return pulumi.get(self, "fs_group_change_policy")

    @fs_group_change_policy.setter
    def fs_group_change_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_group_change_policy", value)

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[pulumi.Input[str]]:
        """
        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        """
        return pulumi.get(self, "run_as_group")

    @run_as_group.setter
    def run_as_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_group", value)

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_non_root")

    @run_as_non_root.setter
    def run_as_non_root(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_as_non_root", value)

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[str]]:
        """
        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        """
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_user", value)

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecSecurityContextSeLinuxOptionsArgs']]:
        """
        The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        """
        return pulumi.get(self, "se_linux_options")

    @se_linux_options.setter
    def se_linux_options(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecSecurityContextSeLinuxOptionsArgs']]):
        pulumi.set(self, "se_linux_options", value)

    @property
    @pulumi.getter(name="seccompProfile")
    def seccomp_profile(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecSecurityContextSeccompProfileArgs']]:
        """
        The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
        """
        return pulumi.get(self, "seccomp_profile")

    @seccomp_profile.setter
    def seccomp_profile(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecSecurityContextSeccompProfileArgs']]):
        pulumi.set(self, "seccomp_profile", value)

    @property
    @pulumi.getter(name="supplementalGroups")
    def supplemental_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A list of groups applied to the first process run in each container, in addition to the container's primary GID. If unspecified, no groups will be added to any container.
        """
        return pulumi.get(self, "supplemental_groups")

    @supplemental_groups.setter
    def supplemental_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "supplemental_groups", value)

    @property
    @pulumi.getter
    def sysctls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecSecurityContextSysctlArgs']]]]:
        """
        holds a list of namespaced sysctls used for the pod.
        """
        return pulumi.get(self, "sysctls")

    @sysctls.setter
    def sysctls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecSecurityContextSysctlArgs']]]]):
        pulumi.set(self, "sysctls", value)


if not MYPY:
    class K8sJobSpecTemplateSpecSecurityContextSeLinuxOptionsArgsDict(TypedDict):
        level: NotRequired[pulumi.Input[str]]
        """
        Level is SELinux level label that applies to the container.
        """
        role: NotRequired[pulumi.Input[str]]
        """
        Role is a SELinux role label that applies to the container.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type is a SELinux type label that applies to the container.
        """
        user: NotRequired[pulumi.Input[str]]
        """
        User is a SELinux user label that applies to the container.
        """
elif False:
    K8sJobSpecTemplateSpecSecurityContextSeLinuxOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecSecurityContextSeLinuxOptionsArgs:
    def __init__(__self__, *,
                 level: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] level: Level is SELinux level label that applies to the container.
        :param pulumi.Input[str] role: Role is a SELinux role label that applies to the container.
        :param pulumi.Input[str] type: Type is a SELinux type label that applies to the container.
        :param pulumi.Input[str] user: User is a SELinux user label that applies to the container.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        Level is SELinux level label that applies to the container.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role is a SELinux role label that applies to the container.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type is a SELinux type label that applies to the container.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User is a SELinux user label that applies to the container.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


if not MYPY:
    class K8sJobSpecTemplateSpecSecurityContextSeccompProfileArgsDict(TypedDict):
        localhost_profile: NotRequired[pulumi.Input[str]]
        """
        Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Defaults to ``.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined. Defaults to `Unconfined`.
        """
elif False:
    K8sJobSpecTemplateSpecSecurityContextSeccompProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecSecurityContextSeccompProfileArgs:
    def __init__(__self__, *,
                 localhost_profile: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] localhost_profile: Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Defaults to ``.
        :param pulumi.Input[str] type: Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined. Defaults to `Unconfined`.
        """
        if localhost_profile is not None:
            pulumi.set(__self__, "localhost_profile", localhost_profile)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="localhostProfile")
    def localhost_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Defaults to ``.
        """
        return pulumi.get(self, "localhost_profile")

    @localhost_profile.setter
    def localhost_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "localhost_profile", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined. Defaults to `Unconfined`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class K8sJobSpecTemplateSpecSecurityContextSysctlArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of a property to set.
        """
        value: pulumi.Input[str]
        """
        Value of a property to set.
        """
elif False:
    K8sJobSpecTemplateSpecSecurityContextSysctlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecSecurityContextSysctlArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Name of a property to set.
        :param pulumi.Input[str] value: Value of a property to set.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of a property to set.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value of a property to set.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class K8sJobSpecTemplateSpecTolerationArgsDict(TypedDict):
        effect: NotRequired[pulumi.Input[str]]
        """
        Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category. Defaults to `Equal`.
        """
        toleration_seconds: NotRequired[pulumi.Input[str]]
        """
        TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
elif False:
    K8sJobSpecTemplateSpecTolerationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecTolerationArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 toleration_seconds: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] effect: Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        :param pulumi.Input[str] key: Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        :param pulumi.Input[str] operator: Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category. Defaults to `Equal`.
        :param pulumi.Input[str] toleration_seconds: TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
        :param pulumi.Input[str] value: Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category. Defaults to `Equal`.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[str]]:
        """
        TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
        """
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class K8sJobSpecTemplateSpecTopologySpreadConstraintArgsDict(TypedDict):
        label_selectors: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelectorArgsDict']]]]
        """
        A label query over a set of resources, in this case pods.
        """
        max_skew: NotRequired[pulumi.Input[int]]
        """
        describes the degree to which pods may be unevenly distributed. Defaults to `1`.
        """
        topology_key: NotRequired[pulumi.Input[str]]
        """
        the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology.
        """
        when_unsatisfiable: NotRequired[pulumi.Input[str]]
        """
        indicates how to deal with a pod if it doesn't satisfy the spread constraint. Defaults to `DoNotSchedule`.
        """
elif False:
    K8sJobSpecTemplateSpecTopologySpreadConstraintArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecTopologySpreadConstraintArgs:
    def __init__(__self__, *,
                 label_selectors: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelectorArgs']]]] = None,
                 max_skew: Optional[pulumi.Input[int]] = None,
                 topology_key: Optional[pulumi.Input[str]] = None,
                 when_unsatisfiable: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelectorArgs']]] label_selectors: A label query over a set of resources, in this case pods.
        :param pulumi.Input[int] max_skew: describes the degree to which pods may be unevenly distributed. Defaults to `1`.
        :param pulumi.Input[str] topology_key: the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology.
        :param pulumi.Input[str] when_unsatisfiable: indicates how to deal with a pod if it doesn't satisfy the spread constraint. Defaults to `DoNotSchedule`.
        """
        if label_selectors is not None:
            pulumi.set(__self__, "label_selectors", label_selectors)
        if max_skew is not None:
            pulumi.set(__self__, "max_skew", max_skew)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if when_unsatisfiable is not None:
            pulumi.set(__self__, "when_unsatisfiable", when_unsatisfiable)

    @property
    @pulumi.getter(name="labelSelectors")
    def label_selectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelectorArgs']]]]:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selectors")

    @label_selectors.setter
    def label_selectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelectorArgs']]]]):
        pulumi.set(self, "label_selectors", value)

    @property
    @pulumi.getter(name="maxSkew")
    def max_skew(self) -> Optional[pulumi.Input[int]]:
        """
        describes the degree to which pods may be unevenly distributed. Defaults to `1`.
        """
        return pulumi.get(self, "max_skew")

    @max_skew.setter
    def max_skew(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_skew", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        """
        the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter(name="whenUnsatisfiable")
    def when_unsatisfiable(self) -> Optional[pulumi.Input[str]]:
        """
        indicates how to deal with a pod if it doesn't satisfy the spread constraint. Defaults to `DoNotSchedule`.
        """
        return pulumi.get(self, "when_unsatisfiable")

    @when_unsatisfiable.setter
    def when_unsatisfiable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "when_unsatisfiable", value)


if not MYPY:
    class K8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelectorArgsDict(TypedDict):
        match_expressions: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpressionArgsDict']]]]
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        match_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
elif False:
    K8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpressionArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpressionArgs']]] match_expressions: A list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpressionArgs']]]]:
        """
        A list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpressionArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


if not MYPY:
    class K8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpressionArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        The label key that the selector applies to.
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
elif False:
    K8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpressionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpressionArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeArgsDict(TypedDict):
        aws_elastic_block_store: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeAwsElasticBlockStoreArgsDict']]
        """
        Represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        azure_disk: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeAzureDiskArgsDict']]
        """
        Represents an Azure Data Disk mount on the host and bind mount to the pod.
        """
        azure_file: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeAzureFileArgsDict']]
        """
        Represents an Azure File Service mount on the host and bind mount to the pod.
        """
        ceph_fs: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeCephFsArgsDict']]
        """
        Represents a Ceph FS mount on the host that shares a pod's lifetime
        """
        cinder: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeCinderArgsDict']]
        """
        Represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        config_map: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeConfigMapArgsDict']]
        """
        ConfigMap represents a configMap that should populate this volume
        """
        csi: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeCsiArgsDict']]
        """
        Represents a CSI Volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
        """
        downward_api: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeDownwardApiArgsDict']]
        """
        DownwardAPI represents downward API about the pod that should populate this volume
        """
        empty_dir: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeEmptyDirArgsDict']]
        """
        EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        """
        ephemeral: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeEphemeralArgsDict']]
        """
        Represents an ephemeral volume that is handled by a normal storage driver. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
        """
        fc: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeFcArgsDict']]
        """
        Represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
        """
        flex_volume: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeFlexVolumeArgsDict']]
        """
        Represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
        """
        flocker: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeFlockerArgsDict']]
        """
        Represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
        """
        gce_persistent_disk: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeGcePersistentDiskArgsDict']]
        """
        Represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        git_repo: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeGitRepoArgsDict']]
        """
        GitRepo represents a git repository at a particular revision.
        """
        glusterfs: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeGlusterfsArgsDict']]
        """
        Represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
        """
        host_path: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeHostPathArgsDict']]
        """
        Represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        """
        iscsi: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeIscsiArgsDict']]
        """
        Represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
        """
        local: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeLocalArgsDict']]
        """
        Represents a mounted local storage device such as a disk, partition or directory. Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported yet. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        nfs: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeNfsArgsDict']]
        """
        Represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        persistent_volume_claim: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumePersistentVolumeClaimArgsDict']]
        """
        The specification of a persistent volume.
        """
        photon_persistent_disk: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumePhotonPersistentDiskArgsDict']]
        """
        Represents a PhotonController persistent disk attached and mounted on kubelets host machine
        """
        projected: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedArgsDict']]
        """
        Projected represents a single volume that projects several volume sources into the same directory. More info: https://kubernetes.io/docs/concepts/storage/volumes/#projected
        """
        quobyte: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeQuobyteArgsDict']]
        """
        Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
        """
        rbd: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeRbdArgsDict']]
        """
        Represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
        """
        secret: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeSecretArgsDict']]
        """
        Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
        """
        vsphere_volume: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeVsphereVolumeArgsDict']]
        """
        Represents a vSphere volume attached and mounted on kubelets host machine
        """
elif False:
    K8sJobSpecTemplateSpecVolumeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeArgs:
    def __init__(__self__, *,
                 aws_elastic_block_store: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeAwsElasticBlockStoreArgs']] = None,
                 azure_disk: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeAzureDiskArgs']] = None,
                 azure_file: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeAzureFileArgs']] = None,
                 ceph_fs: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeCephFsArgs']] = None,
                 cinder: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeCinderArgs']] = None,
                 config_map: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeConfigMapArgs']] = None,
                 csi: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeCsiArgs']] = None,
                 downward_api: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeDownwardApiArgs']] = None,
                 empty_dir: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeEmptyDirArgs']] = None,
                 ephemeral: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeEphemeralArgs']] = None,
                 fc: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeFcArgs']] = None,
                 flex_volume: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeFlexVolumeArgs']] = None,
                 flocker: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeFlockerArgs']] = None,
                 gce_persistent_disk: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeGcePersistentDiskArgs']] = None,
                 git_repo: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeGitRepoArgs']] = None,
                 glusterfs: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeGlusterfsArgs']] = None,
                 host_path: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeHostPathArgs']] = None,
                 iscsi: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeIscsiArgs']] = None,
                 local: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeLocalArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nfs: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeNfsArgs']] = None,
                 persistent_volume_claim: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumePersistentVolumeClaimArgs']] = None,
                 photon_persistent_disk: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumePhotonPersistentDiskArgs']] = None,
                 projected: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedArgs']] = None,
                 quobyte: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeQuobyteArgs']] = None,
                 rbd: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeRbdArgs']] = None,
                 secret: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeSecretArgs']] = None,
                 vsphere_volume: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeVsphereVolumeArgs']] = None):
        """
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeAwsElasticBlockStoreArgs'] aws_elastic_block_store: Represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeAzureDiskArgs'] azure_disk: Represents an Azure Data Disk mount on the host and bind mount to the pod.
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeAzureFileArgs'] azure_file: Represents an Azure File Service mount on the host and bind mount to the pod.
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeCephFsArgs'] ceph_fs: Represents a Ceph FS mount on the host that shares a pod's lifetime
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeCinderArgs'] cinder: Represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeConfigMapArgs'] config_map: ConfigMap represents a configMap that should populate this volume
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeCsiArgs'] csi: Represents a CSI Volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeDownwardApiArgs'] downward_api: DownwardAPI represents downward API about the pod that should populate this volume
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeEmptyDirArgs'] empty_dir: EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeEphemeralArgs'] ephemeral: Represents an ephemeral volume that is handled by a normal storage driver. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeFcArgs'] fc: Represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeFlexVolumeArgs'] flex_volume: Represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeFlockerArgs'] flocker: Represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeGcePersistentDiskArgs'] gce_persistent_disk: Represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeGitRepoArgs'] git_repo: GitRepo represents a git repository at a particular revision.
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeGlusterfsArgs'] glusterfs: Represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeHostPathArgs'] host_path: Represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeIscsiArgs'] iscsi: Represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeLocalArgs'] local: Represents a mounted local storage device such as a disk, partition or directory. Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported yet. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
        :param pulumi.Input[str] name: Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeNfsArgs'] nfs: Represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumePersistentVolumeClaimArgs'] persistent_volume_claim: The specification of a persistent volume.
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumePhotonPersistentDiskArgs'] photon_persistent_disk: Represents a PhotonController persistent disk attached and mounted on kubelets host machine
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedArgs'] projected: Projected represents a single volume that projects several volume sources into the same directory. More info: https://kubernetes.io/docs/concepts/storage/volumes/#projected
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeQuobyteArgs'] quobyte: Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeRbdArgs'] rbd: Represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeSecretArgs'] secret: Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeVsphereVolumeArgs'] vsphere_volume: Represents a vSphere volume attached and mounted on kubelets host machine
        """
        if aws_elastic_block_store is not None:
            pulumi.set(__self__, "aws_elastic_block_store", aws_elastic_block_store)
        if azure_disk is not None:
            pulumi.set(__self__, "azure_disk", azure_disk)
        if azure_file is not None:
            pulumi.set(__self__, "azure_file", azure_file)
        if ceph_fs is not None:
            pulumi.set(__self__, "ceph_fs", ceph_fs)
        if cinder is not None:
            pulumi.set(__self__, "cinder", cinder)
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if csi is not None:
            pulumi.set(__self__, "csi", csi)
        if downward_api is not None:
            pulumi.set(__self__, "downward_api", downward_api)
        if empty_dir is not None:
            pulumi.set(__self__, "empty_dir", empty_dir)
        if ephemeral is not None:
            pulumi.set(__self__, "ephemeral", ephemeral)
        if fc is not None:
            pulumi.set(__self__, "fc", fc)
        if flex_volume is not None:
            pulumi.set(__self__, "flex_volume", flex_volume)
        if flocker is not None:
            pulumi.set(__self__, "flocker", flocker)
        if gce_persistent_disk is not None:
            pulumi.set(__self__, "gce_persistent_disk", gce_persistent_disk)
        if git_repo is not None:
            pulumi.set(__self__, "git_repo", git_repo)
        if glusterfs is not None:
            pulumi.set(__self__, "glusterfs", glusterfs)
        if host_path is not None:
            pulumi.set(__self__, "host_path", host_path)
        if iscsi is not None:
            pulumi.set(__self__, "iscsi", iscsi)
        if local is not None:
            pulumi.set(__self__, "local", local)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nfs is not None:
            pulumi.set(__self__, "nfs", nfs)
        if persistent_volume_claim is not None:
            pulumi.set(__self__, "persistent_volume_claim", persistent_volume_claim)
        if photon_persistent_disk is not None:
            pulumi.set(__self__, "photon_persistent_disk", photon_persistent_disk)
        if projected is not None:
            pulumi.set(__self__, "projected", projected)
        if quobyte is not None:
            pulumi.set(__self__, "quobyte", quobyte)
        if rbd is not None:
            pulumi.set(__self__, "rbd", rbd)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if vsphere_volume is not None:
            pulumi.set(__self__, "vsphere_volume", vsphere_volume)

    @property
    @pulumi.getter(name="awsElasticBlockStore")
    def aws_elastic_block_store(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeAwsElasticBlockStoreArgs']]:
        """
        Represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        return pulumi.get(self, "aws_elastic_block_store")

    @aws_elastic_block_store.setter
    def aws_elastic_block_store(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeAwsElasticBlockStoreArgs']]):
        pulumi.set(self, "aws_elastic_block_store", value)

    @property
    @pulumi.getter(name="azureDisk")
    def azure_disk(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeAzureDiskArgs']]:
        """
        Represents an Azure Data Disk mount on the host and bind mount to the pod.
        """
        return pulumi.get(self, "azure_disk")

    @azure_disk.setter
    def azure_disk(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeAzureDiskArgs']]):
        pulumi.set(self, "azure_disk", value)

    @property
    @pulumi.getter(name="azureFile")
    def azure_file(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeAzureFileArgs']]:
        """
        Represents an Azure File Service mount on the host and bind mount to the pod.
        """
        return pulumi.get(self, "azure_file")

    @azure_file.setter
    def azure_file(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeAzureFileArgs']]):
        pulumi.set(self, "azure_file", value)

    @property
    @pulumi.getter(name="cephFs")
    def ceph_fs(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeCephFsArgs']]:
        """
        Represents a Ceph FS mount on the host that shares a pod's lifetime
        """
        return pulumi.get(self, "ceph_fs")

    @ceph_fs.setter
    def ceph_fs(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeCephFsArgs']]):
        pulumi.set(self, "ceph_fs", value)

    @property
    @pulumi.getter
    def cinder(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeCinderArgs']]:
        """
        Represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        return pulumi.get(self, "cinder")

    @cinder.setter
    def cinder(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeCinderArgs']]):
        pulumi.set(self, "cinder", value)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeConfigMapArgs']]:
        """
        ConfigMap represents a configMap that should populate this volume
        """
        return pulumi.get(self, "config_map")

    @config_map.setter
    def config_map(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeConfigMapArgs']]):
        pulumi.set(self, "config_map", value)

    @property
    @pulumi.getter
    def csi(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeCsiArgs']]:
        """
        Represents a CSI Volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
        """
        return pulumi.get(self, "csi")

    @csi.setter
    def csi(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeCsiArgs']]):
        pulumi.set(self, "csi", value)

    @property
    @pulumi.getter(name="downwardApi")
    def downward_api(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeDownwardApiArgs']]:
        """
        DownwardAPI represents downward API about the pod that should populate this volume
        """
        return pulumi.get(self, "downward_api")

    @downward_api.setter
    def downward_api(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeDownwardApiArgs']]):
        pulumi.set(self, "downward_api", value)

    @property
    @pulumi.getter(name="emptyDir")
    def empty_dir(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeEmptyDirArgs']]:
        """
        EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        """
        return pulumi.get(self, "empty_dir")

    @empty_dir.setter
    def empty_dir(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeEmptyDirArgs']]):
        pulumi.set(self, "empty_dir", value)

    @property
    @pulumi.getter
    def ephemeral(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeEphemeralArgs']]:
        """
        Represents an ephemeral volume that is handled by a normal storage driver. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
        """
        return pulumi.get(self, "ephemeral")

    @ephemeral.setter
    def ephemeral(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeEphemeralArgs']]):
        pulumi.set(self, "ephemeral", value)

    @property
    @pulumi.getter
    def fc(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeFcArgs']]:
        """
        Represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
        """
        return pulumi.get(self, "fc")

    @fc.setter
    def fc(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeFcArgs']]):
        pulumi.set(self, "fc", value)

    @property
    @pulumi.getter(name="flexVolume")
    def flex_volume(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeFlexVolumeArgs']]:
        """
        Represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
        """
        return pulumi.get(self, "flex_volume")

    @flex_volume.setter
    def flex_volume(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeFlexVolumeArgs']]):
        pulumi.set(self, "flex_volume", value)

    @property
    @pulumi.getter
    def flocker(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeFlockerArgs']]:
        """
        Represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
        """
        return pulumi.get(self, "flocker")

    @flocker.setter
    def flocker(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeFlockerArgs']]):
        pulumi.set(self, "flocker", value)

    @property
    @pulumi.getter(name="gcePersistentDisk")
    def gce_persistent_disk(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeGcePersistentDiskArgs']]:
        """
        Represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        return pulumi.get(self, "gce_persistent_disk")

    @gce_persistent_disk.setter
    def gce_persistent_disk(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeGcePersistentDiskArgs']]):
        pulumi.set(self, "gce_persistent_disk", value)

    @property
    @pulumi.getter(name="gitRepo")
    def git_repo(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeGitRepoArgs']]:
        """
        GitRepo represents a git repository at a particular revision.
        """
        return pulumi.get(self, "git_repo")

    @git_repo.setter
    def git_repo(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeGitRepoArgs']]):
        pulumi.set(self, "git_repo", value)

    @property
    @pulumi.getter
    def glusterfs(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeGlusterfsArgs']]:
        """
        Represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
        """
        return pulumi.get(self, "glusterfs")

    @glusterfs.setter
    def glusterfs(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeGlusterfsArgs']]):
        pulumi.set(self, "glusterfs", value)

    @property
    @pulumi.getter(name="hostPath")
    def host_path(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeHostPathArgs']]:
        """
        Represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        """
        return pulumi.get(self, "host_path")

    @host_path.setter
    def host_path(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeHostPathArgs']]):
        pulumi.set(self, "host_path", value)

    @property
    @pulumi.getter
    def iscsi(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeIscsiArgs']]:
        """
        Represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
        """
        return pulumi.get(self, "iscsi")

    @iscsi.setter
    def iscsi(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeIscsiArgs']]):
        pulumi.set(self, "iscsi", value)

    @property
    @pulumi.getter
    def local(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeLocalArgs']]:
        """
        Represents a mounted local storage device such as a disk, partition or directory. Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported yet. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
        """
        return pulumi.get(self, "local")

    @local.setter
    def local(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeLocalArgs']]):
        pulumi.set(self, "local", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nfs(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeNfsArgs']]:
        """
        Represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        return pulumi.get(self, "nfs")

    @nfs.setter
    def nfs(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeNfsArgs']]):
        pulumi.set(self, "nfs", value)

    @property
    @pulumi.getter(name="persistentVolumeClaim")
    def persistent_volume_claim(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumePersistentVolumeClaimArgs']]:
        """
        The specification of a persistent volume.
        """
        return pulumi.get(self, "persistent_volume_claim")

    @persistent_volume_claim.setter
    def persistent_volume_claim(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumePersistentVolumeClaimArgs']]):
        pulumi.set(self, "persistent_volume_claim", value)

    @property
    @pulumi.getter(name="photonPersistentDisk")
    def photon_persistent_disk(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumePhotonPersistentDiskArgs']]:
        """
        Represents a PhotonController persistent disk attached and mounted on kubelets host machine
        """
        return pulumi.get(self, "photon_persistent_disk")

    @photon_persistent_disk.setter
    def photon_persistent_disk(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumePhotonPersistentDiskArgs']]):
        pulumi.set(self, "photon_persistent_disk", value)

    @property
    @pulumi.getter
    def projected(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedArgs']]:
        """
        Projected represents a single volume that projects several volume sources into the same directory. More info: https://kubernetes.io/docs/concepts/storage/volumes/#projected
        """
        return pulumi.get(self, "projected")

    @projected.setter
    def projected(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedArgs']]):
        pulumi.set(self, "projected", value)

    @property
    @pulumi.getter
    def quobyte(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeQuobyteArgs']]:
        """
        Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
        """
        return pulumi.get(self, "quobyte")

    @quobyte.setter
    def quobyte(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeQuobyteArgs']]):
        pulumi.set(self, "quobyte", value)

    @property
    @pulumi.getter
    def rbd(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeRbdArgs']]:
        """
        Represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
        """
        return pulumi.get(self, "rbd")

    @rbd.setter
    def rbd(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeRbdArgs']]):
        pulumi.set(self, "rbd", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeSecretArgs']]:
        """
        Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeSecretArgs']]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="vsphereVolume")
    def vsphere_volume(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeVsphereVolumeArgs']]:
        """
        Represents a vSphere volume attached and mounted on kubelets host machine
        """
        return pulumi.get(self, "vsphere_volume")

    @vsphere_volume.setter
    def vsphere_volume(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeVsphereVolumeArgs']]):
        pulumi.set(self, "vsphere_volume", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeAwsElasticBlockStoreArgsDict(TypedDict):
        volume_id: pulumi.Input[str]
        """
        Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        fs_type: NotRequired[pulumi.Input[str]]
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        partition: NotRequired[pulumi.Input[int]]
        """
        The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
        """
        read_only: NotRequired[pulumi.Input[bool]]
        """
        Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
elif False:
    K8sJobSpecTemplateSpecVolumeAwsElasticBlockStoreArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeAwsElasticBlockStoreArgs:
    def __init__(__self__, *,
                 volume_id: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 partition: Optional[pulumi.Input[int]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] volume_id: Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        :param pulumi.Input[str] fs_type: Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        :param pulumi.Input[int] partition: The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
        :param pulumi.Input[bool] read_only: Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Input[str]:
        """
        Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume_id", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def partition(self) -> Optional[pulumi.Input[int]]:
        """
        The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
        """
        return pulumi.get(self, "partition")

    @partition.setter
    def partition(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "partition", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeAzureDiskArgsDict(TypedDict):
        caching_mode: pulumi.Input[str]
        """
        Host Caching mode: None, Read Only, Read Write.
        """
        data_disk_uri: pulumi.Input[str]
        """
        The URI the data disk in the blob storage
        """
        disk_name: pulumi.Input[str]
        """
        The Name of the data disk in the blob storage
        """
        fs_type: NotRequired[pulumi.Input[str]]
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        kind: NotRequired[pulumi.Input[str]]
        """
        The type for the data disk. Expected values: Shared, Dedicated, Managed. Defaults to Shared
        """
        read_only: NotRequired[pulumi.Input[bool]]
        """
        Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). Defaults to `false`.
        """
elif False:
    K8sJobSpecTemplateSpecVolumeAzureDiskArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeAzureDiskArgs:
    def __init__(__self__, *,
                 caching_mode: pulumi.Input[str],
                 data_disk_uri: pulumi.Input[str],
                 disk_name: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] caching_mode: Host Caching mode: None, Read Only, Read Write.
        :param pulumi.Input[str] data_disk_uri: The URI the data disk in the blob storage
        :param pulumi.Input[str] disk_name: The Name of the data disk in the blob storage
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        :param pulumi.Input[str] kind: The type for the data disk. Expected values: Shared, Dedicated, Managed. Defaults to Shared
        :param pulumi.Input[bool] read_only: Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). Defaults to `false`.
        """
        pulumi.set(__self__, "caching_mode", caching_mode)
        pulumi.set(__self__, "data_disk_uri", data_disk_uri)
        pulumi.set(__self__, "disk_name", disk_name)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="cachingMode")
    def caching_mode(self) -> pulumi.Input[str]:
        """
        Host Caching mode: None, Read Only, Read Write.
        """
        return pulumi.get(self, "caching_mode")

    @caching_mode.setter
    def caching_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "caching_mode", value)

    @property
    @pulumi.getter(name="dataDiskUri")
    def data_disk_uri(self) -> pulumi.Input[str]:
        """
        The URI the data disk in the blob storage
        """
        return pulumi.get(self, "data_disk_uri")

    @data_disk_uri.setter
    def data_disk_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_disk_uri", value)

    @property
    @pulumi.getter(name="diskName")
    def disk_name(self) -> pulumi.Input[str]:
        """
        The Name of the data disk in the blob storage
        """
        return pulumi.get(self, "disk_name")

    @disk_name.setter
    def disk_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_name", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        The type for the data disk. Expected values: Shared, Dedicated, Managed. Defaults to Shared
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). Defaults to `false`.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeAzureFileArgsDict(TypedDict):
        secret_name: pulumi.Input[str]
        """
        The name of secret that contains Azure Storage Account Name and Key
        """
        share_name: pulumi.Input[str]
        """
        Share Name
        """
        read_only: NotRequired[pulumi.Input[bool]]
        """
        Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
        """
        secret_namespace: NotRequired[pulumi.Input[str]]
        """
        The namespace of the secret that contains Azure Storage Account Name and Key. For Kubernetes up to 1.18.x the default is the same as the Pod. For Kubernetes 1.19.x and later the default is "default" namespace.
        """
elif False:
    K8sJobSpecTemplateSpecVolumeAzureFileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeAzureFileArgs:
    def __init__(__self__, *,
                 secret_name: pulumi.Input[str],
                 share_name: pulumi.Input[str],
                 read_only: Optional[pulumi.Input[bool]] = None,
                 secret_namespace: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] secret_name: The name of secret that contains Azure Storage Account Name and Key
        :param pulumi.Input[str] share_name: Share Name
        :param pulumi.Input[bool] read_only: Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
        :param pulumi.Input[str] secret_namespace: The namespace of the secret that contains Azure Storage Account Name and Key. For Kubernetes up to 1.18.x the default is the same as the Pod. For Kubernetes 1.19.x and later the default is "default" namespace.
        """
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "share_name", share_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_namespace is not None:
            pulumi.set(__self__, "secret_namespace", secret_namespace)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        The name of secret that contains Azure Storage Account Name and Key
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter(name="shareName")
    def share_name(self) -> pulumi.Input[str]:
        """
        Share Name
        """
        return pulumi.get(self, "share_name")

    @share_name.setter
    def share_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "share_name", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="secretNamespace")
    def secret_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The namespace of the secret that contains Azure Storage Account Name and Key. For Kubernetes up to 1.18.x the default is the same as the Pod. For Kubernetes 1.19.x and later the default is "default" namespace.
        """
        return pulumi.get(self, "secret_namespace")

    @secret_namespace.setter
    def secret_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_namespace", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeCephFsArgsDict(TypedDict):
        monitors: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        Monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        path: NotRequired[pulumi.Input[str]]
        """
        Used as the mounted root, rather than the full Ceph tree, default is /
        """
        read_only: NotRequired[pulumi.Input[bool]]
        """
        Whether to force the read-only setting in VolumeMounts. Defaults to `false` (read/write). More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        secret_file: NotRequired[pulumi.Input[str]]
        """
        The path to key ring for User, default is `/etc/ceph/user.secret`. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        secret_ref: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeCephFsSecretRefArgsDict']]
        """
        Reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        user: NotRequired[pulumi.Input[str]]
        """
        User is the rados user name, default is admin. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
elif False:
    K8sJobSpecTemplateSpecVolumeCephFsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeCephFsArgs:
    def __init__(__self__, *,
                 monitors: pulumi.Input[Sequence[pulumi.Input[str]]],
                 path: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 secret_file: Optional[pulumi.Input[str]] = None,
                 secret_ref: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeCephFsSecretRefArgs']] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] monitors: Monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input[str] path: Used as the mounted root, rather than the full Ceph tree, default is /
        :param pulumi.Input[bool] read_only: Whether to force the read-only setting in VolumeMounts. Defaults to `false` (read/write). More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input[str] secret_file: The path to key ring for User, default is `/etc/ceph/user.secret`. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeCephFsSecretRefArgs'] secret_ref: Reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input[str] user: User is the rados user name, default is admin. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        pulumi.set(__self__, "monitors", monitors)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_file is not None:
            pulumi.set(__self__, "secret_file", secret_file)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def monitors(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "monitors")

    @monitors.setter
    def monitors(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "monitors", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Used as the mounted root, rather than the full Ceph tree, default is /
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force the read-only setting in VolumeMounts. Defaults to `false` (read/write). More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="secretFile")
    def secret_file(self) -> Optional[pulumi.Input[str]]:
        """
        The path to key ring for User, default is `/etc/ceph/user.secret`. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "secret_file")

    @secret_file.setter
    def secret_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_file", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeCephFsSecretRefArgs']]:
        """
        Reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeCephFsSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User is the rados user name, default is admin. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeCephFsSecretRefArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        namespace: NotRequired[pulumi.Input[str]]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
elif False:
    K8sJobSpecTemplateSpecVolumeCephFsSecretRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeCephFsSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] namespace: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeCinderArgsDict(TypedDict):
        volume_id: pulumi.Input[str]
        """
        Volume ID used to identify the volume in Cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        fs_type: NotRequired[pulumi.Input[str]]
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        read_only: NotRequired[pulumi.Input[bool]]
        """
        Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
elif False:
    K8sJobSpecTemplateSpecVolumeCinderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeCinderArgs:
    def __init__(__self__, *,
                 volume_id: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] volume_id: Volume ID used to identify the volume in Cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param pulumi.Input[bool] read_only: Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Input[str]:
        """
        Volume ID used to identify the volume in Cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume_id", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeConfigMapArgsDict(TypedDict):
        default_mode: NotRequired[pulumi.Input[str]]
        """
        Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Defaults to `0644`.
        """
        items: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeConfigMapItemArgsDict']]]]
        """
        If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        optional: NotRequired[pulumi.Input[bool]]
        """
        Optional: Specify whether the ConfigMap or its keys must be defined.
        """
elif False:
    K8sJobSpecTemplateSpecVolumeConfigMapArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeConfigMapArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[str]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeConfigMapItemArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] default_mode: Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Defaults to `0644`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeConfigMapItemArgs']]] items: If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[bool] optional: Optional: Specify whether the ConfigMap or its keys must be defined.
        """
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Defaults to `0644`.
        """
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeConfigMapItemArgs']]]]:
        """
        If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeConfigMapItemArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional: Specify whether the ConfigMap or its keys must be defined.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeConfigMapItemArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        The key to project.
        """
        mode: NotRequired[pulumi.Input[str]]
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        path: NotRequired[pulumi.Input[str]]
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
elif False:
    K8sJobSpecTemplateSpecVolumeConfigMapItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeConfigMapItemArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: The key to project.
        :param pulumi.Input[str] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input[str] path: The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key to project.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeCsiArgsDict(TypedDict):
        driver: pulumi.Input[str]
        """
        the name of the volume driver to use. More info: https://kubernetes.io/docs/concepts/storage/volumes/#csi
        """
        fs_type: NotRequired[pulumi.Input[str]]
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        node_publish_secret_ref: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeCsiNodePublishSecretRefArgsDict']]
        """
        A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls.
        """
        read_only: NotRequired[pulumi.Input[bool]]
        """
        Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
        """
        volume_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Attributes of the volume to publish.
        """
elif False:
    K8sJobSpecTemplateSpecVolumeCsiArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeCsiArgs:
    def __init__(__self__, *,
                 driver: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 node_publish_secret_ref: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeCsiNodePublishSecretRefArgs']] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 volume_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] driver: the name of the volume driver to use. More info: https://kubernetes.io/docs/concepts/storage/volumes/#csi
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeCsiNodePublishSecretRefArgs'] node_publish_secret_ref: A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls.
        :param pulumi.Input[bool] read_only: Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] volume_attributes: Attributes of the volume to publish.
        """
        pulumi.set(__self__, "driver", driver)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if node_publish_secret_ref is not None:
            pulumi.set(__self__, "node_publish_secret_ref", node_publish_secret_ref)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if volume_attributes is not None:
            pulumi.set(__self__, "volume_attributes", volume_attributes)

    @property
    @pulumi.getter
    def driver(self) -> pulumi.Input[str]:
        """
        the name of the volume driver to use. More info: https://kubernetes.io/docs/concepts/storage/volumes/#csi
        """
        return pulumi.get(self, "driver")

    @driver.setter
    def driver(self, value: pulumi.Input[str]):
        pulumi.set(self, "driver", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="nodePublishSecretRef")
    def node_publish_secret_ref(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeCsiNodePublishSecretRefArgs']]:
        """
        A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls.
        """
        return pulumi.get(self, "node_publish_secret_ref")

    @node_publish_secret_ref.setter
    def node_publish_secret_ref(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeCsiNodePublishSecretRefArgs']]):
        pulumi.set(self, "node_publish_secret_ref", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="volumeAttributes")
    def volume_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Attributes of the volume to publish.
        """
        return pulumi.get(self, "volume_attributes")

    @volume_attributes.setter
    def volume_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "volume_attributes", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeCsiNodePublishSecretRefArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
elif False:
    K8sJobSpecTemplateSpecVolumeCsiNodePublishSecretRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeCsiNodePublishSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeDownwardApiArgsDict(TypedDict):
        default_mode: NotRequired[pulumi.Input[str]]
        """
        Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Defaults to `0644`.
        """
        items: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeDownwardApiItemArgsDict']]]]
        """
        If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
        """
elif False:
    K8sJobSpecTemplateSpecVolumeDownwardApiArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeDownwardApiArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[str]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeDownwardApiItemArgs']]]] = None):
        """
        :param pulumi.Input[str] default_mode: Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Defaults to `0644`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeDownwardApiItemArgs']]] items: If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Defaults to `0644`.
        """
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeDownwardApiItemArgs']]]]:
        """
        If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeDownwardApiItemArgs']]]]):
        pulumi.set(self, "items", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeDownwardApiItemArgsDict(TypedDict):
        field_ref: pulumi.Input['K8sJobSpecTemplateSpecVolumeDownwardApiItemFieldRefArgsDict']
        """
        Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        """
        path: pulumi.Input[str]
        """
        Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        """
        mode: NotRequired[pulumi.Input[str]]
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        resource_field_ref: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeDownwardApiItemResourceFieldRefArgsDict']]
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        """
elif False:
    K8sJobSpecTemplateSpecVolumeDownwardApiItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeDownwardApiItemArgs:
    def __init__(__self__, *,
                 field_ref: pulumi.Input['K8sJobSpecTemplateSpecVolumeDownwardApiItemFieldRefArgs'],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[str]] = None,
                 resource_field_ref: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeDownwardApiItemResourceFieldRefArgs']] = None):
        """
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeDownwardApiItemFieldRefArgs'] field_ref: Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        :param pulumi.Input[str] path: Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        :param pulumi.Input[str] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeDownwardApiItemResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        """
        pulumi.set(__self__, "field_ref", field_ref)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> pulumi.Input['K8sJobSpecTemplateSpecVolumeDownwardApiItemFieldRefArgs']:
        """
        Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: pulumi.Input['K8sJobSpecTemplateSpecVolumeDownwardApiItemFieldRefArgs']):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeDownwardApiItemResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeDownwardApiItemResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeDownwardApiItemFieldRefArgsDict(TypedDict):
        api_version: NotRequired[pulumi.Input[str]]
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1". Defaults to `v1`.
        """
        field_path: NotRequired[pulumi.Input[str]]
        """
        Path of the field to select in the specified API version
        """
elif False:
    K8sJobSpecTemplateSpecVolumeDownwardApiItemFieldRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeDownwardApiItemFieldRefArgs:
    def __init__(__self__, *,
                 api_version: Optional[pulumi.Input[str]] = None,
                 field_path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1". Defaults to `v1`.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if field_path is not None:
            pulumi.set(__self__, "field_path", field_path)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1". Defaults to `v1`.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path of the field to select in the specified API version
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_path", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeDownwardApiItemResourceFieldRefArgsDict(TypedDict):
        container_name: pulumi.Input[str]
        resource: pulumi.Input[str]
        """
        Resource to select
        """
        divisor: NotRequired[pulumi.Input[str]]
        """
        Defaults to `1`.
        """
elif False:
    K8sJobSpecTemplateSpecVolumeDownwardApiItemResourceFieldRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeDownwardApiItemResourceFieldRefArgs:
    def __init__(__self__, *,
                 container_name: pulumi.Input[str],
                 resource: pulumi.Input[str],
                 divisor: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] resource: Resource to select
        :param pulumi.Input[str] divisor: Defaults to `1`.
        """
        pulumi.set(__self__, "container_name", container_name)
        pulumi.set(__self__, "resource", resource)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `1`.
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "divisor", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeEmptyDirArgsDict(TypedDict):
        medium: NotRequired[pulumi.Input[str]]
        """
        What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir Defaults to ``.
        """
        size_limit: NotRequired[pulumi.Input[str]]
        """
        Total amount of local storage required for this EmptyDir volume.
        """
elif False:
    K8sJobSpecTemplateSpecVolumeEmptyDirArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeEmptyDirArgs:
    def __init__(__self__, *,
                 medium: Optional[pulumi.Input[str]] = None,
                 size_limit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] medium: What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir Defaults to ``.
        :param pulumi.Input[str] size_limit: Total amount of local storage required for this EmptyDir volume.
        """
        if medium is not None:
            pulumi.set(__self__, "medium", medium)
        if size_limit is not None:
            pulumi.set(__self__, "size_limit", size_limit)

    @property
    @pulumi.getter
    def medium(self) -> Optional[pulumi.Input[str]]:
        """
        What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir Defaults to ``.
        """
        return pulumi.get(self, "medium")

    @medium.setter
    def medium(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "medium", value)

    @property
    @pulumi.getter(name="sizeLimit")
    def size_limit(self) -> Optional[pulumi.Input[str]]:
        """
        Total amount of local storage required for this EmptyDir volume.
        """
        return pulumi.get(self, "size_limit")

    @size_limit.setter
    def size_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size_limit", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeEphemeralArgsDict(TypedDict):
        volume_claim_template: pulumi.Input['K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateArgsDict']
        """
        Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC.
        """
elif False:
    K8sJobSpecTemplateSpecVolumeEphemeralArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeEphemeralArgs:
    def __init__(__self__, *,
                 volume_claim_template: pulumi.Input['K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateArgs']):
        """
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateArgs'] volume_claim_template: Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC.
        """
        pulumi.set(__self__, "volume_claim_template", volume_claim_template)

    @property
    @pulumi.getter(name="volumeClaimTemplate")
    def volume_claim_template(self) -> pulumi.Input['K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateArgs']:
        """
        Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC.
        """
        return pulumi.get(self, "volume_claim_template")

    @volume_claim_template.setter
    def volume_claim_template(self, value: pulumi.Input['K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateArgs']):
        pulumi.set(self, "volume_claim_template", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateArgsDict(TypedDict):
        spec: pulumi.Input['K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecArgsDict']
        """
        The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
        """
        metadata: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadataArgsDict']]
        """
        May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
        """
elif False:
    K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateArgs:
    def __init__(__self__, *,
                 spec: pulumi.Input['K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecArgs'],
                 metadata: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadataArgs']] = None):
        """
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecArgs'] spec: The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadataArgs'] metadata: May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
        """
        pulumi.set(__self__, "spec", spec)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Input['K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecArgs']:
        """
        The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: pulumi.Input['K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecArgs']):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadataArgs']]:
        """
        May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadataArgs']]):
        pulumi.set(self, "metadata", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadataArgsDict(TypedDict):
        annotations: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        An unstructured key value map stored with the persistent volume claim that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
        """
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the persistent volume claim. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
        """
elif False:
    K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: An unstructured key value map stored with the persistent volume claim that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the persistent volume claim. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        An unstructured key value map stored with the persistent volume claim that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the persistent volume claim. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecArgsDict(TypedDict):
        access_modes: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        A set of the desired access modes the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#access-modes-1
        """
        resources: pulumi.Input['K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResourcesArgsDict']
        """
        A list of the minimum resources the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#resources
        """
        storage_class_name: NotRequired[pulumi.Input[str]]
        """
        Name of the storage class requested by the claim
        """
        volume_mode: NotRequired[pulumi.Input[str]]
        """
        Kubernetes supports two volumeModes of PersistentVolumes: `Filesystem` and `Block`.
        """
        volume_name: NotRequired[pulumi.Input[str]]
        """
        The binding reference to the PersistentVolume backing this claim.
        """
elif False:
    K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecArgs:
    def __init__(__self__, *,
                 access_modes: pulumi.Input[Sequence[pulumi.Input[str]]],
                 resources: pulumi.Input['K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResourcesArgs'],
                 storage_class_name: Optional[pulumi.Input[str]] = None,
                 volume_mode: Optional[pulumi.Input[str]] = None,
                 volume_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] access_modes: A set of the desired access modes the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#access-modes-1
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResourcesArgs'] resources: A list of the minimum resources the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#resources
        :param pulumi.Input[str] storage_class_name: Name of the storage class requested by the claim
        :param pulumi.Input[str] volume_mode: Kubernetes supports two volumeModes of PersistentVolumes: `Filesystem` and `Block`.
        :param pulumi.Input[str] volume_name: The binding reference to the PersistentVolume backing this claim.
        """
        pulumi.set(__self__, "access_modes", access_modes)
        pulumi.set(__self__, "resources", resources)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)
        if volume_mode is not None:
            pulumi.set(__self__, "volume_mode", volume_mode)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)

    @property
    @pulumi.getter(name="accessModes")
    def access_modes(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A set of the desired access modes the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#access-modes-1
        """
        return pulumi.get(self, "access_modes")

    @access_modes.setter
    def access_modes(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "access_modes", value)

    @property
    @pulumi.getter
    def resources(self) -> pulumi.Input['K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResourcesArgs']:
        """
        A list of the minimum resources the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#resources
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: pulumi.Input['K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResourcesArgs']):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the storage class requested by the claim
        """
        return pulumi.get(self, "storage_class_name")

    @storage_class_name.setter
    def storage_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_class_name", value)

    @property
    @pulumi.getter(name="volumeMode")
    def volume_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Kubernetes supports two volumeModes of PersistentVolumes: `Filesystem` and `Block`.
        """
        return pulumi.get(self, "volume_mode")

    @volume_mode.setter
    def volume_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_mode", value)

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[pulumi.Input[str]]:
        """
        The binding reference to the PersistentVolume backing this claim.
        """
        return pulumi.get(self, "volume_name")

    @volume_name.setter
    def volume_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_name", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResourcesArgsDict(TypedDict):
        limits: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map describing the maximum amount of compute resources allowed. More info: http://kubernetes.io/docs/user-guide/compute-resources/
        """
        requests: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map describing the minimum amount of compute resources required. If this is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. More info: http://kubernetes.io/docs/user-guide/compute-resources/
        """
elif False:
    K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResourcesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] limits: Map describing the maximum amount of compute resources allowed. More info: http://kubernetes.io/docs/user-guide/compute-resources/
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] requests: Map describing the minimum amount of compute resources required. If this is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. More info: http://kubernetes.io/docs/user-guide/compute-resources/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map describing the maximum amount of compute resources allowed. More info: http://kubernetes.io/docs/user-guide/compute-resources/
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map describing the minimum amount of compute resources required. If this is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. More info: http://kubernetes.io/docs/user-guide/compute-resources/
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "requests", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeFcArgsDict(TypedDict):
        lun: pulumi.Input[int]
        """
        FC target lun number
        """
        target_ww_ns: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        FC target worldwide names (WWNs)
        """
        fs_type: NotRequired[pulumi.Input[str]]
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        read_only: NotRequired[pulumi.Input[bool]]
        """
        Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
        """
elif False:
    K8sJobSpecTemplateSpecVolumeFcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeFcArgs:
    def __init__(__self__, *,
                 lun: pulumi.Input[int],
                 target_ww_ns: pulumi.Input[Sequence[pulumi.Input[str]]],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[int] lun: FC target lun number
        :param pulumi.Input[Sequence[pulumi.Input[str]]] target_ww_ns: FC target worldwide names (WWNs)
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        :param pulumi.Input[bool] read_only: Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
        """
        pulumi.set(__self__, "lun", lun)
        pulumi.set(__self__, "target_ww_ns", target_ww_ns)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def lun(self) -> pulumi.Input[int]:
        """
        FC target lun number
        """
        return pulumi.get(self, "lun")

    @lun.setter
    def lun(self, value: pulumi.Input[int]):
        pulumi.set(self, "lun", value)

    @property
    @pulumi.getter(name="targetWwNs")
    def target_ww_ns(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        FC target worldwide names (WWNs)
        """
        return pulumi.get(self, "target_ww_ns")

    @target_ww_ns.setter
    def target_ww_ns(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "target_ww_ns", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeFlexVolumeArgsDict(TypedDict):
        driver: pulumi.Input[str]
        """
        Driver is the name of the driver to use for this volume.
        """
        fs_type: NotRequired[pulumi.Input[str]]
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
        """
        options: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Extra command options if any.
        """
        read_only: NotRequired[pulumi.Input[bool]]
        """
        Whether to force the ReadOnly setting in VolumeMounts. Defaults to false (read/write).
        """
        secret_ref: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeFlexVolumeSecretRefArgsDict']]
        """
        Reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
        """
elif False:
    K8sJobSpecTemplateSpecVolumeFlexVolumeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeFlexVolumeArgs:
    def __init__(__self__, *,
                 driver: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 secret_ref: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeFlexVolumeSecretRefArgs']] = None):
        """
        :param pulumi.Input[str] driver: Driver is the name of the driver to use for this volume.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] options: Extra command options if any.
        :param pulumi.Input[bool] read_only: Whether to force the ReadOnly setting in VolumeMounts. Defaults to false (read/write).
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeFlexVolumeSecretRefArgs'] secret_ref: Reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
        """
        pulumi.set(__self__, "driver", driver)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def driver(self) -> pulumi.Input[str]:
        """
        Driver is the name of the driver to use for this volume.
        """
        return pulumi.get(self, "driver")

    @driver.setter
    def driver(self, value: pulumi.Input[str]):
        pulumi.set(self, "driver", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Extra command options if any.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force the ReadOnly setting in VolumeMounts. Defaults to false (read/write).
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeFlexVolumeSecretRefArgs']]:
        """
        Reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeFlexVolumeSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeFlexVolumeSecretRefArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        namespace: NotRequired[pulumi.Input[str]]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
elif False:
    K8sJobSpecTemplateSpecVolumeFlexVolumeSecretRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeFlexVolumeSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] namespace: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeFlockerArgsDict(TypedDict):
        dataset_name: NotRequired[pulumi.Input[str]]
        """
        Name of the dataset stored as metadata > name on the dataset for Flocker should be considered as deprecated
        """
        dataset_uuid: NotRequired[pulumi.Input[str]]
        """
        UUID of the dataset. This is unique identifier of a Flocker dataset
        """
elif False:
    K8sJobSpecTemplateSpecVolumeFlockerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeFlockerArgs:
    def __init__(__self__, *,
                 dataset_name: Optional[pulumi.Input[str]] = None,
                 dataset_uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] dataset_name: Name of the dataset stored as metadata > name on the dataset for Flocker should be considered as deprecated
        :param pulumi.Input[str] dataset_uuid: UUID of the dataset. This is unique identifier of a Flocker dataset
        """
        if dataset_name is not None:
            pulumi.set(__self__, "dataset_name", dataset_name)
        if dataset_uuid is not None:
            pulumi.set(__self__, "dataset_uuid", dataset_uuid)

    @property
    @pulumi.getter(name="datasetName")
    def dataset_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the dataset stored as metadata > name on the dataset for Flocker should be considered as deprecated
        """
        return pulumi.get(self, "dataset_name")

    @dataset_name.setter
    def dataset_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset_name", value)

    @property
    @pulumi.getter(name="datasetUuid")
    def dataset_uuid(self) -> Optional[pulumi.Input[str]]:
        """
        UUID of the dataset. This is unique identifier of a Flocker dataset
        """
        return pulumi.get(self, "dataset_uuid")

    @dataset_uuid.setter
    def dataset_uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset_uuid", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeGcePersistentDiskArgsDict(TypedDict):
        pd_name: pulumi.Input[str]
        """
        Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        fs_type: NotRequired[pulumi.Input[str]]
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        partition: NotRequired[pulumi.Input[int]]
        """
        The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        read_only: NotRequired[pulumi.Input[bool]]
        """
        Whether to force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
elif False:
    K8sJobSpecTemplateSpecVolumeGcePersistentDiskArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeGcePersistentDiskArgs:
    def __init__(__self__, *,
                 pd_name: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 partition: Optional[pulumi.Input[int]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] pd_name: Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        :param pulumi.Input[str] fs_type: Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        :param pulumi.Input[int] partition: The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        :param pulumi.Input[bool] read_only: Whether to force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        pulumi.set(__self__, "pd_name", pd_name)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="pdName")
    def pd_name(self) -> pulumi.Input[str]:
        """
        Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        return pulumi.get(self, "pd_name")

    @pd_name.setter
    def pd_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "pd_name", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def partition(self) -> Optional[pulumi.Input[int]]:
        """
        The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        return pulumi.get(self, "partition")

    @partition.setter
    def partition(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "partition", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeGitRepoArgsDict(TypedDict):
        directory: NotRequired[pulumi.Input[str]]
        """
        Target directory name. Must not contain or start with '..'. If '.' is supplied, the volume directory will be the git repository. Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
        """
        repository: NotRequired[pulumi.Input[str]]
        """
        Repository URL
        """
        revision: NotRequired[pulumi.Input[str]]
        """
        Commit hash for the specified revision.
        """
elif False:
    K8sJobSpecTemplateSpecVolumeGitRepoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeGitRepoArgs:
    def __init__(__self__, *,
                 directory: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 revision: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] directory: Target directory name. Must not contain or start with '..'. If '.' is supplied, the volume directory will be the git repository. Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
        :param pulumi.Input[str] repository: Repository URL
        :param pulumi.Input[str] revision: Commit hash for the specified revision.
        """
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)

    @property
    @pulumi.getter
    def directory(self) -> Optional[pulumi.Input[str]]:
        """
        Target directory name. Must not contain or start with '..'. If '.' is supplied, the volume directory will be the git repository. Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
        """
        return pulumi.get(self, "directory")

    @directory.setter
    def directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "directory", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        Repository URL
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter
    def revision(self) -> Optional[pulumi.Input[str]]:
        """
        Commit hash for the specified revision.
        """
        return pulumi.get(self, "revision")

    @revision.setter
    def revision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revision", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeGlusterfsArgsDict(TypedDict):
        endpoints_name: pulumi.Input[str]
        """
        The endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
        path: pulumi.Input[str]
        """
        The Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
        read_only: NotRequired[pulumi.Input[bool]]
        """
        Whether to force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
elif False:
    K8sJobSpecTemplateSpecVolumeGlusterfsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeGlusterfsArgs:
    def __init__(__self__, *,
                 endpoints_name: pulumi.Input[str],
                 path: pulumi.Input[str],
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] endpoints_name: The endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        :param pulumi.Input[str] path: The Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        :param pulumi.Input[bool] read_only: Whether to force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
        pulumi.set(__self__, "endpoints_name", endpoints_name)
        pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="endpointsName")
    def endpoints_name(self) -> pulumi.Input[str]:
        """
        The endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
        return pulumi.get(self, "endpoints_name")

    @endpoints_name.setter
    def endpoints_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoints_name", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeHostPathArgsDict(TypedDict):
        path: NotRequired[pulumi.Input[str]]
        """
        Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type for HostPath volume. Allowed values are "" (default), DirectoryOrCreate, Directory, FileOrCreate, File, Socket, CharDevice and BlockDevice
        """
elif False:
    K8sJobSpecTemplateSpecVolumeHostPathArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeHostPathArgs:
    def __init__(__self__, *,
                 path: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] path: Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        :param pulumi.Input[str] type: Type for HostPath volume. Allowed values are "" (default), DirectoryOrCreate, Directory, FileOrCreate, File, Socket, CharDevice and BlockDevice
        """
        if path is not None:
            pulumi.set(__self__, "path", path)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type for HostPath volume. Allowed values are "" (default), DirectoryOrCreate, Directory, FileOrCreate, File, Socket, CharDevice and BlockDevice
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeIscsiArgsDict(TypedDict):
        iqn: pulumi.Input[str]
        """
        Target iSCSI Qualified Name.
        """
        target_portal: pulumi.Input[str]
        """
        iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        """
        fs_type: NotRequired[pulumi.Input[str]]
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
        """
        iscsi_interface: NotRequired[pulumi.Input[str]]
        """
        iSCSI interface name that uses an iSCSI transport. Defaults to 'default' (tcp). Defaults to `default`.
        """
        lun: NotRequired[pulumi.Input[int]]
        """
        iSCSI target lun number.
        """
        read_only: NotRequired[pulumi.Input[bool]]
        """
        Whether to force the read-only setting in VolumeMounts. Defaults to false.
        """
elif False:
    K8sJobSpecTemplateSpecVolumeIscsiArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeIscsiArgs:
    def __init__(__self__, *,
                 iqn: pulumi.Input[str],
                 target_portal: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 iscsi_interface: Optional[pulumi.Input[str]] = None,
                 lun: Optional[pulumi.Input[int]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] iqn: Target iSCSI Qualified Name.
        :param pulumi.Input[str] target_portal: iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        :param pulumi.Input[str] fs_type: Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
        :param pulumi.Input[str] iscsi_interface: iSCSI interface name that uses an iSCSI transport. Defaults to 'default' (tcp). Defaults to `default`.
        :param pulumi.Input[int] lun: iSCSI target lun number.
        :param pulumi.Input[bool] read_only: Whether to force the read-only setting in VolumeMounts. Defaults to false.
        """
        pulumi.set(__self__, "iqn", iqn)
        pulumi.set(__self__, "target_portal", target_portal)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if iscsi_interface is not None:
            pulumi.set(__self__, "iscsi_interface", iscsi_interface)
        if lun is not None:
            pulumi.set(__self__, "lun", lun)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def iqn(self) -> pulumi.Input[str]:
        """
        Target iSCSI Qualified Name.
        """
        return pulumi.get(self, "iqn")

    @iqn.setter
    def iqn(self, value: pulumi.Input[str]):
        pulumi.set(self, "iqn", value)

    @property
    @pulumi.getter(name="targetPortal")
    def target_portal(self) -> pulumi.Input[str]:
        """
        iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        """
        return pulumi.get(self, "target_portal")

    @target_portal.setter
    def target_portal(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_portal", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="iscsiInterface")
    def iscsi_interface(self) -> Optional[pulumi.Input[str]]:
        """
        iSCSI interface name that uses an iSCSI transport. Defaults to 'default' (tcp). Defaults to `default`.
        """
        return pulumi.get(self, "iscsi_interface")

    @iscsi_interface.setter
    def iscsi_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iscsi_interface", value)

    @property
    @pulumi.getter
    def lun(self) -> Optional[pulumi.Input[int]]:
        """
        iSCSI target lun number.
        """
        return pulumi.get(self, "lun")

    @lun.setter
    def lun(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lun", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force the read-only setting in VolumeMounts. Defaults to false.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeLocalArgsDict(TypedDict):
        path: NotRequired[pulumi.Input[str]]
        """
        Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
        """
elif False:
    K8sJobSpecTemplateSpecVolumeLocalArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeLocalArgs:
    def __init__(__self__, *,
                 path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] path: Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
        """
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeNfsArgsDict(TypedDict):
        path: pulumi.Input[str]
        """
        Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        server: pulumi.Input[str]
        """
        Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        read_only: NotRequired[pulumi.Input[bool]]
        """
        Whether to force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
elif False:
    K8sJobSpecTemplateSpecVolumeNfsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeNfsArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 server: pulumi.Input[str],
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] path: Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        :param pulumi.Input[str] server: Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        :param pulumi.Input[bool] read_only: Whether to force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "server", server)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        """
        Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumePersistentVolumeClaimArgsDict(TypedDict):
        claim_name: NotRequired[pulumi.Input[str]]
        """
        ClaimName is the name of a PersistentVolumeClaim in the same
        """
        read_only: NotRequired[pulumi.Input[bool]]
        """
        Will force the ReadOnly setting in VolumeMounts. Defaults to `false`.
        """
elif False:
    K8sJobSpecTemplateSpecVolumePersistentVolumeClaimArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumePersistentVolumeClaimArgs:
    def __init__(__self__, *,
                 claim_name: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] claim_name: ClaimName is the name of a PersistentVolumeClaim in the same
        :param pulumi.Input[bool] read_only: Will force the ReadOnly setting in VolumeMounts. Defaults to `false`.
        """
        if claim_name is not None:
            pulumi.set(__self__, "claim_name", claim_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="claimName")
    def claim_name(self) -> Optional[pulumi.Input[str]]:
        """
        ClaimName is the name of a PersistentVolumeClaim in the same
        """
        return pulumi.get(self, "claim_name")

    @claim_name.setter
    def claim_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "claim_name", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Will force the ReadOnly setting in VolumeMounts. Defaults to `false`.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumePhotonPersistentDiskArgsDict(TypedDict):
        pd_id: pulumi.Input[str]
        """
        ID that identifies Photon Controller persistent disk
        """
        fs_type: NotRequired[pulumi.Input[str]]
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
elif False:
    K8sJobSpecTemplateSpecVolumePhotonPersistentDiskArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumePhotonPersistentDiskArgs:
    def __init__(__self__, *,
                 pd_id: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] pd_id: ID that identifies Photon Controller persistent disk
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        pulumi.set(__self__, "pd_id", pd_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)

    @property
    @pulumi.getter(name="pdId")
    def pd_id(self) -> pulumi.Input[str]:
        """
        ID that identifies Photon Controller persistent disk
        """
        return pulumi.get(self, "pd_id")

    @pd_id.setter
    def pd_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "pd_id", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeProjectedArgsDict(TypedDict):
        sources: pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceArgsDict']]]
        """
        Source of the volume to project in the directory.
        """
        default_mode: NotRequired[pulumi.Input[str]]
        """
        Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Defaults to `0644`.
        """
elif False:
    K8sJobSpecTemplateSpecVolumeProjectedArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeProjectedArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceArgs']]],
                 default_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceArgs']]] sources: Source of the volume to project in the directory.
        :param pulumi.Input[str] default_mode: Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Defaults to `0644`.
        """
        pulumi.set(__self__, "sources", sources)
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceArgs']]]:
        """
        Source of the volume to project in the directory.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceArgs']]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Defaults to `0644`.
        """
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_mode", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeProjectedSourceArgsDict(TypedDict):
        config_maps: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceConfigMapArgsDict']]]]
        """
        ConfigMap represents a configMap that should populate this volume
        """
        downward_api: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiArgsDict']]
        """
        DownwardAPI represents downward API about the pod that should populate this volume
        """
        secrets: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceSecretArgsDict']]]]
        """
        Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
        """
        service_account_token: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceServiceAccountTokenArgsDict']]
        """
        A projected service account token volume
        """
elif False:
    K8sJobSpecTemplateSpecVolumeProjectedSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeProjectedSourceArgs:
    def __init__(__self__, *,
                 config_maps: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceConfigMapArgs']]]] = None,
                 downward_api: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiArgs']] = None,
                 secrets: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceSecretArgs']]]] = None,
                 service_account_token: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceServiceAccountTokenArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceConfigMapArgs']]] config_maps: ConfigMap represents a configMap that should populate this volume
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiArgs'] downward_api: DownwardAPI represents downward API about the pod that should populate this volume
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceSecretArgs']]] secrets: Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceServiceAccountTokenArgs'] service_account_token: A projected service account token volume
        """
        if config_maps is not None:
            pulumi.set(__self__, "config_maps", config_maps)
        if downward_api is not None:
            pulumi.set(__self__, "downward_api", downward_api)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)
        if service_account_token is not None:
            pulumi.set(__self__, "service_account_token", service_account_token)

    @property
    @pulumi.getter(name="configMaps")
    def config_maps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceConfigMapArgs']]]]:
        """
        ConfigMap represents a configMap that should populate this volume
        """
        return pulumi.get(self, "config_maps")

    @config_maps.setter
    def config_maps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceConfigMapArgs']]]]):
        pulumi.set(self, "config_maps", value)

    @property
    @pulumi.getter(name="downwardApi")
    def downward_api(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiArgs']]:
        """
        DownwardAPI represents downward API about the pod that should populate this volume
        """
        return pulumi.get(self, "downward_api")

    @downward_api.setter
    def downward_api(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiArgs']]):
        pulumi.set(self, "downward_api", value)

    @property
    @pulumi.getter
    def secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceSecretArgs']]]]:
        """
        Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
        """
        return pulumi.get(self, "secrets")

    @secrets.setter
    def secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceSecretArgs']]]]):
        pulumi.set(self, "secrets", value)

    @property
    @pulumi.getter(name="serviceAccountToken")
    def service_account_token(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceServiceAccountTokenArgs']]:
        """
        A projected service account token volume
        """
        return pulumi.get(self, "service_account_token")

    @service_account_token.setter
    def service_account_token(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceServiceAccountTokenArgs']]):
        pulumi.set(self, "service_account_token", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeProjectedSourceConfigMapArgsDict(TypedDict):
        items: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceConfigMapItemArgsDict']]]]
        """
        If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        optional: NotRequired[pulumi.Input[bool]]
        """
        Optional: Specify whether the ConfigMap or it's keys must be defined.
        """
elif False:
    K8sJobSpecTemplateSpecVolumeProjectedSourceConfigMapArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeProjectedSourceConfigMapArgs:
    def __init__(__self__, *,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceConfigMapItemArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceConfigMapItemArgs']]] items: If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[bool] optional: Optional: Specify whether the ConfigMap or it's keys must be defined.
        """
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceConfigMapItemArgs']]]]:
        """
        If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceConfigMapItemArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional: Specify whether the ConfigMap or it's keys must be defined.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeProjectedSourceConfigMapItemArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        The key to project.
        """
        mode: NotRequired[pulumi.Input[str]]
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        path: NotRequired[pulumi.Input[str]]
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
elif False:
    K8sJobSpecTemplateSpecVolumeProjectedSourceConfigMapItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeProjectedSourceConfigMapItemArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: The key to project.
        :param pulumi.Input[str] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input[str] path: The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key to project.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiArgsDict(TypedDict):
        items: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemArgsDict']]]]
        """
        Represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
        """
elif False:
    K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiArgs:
    def __init__(__self__, *,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemArgs']]] items: Represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
        """
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemArgs']]]]:
        """
        Represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemArgs']]]]):
        pulumi.set(self, "items", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemArgsDict(TypedDict):
        path: pulumi.Input[str]
        """
        Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        """
        field_ref: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRefArgsDict']]
        """
        Selects a field of the pod: only annotations, labels, name and namespace are supported.
        """
        mode: NotRequired[pulumi.Input[str]]
        """
        Mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        resource_field_ref: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRefArgsDict']]
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        """
elif False:
    K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 field_ref: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRefArgs']] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 resource_field_ref: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRefArgs']] = None):
        """
        :param pulumi.Input[str] path: Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRefArgs'] field_ref: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        :param pulumi.Input[str] mode: Mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        """
        pulumi.set(__self__, "path", path)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRefArgs']]:
        """
        Selects a field of the pod: only annotations, labels, name and namespace are supported.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRefArgs']]):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRefArgsDict(TypedDict):
        api_version: NotRequired[pulumi.Input[str]]
        """
        Version of the schema the FieldPath is written in terms of, defaults to 'v1'. Defaults to `v1`.
        """
        field_path: NotRequired[pulumi.Input[str]]
        """
        Path of the field to select in the specified API version
        """
elif False:
    K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRefArgs:
    def __init__(__self__, *,
                 api_version: Optional[pulumi.Input[str]] = None,
                 field_path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to 'v1'. Defaults to `v1`.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if field_path is not None:
            pulumi.set(__self__, "field_path", field_path)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to 'v1'. Defaults to `v1`.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path of the field to select in the specified API version
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_path", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRefArgsDict(TypedDict):
        container_name: pulumi.Input[str]
        resource: pulumi.Input[str]
        """
        Resource to select
        """
        divisor: NotRequired[pulumi.Input[str]]
        """
        Defaults to `1`.
        """
elif False:
    K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRefArgs:
    def __init__(__self__, *,
                 container_name: pulumi.Input[str],
                 resource: pulumi.Input[str],
                 divisor: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] resource: Resource to select
        :param pulumi.Input[str] divisor: Defaults to `1`.
        """
        pulumi.set(__self__, "container_name", container_name)
        pulumi.set(__self__, "resource", resource)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `1`.
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "divisor", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeProjectedSourceSecretArgsDict(TypedDict):
        items: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceSecretItemArgsDict']]]]
        """
        If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
        """
        optional: NotRequired[pulumi.Input[bool]]
        """
        Optional: Specify whether the Secret or it's keys must be defined.
        """
elif False:
    K8sJobSpecTemplateSpecVolumeProjectedSourceSecretArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeProjectedSourceSecretArgs:
    def __init__(__self__, *,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceSecretItemArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceSecretItemArgs']]] items: If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        :param pulumi.Input[str] name: Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
        :param pulumi.Input[bool] optional: Optional: Specify whether the Secret or it's keys must be defined.
        """
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceSecretItemArgs']]]]:
        """
        If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeProjectedSourceSecretItemArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional: Specify whether the Secret or it's keys must be defined.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeProjectedSourceSecretItemArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        The key to project.
        """
        mode: NotRequired[pulumi.Input[str]]
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        path: NotRequired[pulumi.Input[str]]
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
elif False:
    K8sJobSpecTemplateSpecVolumeProjectedSourceSecretItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeProjectedSourceSecretItemArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: The key to project.
        :param pulumi.Input[str] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input[str] path: The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key to project.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeProjectedSourceServiceAccountTokenArgsDict(TypedDict):
        path: pulumi.Input[str]
        """
        Path specifies a relative path to the mount point of the projected volume.
        """
        audience: NotRequired[pulumi.Input[str]]
        """
        Audience is the intended audience of the token
        """
        expiration_seconds: NotRequired[pulumi.Input[int]]
        """
        ExpirationSeconds is the expected duration of validity of the service account token. It defaults to 1 hour and must be at least 10 minutes (600 seconds). Defaults to `3600`.
        """
elif False:
    K8sJobSpecTemplateSpecVolumeProjectedSourceServiceAccountTokenArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeProjectedSourceServiceAccountTokenArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 audience: Optional[pulumi.Input[str]] = None,
                 expiration_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] path: Path specifies a relative path to the mount point of the projected volume.
        :param pulumi.Input[str] audience: Audience is the intended audience of the token
        :param pulumi.Input[int] expiration_seconds: ExpirationSeconds is the expected duration of validity of the service account token. It defaults to 1 hour and must be at least 10 minutes (600 seconds). Defaults to `3600`.
        """
        pulumi.set(__self__, "path", path)
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if expiration_seconds is not None:
            pulumi.set(__self__, "expiration_seconds", expiration_seconds)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path specifies a relative path to the mount point of the projected volume.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def audience(self) -> Optional[pulumi.Input[str]]:
        """
        Audience is the intended audience of the token
        """
        return pulumi.get(self, "audience")

    @audience.setter
    def audience(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audience", value)

    @property
    @pulumi.getter(name="expirationSeconds")
    def expiration_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        ExpirationSeconds is the expected duration of validity of the service account token. It defaults to 1 hour and must be at least 10 minutes (600 seconds). Defaults to `3600`.
        """
        return pulumi.get(self, "expiration_seconds")

    @expiration_seconds.setter
    def expiration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expiration_seconds", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeQuobyteArgsDict(TypedDict):
        registry: pulumi.Input[str]
        """
        Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
        """
        volume: pulumi.Input[str]
        """
        Volume is a string that references an already created Quobyte volume by name.
        """
        group: NotRequired[pulumi.Input[str]]
        """
        Group to map volume access to Default is no group
        """
        read_only: NotRequired[pulumi.Input[bool]]
        """
        Whether to force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
        """
        user: NotRequired[pulumi.Input[str]]
        """
        User to map volume access to Defaults to serivceaccount user
        """
elif False:
    K8sJobSpecTemplateSpecVolumeQuobyteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeQuobyteArgs:
    def __init__(__self__, *,
                 registry: pulumi.Input[str],
                 volume: pulumi.Input[str],
                 group: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] registry: Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
        :param pulumi.Input[str] volume: Volume is a string that references an already created Quobyte volume by name.
        :param pulumi.Input[str] group: Group to map volume access to Default is no group
        :param pulumi.Input[bool] read_only: Whether to force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
        :param pulumi.Input[str] user: User to map volume access to Defaults to serivceaccount user
        """
        pulumi.set(__self__, "registry", registry)
        pulumi.set(__self__, "volume", volume)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def registry(self) -> pulumi.Input[str]:
        """
        Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
        """
        return pulumi.get(self, "registry")

    @registry.setter
    def registry(self, value: pulumi.Input[str]):
        pulumi.set(self, "registry", value)

    @property
    @pulumi.getter
    def volume(self) -> pulumi.Input[str]:
        """
        Volume is a string that references an already created Quobyte volume by name.
        """
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        Group to map volume access to Default is no group
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User to map volume access to Defaults to serivceaccount user
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeRbdArgsDict(TypedDict):
        ceph_monitors: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        rbd_image: pulumi.Input[str]
        """
        The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        fs_type: NotRequired[pulumi.Input[str]]
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
        """
        keyring: NotRequired[pulumi.Input[str]]
        """
        Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        rados_user: NotRequired[pulumi.Input[str]]
        """
        The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it Defaults to `admin`.
        """
        rbd_pool: NotRequired[pulumi.Input[str]]
        """
        The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it. Defaults to `rbd`.
        """
        read_only: NotRequired[pulumi.Input[bool]]
        """
        Whether to force the read-only setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it Defaults to `false`.
        """
        secret_ref: NotRequired[pulumi.Input['K8sJobSpecTemplateSpecVolumeRbdSecretRefArgsDict']]
        """
        Name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
elif False:
    K8sJobSpecTemplateSpecVolumeRbdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeRbdArgs:
    def __init__(__self__, *,
                 ceph_monitors: pulumi.Input[Sequence[pulumi.Input[str]]],
                 rbd_image: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 keyring: Optional[pulumi.Input[str]] = None,
                 rados_user: Optional[pulumi.Input[str]] = None,
                 rbd_pool: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 secret_ref: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeRbdSecretRefArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ceph_monitors: A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[str] rbd_image: The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[str] fs_type: Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
        :param pulumi.Input[str] keyring: Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[str] rados_user: The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it Defaults to `admin`.
        :param pulumi.Input[str] rbd_pool: The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it. Defaults to `rbd`.
        :param pulumi.Input[bool] read_only: Whether to force the read-only setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it Defaults to `false`.
        :param pulumi.Input['K8sJobSpecTemplateSpecVolumeRbdSecretRefArgs'] secret_ref: Name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        pulumi.set(__self__, "ceph_monitors", ceph_monitors)
        pulumi.set(__self__, "rbd_image", rbd_image)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if keyring is not None:
            pulumi.set(__self__, "keyring", keyring)
        if rados_user is not None:
            pulumi.set(__self__, "rados_user", rados_user)
        if rbd_pool is not None:
            pulumi.set(__self__, "rbd_pool", rbd_pool)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="cephMonitors")
    def ceph_monitors(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "ceph_monitors")

    @ceph_monitors.setter
    def ceph_monitors(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "ceph_monitors", value)

    @property
    @pulumi.getter(name="rbdImage")
    def rbd_image(self) -> pulumi.Input[str]:
        """
        The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "rbd_image")

    @rbd_image.setter
    def rbd_image(self, value: pulumi.Input[str]):
        pulumi.set(self, "rbd_image", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def keyring(self) -> Optional[pulumi.Input[str]]:
        """
        Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "keyring")

    @keyring.setter
    def keyring(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyring", value)

    @property
    @pulumi.getter(name="radosUser")
    def rados_user(self) -> Optional[pulumi.Input[str]]:
        """
        The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it Defaults to `admin`.
        """
        return pulumi.get(self, "rados_user")

    @rados_user.setter
    def rados_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rados_user", value)

    @property
    @pulumi.getter(name="rbdPool")
    def rbd_pool(self) -> Optional[pulumi.Input[str]]:
        """
        The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it. Defaults to `rbd`.
        """
        return pulumi.get(self, "rbd_pool")

    @rbd_pool.setter
    def rbd_pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rbd_pool", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force the read-only setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it Defaults to `false`.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeRbdSecretRefArgs']]:
        """
        Name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['K8sJobSpecTemplateSpecVolumeRbdSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeRbdSecretRefArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        namespace: NotRequired[pulumi.Input[str]]
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
elif False:
    K8sJobSpecTemplateSpecVolumeRbdSecretRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeRbdSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] namespace: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeSecretArgsDict(TypedDict):
        default_mode: NotRequired[pulumi.Input[str]]
        """
        Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Defaults to `0644`.
        """
        items: NotRequired[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeSecretItemArgsDict']]]]
        """
        If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        optional: NotRequired[pulumi.Input[bool]]
        """
        Optional: Specify whether the Secret or its keys must be defined.
        """
        secret_name: NotRequired[pulumi.Input[str]]
        """
        Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
        """
elif False:
    K8sJobSpecTemplateSpecVolumeSecretArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeSecretArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[str]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeSecretItemArgs']]]] = None,
                 optional: Optional[pulumi.Input[bool]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] default_mode: Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Defaults to `0644`.
        :param pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeSecretItemArgs']]] items: If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        :param pulumi.Input[bool] optional: Optional: Specify whether the Secret or its keys must be defined.
        :param pulumi.Input[str] secret_name: Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
        """
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Defaults to `0644`.
        """
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeSecretItemArgs']]]]:
        """
        If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sJobSpecTemplateSpecVolumeSecretItemArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional: Specify whether the Secret or its keys must be defined.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeSecretItemArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        The key to project.
        """
        mode: NotRequired[pulumi.Input[str]]
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        path: NotRequired[pulumi.Input[str]]
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
elif False:
    K8sJobSpecTemplateSpecVolumeSecretItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeSecretItemArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: The key to project.
        :param pulumi.Input[str] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input[str] path: The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key to project.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


if not MYPY:
    class K8sJobSpecTemplateSpecVolumeVsphereVolumeArgsDict(TypedDict):
        volume_path: pulumi.Input[str]
        """
        Path that identifies vSphere volume vmdk
        """
        fs_type: NotRequired[pulumi.Input[str]]
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
elif False:
    K8sJobSpecTemplateSpecVolumeVsphereVolumeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class K8sJobSpecTemplateSpecVolumeVsphereVolumeArgs:
    def __init__(__self__, *,
                 volume_path: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] volume_path: Path that identifies vSphere volume vmdk
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        pulumi.set(__self__, "volume_path", volume_path)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)

    @property
    @pulumi.getter(name="volumePath")
    def volume_path(self) -> pulumi.Input[str]:
        """
        Path that identifies vSphere volume vmdk
        """
        return pulumi.get(self, "volume_path")

    @volume_path.setter
    def volume_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume_path", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)


if not MYPY:
    class OciContainerengineNodePoolInitialNodeLabelArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    OciContainerengineNodePoolInitialNodeLabelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OciContainerengineNodePoolInitialNodeLabelArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OciContainerengineNodePoolNodeArgsDict(TypedDict):
        availability_domain: NotRequired[pulumi.Input[str]]
        defined_tags: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        fault_domain: NotRequired[pulumi.Input[str]]
        freeform_tags: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        id: NotRequired[pulumi.Input[str]]
        """
        The ID of this resource.
        """
        kubernetes_version: NotRequired[pulumi.Input[str]]
        lifecycle_details: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        node_pool_id: NotRequired[pulumi.Input[str]]
        private_ip: NotRequired[pulumi.Input[str]]
        public_ip: NotRequired[pulumi.Input[str]]
        state: NotRequired[pulumi.Input[str]]
        subnet_id: NotRequired[pulumi.Input[str]]
        system_tags: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
elif False:
    OciContainerengineNodePoolNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OciContainerengineNodePoolNodeArgs:
    def __init__(__self__, *,
                 availability_domain: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 fault_domain: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 kubernetes_version: Optional[pulumi.Input[str]] = None,
                 lifecycle_details: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_pool_id: Optional[pulumi.Input[str]] = None,
                 private_ip: Optional[pulumi.Input[str]] = None,
                 public_ip: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 system_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The ID of this resource.
        """
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if kubernetes_version is not None:
            pulumi.set(__self__, "kubernetes_version", kubernetes_version)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_pool_id is not None:
            pulumi.set(__self__, "node_pool_id", node_pool_id)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "availability_domain")

    @availability_domain.setter
    def availability_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_domain", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fault_domain")

    @fault_domain.setter
    def fault_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fault_domain", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kubernetes_version")

    @kubernetes_version.setter
    def kubernetes_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernetes_version", value)

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lifecycle_details")

    @lifecycle_details.setter
    def lifecycle_details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_details", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodePoolId")
    def node_pool_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "node_pool_id")

    @node_pool_id.setter
    def node_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_pool_id", value)

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_ip", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ip", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "system_tags")

    @system_tags.setter
    def system_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "system_tags", value)


if not MYPY:
    class OciContainerengineNodePoolNodeConfigDetailsArgsDict(TypedDict):
        placement_configs: pulumi.Input[Sequence[pulumi.Input['OciContainerengineNodePoolNodeConfigDetailsPlacementConfigArgsDict']]]
        size: pulumi.Input[int]
        defined_tags: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        freeform_tags: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        is_pv_encryption_in_transit_enabled: NotRequired[pulumi.Input[bool]]
        kms_key_id: NotRequired[pulumi.Input[str]]
        nsg_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    OciContainerengineNodePoolNodeConfigDetailsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OciContainerengineNodePoolNodeConfigDetailsArgs:
    def __init__(__self__, *,
                 placement_configs: pulumi.Input[Sequence[pulumi.Input['OciContainerengineNodePoolNodeConfigDetailsPlacementConfigArgs']]],
                 size: pulumi.Input[int],
                 defined_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 is_pv_encryption_in_transit_enabled: Optional[pulumi.Input[bool]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 nsg_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "placement_configs", placement_configs)
        pulumi.set(__self__, "size", size)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)

    @property
    @pulumi.getter(name="placementConfigs")
    def placement_configs(self) -> pulumi.Input[Sequence[pulumi.Input['OciContainerengineNodePoolNodeConfigDetailsPlacementConfigArgs']]]:
        return pulumi.get(self, "placement_configs")

    @placement_configs.setter
    def placement_configs(self, value: pulumi.Input[Sequence[pulumi.Input['OciContainerengineNodePoolNodeConfigDetailsPlacementConfigArgs']]]):
        pulumi.set(self, "placement_configs", value)

    @property
    @pulumi.getter
    def size(self) -> pulumi.Input[int]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[int]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @is_pv_encryption_in_transit_enabled.setter
    def is_pv_encryption_in_transit_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_pv_encryption_in_transit_enabled", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "nsg_ids")

    @nsg_ids.setter
    def nsg_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "nsg_ids", value)


if not MYPY:
    class OciContainerengineNodePoolNodeConfigDetailsPlacementConfigArgsDict(TypedDict):
        availability_domain: pulumi.Input[str]
        subnet_id: pulumi.Input[str]
        capacity_reservation_id: NotRequired[pulumi.Input[str]]
elif False:
    OciContainerengineNodePoolNodeConfigDetailsPlacementConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OciContainerengineNodePoolNodeConfigDetailsPlacementConfigArgs:
    def __init__(__self__, *,
                 availability_domain: pulumi.Input[str],
                 subnet_id: pulumi.Input[str],
                 capacity_reservation_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "availability_domain", availability_domain)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if capacity_reservation_id is not None:
            pulumi.set(__self__, "capacity_reservation_id", capacity_reservation_id)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "availability_domain")

    @availability_domain.setter
    def availability_domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "availability_domain", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="capacityReservationId")
    def capacity_reservation_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "capacity_reservation_id")

    @capacity_reservation_id.setter
    def capacity_reservation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capacity_reservation_id", value)


if not MYPY:
    class OciContainerengineNodePoolNodeShapeConfigArgsDict(TypedDict):
        memory_in_gbs: NotRequired[pulumi.Input[float]]
        ocpus: NotRequired[pulumi.Input[float]]
elif False:
    OciContainerengineNodePoolNodeShapeConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OciContainerengineNodePoolNodeShapeConfigArgs:
    def __init__(__self__, *,
                 memory_in_gbs: Optional[pulumi.Input[float]] = None,
                 ocpus: Optional[pulumi.Input[float]] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "memory_in_gbs")

    @memory_in_gbs.setter
    def memory_in_gbs(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "memory_in_gbs", value)

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "ocpus")

    @ocpus.setter
    def ocpus(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "ocpus", value)


if not MYPY:
    class OciContainerengineNodePoolNodeSourceDetailsArgsDict(TypedDict):
        image_id: pulumi.Input[str]
        source_type: pulumi.Input[str]
        boot_volume_size_in_gbs: NotRequired[pulumi.Input[str]]
elif False:
    OciContainerengineNodePoolNodeSourceDetailsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OciContainerengineNodePoolNodeSourceDetailsArgs:
    def __init__(__self__, *,
                 image_id: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 boot_volume_size_in_gbs: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "source_type", source_type)
        if boot_volume_size_in_gbs is not None:
            pulumi.set(__self__, "boot_volume_size_in_gbs", boot_volume_size_in_gbs)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="bootVolumeSizeInGbs")
    def boot_volume_size_in_gbs(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "boot_volume_size_in_gbs")

    @boot_volume_size_in_gbs.setter
    def boot_volume_size_in_gbs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot_volume_size_in_gbs", value)


if not MYPY:
    class OtherAgentsAgentArgsDict(TypedDict):
        agent_name: pulumi.Input[str]
        agent_linux_package_path: NotRequired[pulumi.Input[str]]
        agent_windows_package_path: NotRequired[pulumi.Input[str]]
        execution_count: NotRequired[pulumi.Input[int]]
        linux_agent_install_status_cmd: NotRequired[pulumi.Input[str]]
        linux_agent_service_name: NotRequired[pulumi.Input[str]]
        linux_agent_uninstall_status_cmd: NotRequired[pulumi.Input[str]]
        linux_install_cmd: NotRequired[pulumi.Input[str]]
        user_request_reset_is_pending: NotRequired[pulumi.Input[bool]]
        windows_agent_service_name: NotRequired[pulumi.Input[str]]
elif False:
    OtherAgentsAgentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OtherAgentsAgentArgs:
    def __init__(__self__, *,
                 agent_name: pulumi.Input[str],
                 agent_linux_package_path: Optional[pulumi.Input[str]] = None,
                 agent_windows_package_path: Optional[pulumi.Input[str]] = None,
                 execution_count: Optional[pulumi.Input[int]] = None,
                 linux_agent_install_status_cmd: Optional[pulumi.Input[str]] = None,
                 linux_agent_service_name: Optional[pulumi.Input[str]] = None,
                 linux_agent_uninstall_status_cmd: Optional[pulumi.Input[str]] = None,
                 linux_install_cmd: Optional[pulumi.Input[str]] = None,
                 user_request_reset_is_pending: Optional[pulumi.Input[bool]] = None,
                 windows_agent_service_name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "agent_name", agent_name)
        if agent_linux_package_path is not None:
            pulumi.set(__self__, "agent_linux_package_path", agent_linux_package_path)
        if agent_windows_package_path is not None:
            pulumi.set(__self__, "agent_windows_package_path", agent_windows_package_path)
        if execution_count is not None:
            pulumi.set(__self__, "execution_count", execution_count)
        if linux_agent_install_status_cmd is not None:
            pulumi.set(__self__, "linux_agent_install_status_cmd", linux_agent_install_status_cmd)
        if linux_agent_service_name is not None:
            pulumi.set(__self__, "linux_agent_service_name", linux_agent_service_name)
        if linux_agent_uninstall_status_cmd is not None:
            pulumi.set(__self__, "linux_agent_uninstall_status_cmd", linux_agent_uninstall_status_cmd)
        if linux_install_cmd is not None:
            pulumi.set(__self__, "linux_install_cmd", linux_install_cmd)
        if user_request_reset_is_pending is not None:
            pulumi.set(__self__, "user_request_reset_is_pending", user_request_reset_is_pending)
        if windows_agent_service_name is not None:
            pulumi.set(__self__, "windows_agent_service_name", windows_agent_service_name)

    @property
    @pulumi.getter(name="agentName")
    def agent_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "agent_name")

    @agent_name.setter
    def agent_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "agent_name", value)

    @property
    @pulumi.getter(name="agentLinuxPackagePath")
    def agent_linux_package_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "agent_linux_package_path")

    @agent_linux_package_path.setter
    def agent_linux_package_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_linux_package_path", value)

    @property
    @pulumi.getter(name="agentWindowsPackagePath")
    def agent_windows_package_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "agent_windows_package_path")

    @agent_windows_package_path.setter
    def agent_windows_package_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_windows_package_path", value)

    @property
    @pulumi.getter(name="executionCount")
    def execution_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "execution_count")

    @execution_count.setter
    def execution_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "execution_count", value)

    @property
    @pulumi.getter(name="linuxAgentInstallStatusCmd")
    def linux_agent_install_status_cmd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "linux_agent_install_status_cmd")

    @linux_agent_install_status_cmd.setter
    def linux_agent_install_status_cmd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "linux_agent_install_status_cmd", value)

    @property
    @pulumi.getter(name="linuxAgentServiceName")
    def linux_agent_service_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "linux_agent_service_name")

    @linux_agent_service_name.setter
    def linux_agent_service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "linux_agent_service_name", value)

    @property
    @pulumi.getter(name="linuxAgentUninstallStatusCmd")
    def linux_agent_uninstall_status_cmd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "linux_agent_uninstall_status_cmd")

    @linux_agent_uninstall_status_cmd.setter
    def linux_agent_uninstall_status_cmd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "linux_agent_uninstall_status_cmd", value)

    @property
    @pulumi.getter(name="linuxInstallCmd")
    def linux_install_cmd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "linux_install_cmd")

    @linux_install_cmd.setter
    def linux_install_cmd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "linux_install_cmd", value)

    @property
    @pulumi.getter(name="userRequestResetIsPending")
    def user_request_reset_is_pending(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "user_request_reset_is_pending")

    @user_request_reset_is_pending.setter
    def user_request_reset_is_pending(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "user_request_reset_is_pending", value)

    @property
    @pulumi.getter(name="windowsAgentServiceName")
    def windows_agent_service_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "windows_agent_service_name")

    @windows_agent_service_name.setter
    def windows_agent_service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "windows_agent_service_name", value)


if not MYPY:
    class PlanCertificatesCertificateArgsDict(TypedDict):
        id: pulumi.Input[str]
        name: pulumi.Input[str]
        arn: NotRequired[pulumi.Input[str]]
elif False:
    PlanCertificatesCertificateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PlanCertificatesCertificateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str],
                 arn: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        if arn is not None:
            pulumi.set(__self__, "arn", arn)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arn", value)


if not MYPY:
    class PlanConfigsConfigArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
        type: NotRequired[pulumi.Input[str]]
elif False:
    PlanConfigsConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PlanConfigsConfigArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class PlanImagesImageArgsDict(TypedDict):
        image_id: pulumi.Input[str]
        name: pulumi.Input[str]
        os: pulumi.Input[str]
        username: pulumi.Input[str]
        tags: NotRequired[pulumi.Input[Sequence[pulumi.Input['PlanImagesImageTagArgsDict']]]]
elif False:
    PlanImagesImageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PlanImagesImageArgs:
    def __init__(__self__, *,
                 image_id: pulumi.Input[str],
                 name: pulumi.Input[str],
                 os: pulumi.Input[str],
                 username: pulumi.Input[str],
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['PlanImagesImageTagArgs']]]] = None):
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "os", os)
        pulumi.set(__self__, "username", username)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def os(self) -> pulumi.Input[str]:
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: pulumi.Input[str]):
        pulumi.set(self, "os", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PlanImagesImageTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PlanImagesImageTagArgs']]]]):
        pulumi.set(self, "tags", value)


if not MYPY:
    class PlanImagesImageTagArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    PlanImagesImageTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PlanImagesImageTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class PlanKmsV2KmArgsDict(TypedDict):
        arn: pulumi.Input[str]
        id: pulumi.Input[str]
        """
        The ID of this resource.
        """
        name: pulumi.Input[str]
elif False:
    PlanKmsV2KmArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PlanKmsV2KmArgs:
    def __init__(__self__, *,
                 arn: pulumi.Input[str],
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: The ID of this resource.
        """
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class PlanKmsV2KmsKeyArgsDict(TypedDict):
        arn: pulumi.Input[str]
        id: pulumi.Input[str]
        name: pulumi.Input[str]
elif False:
    PlanKmsV2KmsKeyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PlanKmsV2KmsKeyArgs:
    def __init__(__self__, *,
                 arn: pulumi.Input[str],
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class PlanSettingsAllMetadataArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    PlanSettingsAllMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PlanSettingsAllMetadataArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class PlanSettingsDnsSettingArgsDict(TypedDict):
        domain_id: NotRequired[pulumi.Input[str]]
        external_dns_suffix: NotRequired[pulumi.Input[str]]
        ignore_global_dns: NotRequired[pulumi.Input[bool]]
        internal_dns_suffix: NotRequired[pulumi.Input[str]]
elif False:
    PlanSettingsDnsSettingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PlanSettingsDnsSettingArgs:
    def __init__(__self__, *,
                 domain_id: Optional[pulumi.Input[str]] = None,
                 external_dns_suffix: Optional[pulumi.Input[str]] = None,
                 ignore_global_dns: Optional[pulumi.Input[bool]] = None,
                 internal_dns_suffix: Optional[pulumi.Input[str]] = None):
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if external_dns_suffix is not None:
            pulumi.set(__self__, "external_dns_suffix", external_dns_suffix)
        if ignore_global_dns is not None:
            pulumi.set(__self__, "ignore_global_dns", ignore_global_dns)
        if internal_dns_suffix is not None:
            pulumi.set(__self__, "internal_dns_suffix", internal_dns_suffix)

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_id", value)

    @property
    @pulumi.getter(name="externalDnsSuffix")
    def external_dns_suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_dns_suffix")

    @external_dns_suffix.setter
    def external_dns_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_dns_suffix", value)

    @property
    @pulumi.getter(name="ignoreGlobalDns")
    def ignore_global_dns(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ignore_global_dns")

    @ignore_global_dns.setter
    def ignore_global_dns(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_global_dns", value)

    @property
    @pulumi.getter(name="internalDnsSuffix")
    def internal_dns_suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internal_dns_suffix")

    @internal_dns_suffix.setter
    def internal_dns_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internal_dns_suffix", value)


if not MYPY:
    class PlanSettingsMetadataArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    PlanSettingsMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PlanSettingsMetadataArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class PlanWafV2WafArgsDict(TypedDict):
        arn: pulumi.Input[str]
        name: pulumi.Input[str]
        dashboard_url: NotRequired[pulumi.Input[str]]
elif False:
    PlanWafV2WafArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PlanWafV2WafArgs:
    def __init__(__self__, *,
                 arn: pulumi.Input[str],
                 name: pulumi.Input[str],
                 dashboard_url: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "name", name)
        if dashboard_url is not None:
            pulumi.set(__self__, "dashboard_url", dashboard_url)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="dashboardUrl")
    def dashboard_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dashboard_url")

    @dashboard_url.setter
    def dashboard_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dashboard_url", value)


if not MYPY:
    class RdsInstancePerformanceInsightsArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
        """
        Turn on or off Performance Insights
        """
        kms_key_id: NotRequired[pulumi.Input[str]]
        """
        Specify ARN for the KMS key to encrypt Performance Insights data.
        """
        retention_period: NotRequired[pulumi.Input[int]]
        """
        Specify retention period in Days. Valid values are 7, 731 (2 years) or a multiple of 31. For Document DB retention period is 7
        """
elif False:
    RdsInstancePerformanceInsightsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RdsInstancePerformanceInsightsArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 retention_period: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] enabled: Turn on or off Performance Insights
        :param pulumi.Input[str] kms_key_id: Specify ARN for the KMS key to encrypt Performance Insights data.
        :param pulumi.Input[int] retention_period: Specify retention period in Days. Valid values are 7, 731 (2 years) or a multiple of 31. For Document DB retention period is 7
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if retention_period is not None:
            pulumi.set(__self__, "retention_period", retention_period)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Turn on or off Performance Insights
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specify ARN for the KMS key to encrypt Performance Insights data.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="retentionPeriod")
    def retention_period(self) -> Optional[pulumi.Input[int]]:
        """
        Specify retention period in Days. Valid values are 7, 731 (2 years) or a multiple of 31. For Document DB retention period is 7
        """
        return pulumi.get(self, "retention_period")

    @retention_period.setter
    def retention_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retention_period", value)


if not MYPY:
    class RdsInstanceV2ScalingConfigurationArgsDict(TypedDict):
        max_capacity: pulumi.Input[float]
        """
        Specifies max scaling capacity.
        """
        min_capacity: pulumi.Input[float]
        """
        Specifies min scaling capacity.
        """
elif False:
    RdsInstanceV2ScalingConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RdsInstanceV2ScalingConfigurationArgs:
    def __init__(__self__, *,
                 max_capacity: pulumi.Input[float],
                 min_capacity: pulumi.Input[float]):
        """
        :param pulumi.Input[float] max_capacity: Specifies max scaling capacity.
        :param pulumi.Input[float] min_capacity: Specifies min scaling capacity.
        """
        pulumi.set(__self__, "max_capacity", max_capacity)
        pulumi.set(__self__, "min_capacity", min_capacity)

    @property
    @pulumi.getter(name="maxCapacity")
    def max_capacity(self) -> pulumi.Input[float]:
        """
        Specifies max scaling capacity.
        """
        return pulumi.get(self, "max_capacity")

    @max_capacity.setter
    def max_capacity(self, value: pulumi.Input[float]):
        pulumi.set(self, "max_capacity", value)

    @property
    @pulumi.getter(name="minCapacity")
    def min_capacity(self) -> pulumi.Input[float]:
        """
        Specifies min scaling capacity.
        """
        return pulumi.get(self, "min_capacity")

    @min_capacity.setter
    def min_capacity(self, value: pulumi.Input[float]):
        pulumi.set(self, "min_capacity", value)


if not MYPY:
    class RdsReadReplicaPerformanceInsightsArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
        """
        Turn on or off Performance Insights Defaults to `false`.
        """
        kms_key_id: NotRequired[pulumi.Input[str]]
        """
        Specify ARN for the KMS key to encrypt Performance Insights data.
        """
        retention_period: NotRequired[pulumi.Input[int]]
        """
        Specify retention period in Days. Valid values are 7, 731 (2 years) or a multiple of 31. For Document DB retention period is 7 Defaults to `7`.
        """
elif False:
    RdsReadReplicaPerformanceInsightsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RdsReadReplicaPerformanceInsightsArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 retention_period: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] enabled: Turn on or off Performance Insights Defaults to `false`.
        :param pulumi.Input[str] kms_key_id: Specify ARN for the KMS key to encrypt Performance Insights data.
        :param pulumi.Input[int] retention_period: Specify retention period in Days. Valid values are 7, 731 (2 years) or a multiple of 31. For Document DB retention period is 7 Defaults to `7`.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if retention_period is not None:
            pulumi.set(__self__, "retention_period", retention_period)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Turn on or off Performance Insights Defaults to `false`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specify ARN for the KMS key to encrypt Performance Insights data.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="retentionPeriod")
    def retention_period(self) -> Optional[pulumi.Input[int]]:
        """
        Specify retention period in Days. Valid values are 7, 731 (2 years) or a multiple of 31. For Document DB retention period is 7 Defaults to `7`.
        """
        return pulumi.get(self, "retention_period")

    @retention_period.setter
    def retention_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retention_period", value)


if not MYPY:
    class RdsReadReplicaV2ScalingConfigurationArgsDict(TypedDict):
        max_capacity: pulumi.Input[float]
        """
        Specifies max scalling capacity.
        """
        min_capacity: pulumi.Input[float]
        """
        Specifies min scalling capacity.
        """
elif False:
    RdsReadReplicaV2ScalingConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RdsReadReplicaV2ScalingConfigurationArgs:
    def __init__(__self__, *,
                 max_capacity: pulumi.Input[float],
                 min_capacity: pulumi.Input[float]):
        """
        :param pulumi.Input[float] max_capacity: Specifies max scalling capacity.
        :param pulumi.Input[float] min_capacity: Specifies min scalling capacity.
        """
        pulumi.set(__self__, "max_capacity", max_capacity)
        pulumi.set(__self__, "min_capacity", min_capacity)

    @property
    @pulumi.getter(name="maxCapacity")
    def max_capacity(self) -> pulumi.Input[float]:
        """
        Specifies max scalling capacity.
        """
        return pulumi.get(self, "max_capacity")

    @max_capacity.setter
    def max_capacity(self, value: pulumi.Input[float]):
        pulumi.set(self, "max_capacity", value)

    @property
    @pulumi.getter(name="minCapacity")
    def min_capacity(self) -> pulumi.Input[float]:
        """
        Specifies min scalling capacity.
        """
        return pulumi.get(self, "min_capacity")

    @min_capacity.setter
    def min_capacity(self, value: pulumi.Input[float]):
        pulumi.set(self, "min_capacity", value)


if not MYPY:
    class S3BucketDefaultEncryptionArgsDict(TypedDict):
        method: NotRequired[pulumi.Input[str]]
        """
        Default encryption method.  Must be one of: `None`, `Sse`, `AwsKms`, `TenantKms`.
        """
elif False:
    S3BucketDefaultEncryptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class S3BucketDefaultEncryptionArgs:
    def __init__(__self__, *,
                 method: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] method: Default encryption method.  Must be one of: `None`, `Sse`, `AwsKms`, `TenantKms`.
        """
        if method is not None:
            pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[str]]:
        """
        Default encryption method.  Must be one of: `None`, `Sse`, `AwsKms`, `TenantKms`.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method", value)


if not MYPY:
    class S3BucketReplicationRuleArgsDict(TypedDict):
        destination_bucket: pulumi.Input[str]
        """
        fullname of the destination bucket.
        """
        name: pulumi.Input[str]
        """
        replication rule name for s3 source bucket
        """
        priority: pulumi.Input[int]
        """
        replication priority. Priority must be unique between multiple rules.
        """
        delete_marker_replication: NotRequired[pulumi.Input[bool]]
        """
        Whether or not to enable delete marker on replication. Defaults to `false`.
        """
        destination_arn: NotRequired[pulumi.Input[str]]
        """
        destination bucket arn
        """
        fullname: NotRequired[pulumi.Input[str]]
        """
        replication rule fullname for s3 source bucket
        """
        storage_class: NotRequired[pulumi.Input[str]]
        """
        storage*class type: STANDARD, INTELLIGENT*TIERING, STANDARD*IA, ONEZONE*IA, GLACIER*IR, GLACIER, DEEP*ARCHIVE, REDUCED_REDUNDANCY.
        """
elif False:
    S3BucketReplicationRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class S3BucketReplicationRuleArgs:
    def __init__(__self__, *,
                 destination_bucket: pulumi.Input[str],
                 name: pulumi.Input[str],
                 priority: pulumi.Input[int],
                 delete_marker_replication: Optional[pulumi.Input[bool]] = None,
                 destination_arn: Optional[pulumi.Input[str]] = None,
                 fullname: Optional[pulumi.Input[str]] = None,
                 storage_class: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] destination_bucket: fullname of the destination bucket.
        :param pulumi.Input[str] name: replication rule name for s3 source bucket
        :param pulumi.Input[int] priority: replication priority. Priority must be unique between multiple rules.
        :param pulumi.Input[bool] delete_marker_replication: Whether or not to enable delete marker on replication. Defaults to `false`.
        :param pulumi.Input[str] destination_arn: destination bucket arn
        :param pulumi.Input[str] fullname: replication rule fullname for s3 source bucket
        :param pulumi.Input[str] storage_class: storage*class type: STANDARD, INTELLIGENT*TIERING, STANDARD*IA, ONEZONE*IA, GLACIER*IR, GLACIER, DEEP*ARCHIVE, REDUCED_REDUNDANCY.
        """
        pulumi.set(__self__, "destination_bucket", destination_bucket)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "priority", priority)
        if delete_marker_replication is not None:
            pulumi.set(__self__, "delete_marker_replication", delete_marker_replication)
        if destination_arn is not None:
            pulumi.set(__self__, "destination_arn", destination_arn)
        if fullname is not None:
            pulumi.set(__self__, "fullname", fullname)
        if storage_class is not None:
            pulumi.set(__self__, "storage_class", storage_class)

    @property
    @pulumi.getter(name="destinationBucket")
    def destination_bucket(self) -> pulumi.Input[str]:
        """
        fullname of the destination bucket.
        """
        return pulumi.get(self, "destination_bucket")

    @destination_bucket.setter
    def destination_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_bucket", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        replication rule name for s3 source bucket
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Input[int]:
        """
        replication priority. Priority must be unique between multiple rules.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: pulumi.Input[int]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="deleteMarkerReplication")
    def delete_marker_replication(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to enable delete marker on replication. Defaults to `false`.
        """
        return pulumi.get(self, "delete_marker_replication")

    @delete_marker_replication.setter
    def delete_marker_replication(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_marker_replication", value)

    @property
    @pulumi.getter(name="destinationArn")
    def destination_arn(self) -> Optional[pulumi.Input[str]]:
        """
        destination bucket arn
        """
        return pulumi.get(self, "destination_arn")

    @destination_arn.setter
    def destination_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_arn", value)

    @property
    @pulumi.getter
    def fullname(self) -> Optional[pulumi.Input[str]]:
        """
        replication rule fullname for s3 source bucket
        """
        return pulumi.get(self, "fullname")

    @fullname.setter
    def fullname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fullname", value)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> Optional[pulumi.Input[str]]:
        """
        storage*class type: STANDARD, INTELLIGENT*TIERING, STANDARD*IA, ONEZONE*IA, GLACIER*IR, GLACIER, DEEP*ARCHIVE, REDUCED_REDUNDANCY.
        """
        return pulumi.get(self, "storage_class")

    @storage_class.setter
    def storage_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_class", value)


if not MYPY:
    class S3BucketTagArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    S3BucketTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class S3BucketTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TenantConfigMetadataArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    TenantConfigMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TenantConfigMetadataArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TenantConfigSettingArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    TenantConfigSettingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TenantConfigSettingArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TenantPolicyArgsDict(TypedDict):
        allow_volume_mapping: NotRequired[pulumi.Input[bool]]
        block_external_ep: NotRequired[pulumi.Input[bool]]
elif False:
    TenantPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TenantPolicyArgs:
    def __init__(__self__, *,
                 allow_volume_mapping: Optional[pulumi.Input[bool]] = None,
                 block_external_ep: Optional[pulumi.Input[bool]] = None):
        if allow_volume_mapping is not None:
            pulumi.set(__self__, "allow_volume_mapping", allow_volume_mapping)
        if block_external_ep is not None:
            pulumi.set(__self__, "block_external_ep", block_external_ep)

    @property
    @pulumi.getter(name="allowVolumeMapping")
    def allow_volume_mapping(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_volume_mapping")

    @allow_volume_mapping.setter
    def allow_volume_mapping(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_volume_mapping", value)

    @property
    @pulumi.getter(name="blockExternalEp")
    def block_external_ep(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "block_external_ep")

    @block_external_ep.setter
    def block_external_ep(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "block_external_ep", value)


if not MYPY:
    class TenantSecretTagArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    TenantSecretTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TenantSecretTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TenantTagArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    TenantTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TenantTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetGcpNodePoolAcceleratorArgsDict(TypedDict):
        accelerator_count: str
        """
        The number of the accelerator cards exposed to an instance.
        """
        accelerator_type: str
        """
        The accelerator type resource name.
        """
        gpu_driver_installation_configs: Sequence['GetGcpNodePoolAcceleratorGpuDriverInstallationConfigArgsDict']
        gpu_partition_size: str
        """
        Size of partitions to create on the GPU
        """
        gpu_sharing_configs: Sequence['GetGcpNodePoolAcceleratorGpuSharingConfigArgsDict']
        max_time_shared_clients_per_gpu: str
        """
        The number of time-shared GPU resources to expose for each physical GPU.
        """
elif False:
    GetGcpNodePoolAcceleratorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGcpNodePoolAcceleratorArgs:
    def __init__(__self__, *,
                 accelerator_count: str,
                 accelerator_type: str,
                 gpu_driver_installation_configs: Sequence['GetGcpNodePoolAcceleratorGpuDriverInstallationConfigArgs'],
                 gpu_partition_size: str,
                 gpu_sharing_configs: Sequence['GetGcpNodePoolAcceleratorGpuSharingConfigArgs'],
                 max_time_shared_clients_per_gpu: str):
        """
        :param str accelerator_count: The number of the accelerator cards exposed to an instance.
        :param str accelerator_type: The accelerator type resource name.
        :param str gpu_partition_size: Size of partitions to create on the GPU
        :param str max_time_shared_clients_per_gpu: The number of time-shared GPU resources to expose for each physical GPU.
        """
        pulumi.set(__self__, "accelerator_count", accelerator_count)
        pulumi.set(__self__, "accelerator_type", accelerator_type)
        pulumi.set(__self__, "gpu_driver_installation_configs", gpu_driver_installation_configs)
        pulumi.set(__self__, "gpu_partition_size", gpu_partition_size)
        pulumi.set(__self__, "gpu_sharing_configs", gpu_sharing_configs)
        pulumi.set(__self__, "max_time_shared_clients_per_gpu", max_time_shared_clients_per_gpu)

    @property
    @pulumi.getter(name="acceleratorCount")
    def accelerator_count(self) -> str:
        """
        The number of the accelerator cards exposed to an instance.
        """
        return pulumi.get(self, "accelerator_count")

    @accelerator_count.setter
    def accelerator_count(self, value: str):
        pulumi.set(self, "accelerator_count", value)

    @property
    @pulumi.getter(name="acceleratorType")
    def accelerator_type(self) -> str:
        """
        The accelerator type resource name.
        """
        return pulumi.get(self, "accelerator_type")

    @accelerator_type.setter
    def accelerator_type(self, value: str):
        pulumi.set(self, "accelerator_type", value)

    @property
    @pulumi.getter(name="gpuDriverInstallationConfigs")
    def gpu_driver_installation_configs(self) -> Sequence['GetGcpNodePoolAcceleratorGpuDriverInstallationConfigArgs']:
        return pulumi.get(self, "gpu_driver_installation_configs")

    @gpu_driver_installation_configs.setter
    def gpu_driver_installation_configs(self, value: Sequence['GetGcpNodePoolAcceleratorGpuDriverInstallationConfigArgs']):
        pulumi.set(self, "gpu_driver_installation_configs", value)

    @property
    @pulumi.getter(name="gpuPartitionSize")
    def gpu_partition_size(self) -> str:
        """
        Size of partitions to create on the GPU
        """
        return pulumi.get(self, "gpu_partition_size")

    @gpu_partition_size.setter
    def gpu_partition_size(self, value: str):
        pulumi.set(self, "gpu_partition_size", value)

    @property
    @pulumi.getter(name="gpuSharingConfigs")
    def gpu_sharing_configs(self) -> Sequence['GetGcpNodePoolAcceleratorGpuSharingConfigArgs']:
        return pulumi.get(self, "gpu_sharing_configs")

    @gpu_sharing_configs.setter
    def gpu_sharing_configs(self, value: Sequence['GetGcpNodePoolAcceleratorGpuSharingConfigArgs']):
        pulumi.set(self, "gpu_sharing_configs", value)

    @property
    @pulumi.getter(name="maxTimeSharedClientsPerGpu")
    def max_time_shared_clients_per_gpu(self) -> str:
        """
        The number of time-shared GPU resources to expose for each physical GPU.
        """
        return pulumi.get(self, "max_time_shared_clients_per_gpu")

    @max_time_shared_clients_per_gpu.setter
    def max_time_shared_clients_per_gpu(self, value: str):
        pulumi.set(self, "max_time_shared_clients_per_gpu", value)


if not MYPY:
    class GetGcpNodePoolAcceleratorGpuDriverInstallationConfigArgsDict(TypedDict):
        gpu_driver_version: str
elif False:
    GetGcpNodePoolAcceleratorGpuDriverInstallationConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGcpNodePoolAcceleratorGpuDriverInstallationConfigArgs:
    def __init__(__self__, *,
                 gpu_driver_version: str):
        pulumi.set(__self__, "gpu_driver_version", gpu_driver_version)

    @property
    @pulumi.getter(name="gpuDriverVersion")
    def gpu_driver_version(self) -> str:
        return pulumi.get(self, "gpu_driver_version")

    @gpu_driver_version.setter
    def gpu_driver_version(self, value: str):
        pulumi.set(self, "gpu_driver_version", value)


if not MYPY:
    class GetGcpNodePoolAcceleratorGpuSharingConfigArgsDict(TypedDict):
        gpu_sharing_strategy: str
        """
        The configuration for GPU sharing options.
        """
        max_shared_clients_per_gpu: str
        """
        The max number of containers that can share a physical GPU.
        """
elif False:
    GetGcpNodePoolAcceleratorGpuSharingConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGcpNodePoolAcceleratorGpuSharingConfigArgs:
    def __init__(__self__, *,
                 gpu_sharing_strategy: str,
                 max_shared_clients_per_gpu: str):
        """
        :param str gpu_sharing_strategy: The configuration for GPU sharing options.
        :param str max_shared_clients_per_gpu: The max number of containers that can share a physical GPU.
        """
        pulumi.set(__self__, "gpu_sharing_strategy", gpu_sharing_strategy)
        pulumi.set(__self__, "max_shared_clients_per_gpu", max_shared_clients_per_gpu)

    @property
    @pulumi.getter(name="gpuSharingStrategy")
    def gpu_sharing_strategy(self) -> str:
        """
        The configuration for GPU sharing options.
        """
        return pulumi.get(self, "gpu_sharing_strategy")

    @gpu_sharing_strategy.setter
    def gpu_sharing_strategy(self, value: str):
        pulumi.set(self, "gpu_sharing_strategy", value)

    @property
    @pulumi.getter(name="maxSharedClientsPerGpu")
    def max_shared_clients_per_gpu(self) -> str:
        """
        The max number of containers that can share a physical GPU.
        """
        return pulumi.get(self, "max_shared_clients_per_gpu")

    @max_shared_clients_per_gpu.setter
    def max_shared_clients_per_gpu(self, value: str):
        pulumi.set(self, "max_shared_clients_per_gpu", value)


if not MYPY:
    class GetGcpNodePoolTaintArgsDict(TypedDict):
        effect: str
        """
        Update strategy of the node pool.
        """
        key: str
        value: str
elif False:
    GetGcpNodePoolTaintArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGcpNodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: str,
                 key: str,
                 value: str):
        """
        :param str effect: Update strategy of the node pool.
        """
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> str:
        """
        Update strategy of the node pool.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: str):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetK8sCronJobMetadataArgsDict(TypedDict):
        annotations: Mapping[str, str]
        """
        An unstructured key value map stored with the cronjob that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
        """
        generation: int
        """
        A sequence number representing a specific generation of the desired state.
        """
        labels: Mapping[str, str]
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the cronjob. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
        """
        name: str
        """
        Name of the cronjob, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        namespace: str
        """
        Namespace defines the space within which name of the cronjob must be unique.
        """
        resource_version: str
        """
        An opaque value that represents the internal version of this cronjob that can be used by clients to determine when cronjob has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        """
        uid: str
        """
        The unique in time and space value for this cronjob. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        generate_name: NotRequired[str]
        """
        Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
        """
elif False:
    GetK8sCronJobMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetK8sCronJobMetadataArgs:
    def __init__(__self__, *,
                 annotations: Mapping[str, str],
                 generation: int,
                 labels: Mapping[str, str],
                 name: str,
                 namespace: str,
                 resource_version: str,
                 uid: str,
                 generate_name: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the cronjob that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
        :param int generation: A sequence number representing a specific generation of the desired state.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the cronjob. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
        :param str name: Name of the cronjob, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str namespace: Namespace defines the space within which name of the cronjob must be unique.
        :param str resource_version: An opaque value that represents the internal version of this cronjob that can be used by clients to determine when cronjob has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        :param str uid: The unique in time and space value for this cronjob. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        :param str generate_name: Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
        """
        pulumi.set(__self__, "annotations", annotations)
        pulumi.set(__self__, "generation", generation)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "resource_version", resource_version)
        pulumi.set(__self__, "uid", uid)
        if generate_name is not None:
            pulumi.set(__self__, "generate_name", generate_name)

    @property
    @pulumi.getter
    def annotations(self) -> Mapping[str, str]:
        """
        An unstructured key value map stored with the cronjob that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Mapping[str, str]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def generation(self) -> int:
        """
        A sequence number representing a specific generation of the desired state.
        """
        return pulumi.get(self, "generation")

    @generation.setter
    def generation(self, value: int):
        pulumi.set(self, "generation", value)

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the cronjob. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Mapping[str, str]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the cronjob, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Namespace defines the space within which name of the cronjob must be unique.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: str):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> str:
        """
        An opaque value that represents the internal version of this cronjob that can be used by clients to determine when cronjob has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        """
        return pulumi.get(self, "resource_version")

    @resource_version.setter
    def resource_version(self, value: str):
        pulumi.set(self, "resource_version", value)

    @property
    @pulumi.getter
    def uid(self) -> str:
        """
        The unique in time and space value for this cronjob. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: str):
        pulumi.set(self, "uid", value)

    @property
    @pulumi.getter(name="generateName")
    def generate_name(self) -> Optional[str]:
        """
        Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
        """
        return pulumi.get(self, "generate_name")

    @generate_name.setter
    def generate_name(self, value: Optional[str]):
        pulumi.set(self, "generate_name", value)


if not MYPY:
    class GetK8sJobMetadataArgsDict(TypedDict):
        annotations: Mapping[str, str]
        """
        An unstructured key value map stored with the job that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
        """
        generation: int
        """
        A sequence number representing a specific generation of the desired state.
        """
        labels: Mapping[str, str]
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the job. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
        """
        name: str
        """
        Name of the job, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        namespace: str
        """
        Namespace defines the space within which name of the job must be unique.
        """
        resource_version: str
        """
        An opaque value that represents the internal version of this job that can be used by clients to determine when job has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        """
        uid: str
        """
        The unique in time and space value for this job. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        generate_name: NotRequired[str]
        """
        Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
        """
elif False:
    GetK8sJobMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetK8sJobMetadataArgs:
    def __init__(__self__, *,
                 annotations: Mapping[str, str],
                 generation: int,
                 labels: Mapping[str, str],
                 name: str,
                 namespace: str,
                 resource_version: str,
                 uid: str,
                 generate_name: Optional[str] = None):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the job that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
        :param int generation: A sequence number representing a specific generation of the desired state.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the job. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
        :param str name: Name of the job, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str namespace: Namespace defines the space within which name of the job must be unique.
        :param str resource_version: An opaque value that represents the internal version of this job that can be used by clients to determine when job has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        :param str uid: The unique in time and space value for this job. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        :param str generate_name: Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
        """
        pulumi.set(__self__, "annotations", annotations)
        pulumi.set(__self__, "generation", generation)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "resource_version", resource_version)
        pulumi.set(__self__, "uid", uid)
        if generate_name is not None:
            pulumi.set(__self__, "generate_name", generate_name)

    @property
    @pulumi.getter
    def annotations(self) -> Mapping[str, str]:
        """
        An unstructured key value map stored with the job that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Mapping[str, str]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def generation(self) -> int:
        """
        A sequence number representing a specific generation of the desired state.
        """
        return pulumi.get(self, "generation")

    @generation.setter
    def generation(self, value: int):
        pulumi.set(self, "generation", value)

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the job. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Mapping[str, str]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the job, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Namespace defines the space within which name of the job must be unique.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: str):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> str:
        """
        An opaque value that represents the internal version of this job that can be used by clients to determine when job has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        """
        return pulumi.get(self, "resource_version")

    @resource_version.setter
    def resource_version(self, value: str):
        pulumi.set(self, "resource_version", value)

    @property
    @pulumi.getter
    def uid(self) -> str:
        """
        The unique in time and space value for this job. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: str):
        pulumi.set(self, "uid", value)

    @property
    @pulumi.getter(name="generateName")
    def generate_name(self) -> Optional[str]:
        """
        Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
        """
        return pulumi.get(self, "generate_name")

    @generate_name.setter
    def generate_name(self, value: Optional[str]):
        pulumi.set(self, "generate_name", value)


