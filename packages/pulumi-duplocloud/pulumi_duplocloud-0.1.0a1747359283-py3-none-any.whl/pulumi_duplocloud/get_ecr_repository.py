# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetEcrRepositoryResult',
    'AwaitableGetEcrRepositoryResult',
    'get_ecr_repository',
    'get_ecr_repository_output',
]

@pulumi.output_type
class GetEcrRepositoryResult:
    """
    A collection of values returned by getEcrRepository.
    """
    def __init__(__self__, arn=None, enable_scan_image_on_push=None, enable_tag_immutability=None, id=None, kms_encryption_key=None, name=None, registry_id=None, repository_url=None, tenant_id=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if enable_scan_image_on_push and not isinstance(enable_scan_image_on_push, bool):
            raise TypeError("Expected argument 'enable_scan_image_on_push' to be a bool")
        pulumi.set(__self__, "enable_scan_image_on_push", enable_scan_image_on_push)
        if enable_tag_immutability and not isinstance(enable_tag_immutability, bool):
            raise TypeError("Expected argument 'enable_tag_immutability' to be a bool")
        pulumi.set(__self__, "enable_tag_immutability", enable_tag_immutability)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kms_encryption_key and not isinstance(kms_encryption_key, str):
            raise TypeError("Expected argument 'kms_encryption_key' to be a str")
        pulumi.set(__self__, "kms_encryption_key", kms_encryption_key)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if registry_id and not isinstance(registry_id, str):
            raise TypeError("Expected argument 'registry_id' to be a str")
        pulumi.set(__self__, "registry_id", registry_id)
        if repository_url and not isinstance(repository_url, str):
            raise TypeError("Expected argument 'repository_url' to be a str")
        pulumi.set(__self__, "repository_url", repository_url)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter
    def arn(self) -> str:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="enableScanImageOnPush")
    def enable_scan_image_on_push(self) -> bool:
        return pulumi.get(self, "enable_scan_image_on_push")

    @property
    @pulumi.getter(name="enableTagImmutability")
    def enable_tag_immutability(self) -> bool:
        return pulumi.get(self, "enable_tag_immutability")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="kmsEncryptionKey")
    def kms_encryption_key(self) -> str:
        return pulumi.get(self, "kms_encryption_key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the ECR Repository.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> str:
        return pulumi.get(self, "registry_id")

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> str:
        return pulumi.get(self, "repository_url")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The GUID of the tenant in which to list the hosts.
        """
        return pulumi.get(self, "tenant_id")


class AwaitableGetEcrRepositoryResult(GetEcrRepositoryResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEcrRepositoryResult(
            arn=self.arn,
            enable_scan_image_on_push=self.enable_scan_image_on_push,
            enable_tag_immutability=self.enable_tag_immutability,
            id=self.id,
            kms_encryption_key=self.kms_encryption_key,
            name=self.name,
            registry_id=self.registry_id,
            repository_url=self.repository_url,
            tenant_id=self.tenant_id)


def get_ecr_repository(name: Optional[str] = None,
                       tenant_id: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEcrRepositoryResult:
    """
    `get_ecr_repository` get ecr repository in a Duplo tenant.


    :param str name: The name of the ECR Repository.
    :param str tenant_id: The GUID of the tenant in which to list the hosts.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('duplocloud:index/getEcrRepository:getEcrRepository', __args__, opts=opts, typ=GetEcrRepositoryResult).value

    return AwaitableGetEcrRepositoryResult(
        arn=pulumi.get(__ret__, 'arn'),
        enable_scan_image_on_push=pulumi.get(__ret__, 'enable_scan_image_on_push'),
        enable_tag_immutability=pulumi.get(__ret__, 'enable_tag_immutability'),
        id=pulumi.get(__ret__, 'id'),
        kms_encryption_key=pulumi.get(__ret__, 'kms_encryption_key'),
        name=pulumi.get(__ret__, 'name'),
        registry_id=pulumi.get(__ret__, 'registry_id'),
        repository_url=pulumi.get(__ret__, 'repository_url'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'))
def get_ecr_repository_output(name: Optional[pulumi.Input[str]] = None,
                              tenant_id: Optional[pulumi.Input[str]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEcrRepositoryResult]:
    """
    `get_ecr_repository` get ecr repository in a Duplo tenant.


    :param str name: The name of the ECR Repository.
    :param str tenant_id: The GUID of the tenant in which to list the hosts.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('duplocloud:index/getEcrRepository:getEcrRepository', __args__, opts=opts, typ=GetEcrRepositoryResult)
    return __ret__.apply(lambda __response__: GetEcrRepositoryResult(
        arn=pulumi.get(__response__, 'arn'),
        enable_scan_image_on_push=pulumi.get(__response__, 'enable_scan_image_on_push'),
        enable_tag_immutability=pulumi.get(__response__, 'enable_tag_immutability'),
        id=pulumi.get(__response__, 'id'),
        kms_encryption_key=pulumi.get(__response__, 'kms_encryption_key'),
        name=pulumi.get(__response__, 'name'),
        registry_id=pulumi.get(__response__, 'registry_id'),
        repository_url=pulumi.get(__response__, 'repository_url'),
        tenant_id=pulumi.get(__response__, 'tenant_id')))
