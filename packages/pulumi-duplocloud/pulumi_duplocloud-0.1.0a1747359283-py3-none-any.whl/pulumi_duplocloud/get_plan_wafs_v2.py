# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPlanWafsV2Result',
    'AwaitableGetPlanWafsV2Result',
    'get_plan_wafs_v2',
    'get_plan_wafs_v2_output',
]

@pulumi.output_type
class GetPlanWafsV2Result:
    """
    A collection of values returned by getPlanWafsV2.
    """
    def __init__(__self__, id=None, plan_id=None, wafs=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if plan_id and not isinstance(plan_id, str):
            raise TypeError("Expected argument 'plan_id' to be a str")
        pulumi.set(__self__, "plan_id", plan_id)
        if wafs and not isinstance(wafs, list):
            raise TypeError("Expected argument 'wafs' to be a list")
        pulumi.set(__self__, "wafs", wafs)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> str:
        """
        The plan ID
        """
        return pulumi.get(self, "plan_id")

    @property
    @pulumi.getter
    def wafs(self) -> Sequence['outputs.GetPlanWafsV2WafResult']:
        """
        The list of wafs for this plan.
        """
        return pulumi.get(self, "wafs")


class AwaitableGetPlanWafsV2Result(GetPlanWafsV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPlanWafsV2Result(
            id=self.id,
            plan_id=self.plan_id,
            wafs=self.wafs)


def get_plan_wafs_v2(plan_id: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPlanWafsV2Result:
    """
    `get_plan_wafs` retrieves a list of wafs for a given plan.


    :param str plan_id: The plan ID
    """
    __args__ = dict()
    __args__['planId'] = plan_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('duplocloud:index/getPlanWafsV2:getPlanWafsV2', __args__, opts=opts, typ=GetPlanWafsV2Result).value

    return AwaitableGetPlanWafsV2Result(
        id=pulumi.get(__ret__, 'id'),
        plan_id=pulumi.get(__ret__, 'plan_id'),
        wafs=pulumi.get(__ret__, 'wafs'))
def get_plan_wafs_v2_output(plan_id: Optional[pulumi.Input[str]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPlanWafsV2Result]:
    """
    `get_plan_wafs` retrieves a list of wafs for a given plan.


    :param str plan_id: The plan ID
    """
    __args__ = dict()
    __args__['planId'] = plan_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('duplocloud:index/getPlanWafsV2:getPlanWafsV2', __args__, opts=opts, typ=GetPlanWafsV2Result)
    return __ret__.apply(lambda __response__: GetPlanWafsV2Result(
        id=pulumi.get(__response__, 'id'),
        plan_id=pulumi.get(__response__, 'plan_id'),
        wafs=pulumi.get(__response__, 'wafs')))
