# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetPlanWafResult',
    'AwaitableGetPlanWafResult',
    'get_plan_waf',
    'get_plan_waf_output',
]

@pulumi.output_type
class GetPlanWafResult:
    """
    A collection of values returned by getPlanWaf.
    """
    def __init__(__self__, dashboard_url=None, id=None, plan_id=None, waf_arn=None, waf_name=None):
        if dashboard_url and not isinstance(dashboard_url, str):
            raise TypeError("Expected argument 'dashboard_url' to be a str")
        pulumi.set(__self__, "dashboard_url", dashboard_url)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if plan_id and not isinstance(plan_id, str):
            raise TypeError("Expected argument 'plan_id' to be a str")
        pulumi.set(__self__, "plan_id", plan_id)
        if waf_arn and not isinstance(waf_arn, str):
            raise TypeError("Expected argument 'waf_arn' to be a str")
        pulumi.set(__self__, "waf_arn", waf_arn)
        if waf_name and not isinstance(waf_name, str):
            raise TypeError("Expected argument 'waf_name' to be a str")
        pulumi.set(__self__, "waf_name", waf_name)

    @property
    @pulumi.getter(name="dashboardUrl")
    def dashboard_url(self) -> str:
        return pulumi.get(self, "dashboard_url")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> str:
        """
        The ID of the plan for waf.
        """
        return pulumi.get(self, "plan_id")

    @property
    @pulumi.getter(name="wafArn")
    def waf_arn(self) -> str:
        return pulumi.get(self, "waf_arn")

    @property
    @pulumi.getter(name="wafName")
    def waf_name(self) -> str:
        return pulumi.get(self, "waf_name")


class AwaitableGetPlanWafResult(GetPlanWafResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPlanWafResult(
            dashboard_url=self.dashboard_url,
            id=self.id,
            plan_id=self.plan_id,
            waf_arn=self.waf_arn,
            waf_name=self.waf_name)


def get_plan_waf(plan_id: Optional[str] = None,
                 waf_name: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPlanWafResult:
    """
    `PlanWaf` retrieves details of a web acl in Duplo.


    :param str plan_id: The ID of the plan for waf.
    """
    __args__ = dict()
    __args__['planId'] = plan_id
    __args__['wafName'] = waf_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('duplocloud:index/getPlanWaf:getPlanWaf', __args__, opts=opts, typ=GetPlanWafResult).value

    return AwaitableGetPlanWafResult(
        dashboard_url=pulumi.get(__ret__, 'dashboard_url'),
        id=pulumi.get(__ret__, 'id'),
        plan_id=pulumi.get(__ret__, 'plan_id'),
        waf_arn=pulumi.get(__ret__, 'waf_arn'),
        waf_name=pulumi.get(__ret__, 'waf_name'))
def get_plan_waf_output(plan_id: Optional[pulumi.Input[str]] = None,
                        waf_name: Optional[pulumi.Input[str]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPlanWafResult]:
    """
    `PlanWaf` retrieves details of a web acl in Duplo.


    :param str plan_id: The ID of the plan for waf.
    """
    __args__ = dict()
    __args__['planId'] = plan_id
    __args__['wafName'] = waf_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('duplocloud:index/getPlanWaf:getPlanWaf', __args__, opts=opts, typ=GetPlanWafResult)
    return __ret__.apply(lambda __response__: GetPlanWafResult(
        dashboard_url=pulumi.get(__response__, 'dashboard_url'),
        id=pulumi.get(__response__, 'id'),
        plan_id=pulumi.get(__response__, 'plan_id'),
        waf_arn=pulumi.get(__response__, 'waf_arn'),
        waf_name=pulumi.get(__response__, 'waf_name')))
