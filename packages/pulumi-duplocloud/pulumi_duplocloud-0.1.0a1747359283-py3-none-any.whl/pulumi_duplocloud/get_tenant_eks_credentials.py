# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetTenantEksCredentialsResult',
    'AwaitableGetTenantEksCredentialsResult',
    'get_tenant_eks_credentials',
    'get_tenant_eks_credentials_output',
]

@pulumi.output_type
class GetTenantEksCredentialsResult:
    """
    A collection of values returned by getTenantEksCredentials.
    """
    def __init__(__self__, ca_certificate_data=None, endpoint=None, id=None, name=None, namespace=None, region=None, tenant_id=None, token=None, version=None):
        if ca_certificate_data and not isinstance(ca_certificate_data, str):
            raise TypeError("Expected argument 'ca_certificate_data' to be a str")
        pulumi.set(__self__, "ca_certificate_data", ca_certificate_data)
        if endpoint and not isinstance(endpoint, str):
            raise TypeError("Expected argument 'endpoint' to be a str")
        pulumi.set(__self__, "endpoint", endpoint)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)
        if token and not isinstance(token, str):
            raise TypeError("Expected argument 'token' to be a str")
        pulumi.set(__self__, "token", token)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="caCertificateData")
    def ca_certificate_data(self) -> str:
        return pulumi.get(self, "ca_certificate_data")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def token(self) -> str:
        return pulumi.get(self, "token")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


class AwaitableGetTenantEksCredentialsResult(GetTenantEksCredentialsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTenantEksCredentialsResult(
            ca_certificate_data=self.ca_certificate_data,
            endpoint=self.endpoint,
            id=self.id,
            name=self.name,
            namespace=self.namespace,
            region=self.region,
            tenant_id=self.tenant_id,
            token=self.token,
            version=self.version)


def get_tenant_eks_credentials(tenant_id: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTenantEksCredentialsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('duplocloud:index/getTenantEksCredentials:getTenantEksCredentials', __args__, opts=opts, typ=GetTenantEksCredentialsResult).value

    return AwaitableGetTenantEksCredentialsResult(
        ca_certificate_data=pulumi.get(__ret__, 'ca_certificate_data'),
        endpoint=pulumi.get(__ret__, 'endpoint'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        namespace=pulumi.get(__ret__, 'namespace'),
        region=pulumi.get(__ret__, 'region'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'),
        token=pulumi.get(__ret__, 'token'),
        version=pulumi.get(__ret__, 'version'))
def get_tenant_eks_credentials_output(tenant_id: Optional[pulumi.Input[str]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTenantEksCredentialsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('duplocloud:index/getTenantEksCredentials:getTenantEksCredentials', __args__, opts=opts, typ=GetTenantEksCredentialsResult)
    return __ret__.apply(lambda __response__: GetTenantEksCredentialsResult(
        ca_certificate_data=pulumi.get(__response__, 'ca_certificate_data'),
        endpoint=pulumi.get(__response__, 'endpoint'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        namespace=pulumi.get(__response__, 'namespace'),
        region=pulumi.get(__response__, 'region'),
        tenant_id=pulumi.get(__response__, 'tenant_id'),
        token=pulumi.get(__response__, 'token'),
        version=pulumi.get(__response__, 'version')))
