# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetEcsTaskDefinitionResult',
    'AwaitableGetEcsTaskDefinitionResult',
    'get_ecs_task_definition',
    'get_ecs_task_definition_output',
]

@pulumi.output_type
class GetEcsTaskDefinitionResult:
    """
    A collection of values returned by getEcsTaskDefinition.
    """
    def __init__(__self__, arn=None, container_definitions=None, container_definitions_updates=None, cpu=None, execution_role_arn=None, family=None, full_family_name=None, id=None, inference_accelerators=None, ipc_mode=None, memory=None, network_mode=None, pid_mode=None, placement_constraints=None, prevent_tf_destroy=None, proxy_configurations=None, requires_attributes=None, requires_compatibilities=None, revision=None, runtime_platforms=None, status=None, tags=None, task_role_arn=None, tenant_id=None, volumes=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if container_definitions and not isinstance(container_definitions, str):
            raise TypeError("Expected argument 'container_definitions' to be a str")
        pulumi.set(__self__, "container_definitions", container_definitions)
        if container_definitions_updates and not isinstance(container_definitions_updates, str):
            raise TypeError("Expected argument 'container_definitions_updates' to be a str")
        pulumi.set(__self__, "container_definitions_updates", container_definitions_updates)
        if cpu and not isinstance(cpu, str):
            raise TypeError("Expected argument 'cpu' to be a str")
        pulumi.set(__self__, "cpu", cpu)
        if execution_role_arn and not isinstance(execution_role_arn, str):
            raise TypeError("Expected argument 'execution_role_arn' to be a str")
        pulumi.set(__self__, "execution_role_arn", execution_role_arn)
        if family and not isinstance(family, str):
            raise TypeError("Expected argument 'family' to be a str")
        pulumi.set(__self__, "family", family)
        if full_family_name and not isinstance(full_family_name, str):
            raise TypeError("Expected argument 'full_family_name' to be a str")
        pulumi.set(__self__, "full_family_name", full_family_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if inference_accelerators and not isinstance(inference_accelerators, list):
            raise TypeError("Expected argument 'inference_accelerators' to be a list")
        pulumi.set(__self__, "inference_accelerators", inference_accelerators)
        if ipc_mode and not isinstance(ipc_mode, str):
            raise TypeError("Expected argument 'ipc_mode' to be a str")
        pulumi.set(__self__, "ipc_mode", ipc_mode)
        if memory and not isinstance(memory, str):
            raise TypeError("Expected argument 'memory' to be a str")
        pulumi.set(__self__, "memory", memory)
        if network_mode and not isinstance(network_mode, str):
            raise TypeError("Expected argument 'network_mode' to be a str")
        pulumi.set(__self__, "network_mode", network_mode)
        if pid_mode and not isinstance(pid_mode, str):
            raise TypeError("Expected argument 'pid_mode' to be a str")
        pulumi.set(__self__, "pid_mode", pid_mode)
        if placement_constraints and not isinstance(placement_constraints, list):
            raise TypeError("Expected argument 'placement_constraints' to be a list")
        pulumi.set(__self__, "placement_constraints", placement_constraints)
        if prevent_tf_destroy and not isinstance(prevent_tf_destroy, bool):
            raise TypeError("Expected argument 'prevent_tf_destroy' to be a bool")
        pulumi.set(__self__, "prevent_tf_destroy", prevent_tf_destroy)
        if proxy_configurations and not isinstance(proxy_configurations, list):
            raise TypeError("Expected argument 'proxy_configurations' to be a list")
        pulumi.set(__self__, "proxy_configurations", proxy_configurations)
        if requires_attributes and not isinstance(requires_attributes, list):
            raise TypeError("Expected argument 'requires_attributes' to be a list")
        pulumi.set(__self__, "requires_attributes", requires_attributes)
        if requires_compatibilities and not isinstance(requires_compatibilities, list):
            raise TypeError("Expected argument 'requires_compatibilities' to be a list")
        pulumi.set(__self__, "requires_compatibilities", requires_compatibilities)
        if revision and not isinstance(revision, int):
            raise TypeError("Expected argument 'revision' to be a int")
        pulumi.set(__self__, "revision", revision)
        if runtime_platforms and not isinstance(runtime_platforms, list):
            raise TypeError("Expected argument 'runtime_platforms' to be a list")
        pulumi.set(__self__, "runtime_platforms", runtime_platforms)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if task_role_arn and not isinstance(task_role_arn, str):
            raise TypeError("Expected argument 'task_role_arn' to be a str")
        pulumi.set(__self__, "task_role_arn", task_role_arn)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)
        if volumes and not isinstance(volumes, str):
            raise TypeError("Expected argument 'volumes' to be a str")
        pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def arn(self) -> str:
        """
        The ARN of the task definition.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="containerDefinitions")
    def container_definitions(self) -> str:
        return pulumi.get(self, "container_definitions")

    @property
    @pulumi.getter(name="containerDefinitionsUpdates")
    def container_definitions_updates(self) -> str:
        """
        container_definitions updates in backend
        """
        return pulumi.get(self, "container_definitions_updates")

    @property
    @pulumi.getter
    def cpu(self) -> str:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="executionRoleArn")
    def execution_role_arn(self) -> str:
        return pulumi.get(self, "execution_role_arn")

    @property
    @pulumi.getter
    def family(self) -> str:
        """
        The name of the task definition to create.
        """
        return pulumi.get(self, "family")

    @property
    @pulumi.getter(name="fullFamilyName")
    def full_family_name(self) -> str:
        """
        The name of the task definition to create.
        """
        return pulumi.get(self, "full_family_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inferenceAccelerators")
    def inference_accelerators(self) -> Sequence['outputs.GetEcsTaskDefinitionInferenceAcceleratorResult']:
        return pulumi.get(self, "inference_accelerators")

    @property
    @pulumi.getter(name="ipcMode")
    def ipc_mode(self) -> str:
        return pulumi.get(self, "ipc_mode")

    @property
    @pulumi.getter
    def memory(self) -> str:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="networkMode")
    def network_mode(self) -> str:
        return pulumi.get(self, "network_mode")

    @property
    @pulumi.getter(name="pidMode")
    def pid_mode(self) -> str:
        return pulumi.get(self, "pid_mode")

    @property
    @pulumi.getter(name="placementConstraints")
    def placement_constraints(self) -> Sequence['outputs.GetEcsTaskDefinitionPlacementConstraintResult']:
        return pulumi.get(self, "placement_constraints")

    @property
    @pulumi.getter(name="preventTfDestroy")
    def prevent_tf_destroy(self) -> bool:
        return pulumi.get(self, "prevent_tf_destroy")

    @property
    @pulumi.getter(name="proxyConfigurations")
    def proxy_configurations(self) -> Sequence['outputs.GetEcsTaskDefinitionProxyConfigurationResult']:
        return pulumi.get(self, "proxy_configurations")

    @property
    @pulumi.getter(name="requiresAttributes")
    def requires_attributes(self) -> Sequence['outputs.GetEcsTaskDefinitionRequiresAttributeResult']:
        return pulumi.get(self, "requires_attributes")

    @property
    @pulumi.getter(name="requiresCompatibilities")
    def requires_compatibilities(self) -> Sequence[str]:
        """
        Requires compatibilities for running jobs. Valid values are [FARGATE]
        """
        return pulumi.get(self, "requires_compatibilities")

    @property
    @pulumi.getter
    def revision(self) -> int:
        """
        The current revision of the task definition.
        """
        return pulumi.get(self, "revision")

    @property
    @pulumi.getter(name="runtimePlatforms")
    def runtime_platforms(self) -> Sequence['outputs.GetEcsTaskDefinitionRuntimePlatformResult']:
        """
        Configuration block for runtime*platform that containers in your task may use. Required on ecs tasks that are hosted on Fargate.
        """
        return pulumi.get(self, "runtime_platforms")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the task definition.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetEcsTaskDefinitionTagResult']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="taskRoleArn")
    def task_role_arn(self) -> str:
        return pulumi.get(self, "task_role_arn")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The GUID of the tenant that the task definition will be created in.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def volumes(self) -> str:
        return pulumi.get(self, "volumes")


class AwaitableGetEcsTaskDefinitionResult(GetEcsTaskDefinitionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEcsTaskDefinitionResult(
            arn=self.arn,
            container_definitions=self.container_definitions,
            container_definitions_updates=self.container_definitions_updates,
            cpu=self.cpu,
            execution_role_arn=self.execution_role_arn,
            family=self.family,
            full_family_name=self.full_family_name,
            id=self.id,
            inference_accelerators=self.inference_accelerators,
            ipc_mode=self.ipc_mode,
            memory=self.memory,
            network_mode=self.network_mode,
            pid_mode=self.pid_mode,
            placement_constraints=self.placement_constraints,
            prevent_tf_destroy=self.prevent_tf_destroy,
            proxy_configurations=self.proxy_configurations,
            requires_attributes=self.requires_attributes,
            requires_compatibilities=self.requires_compatibilities,
            revision=self.revision,
            runtime_platforms=self.runtime_platforms,
            status=self.status,
            tags=self.tags,
            task_role_arn=self.task_role_arn,
            tenant_id=self.tenant_id,
            volumes=self.volumes)


def get_ecs_task_definition(arn: Optional[str] = None,
                            tenant_id: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEcsTaskDefinitionResult:
    """
    Use this data source to access information about an existing resource.

    :param str arn: The ARN of the task definition.
    :param str tenant_id: The GUID of the tenant that the task definition will be created in.
    """
    __args__ = dict()
    __args__['arn'] = arn
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('duplocloud:index/getEcsTaskDefinition:getEcsTaskDefinition', __args__, opts=opts, typ=GetEcsTaskDefinitionResult).value

    return AwaitableGetEcsTaskDefinitionResult(
        arn=pulumi.get(__ret__, 'arn'),
        container_definitions=pulumi.get(__ret__, 'container_definitions'),
        container_definitions_updates=pulumi.get(__ret__, 'container_definitions_updates'),
        cpu=pulumi.get(__ret__, 'cpu'),
        execution_role_arn=pulumi.get(__ret__, 'execution_role_arn'),
        family=pulumi.get(__ret__, 'family'),
        full_family_name=pulumi.get(__ret__, 'full_family_name'),
        id=pulumi.get(__ret__, 'id'),
        inference_accelerators=pulumi.get(__ret__, 'inference_accelerators'),
        ipc_mode=pulumi.get(__ret__, 'ipc_mode'),
        memory=pulumi.get(__ret__, 'memory'),
        network_mode=pulumi.get(__ret__, 'network_mode'),
        pid_mode=pulumi.get(__ret__, 'pid_mode'),
        placement_constraints=pulumi.get(__ret__, 'placement_constraints'),
        prevent_tf_destroy=pulumi.get(__ret__, 'prevent_tf_destroy'),
        proxy_configurations=pulumi.get(__ret__, 'proxy_configurations'),
        requires_attributes=pulumi.get(__ret__, 'requires_attributes'),
        requires_compatibilities=pulumi.get(__ret__, 'requires_compatibilities'),
        revision=pulumi.get(__ret__, 'revision'),
        runtime_platforms=pulumi.get(__ret__, 'runtime_platforms'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'),
        task_role_arn=pulumi.get(__ret__, 'task_role_arn'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'),
        volumes=pulumi.get(__ret__, 'volumes'))
def get_ecs_task_definition_output(arn: Optional[pulumi.Input[str]] = None,
                                   tenant_id: Optional[pulumi.Input[str]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEcsTaskDefinitionResult]:
    """
    Use this data source to access information about an existing resource.

    :param str arn: The ARN of the task definition.
    :param str tenant_id: The GUID of the tenant that the task definition will be created in.
    """
    __args__ = dict()
    __args__['arn'] = arn
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('duplocloud:index/getEcsTaskDefinition:getEcsTaskDefinition', __args__, opts=opts, typ=GetEcsTaskDefinitionResult)
    return __ret__.apply(lambda __response__: GetEcsTaskDefinitionResult(
        arn=pulumi.get(__response__, 'arn'),
        container_definitions=pulumi.get(__response__, 'container_definitions'),
        container_definitions_updates=pulumi.get(__response__, 'container_definitions_updates'),
        cpu=pulumi.get(__response__, 'cpu'),
        execution_role_arn=pulumi.get(__response__, 'execution_role_arn'),
        family=pulumi.get(__response__, 'family'),
        full_family_name=pulumi.get(__response__, 'full_family_name'),
        id=pulumi.get(__response__, 'id'),
        inference_accelerators=pulumi.get(__response__, 'inference_accelerators'),
        ipc_mode=pulumi.get(__response__, 'ipc_mode'),
        memory=pulumi.get(__response__, 'memory'),
        network_mode=pulumi.get(__response__, 'network_mode'),
        pid_mode=pulumi.get(__response__, 'pid_mode'),
        placement_constraints=pulumi.get(__response__, 'placement_constraints'),
        prevent_tf_destroy=pulumi.get(__response__, 'prevent_tf_destroy'),
        proxy_configurations=pulumi.get(__response__, 'proxy_configurations'),
        requires_attributes=pulumi.get(__response__, 'requires_attributes'),
        requires_compatibilities=pulumi.get(__response__, 'requires_compatibilities'),
        revision=pulumi.get(__response__, 'revision'),
        runtime_platforms=pulumi.get(__response__, 'runtime_platforms'),
        status=pulumi.get(__response__, 'status'),
        tags=pulumi.get(__response__, 'tags'),
        task_role_arn=pulumi.get(__response__, 'task_role_arn'),
        tenant_id=pulumi.get(__response__, 'tenant_id'),
        volumes=pulumi.get(__response__, 'volumes')))
