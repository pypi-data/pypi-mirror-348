# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetEcsTaskDefinitionsResult',
    'AwaitableGetEcsTaskDefinitionsResult',
    'get_ecs_task_definitions',
    'get_ecs_task_definitions_output',
]

@pulumi.output_type
class GetEcsTaskDefinitionsResult:
    """
    A collection of values returned by getEcsTaskDefinitions.
    """
    def __init__(__self__, family=None, id=None, latest=None, name=None, task_definitions=None, tenant_id=None):
        if family and not isinstance(family, str):
            raise TypeError("Expected argument 'family' to be a str")
        pulumi.set(__self__, "family", family)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if latest and not isinstance(latest, bool):
            raise TypeError("Expected argument 'latest' to be a bool")
        pulumi.set(__self__, "latest", latest)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if task_definitions and not isinstance(task_definitions, list):
            raise TypeError("Expected argument 'task_definitions' to be a list")
        pulumi.set(__self__, "task_definitions", task_definitions)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter
    def family(self) -> Optional[str]:
        return pulumi.get(self, "family")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def latest(self) -> Optional[bool]:
        return pulumi.get(self, "latest")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="taskDefinitions")
    def task_definitions(self) -> Sequence['outputs.GetEcsTaskDefinitionsTaskDefinitionResult']:
        return pulumi.get(self, "task_definitions")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        return pulumi.get(self, "tenant_id")


class AwaitableGetEcsTaskDefinitionsResult(GetEcsTaskDefinitionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEcsTaskDefinitionsResult(
            family=self.family,
            id=self.id,
            latest=self.latest,
            name=self.name,
            task_definitions=self.task_definitions,
            tenant_id=self.tenant_id)


def get_ecs_task_definitions(family: Optional[str] = None,
                             latest: Optional[bool] = None,
                             name: Optional[str] = None,
                             tenant_id: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEcsTaskDefinitionsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['family'] = family
    __args__['latest'] = latest
    __args__['name'] = name
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('duplocloud:index/getEcsTaskDefinitions:getEcsTaskDefinitions', __args__, opts=opts, typ=GetEcsTaskDefinitionsResult).value

    return AwaitableGetEcsTaskDefinitionsResult(
        family=pulumi.get(__ret__, 'family'),
        id=pulumi.get(__ret__, 'id'),
        latest=pulumi.get(__ret__, 'latest'),
        name=pulumi.get(__ret__, 'name'),
        task_definitions=pulumi.get(__ret__, 'task_definitions'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'))
def get_ecs_task_definitions_output(family: Optional[pulumi.Input[Optional[str]]] = None,
                                    latest: Optional[pulumi.Input[Optional[bool]]] = None,
                                    name: Optional[pulumi.Input[Optional[str]]] = None,
                                    tenant_id: Optional[pulumi.Input[str]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEcsTaskDefinitionsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['family'] = family
    __args__['latest'] = latest
    __args__['name'] = name
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('duplocloud:index/getEcsTaskDefinitions:getEcsTaskDefinitions', __args__, opts=opts, typ=GetEcsTaskDefinitionsResult)
    return __ret__.apply(lambda __response__: GetEcsTaskDefinitionsResult(
        family=pulumi.get(__response__, 'family'),
        id=pulumi.get(__response__, 'id'),
        latest=pulumi.get(__response__, 'latest'),
        name=pulumi.get(__response__, 'name'),
        task_definitions=pulumi.get(__response__, 'task_definitions'),
        tenant_id=pulumi.get(__response__, 'tenant_id')))
