"""
Проверка на уязвимости XSS (Cross-Site Scripting).
"""

import os
import re
from pathlib import Path
from typing import Dict, List, Optional, Any, Tuple, Set

from vulnerability_checker.checks.base import BaseCheck
from vulnerability_checker.models import CheckResult, CheckStatus, VulnerabilityIssue


class XSSCheck(BaseCheck):
    """
    Проверка на уязвимостей XSS.
    """
    
    name = "xss"
    description = "Проверка на уязвимости XSS (Cross-Site Scripting)"
    
    # Паттерны для поиска потенциальных XSS уязвимостей
    XSS_PATTERNS = [
        # Flask
        r"flask\..*response.*\(.*request\..*\)",
        r"render_template\s*\(.*request\..*\)",
        r"jsonify\s*\(.*request\..*\)",
        
        # Django
        r"HttpResponse\s*\(.*request\..*\)",
        r"render\s*\(.*request\..*\)",
        r"JsonResponse\s*\(.*request\..*\)",
        
        # FastAPI
        r"HTMLResponse\s*\(.*request\..*\)",
        r"JSONResponse\s*\(.*request\..*\)",
    ]
    
    # Шаблонные движки (потенциальные XSS)
    TEMPLATE_ENGINES = [
        # Jinja2 небезопасные конструкции
        r"{{\s*.*\|.*safe\s*}}",
        
        # Django небезопасные конструкции
        r"{%\s*autoescape\s+off\s*%}",
        r"{{\s*.*\|safe\s*}}",
    ]
    
    # Безопасные паттерны
    SAFE_PATTERNS = [
        r"escape\s*\(",
        r"html\.escape\s*\(",
        r"bleach\.clean\s*\(",
        r"markupsafe\.escape\s*\(",
    ]
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        super().__init__(config)
    
    def run(self, target_path: str, **kwargs) -> Tuple[CheckResult, List[VulnerabilityIssue]]:
        """
        Запуск проверки на XSS уязвимости.
        
        Args:
            target_path: Путь к директории или файлу для проверки
            **kwargs: Дополнительные параметры
            
        Returns:
            Tuple[CheckResult, List[VulnerabilityIssue]]: Результат проверки и список найденных уязвимостей
        """
        self.issues = []
        
        try:
            # Проверка исходных файлов на XSS уязвимости
            path = Path(target_path)
            for file_path in self._find_relevant_files(path):
                self._check_file_for_xss(file_path)
            
            # Формирование результата
            status = CheckStatus.PASSED if not self.issues else CheckStatus.FAILED
            result = self.create_result(
                status=status,
                message=f"Найдено {len(self.issues)} потенциальных XSS уязвимостей" if self.issues else "XSS уязвимостей не обнаружено",
            )
            
            return result, self.issues
            
        except Exception as e:
            # В случае ошибки возвращаем статус ERROR
            result = self.create_result(
                status=CheckStatus.ERROR,
                message=f"Ошибка при проверке на XSS уязвимости: {str(e)}",
            )
            return result, self.issues
    
    def _find_relevant_files(self, path: Path) -> Set[Path]:
        """
        Поиск файлов, которые могут содержать XSS уязвимости.
        
        Args:
            path: Путь к директории или файлу
            
        Returns:
            Set[Path]: Множество путей к файлам
        """
        result = set()
        
        # Определяем расширения файлов для проверки
        extensions = {".py", ".html", ".jinja", ".jinja2", ".j2", ".tmpl"}
        
        if path.is_file():
            if path.suffix in extensions and not self.should_exclude_path(path):
                result.add(path)
            return result
        
        # Обход директории
        for root, dirs, files in os.walk(path):
            # Фильтруем директории, которые нужно исключить
            dirs[:] = [d for d in dirs if not self.should_exclude_path(os.path.join(root, d))]
            
            for file in files:
                file_path = Path(root) / file
                if file_path.suffix in extensions and not self.should_exclude_path(file_path):
                    result.add(file_path)
        
        return result
    
    def _check_file_for_xss(self, file_path: Path) -> None:
        """
        Проверка файла на XSS уязвимости.
        
        Args:
            file_path: Путь к файлу
        """
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                content = f.read()
            
            lines = content.splitlines()
            is_template = file_path.suffix in {".html", ".jinja", ".jinja2", ".j2", ".tmpl"}
            
            # Компиляция регулярных выражений
            xss_patterns = [re.compile(pattern) for pattern in self.XSS_PATTERNS]
            template_patterns = [re.compile(pattern) for pattern in self.TEMPLATE_ENGINES]
            safe_patterns = [re.compile(pattern) for pattern in self.SAFE_PATTERNS]
            
            # Проверка по строкам
            for i, line in enumerate(lines):
                # Для шаблонных файлов проверяем паттерны шаблонных движков
                if is_template:
                    for pattern in template_patterns:
                        if pattern.search(line):
                            self._add_xss_issue(file_path, i + 1, line, "template")
                # Для Python файлов проверяем XSS паттерны
                else:
                    for pattern in xss_patterns:
                        if pattern.search(line):
                            # Проверка, нет ли безопасных паттернов в этой же строке
                            is_safe = any(safe_pattern.search(line) for safe_pattern in safe_patterns)
                            if not is_safe:
                                self._add_xss_issue(file_path, i + 1, line, "python")
        
        except Exception as e:
            # Пропускаем файлы с ошибками
            print(f"Ошибка при проверке файла {file_path}: {str(e)}")
    
    def _add_xss_issue(self, file_path: Path, line_number: int, code_snippet: str, context: str) -> None:
        """
        Добавление XSS уязвимости в список.
        
        Args:
            file_path: Путь к файлу
            line_number: Номер строки
            code_snippet: Фрагмент кода
            context: Контекст (python или template)
        """
        description = ""
        remediation = ""
        
        if context == "python":
            description = "Потенциальная XSS уязвимость: непроверенные данные из запроса используются в ответе"
            remediation = "Используйте функции экранирования (html.escape, markupsafe.escape) для данных, включаемых в HTML"
        elif context == "template":
            description = "Потенциальная XSS уязвимость: использование небезопасных конструкций в шаблоне"
            remediation = "Избегайте использования фильтра 'safe' или 'autoescape off', если нет уверенности в безопасности данных"
        
        self.add_issue(
            issue_type="Cross-Site Scripting (XSS)",
            severity="high",
            description=description,
            file_path=str(file_path),
            line_number=line_number,
            code_snippet=code_snippet.strip(),
            confidence="MEDIUM",
            cwe_id="CWE-79",
            owasp_category="A7:2017-Cross-Site Scripting (XSS)",
            remediation=remediation,
        ) 