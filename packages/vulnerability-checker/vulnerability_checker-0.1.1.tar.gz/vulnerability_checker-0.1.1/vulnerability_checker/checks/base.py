"""
Базовый класс для проверок безопасности.
"""

import abc
from typing import Dict, List, Optional, Any, Tuple

from vulnerability_checker.models import VulnerabilityIssue, CheckResult, CheckStatus


class BaseCheck(abc.ABC):
    """
    Базовый класс для всех проверок безопасности.
    """
    
    name: str = "base-check"
    description: str = "Базовая проверка"
    
    # Список каталогов, которые нужно исключить из проверки
    DEFAULT_EXCLUDE_DIRS = {
        ".git", 
        ".venv", 
        "venv", 
        "env", 
        "__pycache__",
        ".idea",
        ".vscode"
    }
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        """
        Инициализация проверки.
        
        Args:
            config: Конфигурация проверки
        """
        self.config = config or {}
        self.issues: List[VulnerabilityIssue] = []
        
        # Добавление дополнительных исключений из конфигурации
        self.exclude_dirs = self.DEFAULT_EXCLUDE_DIRS.copy()
        if config and "exclude_patterns" in config:
            for pattern in config["exclude_patterns"]:
                if pattern.endswith("/*"):
                    self.exclude_dirs.add(pattern[:-2])
                else:
                    self.exclude_dirs.add(pattern)
    
    @abc.abstractmethod
    def run(self, target_path: str, **kwargs) -> Tuple[CheckResult, List[VulnerabilityIssue]]:
        """
        Запуск проверки.
        
        Args:
            target_path: Путь к директории или файлу для проверки
            **kwargs: Дополнительные параметры
            
        Returns:
            Tuple[CheckResult, List[VulnerabilityIssue]]: Результат проверки и список найденных уязвимостей
        """
        raise NotImplementedError()
    
    def add_issue(
        self,
        issue_type: str,
        severity: str,
        description: str,
        file_path: str,
        line_number: int,
        code_snippet: str = "",
        confidence: str = "MEDIUM",
        cwe_id: Optional[str] = None,
        owasp_category: Optional[str] = None,
        remediation: Optional[str] = None,
    ) -> VulnerabilityIssue:
        """
        Добавление уязвимости.
        
        Args:
            issue_type: Тип уязвимости
            severity: Уровень серьезности
            description: Описание уязвимости
            file_path: Путь к файлу
            line_number: Номер строки
            code_snippet: Фрагмент кода
            confidence: Уровень уверенности в обнаружении
            cwe_id: Идентификатор CWE
            owasp_category: Категория OWASP
            remediation: Рекомендации по устранению
            
        Returns:
            VulnerabilityIssue: Объект уязвимости
        """
        issue = VulnerabilityIssue(
            issue_type=issue_type,
            severity=severity,
            description=description,
            file_path=file_path,
            line_number=line_number,
            code_snippet=code_snippet,
            confidence=confidence,
            cwe_id=cwe_id,
            owasp_category=owasp_category,
            remediation=remediation,
            check_name=self.name,
        )
        self.issues.append(issue)
        return issue
    
    def create_result(self, status: CheckStatus, message: Optional[str] = None) -> CheckResult:
        """
        Создание результата проверки.
        
        Args:
            status: Статус проверки
            message: Сообщение
            
        Returns:
            CheckResult: Результат проверки
        """
        return CheckResult(
            status=status,
            issues_count=len(self.issues),
            message=message,
        )
        
    def should_exclude_path(self, path: str) -> bool:
        """
        Проверка, нужно ли исключить путь из проверки.
        
        Args:
            path: Путь для проверки
            
        Returns:
            bool: True, если путь нужно исключить
        """
        path = str(path)
        for exclude in self.exclude_dirs:
            if exclude in path:
                return True
        return False 