# PACKMOL input Jinja2 template for packing surfactant aggregates on top
# of flat substrate

# {{ system_name }}
# {{ header }}

# -1 to generate a seed automatically from the computer time
seed {{ seed|default(-1,false)|int }}
# Change the maximum number of optimization loops, default 20
nloop {{ nloop|default(20,true)|int }}
#  Change the number of loops for the initial phase packing, default 80
nloop0 {{ nloop0|default(80,true)|int }}

# Change the maximum number of Gencan iterations per loop. default 50
maxit {{ maxit|default(50,true)|int }}

tolerance {{ "%.3f"|format(tolerance) }}

{% if movebadrandom %}
# One of the convergence heuristics of Packmol consists in moving molecules
# that are badly placed. If this option is set, the molecules will be placed
# in new random position in the box. If not (default), the molecules are
# moved to positions nearby molecules that are well packed. Using this
# option can help when the restraints are complex, but will probably be bad
# if there are large structures, because the new random position might overlap
# with those.
movebadrandom
{% endif %}

# Coordinate file types will be in pdb format (keyword not required for
# pdb file format, but required for tinker, xyz or moldy).

filetype pdb

output {{ system_name }}_packmol.pdb

{% if write_restart %}
restart_to {{ system_name }}_restart.pack
{% endif %}


{% if static_components %}
{% for static_component in static_components %}
structure {{ static_component.name }}.pdb
  number 1
  resnumbers 2
  fixed {{ "%.3f"|format(static_component.offset|default([0, 0, 0])|first) }} {{ "%.3f"|format((static_component.offset|default([0, 0, 0]))[1]) }} {{ "%.3f"|format(static_component.offset|default([0 ,0, 0])|last) }} 0. 0. 0.
end structure
{% endfor %}
{% endif %}

{% for layer in layers %}
{% if layer.N|int > 0 %}
# monolayer examples:

# SDS monolayer: the polar head is oriented downwards, tail upwards.
# {{ layer.N }} lipids are be placed within a monolayer bounding box.
# Atom {{ layer.lower_atom_number }} of SDS .pdb file (e.g. sulfur, which belongs to
# polar head), will be constrained below plane z < {{ layer.lower_constraint_plane }}.
# Atom {{ layer.upper_atom_number }}, (e.g. hydrophobic tail of the hydrocarbon chain),
# will be constrained above plane z > {{ layer.upper_constraint_plane }}. Therefore,
# all lipids will be like-oriented, distributed randomly and non-overlapping
# within bounding box.

# CTAB monolayer: the polar head is oriented downwards, tail upwards.
# {{ layer.N }} lipids are be placed within a monolayer bounding box.
# Atom {{ layer.lower_atom_number }} of CTAB .pdb file (e.g. nitrogen, which belongs to
# polar head), will be constrained below plane z < {{ layer.lower_constraint_plane }}.
# Atom {{ layer.upper_atom_number }}, (e.g. hydrophobic tail of the hydrocarbon chain),
# will be constrained above plane z > {{ layer.upper_constraint_plane }}. Therefore,
# all lipids will be like-oriented, distributed randomly and non-overlapping
# within bounding box.
structure {{ layer.surfactant }}.pdb
  chain A
  resnumbers 2
  number {{ layer.N|int }}
  inside box {{ "%.3f"|format(layer.bb_lower[0]) }} {{ "%.3f"|format(layer.bb_lower[1]) }} {{ "%.3f"|format(layer.bb_lower[2]) }}  {{ "%.3f"|format(layer.bb_upper[0]) }}  {{ "%.3f"|format(layer.bb_upper[1]) }} {{ "%.3f"|format(layer.bb_upper[2]) }}
  atoms {{ layer.lower_atom_number|int }}
    below plane 0. 0. 1. {{ "%.3f"|format(layer.lower_constraint_plane) }}
  end atoms
  atoms {{ layer.upper_atom_number|int }}
    over plane 0. 0. 1. {{ "%.3f"|format(layer.upper_constraint_plane) }}
  end atoms
  {% if write_restart %}
    restart_to {{ system_name }}_layer_{{ "%03d"|format(loop.index0) }}_restart.pack
  {% endif %}
end structure
{% endif %}
{% endfor %}

{% for cylinder in cylinders %}
{% if cylinder.N|int > 0 %}
structure {{ cylinder.surfactant }}.pdb
  resnumbers 2
  number {{ cylinder.N|int }}
  inside cylinder {{ "%.3f"|format(cylinder.base_center[0]+tolerance) }} {{ "%.3f"|format(cylinder.base_center[1]) }} {{ "%.3f"|format(cylinder.base_center[2]) }} 1. 0. 0. {{ "%.3f"|format(cylinder.r_outer) }} {{ "%.3f"|format(cylinder.length-2*tolerance) }}
  outside cylinder {{ "%.3f"|format(cylinder.base_center[0]-cylinder.r_outer) }} {{ "%.3f"|format(cylinder.base_center[1]) }} {{ "%.3f"|format(cylinder.base_center[2]) }} 1. 0. 0. {{ "%.3f"|format(cylinder.r_inner) }} {{ "%.3f"|format(cylinder.length+2*cylinder.r_outer) }}
  {% if cylinder.upper_hemi %}
  over plane 0. 0. 1. {{ "%.3f"|format(cylinder.base_center[2]) }}
  {% elif cylinder.lower_hemi %}
  below plane 0. 0. 1. {{ "%.3f"|format(cylinder.base_center[2]) }}
  {% endif %}

  atoms {{ cylinder.inner_atom_number|int }}
    inside cylinder {{ "%.3f"|format(cylinder.base_center[0]+tolerance) }} {{ "%.3f"|format(cylinder.base_center[1]) }} {{ "%.3f"|format(cylinder.base_center[2]) }} 1. 0. 0. {{ "%.3f"|format(cylinder.r_inner_constraint) }} {{ "%.3f"|format(cylinder.length-2*tolerance) }}
  end atoms
  atoms {{ cylinder.outer_atom_number|int }}
    outside cylinder {{ "%.3f"|format(cylinder.base_center[0]-cylinder.r_outer) }} {{ "%.3f"|format(cylinder.base_center[1]) }} {{ "%.3f"|format(cylinder.base_center[2]) }} 1. 0. 0. {{ "%.3f"|format(cylinder.r_outer_constraint) }} {{ "%.3f"|format(cylinder.length+2*cylinder.r_outer) }}
  end atoms
  {% if write_restart %}
    restart_to {{ system_name }}_cylinder_{{ "%03d"|format(loop.index0) }}_restart.pack
  {% endif %}
end structure
{% endif %}
{% endfor %}

# point particles, generally ions
{% for ionlayer in ionlayers %}
{% if ionlayer.N|int > 0 %}
structure {{ ionlayer.ion }}.pdb
  chain A
  resnumbers 2
  number {{ ionlayer.N|int }}
  inside box {{ "%.3f"|format(ionlayer.bb_lower[0]) }} {{ "%.3f"|format(ionlayer.bb_lower[1]) }} {{ "%.3f"|format(ionlayer.bb_lower[2]) }}  {{ "%.3f"|format(ionlayer.bb_upper[0]) }}  {{ "%.3f"|format(ionlayer.bb_upper[1]) }} {{ "%.3f"|format(ionlayer.bb_upper[2]) }}
  {% if write_restart %}
    restart_to {{ system_name }}_ionlayer_{{ "%03d"|format(loop.index0) }}_restart.pack
  {% endif %}
end structure
{% endif %}
{% endfor %}

# ions outside cylinder
{% for ioncylinder in ioncylinders %}
{% if ioncylinder.N|int > 0 %}
structure {{ ioncylinder.ion }}.pdb
  chain A
  resnumbers 2
  number {{ ioncylinder.N|int }}
  # along x axis
  inside cylinder {{ "%.3f"|format(ioncylinder.base_center[0]+tolerance) }} {{ "%.3f"|format(ioncylinder.base_center[1]) }} {{ "%.3f"|format(ioncylinder.base_center[2]) }} 1. 0. 0. {{ "%.3f"|format(ioncylinder.r_outer) }} {{ "%.3f"|format(ioncylinder.length-2*tolerance) }}
  outside cylinder {{ "%.3f"|format(ioncylinder.base_center[0]-ioncylinder.r_outer) }} {{ "%.3f"|format(ioncylinder.base_center[1]) }} {{ "%.3f"|format(ioncylinder.base_center[2]) }} 1. 0. 0. {{ "%.3f"|format(ioncylinder.r_inner) }} {{ "%.3f"|format(ioncylinder.length+2*ioncylinder.r_outer) }}
  {% if ioncylinder.upper_hemi %}
  over plane 0. 0. 1. {{ "%.3f"|format(ioncylinder.base_center[2]) }}
  {% elif ioncylinder.lower_hemi %}
  below plane 0. 0. 1. {{ "%.3f"|format(ioncylinder.base_center[2]) }}
  {% endif %}
  {% if write_restart %}
    restart_to {{ system_name }}_ioncylinder_{{ "%03d"|format(loop.index0) }}_restart.pack
  {% endif %}
end structure
{% endif %}
{% endfor %}
