# run with
# lmp -in lmp_minimization \
#  -v has_indenter 1 -v robust_minimization 0 -v pbc2d 1 \
#  -v baseName 377_SDS_on_AU_111_51x30x2_monolayer_with_counterion_100Ang_stepped \
#  -v dataFile 377_SDS_on_AU_111_51x30x2_monolayer_with_counterion_100Ang_stepped_parametrized.lammps

include                 lmp_header.input

neigh_modify            delay 0 every 1 check yes
# https://lammps.sandia.gov/doc/neigh_modify.html
# The every, delay, check, and once options affect how often lists are built as
# a simulation runs. The delay setting means never build new lists until at
# least N steps after the previous build. The every setting means build lists
# every M steps (after the delay has passed). If the check setting is no, the
# lists are built on the first step that satisfies the delay and every settings.
# If the check setting is yes, then the every and delay settings determine when
# a build may possibly be performed, but an actual build only occurs if some
# atom has moved more than half the skin distance (specified in the neighbor
# command) since the last build.
# If the "delay" setting is non-zero, then it must be a multiple of the "every"
# setting.

# thermo                  100

############
# restraints
############
# Keep indenter restrained during minimzation
# Note that you can minimize some atoms in the system while holding the
# coordinates of other atoms fixed by applying fix setforce to the other atoms.
if "${has_indenter} > 0" then &
  "print 'Indenter frozen during minimization'" &
  "fix freeze indenter setforce 0.0 0.0 0.0"
# https://lammps.sandia.gov/doc/fix_setforce.html
# Set each component of force on each atom in the group to the specified value
# fx,fy,fz. This erases all previously computed forces on the atom, though
# additional fixes could add new forces. This command can be used to freeze
# certain atoms in the simulation by zeroing their force, either for running
# dynamics or performing an energy minimization. For dynamics, this assumes
# their initial velocity is also zero.

# keep substrate restrained during minimization
if "${freeze_substrate} > 0" then &
  "print 'Substrate frozen during minimization'" &
  "fix freezeSubstrate substrate setforce 0.0 0.0 0.0"

################
# box relaxation
################
if "${relax_box} > 0 && ((${pbc2d} > 0) || (${has_vacuum} > 0))" then &
  "fix boxRelaxation all box/relax x ${pressureP} y ${pressureP} couple none fixedpoint 0 0 0 nreset 100" &
elif "(${relax_box} > 0) && (${pressurize_z_only} > 0)" &
  "fix boxRelaxation all box/relax z ${pressureP} couple none fixedpoint 0 0 0 nreset 100" &
elif "${relax_box} > 0" &
  "fix boxRelaxation all box/relax aniso ${pressureP} fixedpoint 0 0 0 nreset 100"
# https://lammps.sandia.gov/doc/fix_box_relax.html
# Apply an external pressure or stress tensor to the simulation box during an
# energy minimization. This allows the box size and shape to vary during the
# iterations of the minimizer so that the final configuration will be both an
# energy minimum for the potential energy of the atoms, and the system pressure
# tensor will be close to the specified external tensor. Conceptually,
# specifying a positive pressure is like squeezing on the simulation box; a
# negative pressure typically allows the box to expand.
#
# When the size of the simulation box changes, all atoms are re-scaled to new
# positions, unless the keyword dilate is specified with a value of partial, in
# which case only the atoms in the fix group are re-scaled. This can be useful
# for leaving the coordinates of atoms in a solid substrate unchanged and
# controlling the pressure of a surrounding fluid.
#
# The fixedpoint keyword specifies the fixed point for cell relaxation. By
# default, it is the center of the box. Whatever point is chosen will not move
# during the simulation. For example, if the lower periodic boundaries pass
# through (0,0,0), and this point is provided to fixedpoint, then the lower
# periodic boundaries will remain at (0,0,0), while the upper periodic
# boundaries will move twice as far. In all cases, the particle positions at
# each iteration are unaffected by the chosen value, except that all particles
# are displaced by the same amount, different on each iteration.
#
# Performing a minimization with this fix is not a mathematically well-defined
# minimization problem. This is because the objective function being minimized
# changes if the box size/shape changes. In practice this means the minimizer
# can get "stuck" before you have reached the desired tolerance. The solution to
# this is to restart the minimizer from the new adjusted box size/shape, since
# that creates a new objective function valid for the new box size/shape. Repeat
# as necessary until the box size/shape has reached its new equilibrium.

# The couple keyword allows two or three of the diagonal components of the
# pressure tensor to be "coupled" together. The value specified with the keyword
# determines which are coupled. For example, xz means the Pxx and Pzz components
# of the stress tensor are coupled. Xyz means all 3 diagonal components are
# coupled. Coupling means two things: the instantaneous stress will be computed
# as an average of the corresponding diagonal components, and the coupled box
# dimensions will be changed together in lockstep, meaning coupled dimensions
# will be dilated or contracted by the same percentage every timestep. The
# Ptarget values for any coupled dimensions must be identical. Couple xyz can be
# used for a 2d simulation; the z dimension is simply ignored.
#
# The iso, aniso, and tri keywords are simply shortcuts that are equivalent to
# specifying several other keywords together.
#
# The keyword iso means couple all 3 diagonal components together when pressure
# is computed (hydrostatic pressure), and dilate/contract the dimensions
# together. Using "iso Ptarget" is the same as specifying these 4 keywords:
#
# x Ptarget
# y Ptarget
# z Ptarget
# couple xyz
#
# The keyword aniso means x, y, and z dimensions are controlled independently
# using the Pxx, Pyy, and Pzz components of the stress tensor as the driving
# forces, and the specified scalar external pressure. Using "aniso Ptarget" is
# the same as specifying these 4 keywords:
#
# x Ptarget
# y Ptarget
# z Ptarget
# couple none
#
# [...] only applies when the box dimensions are equal to those of
# the reference dimensions. If this is not the case, then the converged stress
# tensor will not equal that specified by the user. We can resolve this problem
# by periodically resetting the reference dimensions. The keyword nreset
# controls how often this is done. If this keyword is not used, or is given a
# value of zero, then the reference dimensions are set to those of the initial
# simulation domain and are never changed. A value of nstep means that every
# nstep minimization steps, the reference dimensions are set to those of the
# current simulation domain. Note that resetting the reference dimensions
# changes the objective function and gradients, which sometimes causes the
# minimization to fail. This can be resolved by changing the value of nreset, or
# simply continuing the minimization from a restart file.


##############
# minimization
##############
# fix restraint surfactant spring/self 10.0
# http://lammps.sandia.gov/doc/fix_spring_self.html
# Apply a spring force independently to each atom in the group to tether it to
# its initial position. The initial position for each atom is its location at
# the time the fix command was issued. At each timestep, the magnitude of the
# force on each atom is -Kr, where r is the displacement of the atom from its
# current position to its initial position. The distance r correctly takes into
# account any crossings of periodic boundary by the atom since it was in its
# initial position.

print "LAMMPS state before minimization:"
info all out log

if "${robust_minimization} > 0" then &
  "print 'Using alternative robust minimization settings'" &
  "neigh_modify delay 0 every 1 check yes one 5000 page 250000" &
  "minimize 0.0 ${minimization_ftol} ${minimization_maxiter} ${minimization_maxeval}" &
else &
  "minimize 0.0 ${minimization_ftol} ${minimization_maxiter} ${minimization_maxeval}"

# minimize etol ftol maxiter maxeval
# Quote from http://lammps.sandia.gov/doc/minimize.html
# Perform an energy minimization of the system, by iteratively adjusting atom
# coordinates. Iterations are terminated when one of the stopping criteria is
# satisfied. At that point the configuration will hopefully be in local
# potential energy minimum. More precisely, the configuration should
# approximate a critical point for the objective function (see below), which
# may or may not be a local minimum.
#
#    etol = stopping tolerance for energy (unitless)
#    ftol = stopping tolerance for force (force units)
#    maxiter = max iterations of minimizer
#    maxeval = max number of force/energy evaluations
#
# Either or both of the etol and ftol values can be set to 0.0, in which case
# some other criterion will terminate the minimization.

if "${write_coeff_to_datafile} > 0" then &
  "write_data     ${baseName}.lammps" &
else &
  "write_data     ${baseName}.lammps nocoeff"

reset_timestep  0
