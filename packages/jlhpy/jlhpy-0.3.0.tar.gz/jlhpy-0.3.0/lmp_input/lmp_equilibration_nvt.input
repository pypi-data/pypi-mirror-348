include lmp_header.input
##############
# restraints I
##############

# Keep substrate layer frozen
if "${freeze_substrate_layer} > 0.0" then &
  "velocity frozen_substrate_layer set 0.0 0.0 0.0 sum no units box"

if "${freeze_substrate_layer} > 0.0" then &
  "fix freeze_substrate_layer frozen_substrate_layer setforce 0.0 0.0 0.0"

# Keep indenter rigid or restrained at its initial position
if "(${has_indenter} > 0) && (${rigid_indenter} > 0)" then &
  "fix freeze indenter setforce 0.0 0.0 0.0"

if "${is_restart} == 0" then "group tempered_group subtract all frozen"

###################
# NVT equilibration
###################
if "${use_dpd_tstat} == 0" then &
    "fix thermostat tempered_group langevin ${initialT} ${temperatureT} &
        ${langevin_damping} ${random_seed}"
#        ^ID        ^group-ID
#                                   ^langevin
#                                            ^Tstart    ^Tstop
#       ^damp               ^seed
# source: https://lammps.sandia.gov/doc/fix_langevin.html
# fix ID group-ID langevin Tstart Tstop damp seed keyword values ...
# Apply a Langevin thermostat as described in (Schneider) to a group of atoms
# which models an interaction with a background implicit solvent. Used with
# fix nve, this command performs Brownian dynamics (BD), since the total force
# on each atom will have the form:
#
# F = Fc + Ff + Fr
# Ff = - (m / damp) v
# Fr is proportional to sqrt(Kb T m / (dt damp))
#
# Note that unless you use the omega or angmom keywords, the thermostat effect
# of this fix is applied to only the translational degrees of freedom for the
# particles, which is an important consideration for finite-size particles,
# which have rotational degrees of freedom, are being thermostatted. The
# translational degrees of freedom can also have a bias velocity removed
# from them before thermostatting takes place; see the description below.
#
# Unlike the fix nvt command which performs Nose/Hoover thermostatting
# AND time integration, this fix does NOT perform time integration. It
# only modifies forces to effect thermostatting. Thus you must use a
# separate time integration fix, like fix nve to actually update the
# velocities and positions of atoms using the modified forces. Likewise,
# this fix should not normally be used on atoms that also have their
# temperature controlled by another fix - e.g. by fix nvt or fix
# temp/rescale commands.
#
# The damp parameter is specified in time units and determines how rapidly the
# temperature is relaxed. For example, a value of 100.0 means to relax the
# temperature in a timespan of (roughly) 100 time units (tau or fmsec or psec
# - see the units command). The damp factor can be thought of as inversely
# related to the viscosity of the solvent. I.e. a small relaxation time
# implies a hi-viscosity solvent and vice versa. See the discussion about
# gamma and viscosity in the documentation for the fix viscous command for
# more details.
#
# The keyword zero can be used to eliminate drift due to the thermostat. Because
# the random forces on different atoms are independent, they do not sum exactly
# to zero. As a result, this fix applies a small random force to the entire
# system, and the center-of-mass of the system undergoes a slow random walk.
# If the keyword zero is set to yes, the total random force is set exactly to
# zero by subtracting off an equal part of it from each atom in the group. As
# a result, the center-of-mass of a system with zero initial momentum will not
# drift over time.

fix timeIntegration     tempered_group nve # necessary for nvt via langevin

###############
# restraints II
###############
if "(${has_indenter} > 0) && (${restrained_indenter} > 0)" then &
  "fix restrain_indenter indenter momentum 1 linear 1 1 1 angular rescale"
#                                          ^N       ^xyz          ^preserve kinetic energy
# source: https://lammps.sandia.gov/doc/fix_momentum.html
# If the linear keyword is used, the linear momentum is zeroed by subtracting
# the center-of-mass velocity of the group from each atom. This does not change
# the relative velocity of any pair of atoms. One or more dimensions can be
# excluded from this operation by setting the corresponding flag to 0.
#
# If the angular keyword is used, the angular momentum is zeroed by subtracting
# a rotational component from each atom.
#
# This command can be used to insure the entire collection of atoms (or a
# subset of them) does not drift or rotate during the simulation due to random
# perturbations (e.g. fix langevin thermostatting).
#
# The rescale keyword enables conserving the kinetic energy of the group of
# atoms by rescaling the velocities after the momentum was removed.
#
# No information about this fix is written to binary restart files. None of the
# fix_modify options are relevant to this fix. No global or per-atom quantities
# are stored by this fix for access by various output commands. No parameter of
# this fix can be used with the start/stop keywords of the run command. This
# fix is not invoked during energy minimization.

############################################
# RIGID TIP3P WATER and RIGID HYDROGEN BONDS
#
# fix equilibrateNVT all nvt temp ${temperatureT} ${temperatureT} 100 tchain 1
#  WARNING: Fix rattle should come after all other integration fixes
#    (../fix_rattle.cpp:147)

if "${rigid_h_bonds} > 0" then &
  "fix rigidHbonds tempered_group rattle 1e-6 500 0 m 1.0 a ${angleIdWater}"

# The b constraint lists bond types that will be constrained.
# The t constraint lists atom types. All bonds connected to an
#  atom of the specified type will be constrained. The m constraint
# lists atom masses. All bonds connected to atoms of the specified
# masses will be constrained (within a fudge factor of MASSDELTA specified
# in fix_shake.cpp). The a constraint lists angle types. If both bonds in
# the angle are constrained then the angle will also be constrained if its
# type is in the list.
# The mentioned MASSDELTA is defined as 0.1 (16Mar18).
# Therefore, all hydrogen
# The fix rattle command modifies forces and velocities and thus should be
# defined after all other integration fixes in your input script. If you
# define other fixes that modify velocities or forces after fix rattle operates,
# then fix rattle will not take them into account and the overall time
# integration will typically not satisfy the RATTLE constraints. You can
# check whether the constraints work correctly by setting the value of
# RATTLE_DEBUG in src/fix_rattle.cpp to 1 and recompiling LAMMPS.
# The degrees-of-freedom removed by SHAKE bonds and angles are accounted for in
# temperature and pressure computations. Similarly, the SHAKE contribution to
# the pressure of the system (virial) is also accounted for.

###############
# DRIFT REMOVAL

# Keep substrate slab's position COM position fixed, remove relative drift
if "(${remove_drift} > 0) || (${substrate_recenter} > 0)" then &
  "fix fixedSubstrateCOM frozen_substrate_layer recenter INIT INIT INIT shift all"
#      ^ID               ^group-ID
#                                  ^style   ^x   ^y   ^z   ^keyword
#                                                                ^group
# source: https://lammps.sandia.gov/doc/fix_recenter.html
# fix ID group-ID recenter x y z keyword value ...
#   shift value = group-ID
#     group-ID = group of atoms whose coords are shifted
#
# Constrain the center-of-mass position of a group of atoms by adjusting the
# coordinates of the atoms every timestep. This is simply a small shift that
# does not alter the dynamics of the system or change the relative coordinates
# of any pair of atoms in the group. This can be used to insure the entire
# collection of atoms (or a portion of them) do not drift during the simulation
# due to random perturbations (e.g. fix langevin thermostatting).
#
# The center-of-mass (COM) is computed for the group specified by the fix.
# If the current COM is different than the specified x,y,z, then a group of
# atoms has their coordinates shifted by the difference. By default the shifted
# group is also the group specified by the fix. A different group can be shifted
# by using the shift keyword. For example, the COM could be computed on a
# protein to keep it in the center of the simulation box. But the entire system
# (protein + water) could be shifted.
#
# Distance units for the x,y,z values are determined by the setting of the units
# keyword, as discussed below. One or more x,y,z values can also be specified
# as NULL, which means exclude that dimension from this operation. Or it can be
# specified as INIT which means to constrain the center-of-mass to its initial
# value at the beginning of the run.

velocity        tempered_group create ${initialT} 29061988 rot yes mom yes dist gaussian

# Quote from http://lammps.sandia.gov/doc/velocity.html
# The mom and rot keywords are used by create. If mom = yes, the linear momentum
# of the newly created ensemble of velocities is zeroed; if rot = yes, the
# angular momentum is zeroed.

# dump            dumpTraj all atom 100 ${baseName}.dump

# dump movie nonwater movie 4 ${baseName}.mp4 type type size 640 480
# dump_modify movie framerate 24

# automatically create image of first and last config
dump            dumpPng nonsolvent image ${nvtEqSteps} &
                ${baseName}.*.png type type

# Suspicion: netcdf faster than netcdf/mppiio on one node, check on multiple!
if "${mpiio} > 0" then &
  "print 'netcdf/mpiio output'" &
  "dump dumpNetCDF all netcdf/mpiio ${netcdf_frequency} ${baseName}.nc id mol type x y z" &
else &
  "print 'netcdf output (no netcdf/mpiiio)'" &
  "dump dumpNetCDF all netcdf ${netcdf_frequency} ${baseName}.nc id mol type x y z"

if "${verbose} > 0" then &
  """print "LAMMPS state before NVT equilibrations:" """ &
  "info all"

run             ${nvtEqSteps}

if "${write_coeff_to_datafile} > 0" then &
  "write_data     ${baseName}.lammps" &
else &
  "write_data     ${baseName}.lammps nocoeff"
