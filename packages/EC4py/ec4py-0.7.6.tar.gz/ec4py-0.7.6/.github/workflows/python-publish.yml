# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: old. Upload Python Package to PyPi

on:
  workflow_dispatch:
     
jobs:
  build_release_job:
    uses: ./.github/workflows/build_release.yml
    
  build_job:
    name: Build distribution 📦
    runs-on: ubuntu-latest
    outputs:
      output1: ${{steps.version.outputs.test}}
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
    - name: update pip
      run: python3 -m pip install --upgrade pip
    - name: Install pypa/build
      run: >-
        python3 -m
        pip install
        build
        --user
    - name: Install toml
      run: python3 -m pip install toml
    #- name: Install json
    #  run: python3 -m pip install json
    - name: Run version updated.
      run: |
        # echo ls
        # ls
        echo python3 ./dev/builds/ver_update.py
        export INPUT_STORE=$(python3 ver_update.py)
        echo "Version:"
        echo $INPUT_STORE
      working-directory: dev/builds
    - name: Get version
      id: version
      run: |
        export INPUT_STORE=$(python3 get_project_version.py)
        # INPUT_STORE=$(echo $INPUT_STORE | tr '\n' '')
        echo "test=$INPUT_STORE" >> "$GITHUB_OUTPUT"
        echo "test=$INPUT_STORE"
      working-directory: dev/builds
    - name: Build a binary wheel and a source tarball
      run: python3 -m build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

 

  github-release_job:
    name: >-
      Sign the Python 🐍 distribution 📦 with Sigstore
      and upload them to GitHub Release
    needs:
    - build_release_job
    #- publish-to-pypi
    env:
        PROJECT_VERSION: ${{needs.build_job.outputs.output1}}
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v2.1.1
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl
    - name: Version
      env:
          OUTPUT1: ${{needs.build_job.outputs.output1}}
      run: | 
        echo "Ver_updated:"
        echo "VERSION: ${{env.PROJECT_VERSION}}"
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
        OUTPUT1: ${{needs.build_job.outputs.output1}}
      run: | 
        # export INPUT_STORE=$(python3 ver_update.py)
        # echo "Ver_updated:"
        # echo $INPUT_STORE
        #gh release create $INPUT_STORE --repo '${{ github.repository }}' --notes ""
        gh release create ${{ env.PROJECT_VERSION }} --repo '${{ github.repository }}' --notes ""
    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
        PRJ_VER: ${{needs.build_job.outputs.output1}}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages, and the
      # sigstore-produced signatures and certificates.
      run: |
        echo  gh release upload '${{env.PRJ_VER}}' dist/** 
        gh release upload '${{needs.build_job.outputs.output1}}' dist/** --repo '${{ github.repository }}' --clobber

  publish-to-pypi:
    name: >-
      Publish Python 🐍 distribution 📦 to PyPI
    # if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    needs:
    - build_job
    - github-release_job
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/ec4py/  # Replace <package-name> with your PyPI project name
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution 📦 to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
