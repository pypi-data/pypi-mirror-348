[project]
name = "droidmind"
version = "0.3.1"
description = "Control Android devices with MCP"
readme = "README.md"
requires-python = ">=3.13"
license = { file = "LICENSE" }
authors = [{ name = "Stefanie Jane", email = "stef@hyperbliss.tech" }]
keywords = ["mcp", "android", "ai", "llm", "claude"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
]
# Dependencies organized by category
dependencies = [
    # Core MCP protocol
    "mcp[cli]>=1.8.1",
    # UI and display
    "rich>=14.0.0",
    # Networking and HTTP
    "httpx>=0.28.1",
    # Server components
    "sse-starlette>=2.3.5",
    "starlette>=0.46.1",
    "uvicorn>=0.34.2",
    "rich-gradient>=0.2.0",
    # Async file operations
    "aiofiles>=23.2.1",
    "pillow>=11.2.1",
]

[dependency-groups]
dev = [
    # Testing
    "pytest>=8.3.5",
    "pytest-asyncio>=0.26.0",
    "pytest-cov>=6.1.1",
    # Linting and type checking
    "pylint>=3.3.7",
    "ruff>=0.11.9",
    "wcwidth>=0.2.13",
    "tomlkit>=0.13.2",
    "colorama>=0.4.6",
    "pyright>=1.1.400",
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.14",
    "mkdocstrings[python]>=0.29.1",
    "mkdocs-awesome-pages-plugin>=2.10.1",
    "mkdocs-roamlinks-plugin>=0.3.2",
    "mkdocs-mermaid2-plugin>=1.2.1",
]
sse = ["uvicorn>=0.27.0", "starlette>=0.46.0"]

[project.urls]
Homepage = "https://github.com/hyperb1iss/droidmind"
Issues = "https://github.com/hyperb1iss/droidmind/issues"
Documentation = "https://github.com/hyperb1iss/droidmind#readme"

[project.scripts]
droidmind = "droidmind.server:main"
droidmind-client = "droidmind.client:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["droidmind"]

# Testing configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
addopts = """
    -v
    --tb=short
"""
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

# Type checking configuration
[tool.pyright]
include = ["droidmind", "tests", "scripts"]
exclude = [".venv", "docs", "**/__pycache__", "**/node_modules", "**/.*"]
pythonVersion = "3.13"
pythonPlatform = "All"
typeCheckingMode = "standard"

# Code formatting and linting configuration
[tool.ruff]
# General settings
line-length = 120
target-version = "py312"
src = ["droidmind", "tests", "scripts"]
extend-exclude = [".venv", "docs"]

[tool.ruff.lint]
# Rules to enable
select = [
    # Core rules
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "RUF", # ruff-specific rules
    "PT",  # pytest style
    "SIM", # simplify

    # Additional valuable rules for a server application
    "ASYNC", # async/await best practices
    "BLE",   # blind except handling
    "DTZ",   # datetime handling
    "G",     # logging format string issues
    "ICN",   # import conventions
    "PGH",   # pygrep hooks
    "PIE",   # misc. linting
    "PL",    # pylint rules ported to ruff
    "RET",   # return value consistency
    "RSE",   # raise statement formatting
    "S",     # bandit (security) - important for command execution!
    "SLF",   # private member access
    "TRY",   # try-except best practices
    "COM",   # trailing comma enforcement (except COM812 which conflicts with formatter)
    "ERA",   # eradicate (commented out code)
    "T20",   # print statements
    "ARG",   # unused arguments
]

# Rules to ignore
ignore = [
    # Complexity - handled by pylint
    "C901",    # Function is too complex
    "PLR0911", # Too many return statements
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments
    "PLR0915", # Too many statements
    "PLR2004", # Magic value in comparison

    # Stylistic preferences
    "RUF012", # Mutable class attributes should be annotated with typing.ClassVar

    # Noise reduction - warnings that often produce false positives
    "PLC0414", # Import alias does not rename variable
    "PLR0904", # Too many public methods
    "PLW0603", # Global statement usage
    "PLW2901", # Outer loop variable overwritten
    "PT011",   # Too broad pytest.raises without match
    "SIM102",  # Nested if-statements (sometimes better for readability)
    "SIM108",  # Use ternary instead of if-else (often less readable)
    "TRY003",  # Avoid long messages in exceptions

    # User-requested suppressions
    "G004",   # Don't warn about f-strings in logging
    "PGH003", # Don't warn about unspecific # type: ignore comments
    "RET502", # Don't warn about implicit return None
    "RET503", # Don't warn about missing explicit return
    "RET505", # Don't warn about elif after return
    "TRY300", # Don't suggest moving return to else block
    "TRY301", # Don't suggest abstracting raise to inner function
    "TRY401", # Don't warn about redundant exception in logging.exception

    # Security exceptions that make sense for this project
    "S101", # Use of assert detected (fine for tests)

    # Rule that conflicts with the formatter
    "COM812", # Missing trailing comma in collection of items
]

# Import organization settings
[tool.ruff.lint.isort]
combine-as-imports = true
force-sort-within-sections = true
known-first-party = ["droidmind"]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]

# File-specific rule adjustments
[tool.ruff.lint.per-file-ignores]
# Ignore unused imports in __init__ files
"__init__.py" = ["F401", "E402"]

# Allow catching blind exceptions in prompts, resources, and tools 
"droidmind/adb.py" = ["BLE001", "ARG001"]
"droidmind/prompts.py" = ["BLE001", "ARG001"]
"droidmind/resources/**/*.py" = ["BLE001", "ARG001"]
"droidmind/tools/**/*.py" = ["BLE001", "ARG001"]

# Allow accessing private members in server.py for MCP server access
"droidmind/server.py" = ["SLF001"]

# More relaxed rules for tests
"tests/**/*.py" = [
    "ARG001",  # Unused function arguments (common for fixtures)
    "ARG002",  # Unused function arguments (common for fixtures)
    "ARG005",  # Unused lambda arguments (common for fixtures)
    "E501",    # Allow longer lines in tests (assertions can get verbose)
    "PIE790",  # Allow unnecessary 'pass' statements in mocks
    "PLR2004", # Allow magic numbers in tests
    "PT018",   # Allow complex assertions (common in tests to check multiple conditions)
    "RET504",  # Allow unnecessary assignment before return (clearer in tests)
    "S101",    # Allow asserts in tests
    "S105",    # Allow hardcoded passwords in variable assignments (it's just test data!)
    "S106",    # Allow hardcoded passwords as arguments (it's just test data!)
    "S108",    # Ignore insecure usage of temporary files
    "SLF001",  # Allow private member access in tests
    "BLE001",  # Allow catching blind exceptions in tests
]

# Module-specific rules
"droidmind/security/**/*.py" = [
    # Enable all security rules for security modules
]

"droidmind/adb/**/*.py" = [
    # Extra security for command execution
]

"droidmind/server/**/*.py" = [
    # Enable stricter async rules
]

# Format settings for consistency
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = 80

# Pylint configuration - only for things Ruff can't handle
[tool.pylint]
py-version = "3.13"
jobs = 2
max-line-length = 120
disable = [
    # Covered by Ruff
    "bad-indentation",
    "line-too-long",
    "missing-final-newline",
    "trailing-whitespace",
    "unnecessary-semicolon",
    "missing-docstring",
    "invalid-name",
    "abstract-class-instantiated",
    "abstract-method",
    "arguments-differ",
    "assignment-from-none",
    "attribute-defined-outside-init",
    "protected-access",
    "signature-differs",
    "too-few-public-methods",
    "import-error",
    "no-member",
    "no-name-in-module",
    "unused-import",
    "redefined-outer-name",
    "unused-argument",
    "unused-variable",
    "wrong-import-position",
    "import-outside-toplevel",
    "too-many-positional-arguments",
    "fixme",

    # Additional suppressions for practicality
    "broad-except",
]

# Enable only the high-value checks that Ruff doesn't cover
enable = [
    "use-symbolic-message-instead",
    "useless-suppression",
    "duplicate-code",
]

[tool.pylint.basic]
good-names = ["i", "j", "k", "ex", "id", "fd", "_"]

[tool.pylint.design]
max-parents = 15
max-returns = 30
max-branches = 30
max-statements = 60
max-attributes = 20
max-locals = 25
max-args = 10
max-nested-blocks = 8
