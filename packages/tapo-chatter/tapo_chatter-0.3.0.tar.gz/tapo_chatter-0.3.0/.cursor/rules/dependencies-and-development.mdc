---
description: Project dependencies and development setup instructions
globs: 
alwaysApply: false
---
---
rule-type: file-hint
display-name: Dependencies and Development
priority: 800
enable-rule: true
description: Project dependencies and development setup instructions
file-pattern: pyproject.toml
---

# Dependencies and Development

## Project Dependencies

The [pyproject.toml](mdc:pyproject.toml) file is the single source of truth for all project dependencies.

### Core Dependencies (defined in `[project.dependencies]`):
- **tapo>=0.2.0**: Core library for interacting with Tapo devices
- **python-dotenv>=1.0.0**: For loading environment variables from .env files
- **rich>=13.7.0**: For beautiful console output with tables and styling

### Development Dependencies (defined in `[project.optional-dependencies.dev]`):
- **ruff**: For linting and code formatting
- **pytest**: For test execution
- **pytest-cov**: For code coverage reporting

## Development Setup

1.  **Ensure Python 3.13 is available.**
    Refer to `.python-version` if using a version manager like `pyenv`.

2.  **Set up a virtual environment and install dependencies:**
    It is highly recommended to use a virtual environment to manage project dependencies and avoid conflicts with system-wide packages.

    ```bash
    # Create a virtual environment (e.g., using Python's built-in venv)
    python3.13 -m venv .venv

    # Activate the virtual environment
    source .venv/bin/activate 
    # For Windows: .venv\Scripts\activate

    # Install dependencies using uv (or pip)
    # Ensure uv is installed: https://github.com/astral-sh/uv
    uv pip install -e ".[dev]"
    # Alternatively, with pip:
    # pip install -e ".[dev]"
    ```
    This command installs the package in editable mode (`-e .`) along with all development dependencies (`[dev]`).

3.  **Configure Environment Variables:**
    -   Create a `.env` file in the project root by copying from [.env.example](mdc:.env.example) and filling in your details.
        ```bash
        cp .env.example .env
        ```
    -   Alternatively, export the required variables (`TAPO_USERNAME`, `TAPO_PASSWORD`, `TAPO_IP_ADDRESS`) in your shell environment.
    -   If using `direnv`, it will automatically load variables from `.envrc` (which sources `.env`).

## Code Style

This project uses `ruff` for linting and formatting to maintain consistent code style. The configuration is in [pyproject.toml](mdc:pyproject.toml).

-   **To check for linting issues:**
    ```bash
    ruff check .
    ```
-   **To automatically fix linting issues and format code:**
    ```bash
    ruff format .
    ruff check . --fix
    ```

Always ensure your code is linted and formatted before committing changes.
