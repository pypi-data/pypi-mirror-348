Metadata-Version: 2.4
Name: larixite
Version: 2025.5.0
Summary: convert CIF data to inputs for XAS calculations Feff, FDMNES, etc
Author-email: Matthew Newville <newville@cars.uchicago.edu>, Mauro Rovezzi <mauro.rovezzi@esrf.fr>
License: MIT License
        
        Copyright (c) 2024 Matthew Newville, The University of Chicago,
                           Mauro Rovezzi, University Grenoble Alpes, CNRS
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage,  https://github.com/xraypy/larixite
Project-URL: Documentation, https://xraypy.github.io/larixite
Project-URL: Tracker, https://github.com/xraypy/larixite/issues
Keywords: X-ray spectroscopy,Crystallography
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: xraydb
Requires-Dist: sqlalchemy>=2
Requires-Dist: pymatgen>=2024.10.22
Requires-Dist: pyshortcuts
Provides-Extra: web
Requires-Dist: flask; extra == "web"
Provides-Extra: jupyter
Requires-Dist: jupyterlab==3.*; extra == "jupyter"
Requires-Dist: crystal-toolkit==2025.1.24rc0; extra == "jupyter"
Provides-Extra: test
Requires-Dist: pytest; extra == "test"
Provides-Extra: doc
Requires-Dist: sphinx; extra == "doc"
Provides-Extra: dev
Requires-Dist: build; extra == "dev"
Requires-Dist: twine; extra == "dev"
Requires-Dist: ruff; extra == "dev"
Provides-Extra: all
Requires-Dist: larixite[dev,doc,jupyter,test,web]; extra == "all"
Dynamic: license-file

# Larixite

Crystal structures and clusters of atoms for X-ray absorption spectroscopy.

The main purpose of larixite is to provide a Python package for using
crystallographic data or calculated clusters of atoms to generate inputs for
X-ray absorption spectroscopy and other scientific disciplines that use
non-crystalline clusters of atoms.

This project includes:

1. an sqlite3 database of structures from the [American Mineralogical
   Crystal Structure Database](https://rruff.geo.arizona.edu/AMS/amcsd.php) (AMCSD)
2. Python code to convert structures from the AMCSD database, other CIF files,
   or XYZ coordinates into atomic clusters for XAS calculations with FEFF,
   FDMNES, and other XAS calculation tools.
3. A basic web application to guide those conversions. See [Larixite Web App](https://millenia.cars.aps.anl.gov/larixite).


## install

Either install from PyPI with

    > pip install larixite


Download and unpack this code and install with


    > pip install .


## Status

Larixite has been in rapid development, but is also a spin-off from code that
has been in Xraylarch for many years.  That is, while many parts of the code
are moving rapidly, much of the code is reasonably stable.


## Web App

The [Larixite Web App](https://millenia.cars.aps.anl.gov/larixite) can be run
locally for debugging or for local deployment.  To do this, install the extra
wed dependencies (essentially only Flask is needed) with

    > pip install ".[web]"


and run the script "run_local.py" with

      > python run_local.py

will launch a local web server with the app running at http://127.0.0.1:11564/
