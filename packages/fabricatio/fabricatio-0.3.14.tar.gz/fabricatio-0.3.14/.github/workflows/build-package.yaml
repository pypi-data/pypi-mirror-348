name: Build and Release

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  check-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest ]
        python-version: [ "3.12", "3.13" ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Get current version
        id: get_version
        run: |
          CURRENT_VERSION=$(grep '^version' pyproject.toml | cut -d '"' -f 2)
          echo "CURRENT_VERSION=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
        shell: bash
      - name: Get latest tag
        uses: JinoArch/get-latest-tag@latest
        id: tag

      - name: Check if version has changed
        id: check_version_change
        run: |
          LATEST_TAG=${{ steps.tag.outputs.latestTag  }}
          echo "Latest tag is $LATEST_TAG"
          echo "Current version is ${{ steps.get_version.outputs.CURRENT_VERSION }}"
          if [ "$LATEST_TAG" != "${{ steps.get_version.outputs.CURRENT_VERSION }}" ]; then
              echo "VERSION_CHANGED=true" >> $GITHUB_OUTPUT
            else
              echo "VERSION_CHANGED=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: check if is prerelease
        id: check_prerelease
        run: |
          if [[ "${{ steps.get_version.outputs.CURRENT_VERSION }}" == *"-"* ]]; then
            echo "IS_PRERELEASE=true" >> $GITHUB_OUTPUT
          else
            echo "IS_PRERELEASE=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v6.0.1
        with:
          version: "latest"
      - name: Install nightly rust
        run: |
          rustup default nightly
      - name: Install Protoc
        uses: arduino/setup-protoc@v3

      - name: Install deps
        run: |
          uv sync --no-install-project  --all-extras --index https://pypi.org/simple
      - name: Build
        run: |
          make PY=${{ matrix.python-version }}

      - name: Packing templates
        if: ${{ steps.check_version_change.outputs.VERSION_CHANGED == 'true' }}
        run: |
          tar -czf templates.tar.gz templates

      - name: Create Release and upload assets
        if: ${{ steps.check_version_change.outputs.VERSION_CHANGED == 'true' }}
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.CURRENT_VERSION }}
          name: ${{ steps.get_version.outputs.CURRENT_VERSION }}
          files: |
            dist/*
            templates.tar.gz
          prerelease: ${{ steps.check_prerelease.outputs.IS_PRERELEASE }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}

      - name: Upload to PyPI
        if: ${{ steps.check_version_change.outputs.VERSION_CHANGED == 'true' }}
        run: |
          make publish PY=${{ matrix.python-version }}
        env:
          MATURIN_USERNAME: __token__
          MATURIN_PASSWORD: ${{ secrets.PYPI_TOKEN }}