#!/usr/bin/env python3
"""
Version information for the Secure File Encryption Tool.
"""

# This file is automatically generated by setup.py
__version__ = "0.8.1"
__git_commit__ = "4d03d2e8bd662c0267604879d21dc4a2b0509b24"
__author__ = "Tobi <jahlives@gmx.ch>"
__license__ = "MIT"
__copyright__ = "by " + __author__

# Version history
VERSION_HISTORY = {
    "0.1.0": "Initial release",
    "0.2.0": "Added support for AES-GCM and ChaCha20-Poly1305",
    "0.3.0": "Added support for Argon2 key derivation",
    "0.4.0": "Added secure memory handling and improved password strength",
    "0.4.4": "Added support for Scrypt and more hash algorithms",
    "0.5.0": "Added BLAKE2b and SHAKE-256 hash algorithms, XChaCha20-Poly1305 encryption",
    "0.5.1": "More reliable approach to get commit sha into version.py",
    "0.5.2": "Added postquantum resistant encryption via a hypbrid approach",
    "0.5.3": "Security release with additional buffer overflow protection and better secure memory handling",
    "0.6.0rc1": "Breaking release for postquantum colud not be made non-breaking finally. This release is considered feature complete",
    "0.7.0rc1": "Breaking release for keystore feature of PQC keys. This is the last feature added to the release candidate",
    "0.7.1": "Breaking release for keystore feature of PQC keys. This is the last feature added to the release candidate. Passing all tests and updated docs",
    "0.7.2": "Added new metadata structure in a backward-compatible way. Passing all tests and updated docs",
    "0.8.1": "Added new metadata structure in a backward-compatible way. Now allows user defined data encryption when using PQC. Passing all tests and updates docs"
}

# Check for updates
def get_latest_version():
    """Return the latest version number."""
    return __version__

def get_version_info():
    """Return version information as a dictionary."""
    return {
        "version": __version__,
        "git_commit": __git_commit__,
        "author": __author__,
        "license": __license__,
        "copyright": __copyright__,
        "history": VERSION_HISTORY
    }

def print_version_info():
    """Print version information to the console."""
    print(f"Secure File Encryption Tool v{__version__}")
    print(f"Git commit: {__git_commit__}")
    print(f"Author: {__author__}")
    print(f"License: {__license__}")
    print(f"{__copyright__}")
    print("\nVersion History:")
    for version, description in VERSION_HISTORY.items():
        print(f"  {version}: {description}")
        
if __name__ == "__main__":
    print_version_info()
