from __future__ import annotations

import argparse
import re
import subprocess
import tempfile
import textwrap
from pathlib import Path
from typing import Union
import io
import contextlib
import sys


import docutils.core
from docutils.parsers.rst import directives
from jupyter_sphinx import JupyterCell, JupyterCellNode

directives.register_directive("jupyter-execute", JupyterCell)
ROOT = Path(__file__).parent.parent
StrPath = Union[str, Path]
SKIPPED_FILES = {"index", "inference_on_RoC"}


def run(cmd: str, hide_output: bool):
    res = subprocess.run(cmd, shell=True, check=True, text=True, capture_output=True)
    if not hide_output:
        print(res.stdout)
        print(res.stderr, file=sys.stderr)


def format_file(path: StrPath, hide_output: bool) -> None:
    run(
        f"autoflake -i --remove-all-unused-imports --remove-unused-variables {path}",
        hide_output,
    )
    run(f"isort {path}", hide_output)
    run(f"black {path}", hide_output)


def remove_include_directive(string: str) -> str:
    return re.sub(r".. include:: /defs.hrst", "", string)


def remove_empty_lines(string: str) -> str:
    return re.sub(r"^\n", "", string, flags=re.M)


def main(destination_file: StrPath, hide_output: bool = True):
    examples_dir = ROOT / "docs/source/examples"
    assert examples_dir.exists()
    destination_file = Path(destination_file)
    destination_file.unlink(missing_ok=True)
    with open(destination_file, "w") as f:
        f.write(f"# file autogenerated by {Path(__file__).relative_to(ROOT)}\n")

    if hide_output:
        stdout = io.StringIO()
        stderr = io.StringIO()
    else:
        stdout = sys.stdout
        stderr = sys.stderr

    for source in sorted(examples_dir.glob("*.rst")):
        # skip index.rst
        if source.stem in SKIPPED_FILES:
            continue

        with contextlib.redirect_stderr(stderr):
            with contextlib.redirect_stdout(stdout):
                with open(source) as f:
                    doctree = docutils.core.publish_doctree(
                        remove_include_directive(f.read())
                    )

        script = "\n".join(node.astext() for node in doctree.findall(JupyterCellNode))
        script = remove_empty_lines(script)
        script += "\n"
        # # disable plotting
        script = (
            "import matplotlib\n# Suppress plot showing\nmatplotlib.use('Agg')\n"
            + script
        )
        with tempfile.NamedTemporaryFile(mode="w+", suffix=".py") as temp:
            if not hide_output:
                print("File before formatting\n" + "=" * 15)
                print(script)
            temp.write(script)
            format_file(temp.name, hide_output)
            temp.seek(0)
            script = temp.read()
        script = textwrap.indent(script, prefix=" " * 4)
        script = f"def ex_{source.stem}():\n" + script

        with open(destination_file, "a") as f:
            f.write(script)

        format_file(destination_file, hide_output)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="""
        Parse all the jupyter execute blocks from all rst files in docs/source/examples
        and turn every rst file into a single function, to be used as a benchmark in the test suite.

        Requires isort, autoflake and black for formatting the code blocks.
        """
    )
    parser.add_argument(
        "-d",
        nargs=1,
        default=ROOT / "tests/testutils/example_benchmarks.py",
        type=Path,
        help="Destination file for the benchmark module. Will be overwritten. Defaults to `tests/testutils/example_benchmarks.py`",
    )
    parser.add_argument(
        "-v",
        "--verbose",
        action="store_true",
        help="Show docutils output and error messages",
    )
    args = parser.parse_args()
    main(args.d, hide_output=not args.verbose)
