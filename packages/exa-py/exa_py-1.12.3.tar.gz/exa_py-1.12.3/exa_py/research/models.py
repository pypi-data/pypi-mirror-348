from __future__ import annotations

import json
from dataclasses import dataclass
from typing import Any, Dict, List, Optional

# Local import placed inside TYPE_CHECKING block to avoid runtime cycles.
from typing import TYPE_CHECKING

if TYPE_CHECKING:  # pragma: no cover – for static analysers only
    from ..api import _Result  # noqa: F401


@dataclass
class ResearchTaskResponse:
    """Structured response returned from the /research/tasks endpoint.

    Attributes
    ----------
    id:
        Unique identifier for the research task.
    status:
        Current task status
    output:
        JSON-serialisable answer generated by Exa (may be ``None`` until the task
        completes).
    citations:
        Mapping from *root field* in the output schema to the list of search
        results that were used to generate that part of the answer.
    """

    id: str
    status: str
    output: Optional[Dict[str, Any]]
    citations: Dict[str, List["_Result"]]

    # ---------------------------------------------------------------------
    # Pretty representation helpers
    # ---------------------------------------------------------------------
    def __str__(self) -> str:  # pragma: no cover – convenience only
        output_repr = (
            json.dumps(self.output, indent=2, ensure_ascii=False)
            if self.output is not None
            else "None"
        )
        citations_str = "\n\n".join(str(src) for src in self.citations)
        return (
            f"ID: {self.id}\n"
            f"Status: {self.status}\n"
            f"Output: {output_repr}\n\n"
            f"Citations:\n{citations_str}"
        )


__all__ = [
    "ResearchTaskResponse",
]
