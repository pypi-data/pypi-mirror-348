```diff
--- test_files/211-original.txt	2025-03-07 19:06:34
+++ test_files/211-modified.txt	2025-03-07 19:06:34
@@ -4,7 +4,7 @@
 
 from pydantic import BaseModel, Field
 
-from composio.tools.local.base import Action
+from composio.tools.base.local import LocalAction
 
 
 class CodeFormatRequest(BaseModel):
@@ -32,7 +32,7 @@
     )
 
 
-class FormatAndLintCodebase(Action[CodeFormatRequest, CodeFormatResponse]):
+class FormatAndLintCodebase(LocalAction[CodeFormatRequest, CodeFormatResponse]):
     """
     Performs code formatting and linting using ruff, addressing style issues and checking for errors.
 
@@ -47,45 +47,35 @@
     This action provides a comprehensive tool for code quality improvement and standardization.
     """
 
-    _display_name = "Format and Lint Codebase"
+    display_name = "Format and Lint Codebase"
     _request_schema: Type[CodeFormatRequest] = CodeFormatRequest
     _response_schema: Type[CodeFormatResponse] = CodeFormatResponse
     _tags = ["formatting"]
     _tool_name = "codeformat"
 
-    def execute(
-        self, request: CodeFormatRequest, authorisation_data: dict = {}
-    ) -> CodeFormatResponse:
-        try:
-            path = Path(request.path)
-            results = []
+    def execute(self, request: CodeFormatRequest, metadata: dict) -> CodeFormatResponse:
+        results = []
+        path = Path(request.path)
+        if not path.exists():
+            return CodeFormatResponse(
+                results=[],
+                error=f"The specified path '{request.path}' does not exist or is not accessible.",
+            )
 
-            if not path.exists():
-                return CodeFormatResponse(
-                    results=[],
-                    error=f"The specified path '{request.path}' does not exist or is not accessible.",
+        files_to_process = [path] if path.is_file() else list(path.rglob("*.py"))
+        for file in files_to_process:
+            format_changes = self._run_ruff_format(file)
+            errors = self._run_ruff_check(file)
+            results.append(
+                FormatResult(
+                    file_path=str(file),
+                    format_changes=format_changes,
+                    errors=errors,
                 )
-
-            files_to_process = [path] if path.is_file() else list(path.rglob("*.py"))
-
-            for file in files_to_process:
-                format_changes = self._run_ruff_format(file)
-                errors = self._run_ruff_check(file)
-                results.append(
-                    FormatResult(
-                        file_path=str(file),
-                        format_changes=format_changes,
-                        errors=errors,
-                    )
-                )
-
-            return CodeFormatResponse(results=results)
-        except Exception as e:
-            error_message = (
-                f"An error occurred during the formatting and linting process: {str(e)}"
             )
-            return CodeFormatResponse(results=[], error=error_message)
 
+        return CodeFormatResponse(results=results)
+
     def _run_ruff_format(self, file_path: Path) -> List[str]:
         return self._run_ruff_command(file_path, "format")
 
```
