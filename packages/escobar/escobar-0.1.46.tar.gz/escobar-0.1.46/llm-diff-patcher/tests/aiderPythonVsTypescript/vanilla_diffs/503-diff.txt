```diff
--- test_files/503-original.txt	2025-03-07 19:07:04
+++ test_files/503-modified.txt	2025-03-07 19:07:04
@@ -1,437 +1,1357 @@
 // This file is auto-generated by @hey-api/openapi-ts
 
-import type { CancelablePromise } from './core/CancelablePromise';
-import { OpenAPI } from './core/OpenAPI';
-import { request as __request } from './core/request';
-import type { ListAllAppsResponse, ListAllConnectionsData, ListAllConnectionsResponse, CreateConnectionData, CreateConnectionResponse, GetConnectedAccountData, GetConnectedAccountResponse, DeleteConnectionData, DeleteConnectionResponse, GetIntegrationData, GetIntegrationResponse, UpdateIntegrationData, UpdateIntegrationResponse, ListAllIntegrationsData, ListAllIntegrationsResponse, CreateIntegrationData, CreateIntegrationResponse, GetActionData, GetActionResponse, GetListActionsResponse, ExecuteActionData, ExecuteActionResponse, ListTriggersData, ListTriggersResponse, ListActiveTriggersData, ListActiveTriggersResponse, GetActiveTriggerData, GetActiveTriggerResponse, PatchUpdateActiveTriggerStatusData, PatchUpdateActiveTriggerStatusResponse, GetAppData, GetAppResponse, GetListActionsData, SetupTriggerData, SetupTriggerResponse } from './types.gen';
+import {
+  createClient,
+  createConfig,
+  type Options,
+} from "@hey-api/client-axios";
+import type {
+  ActionsControllerV2ListUserFilesError,
+  ActionsControllerV2ListUserFilesResponse,
+  AddProjectData,
+  AddProjectError,
+  AddProjectResponse,
+  AdvancedUseCaseSearchData,
+  AdvancedUseCaseSearchError,
+  AdvancedUseCaseSearchResponse2,
+  CreateConnectorData,
+  CreateConnectorError,
+  CreateConnectorResponse,
+  CreateConnectorV2Data,
+  CreateConnectorV2Error,
+  CreateConnectorV2Response,
+  CreateFileUploadUrlData,
+  CreateFileUploadUrlError,
+  CreateFileUploadUrlResponse,
+  CreateProjectData,
+  CreateProjectError,
+  CreateProjectResponse,
+  DeleteApiKeyData,
+  DeleteApiKeyError,
+  DeleteApiKeyResponse,
+  DeleteConnectionData,
+  DeleteConnectionError,
+  DeleteConnectionResponse,
+  DeleteConnectorData,
+  DeleteConnectorError,
+  DeleteConnectorResponse,
+  DeleteProjectData,
+  DeleteProjectError,
+  DeleteProjectResponse,
+  DeleteTriggerData,
+  DeleteTriggerError,
+  DeleteTriggerResponse,
+  DisableConnectionData,
+  DisableConnectionError,
+  DisableConnectionResponse,
+  DisableTriggerData,
+  DisableTriggerError,
+  DisableTriggerResponse,
+  EnableConnectionData,
+  EnableConnectionError,
+  EnableConnectionResponse,
+  EnableTriggerData,
+  EnableTriggerError,
+  EnableTriggerResponse,
+  ExecuteActionV2Data,
+  ExecuteActionV2Error,
+  ExecuteActionV2Response,
+  ExecuteWithHttpClientData,
+  ExecuteWithHttpClientError,
+  ExecuteWithHttpClientResponse,
+  GenerateApiKeyData,
+  GenerateApiKeyError,
+  GenerateApiKeyResponse,
+  GenerateCliSessionError,
+  GenerateCliSessionResponse,
+  GetActionInputsV2Data,
+  GetActionInputsV2Error,
+  GetActionInputsV2Response,
+  GetActionV2Data,
+  GetActionV2Error,
+  GetActionV2Response,
+  GetActiveTriggersData,
+  GetActiveTriggersError,
+  GetActiveTriggersResponse,
+  GetAppData,
+  GetAppError,
+  GetAppResponse,
+  GetAppsData,
+  GetAppsError,
+  GetAppsResponse,
+  GetCliCodeData,
+  GetCliCodeError,
+  GetCliCodeResponse,
+  GetConnectionData,
+  GetConnectionError,
+  GetConnectionInfoData,
+  GetConnectionInfoError,
+  GetConnectionInfoResponse,
+  GetConnectionResponse,
+  GetConnectorInfoData,
+  GetConnectorInfoError,
+  GetConnectorInfoResponse,
+  GetLogsData,
+  GetLogsError,
+  GetLogsResponse,
+  GetOrCreateConnectorData,
+  GetOrCreateConnectorError,
+  GetOrCreateConnectorResponse,
+  GetOrgApiKeyError,
+  GetOrgApiKeyResponse,
+  GetProjectData,
+  GetProjectError,
+  GetProjectResponse,
+  GetProjectsError,
+  GetProjectsResponse,
+  GetTriggerInfoV2Data,
+  GetTriggerInfoV2Error,
+  GetTriggerInfoV2Response,
+  GetTriggerLogsData,
+  GetTriggerLogsError,
+  GetTriggerLogsResponse,
+  GetUserInfoError,
+  GetUserInfoResponse,
+  GetWebhookUrlError,
+  GetWebhookUrlResponse,
+  InitiateConnectionData,
+  InitiateConnectionError,
+  InitiateConnectionResponse2,
+  InitiateConnectionV2Data,
+  InitiateConnectionV2Error,
+  InitiateConnectionV2Response,
+  InviteMemberData,
+  InviteMemberError,
+  InviteMemberResponse,
+  ListActionEnums1Error,
+  ListActionEnums1Response,
+  ListActionEnumsError,
+  ListActionEnumsResponse,
+  ListActionTagsData,
+  ListActionTagsError,
+  ListActionTagsResponse,
+  ListActionsMinimalV2Data,
+  ListActionsMinimalV2Error,
+  ListActionsMinimalV2Response,
+  ListActionsV2Data,
+  ListActionsV2Error,
+  ListActionsV2Response,
+  ListAllConnectorsError,
+  ListAllConnectorsResponse,
+  ListApiKeysError,
+  ListApiKeysResponse,
+  ListAppCategoriesError,
+  ListAppCategoriesResponse,
+  ListAppEnumsError,
+  ListAppEnumsResponse,
+  ListConnectionsData,
+  ListConnectionsError,
+  ListConnectionsResponse,
+  ListMembersError,
+  ListMembersResponse,
+  ListTriggerEnumsError,
+  ListTriggerEnumsResponse,
+  ListTriggersData,
+  ListTriggersError,
+  ListTriggersResponse,
+  ModifyConnectorData,
+  ModifyConnectorError,
+  ModifyConnectorResponse,
+  PostLogsData,
+  PostLogsError,
+  PostLogsResponse,
+  RegenerateOrgApiKeyError,
+  RegenerateOrgApiKeyResponse,
+  RegenerateProjectApiKeyData,
+  RegenerateProjectApiKeyError,
+  RegenerateProjectApiKeyResponse,
+  ReinitiateConnectionData,
+  ReinitiateConnectionError,
+  ReinitiateConnectionResponse,
+  RenameProjectData,
+  RenameProjectError,
+  RenameProjectResponse,
+  SearchConnectorData,
+  SearchConnectorError,
+  SearchConnectorResponse,
+  SetCallbackUrlData,
+  SetCallbackUrlError,
+  SetCallbackUrlResponse,
+  SwitchTriggerInstanceStatusData,
+  SwitchTriggerInstanceStatusError,
+  SwitchTriggerInstanceStatusResponse,
+  UpdateConnectionDataData,
+  UpdateConnectionDataError,
+  UpdateConnectionDataResponse,
+  UpdateNewWebhookData,
+  UpdateNewWebhookError,
+  UpdateNewWebhookResponse,
+  VerifyCliCodeData,
+  VerifyCliCodeError,
+  VerifyCliCodeResponse,
+} from "./types.gen";
 
-/**
- * List All Apps
- * Retrieves a list of all available apps in the Composio platform.
- *
- * This endpoint allows clients to explore and discover the supported apps. It returns an array of app objects, each containing essential details such as the app's key, name, description, logo, categories, and unique identifier.
- *
- * Use this endpoint to build a catalog of available apps and provide your users with an overview of the apps they can integrate with.
- * @param config The OpenAPI configuration.
- * @returns unknown OK
- * @throws ApiError
- */
-export const listAllApps = (config: typeof OpenAPI): CancelablePromise<ListAllAppsResponse> => { return __request(config, {
-    method: 'GET',
-    url: '/v1/apps'
-}); };
+export const client = createClient(createConfig());
 
-/**
- * Get a Specific App
- * Retrieves details of a specific app in the Composio platform.
- * @param data The data for the request.
- * @param data.appKey The unique identifier of the app.
- * @param config The OpenAPI configuration.
- * @returns unknown OK
- * @throws ApiError
- */
-export const getApp = (data: GetAppData, config: typeof OpenAPI): CancelablePromise<GetAppResponse> => { return __request(config, {
-    method: 'GET',
-    url: '/v1/apps/{appKey}',
-    path: {
-        appKey: data.appKey
-    }
-}); };
+export class ClientService {
+  /**
+   * Get user info
+   * Get client info
+   */
+  public static getUserInfo<ThrowOnError extends boolean = false>(
+    options?: Options<unknown, ThrowOnError>
+  ) {
+    return (options?.client ?? client).get<
+      GetUserInfoResponse,
+      GetUserInfoError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/client/auth/client_info",
+    });
+  }
 
-/**
- * List All Connected Accounts
- * Retrieves a list of all connected accounts in the Composio platform.
- *
- * It supports pagination and filtering based on various parameters such as app ID, integration ID, and connected  ID. The response includes an array of connection objects, each containing details like the connector ID, connection parameters, status, creation/update timestamps, and associated app information.
- *
- * Use this endpoint to manage and monitor all active connections.
- * @param data The data for the request.
- * @param data.page Page number to fetch
- * @param data.pageSize Page size to assume
- * @param data.integrationId Filter by using specific Integration
- * @param config The OpenAPI configuration.
- * @returns unknown OK
- * @throws ApiError
- */
-export const listAllConnections = (data: ListAllConnectionsData = {}, config: typeof OpenAPI): CancelablePromise<ListAllConnectionsResponse> => { return __request(config, {
-    method: 'GET',
-    url: '/v1/connectedAccounts',
-    query: {
-        user_uuid: data.user_uuid,
-        appNames: data.appNames?.join(','),
-        page: data.page,
-        pageSize: data.pageSize,
-        integrationId: data.integrationId
-    }
-}); };
+  /**
+   * Add new project
+   * Add a new project to the client's organization
+   */
+  public static addProject<ThrowOnError extends boolean = false>(
+    options?: Options<AddProjectData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).post<
+      AddProjectResponse,
+      AddProjectError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/client/auth/project/add",
+    });
+  }
 
-/**
- * Connect an Account
- * Connect an account
- *
- * This endpoint allows you to connect an external app account with Composio. It requires the integration ID in the request body and returns the connection status, connection ID, and a redirect URL (if applicable) for completing the connection flow.
- *
- * Use this endpoint to initiate the process of connecting an external app for your end user.
- * @param data The data for the request.
- * @param data.requestBody
- * @param config The OpenAPI configuration.
- * @returns unknown OK
- * @throws ApiError
- */
-export const createConnection = (data: CreateConnectionData = {}, config: typeof OpenAPI): CancelablePromise<CreateConnectionResponse> => { return __request(config, {
-    method: 'POST',
-    url: '/v1/connectedAccounts',
-    body: data.requestBody,
-    mediaType: 'application/json',
-    errors: {
-        404: `{
-    "message": "Connector not found"
-}`
-    }
-}); };
+  /**
+   * Delete project
+   * Delete a project from the client's organization
+   */
+  public static deleteProject<ThrowOnError extends boolean = false>(
+    options: Options<DeleteProjectData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).delete<
+      DeleteProjectResponse,
+      DeleteProjectError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/client/auth/project/delete/{projectId}",
+    });
+  }
 
-/**
- * Get a Connected Account
- * Retrieves details of a specific account connected to the Composio platform by providing its connected account ID.
- * The response includes the integration ID, connection parameters (such as scope, base URL, client ID, token type, access token, etc.), connection ID, status, and creation/update timestamps.
- * @param data The data for the request.
- * @param data.connectedAccountId The unique identifier of the connection.
- * @param config The OpenAPI configuration.
- * @returns unknown OK
- * @throws ApiError
- */
-export const getConnectedAccount = (data: GetConnectedAccountData, config: typeof OpenAPI): CancelablePromise<GetConnectedAccountResponse> => { return __request(config, {
-    method: 'GET',
-    url: '/v1/connectedAccounts/{connectedAccountId}',
-    path: {
-        connectedAccountId: data.connectedAccountId
-    },
-    errors: {
-        404: `{
-    "message": "Connection not found or already deleted"
-}`
-    }
-}); };
+  /**
+   * Get projects
+   */
+  public static getProjects<ThrowOnError extends boolean = false>(
+    options?: Options<unknown, ThrowOnError>
+  ) {
+    return (options?.client ?? client).get<
+      GetProjectsResponse,
+      GetProjectsError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/client/auth/projects",
+    });
+  }
 
-/**
- * Delete a Connected Account
- * Remove a specific account from the Composio platform by providing its connection ID. Upon successful deletion, the response includes a status indicating the success of the operation.
- * Use this endpoint to clean up unwanted connections for your end user and manage the connection lifecycle.
- * @param data The data for the request.
- * @param data.connectedAccountId The unique identifier of the connection.
- * @param config The OpenAPI configuration.
- * @returns unknown {
- * "message": "Connection not found or already deleted"
- * }
- * @throws ApiError
- */
-export const deleteConnection = (data: DeleteConnectionData, config: typeof OpenAPI): CancelablePromise<DeleteConnectionResponse> => { return __request(config, {
-    method: 'DELETE',
-    url: '/v1/connectedAccounts/{connectedAccountId}',
-    path: {
-        connectedAccountId: data.connectedAccountId
-    },
-    errors: {
-        404: 'Not Found'
-    }
-}); };
+  /**
+   * Get org api key
+   */
+  public static getOrgApiKey<ThrowOnError extends boolean = false>(
+    options?: Options<unknown, ThrowOnError>
+  ) {
+    return (options?.client ?? client).get<
+      GetOrgApiKeyResponse,
+      GetOrgApiKeyError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/client/auth/org/api_key",
+    });
+  }
 
-/**
- * Get an Integration
- * Retrieves details of a specific integration in the Composio platform by providing its unique identifier. The response includes the connector's name, authentication scheme, authentication configuration, creation and update timestamps, enabled status, associated app information, expected input fields, and logo.
- *
- * Use this endpoint to obtain detailed information about a integration and its configuration. It can be shown to end user for selection.
- *
- * You will also get parameters that are required to be captured from end user to connect an account using this connector.
- * ex. API Key or subdomain URL.
- *
- * If the end-user selects this flow, collect the parameters and connect an account using it.
- * @param data The data for the request.
- * @param data.integrationId The unique identifier of the integration.
- * @param config The OpenAPI configuration.
- * @returns unknown OK
- * @throws ApiError
- */
-export const getIntegration = (data: GetIntegrationData, config: typeof OpenAPI): CancelablePromise<GetIntegrationResponse> => { return __request(config, {
-    method: 'GET',
-    url: '/v1/integrations/{integrationId}',
-    path: {
-        integrationId: data.integrationId
-    },
-    errors: {
-        404: 'Not Found'
-    }
-}); };
+  /**
+   * Regenerate org api key
+   */
+  public static regenerateOrgApiKey<ThrowOnError extends boolean = false>(
+    options?: Options<unknown, ThrowOnError>
+  ) {
+    return (options?.client ?? client).post<
+      RegenerateOrgApiKeyResponse,
+      RegenerateOrgApiKeyError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/client/auth/org/api_key/regenerate",
+    });
+  }
+}
 
-/**
- * Update an Integration
- * Updates the settings of a specific integration in the Composio platform.
- *
- * This endpoint allows you to modify the settings of a integration, such as enabling or disabling it, by providing its unique identifier. The request body should include the updated settings, and the response indicates the success of the update operation.
- *
- * Use this endpoint to manage the configuration and behavior of integrations in the Composio platform.
- * @param data The data for the request.
- * @param data.integrationId The unique identifier of the integration.
- * @param data.requestBody
- * @param config The OpenAPI configuration.
- * @returns unknown OK
- * @throws ApiError
- */
-export const updateIntegration = (data: UpdateIntegrationData, config: typeof OpenAPI): CancelablePromise<UpdateIntegrationResponse> => { return __request(config, {
-    method: 'PATCH',
-    url: '/v1/integrations/{integrationId}',
-    path: {
-        integrationId: data.integrationId
-    },
-    body: data.requestBody,
-    mediaType: 'application/json',
-    errors: {
-        404: 'Not Found'
-    }
-}); };
+export class TeamService {
+  /**
+   * Invite member
+   */
+  public static inviteMember<ThrowOnError extends boolean = false>(
+    options?: Options<InviteMemberData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).post<
+      InviteMemberResponse,
+      InviteMemberError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/team/invite",
+    });
+  }
 
-/**
- * List All Integrations
- * Retrieves a list of all integrations in the Composio platform. It supports pagination to handle large numbers of connectors. The response includes an array of connector objects, each containing information such as the connector's ID, name, authentication scheme, creation/update timestamps, enabled status, associated app information, and logo.
- *
- * This are the integration you can showcase to end user, and let them select which integration they want to connect an account with.
- * @param data The data for the request.
- * @param data.page Page number to fetch
- * @param data.pageSize Page Size to assume
- * @param config The OpenAPI configuration.
- * @returns unknown OK
- * @throws ApiError
- */
-export const listAllIntegrations = (data: ListAllIntegrationsData = {}, config: typeof OpenAPI): CancelablePromise<ListAllIntegrationsResponse> => { return __request(config, {
-    method: 'GET',
-    url: '/v1/integrations',
-    query: {
-        page: data.page,
-        pageSize: data.pageSize
-    }
-}); };
+  /**
+   * List members
+   */
+  public static listMembers<ThrowOnError extends boolean = false>(
+    options?: Options<unknown, ThrowOnError>
+  ) {
+    return (options?.client ?? client).get<
+      ListMembersResponse,
+      ListMembersError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/team/members",
+    });
+  }
+}
 
-/**
- * Create a new integration
- * This endpoint allows you to add a new integration by providing the necessary details such as the integration name, authentication scheme, associated app ID, and authentication configuration. Upon successful creation, the response includes the newly created connector object.
- * @param data The data for the request.
- * @param data.requestBody
- * @param config The OpenAPI configuration.
- * @returns unknown OK
- * @throws ApiError
- */
-export const createIntegration = (data: CreateIntegrationData = {}, config: typeof OpenAPI): CancelablePromise<CreateIntegrationResponse> => { return __request(config, {
-    method: 'POST',
-    url: '/v1/integrations',
-    body: data.requestBody,
-    mediaType: 'application/json',
-    errors: {
-        400: 'Bad Request'
-    }
-}); };
+export class ApiKeysService {
+  /**
+   * Generate api key
+   */
+  public static generateApiKey<ThrowOnError extends boolean = false>(
+    options: Options<GenerateApiKeyData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).post<
+      GenerateApiKeyResponse,
+      GenerateApiKeyError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/api_keys",
+    });
+  }
 
-/**
- * Get a Specific Action
- * Retrieves details of a specific action in the Composio platform.
- *
- * This endpoint allows you to fetch comprehensive information about a particular action by providing its unique identifier.
- * The response includes the action's name, display name, description, input parameters, expected response, associated app information, and enabled status.
- * Use this endpoint to obtain detailed information about an action, including its configuration and usage requirements.
- * You can then pass this to function calling or use LLM to fill in the parameters.
- * @param data The data for the request.
- * @param data.actionName The unique identifier of the action.
- * @param config The OpenAPI configuration.
- * @returns unknown OK
- * @throws ApiError
- */
-export const getAction = (data: GetActionData, config: typeof OpenAPI): CancelablePromise<GetActionResponse> => { return __request(config, {
-    method: 'GET',
-    url: '/v1/actions/{actionName}',
-    path: {
-        actionName: data.actionName
-    },
-    errors: {
-        404: 'Not Found'
-    }
-}); };
+  /**
+   * List api keys
+   */
+  public static listApiKeys<ThrowOnError extends boolean = false>(
+    options?: Options<unknown, ThrowOnError>
+  ) {
+    return (options?.client ?? client).get<
+      ListApiKeysResponse,
+      ListApiKeysError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/api_keys",
+    });
+  }
 
-/**
- * Get List of Actions
- * Retrieves a list of all actions in the Composio platform.
- *
- * This endpoint allows you to fetch a list of all the available actions. It supports pagination to handle large numbers of actions. The response includes an array of action objects, each containing information such as the action's name, display name, description, input parameters, expected response, associated app information, and enabled status.
- *
- * Use this endpoint to explore and discover the actions supported by the Composio platform and showcase them to end user.
- * @param data The data for the request.
- * @param data.appNames Name of the app like "github", "linear"
- * @param data.useCase Natural language usecase
- * @param data.showEnabledOnly Show actions enabled for the API Key
- * @param data.limit Limit of apis
- * @param data.requestBody
- * @param config The OpenAPI configuration.
- * @returns unknown OK
- * @throws ApiError
- */
-export const getListActions = (data: GetListActionsData = {}, config: typeof OpenAPI): CancelablePromise<GetListActionsResponse> => { 
-    return __request(config, {
-    method: 'GET',
-    url: '/v2/actions',
-    query: {
-        apps: data.apps,
-        actions: data.actions,
-        tags: data.tags,
-        useCase: data.useCase,
-        showEnabledOnly: data.showEnabledOnly,
-        usecaseLimit: data.usecaseLimit,
-        filterImportantActions: data.filterImportantActions
-    }
-}); };
+  /**
+   * Delete api key
+   */
+  public static deleteApiKey<ThrowOnError extends boolean = false>(
+    options: Options<DeleteApiKeyData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).delete<
+      DeleteApiKeyResponse,
+      DeleteApiKeyError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/api_keys/{id}",
+    });
+  }
+}
 
-/**
- * Execute action
- * Executes a specific action in the Composio platform.
- *
- * This endpoint allows you to trigger the execution of an action by providing its name and the necessary input parameters. The request includes the connected account ID to identify the app connection to use for the action, and the input parameters required by the action. The response provides details about the execution status and the response data returned by the action.
- *
- * Use this endpoint to execute actions available in the Composio platform for your end customer.
- *
- * Executed will indicate whether the action was successfully executed.
- * @param data The data for the request.
- * @param data.actionName The name of the action to execute.
- * @param data.requestBody
- * @param config The OpenAPI configuration.
- * @returns unknown OK
- * @throws ApiError
- */
-export const executeAction = (data: ExecuteActionData, config: typeof OpenAPI): CancelablePromise<ExecuteActionResponse> => { return __request(config, {
-    method: 'POST',
-    url: '/v1/actions/{actionName}/execute',
-    path: {
-        actionName: data.actionName
-    },
-    body: data.requestBody,
-    mediaType: 'application/json',
-    errors: {
-        404: 'Not Found'
-    }
-}); };
+export class AppsService {
+  /**
+   * List app categories
+   * List of available app categories, can be used to filter apps.
+   */
+  public static listAppCategories<ThrowOnError extends boolean = false>(
+    options?: Options<unknown, ThrowOnError>
+  ) {
+    return (options?.client ?? client).get<
+      ListAppCategoriesResponse,
+      ListAppCategoriesError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/apps/list/categories",
+    });
+  }
 
-/**
- * Get List of Triggers
- * Retrieves a list of all triggers in the Composio platform.
- *
- * This endpoint allows you to fetch a list of all the available triggers. It supports pagination to handle large numbers of triggers. The response includes an array of trigger objects, each containing information such as the trigger's name, description, input parameters, expected response, associated app information, and enabled status.
- *
- * Use this endpoint to explore and discover the triggers supported by the Composio platform and showcase them to end user.
- * @param data The data for the request.
- * @param data.appNames Name of the apps like "github", "linear" seperated by a comma
- * @param data.showEnabledOnly Show triggers enabled for the API Key
- * @param data.connectedAccountIds Filter by Aonnected Account ids
- * @param config The OpenAPI configuration.
- * @returns unknown OK
- * @throws ApiError
- */
-export const listTriggers = (data: ListTriggersData = {}, config: typeof OpenAPI): CancelablePromise<ListTriggersResponse> => { return __request(config, {
-    method: 'GET',
-    url: '/v1/triggers',
-    query: {
-        appNames: data.appNames,
-        showEnabledOnly: data.showEnabledOnly,
-        connectedAccountIds: data.connectedAccountIds
-    }
-}); };
+  /**
+   * List app enums
+   * List app enums
+   */
+  public static listAppEnums<ThrowOnError extends boolean = false>(
+    options?: Options<unknown, ThrowOnError>
+  ) {
+    return (options?.client ?? client).get<
+      ListAppEnumsResponse,
+      ListAppEnumsError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/apps/list/enums",
+    });
+  }
 
-/**
- * Setup trigger for a connected account
- * This endpoint allows you to enable a trigger for a specific connected account by providing the connected account ID and the trigger name.
- * 
- * @param data The data for the request.
- * @param data.connectedAccountId The ID of the connected account.
- * @param data.triggerName The name of the trigger to enable.
- * @param data.requestBody The request body containing additional configuration for the trigger.
- * @param config The OpenAPI configuration.
- * @returns unknown OK
- * @throws ApiError
- */
-export const setupTrigger = (data: SetupTriggerData, config: typeof OpenAPI): CancelablePromise<SetupTriggerResponse> => { return __request(config, {
-    method: 'POST',
-    url: '/v1/triggers/enable/{connectedAccountId}/{triggerName}',
-    path: {
-        connectedAccountId: data.connectedAccountId,
-        triggerName: data.triggerName
-    },
-    body: data.requestBody,
-    mediaType: 'application/json',
-    errors: {
-        404: 'Not Found',
-        500: 'Internal server error'
-    }
-}); };
+  /**
+   * List apps
+   * List all apps based on the given filters, if any. This will return all available apps if no filters are provided.
+   */
+  public static getApps<ThrowOnError extends boolean = false>(
+    options?: Options<GetAppsData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).get<
+      GetAppsResponse,
+      GetAppsError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/apps",
+    });
+  }
 
-/**
- * Get List of Active Triggers
- * @param data The data for the request.
- * @param data.connectedAccountIds Filter by Connected Account ids
- * @param data.integrationIds Filter by Integration ids
- * @param data.triggerIds Filter by Trigger ids
- * @param data.triggerNames Filter by Trigger names
- * @param config The OpenAPI configuration.
- * @returns unknown A list of active triggers
- * @throws ApiError
- */
-export const listActiveTriggers = (data: ListActiveTriggersData = {}, config: typeof OpenAPI): CancelablePromise<ListActiveTriggersResponse> => { return __request(config, {
-    method: 'GET',
-    url: '/v1/triggers/active_triggers',
-    query: {
-        connectedAccountIds: data.connectedAccountIds,
-        integrationIds: data.integrationIds,
-        triggerIds: data.triggerIds,
-        triggerNames: data.triggerNames
-    }
-}); };
+  /**
+   * Get single app
+   * Get app details
+   */
+  public static getApp<ThrowOnError extends boolean = false>(
+    options: Options<GetAppData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).get<
+      GetAppResponse,
+      GetAppError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/apps/{appName}",
+    });
+  }
+}
 
-/**
- * Get Active Trigger
- * Retrieves details of a specific active trigger in the Composio platform by providing its trigger ID.
- * @param data The data for the request.
- * @param data.triggerId The ID of the trigger to retrieve.
- * @param config The OpenAPI configuration.
- * @returns unknown A successful response containing the details of the active trigger.
- * @throws ApiError
- */
-export const getActiveTrigger = (data: GetActiveTriggerData, config: typeof OpenAPI): CancelablePromise<GetActiveTriggerResponse> => { return __request(config, {
-    method: 'GET',
-    url: '/v1/triggers/get/{triggerId}',
-    path: {
-        triggerId: data.triggerId
-    },
-    errors: {
-        404: 'Trigger not found',
-        500: 'Internal server error'
-    }
-}); };
+export class IntegrationsService {
+  /**
+   * Create connector
+   * Create a new connector
+   */
+  public static createConnector<ThrowOnError extends boolean = false>(
+    options?: Options<CreateConnectorData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).post<
+      CreateConnectorResponse,
+      CreateConnectorError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/integrations",
+    });
+  }
 
+  /**
+   * List all connectors
+   * List all connectors
+   */
+  public static listAllConnectors<ThrowOnError extends boolean = false>(
+    options?: Options<unknown, ThrowOnError>
+  ) {
+    return (options?.client ?? client).get<
+      ListAllConnectorsResponse,
+      ListAllConnectorsError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/integrations",
+    });
+  }
 
-/**
- * Update active trigger status
- * Retrieves details of a specific active trigger in the Composio platform by providing its trigger ID.
- * @param data The data for the request.
- * @param data.triggerId The ID of the trigger to retrieve.
- * @param data.requestBody
- * @param config The OpenAPI configuration.
- * @returns unknown A successful response containing the details of the active trigger.
- * @throws ApiError
- */
-export const updateActiveTriggerStatus = (data: PatchUpdateActiveTriggerStatusData, config: typeof OpenAPI): CancelablePromise<PatchUpdateActiveTriggerStatusResponse> => { return __request(config, {
-    method: 'PATCH',
-    url: '/v1/triggers/instance/{triggerId}/status',
-    path: {
-        triggerId: data.triggerId
-    },
-    body: data.requestBody,
-    mediaType: 'application/json',
-    errors: {
-        404: 'Trigger not found',
-        500: 'Internal server error'
-    }
-}); };
\ No newline at end of file
+  /**
+   * Get connector info
+   * Get connector info
+   */
+  public static getConnectorInfo<ThrowOnError extends boolean = false>(
+    options: Options<GetConnectorInfoData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).get<
+      GetConnectorInfoResponse,
+      GetConnectorInfoError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/integrations/{integrationId}",
+    });
+  }
+
+  /**
+   * Modify connector
+   * Modify a connector
+   */
+  public static modifyConnector<ThrowOnError extends boolean = false>(
+    options: Options<ModifyConnectorData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).patch<
+      ModifyConnectorResponse,
+      ModifyConnectorError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/integrations/{integrationId}",
+    });
+  }
+
+  /**
+   * Delete connector
+   * Delete a connector
+   */
+  public static deleteConnector<ThrowOnError extends boolean = false>(
+    options: Options<DeleteConnectorData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).delete<
+      DeleteConnectorResponse,
+      DeleteConnectorError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/integrations/{integrationId}",
+    });
+  }
+}
+
+export class ActionsService {
+  /**
+   * List action enums
+   * List action enums
+   */
+  public static listActionEnums<ThrowOnError extends boolean = false>(
+    options?: Options<unknown, ThrowOnError>
+  ) {
+    return (options?.client ?? client).get<
+      ListActionEnumsResponse,
+      ListActionEnumsError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/actions/list/enums",
+    });
+  }
+
+  /**
+   * List action tags
+   * List all the action tags available in composio
+   */
+  public static listActionTags<ThrowOnError extends boolean = false>(
+    options?: Options<ListActionTagsData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).get<
+      ListActionTagsResponse,
+      ListActionTagsError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v2/actions/list/tags",
+    });
+  }
+
+  /**
+   * List action enums
+   * List action enums
+   */
+  public static listActionEnums1<ThrowOnError extends boolean = false>(
+    options?: Options<unknown, ThrowOnError>
+  ) {
+    return (options?.client ?? client).get<
+      ListActionEnums1Response,
+      ListActionEnums1Error,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v2/actions/list/enums",
+    });
+  }
+
+  /**
+   * List actions with complete details
+   * List and filter all the actions available in composio, with all the details needed for manual action execution or through function-calling.
+   */
+  public static listActionsV2<ThrowOnError extends boolean = false>(
+    options?: Options<ListActionsV2Data, ThrowOnError>
+  ) {
+    return (options?.client ?? client).get<
+      ListActionsV2Response,
+      ListActionsV2Error,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v2/actions",
+    });
+  }
+
+  /**
+   * List actions
+   * Retrieve a list of all actions based on query parameters.
+   */
+  public static listActionsMinimalV2<ThrowOnError extends boolean = false>(
+    options?: Options<ListActionsMinimalV2Data, ThrowOnError>
+  ) {
+    return (options?.client ?? client).get<
+      ListActionsMinimalV2Response,
+      ListActionsMinimalV2Error,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v2/actions/list/all",
+    });
+  }
+
+  /**
+   * Execute an action
+   * Execute an action. Support both connected account and no auth auth.
+   */
+  public static executeActionV2<ThrowOnError extends boolean = false>(
+    options: Options<ExecuteActionV2Data, ThrowOnError>
+  ) {
+    return (options?.client ?? client).post<
+      ExecuteActionV2Response,
+      ExecuteActionV2Error,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v2/actions/{actionId}/execute",
+    });
+  }
+
+  /**
+   * Get action inputs
+   * Get the inputs for an action with NLA
+   */
+  public static getActionInputsV2<ThrowOnError extends boolean = false>(
+    options: Options<GetActionInputsV2Data, ThrowOnError>
+  ) {
+    return (options?.client ?? client).post<
+      GetActionInputsV2Response,
+      GetActionInputsV2Error,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v2/actions/{actionId}/execute/get.inputs",
+    });
+  }
+
+  /**
+   * Get single action
+   * Get action details, including the input and response schema. This is very useful for setting upfunction/tool calling with composio actions.
+   */
+  public static getActionV2<ThrowOnError extends boolean = false>(
+    options: Options<GetActionV2Data, ThrowOnError>
+  ) {
+    return (options?.client ?? client).get<
+      GetActionV2Response,
+      GetActionV2Error,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v2/actions/{actionId}",
+    });
+  }
+
+  /**
+   * Execute with HTTP Client
+   * Use composio as a http client to make request to the connected account service on your behalf, without managing authentication on your side.
+   */
+  public static executeWithHttpClient<ThrowOnError extends boolean = false>(
+    options?: Options<ExecuteWithHttpClientData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).post<
+      ExecuteWithHttpClientResponse,
+      ExecuteWithHttpClientError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v2/actions/proxy",
+    });
+  }
+
+  /**
+   * Advanced use case search
+   * Perform use case search.
+   */
+  public static advancedUseCaseSearch<ThrowOnError extends boolean = false>(
+    options?: Options<AdvancedUseCaseSearchData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).get<
+      AdvancedUseCaseSearchResponse2,
+      AdvancedUseCaseSearchError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v2/actions/search/advanced",
+    });
+  }
+
+  /**
+   * List user files
+   */
+  public static v2ListUserFiles<ThrowOnError extends boolean = false>(
+    options?: Options<unknown, ThrowOnError>
+  ) {
+    return (options?.client ?? client).get<
+      ActionsControllerV2ListUserFilesResponse,
+      ActionsControllerV2ListUserFilesError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v2/actions/files/list",
+    });
+  }
+
+  /**
+   * Create file upload url
+   * Create file upload URL for action execution.
+   */
+  public static createFileUploadUrl<ThrowOnError extends boolean = false>(
+    options: Options<CreateFileUploadUrlData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).post<
+      CreateFileUploadUrlResponse,
+      CreateFileUploadUrlError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v2/actions/files/upload/{fileType}",
+    });
+  }
+}
+
+export class ConnectionsService {
+  /**
+   * List connections
+   * Get all connections in the current project.
+   */
+  public static listConnections<ThrowOnError extends boolean = false>(
+    options?: Options<ListConnectionsData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).get<
+      ListConnectionsResponse,
+      ListConnectionsError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/connectedAccounts",
+    });
+  }
+
+  /**
+   * Initiate connection
+   */
+  public static initiateConnection<ThrowOnError extends boolean = false>(
+    options?: Options<InitiateConnectionData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).post<
+      InitiateConnectionResponse2,
+      InitiateConnectionError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/connectedAccounts",
+    });
+  }
+
+  /**
+   * Update connection data
+   * Update connection data
+   */
+  public static updateConnectionData<ThrowOnError extends boolean = false>(
+    options: Options<UpdateConnectionDataData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).patch<
+      UpdateConnectionDataResponse,
+      UpdateConnectionDataError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/connectedAccounts/{connectedAccountId}/data",
+    });
+  }
+
+  /**
+   * Reinitiate connection
+   * Reinitiate an existing connection to get new credentials
+   */
+  public static reinitiateConnection<ThrowOnError extends boolean = false>(
+    options: Options<ReinitiateConnectionData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).post<
+      ReinitiateConnectionResponse,
+      ReinitiateConnectionError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/connectedAccounts/{connectedAccountId}/reinitiate",
+    });
+  }
+
+  /**
+   * Get single connection
+   */
+  public static getConnection<ThrowOnError extends boolean = false>(
+    options: Options<GetConnectionData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).get<
+      GetConnectionResponse,
+      GetConnectionError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/connectedAccounts/{connectedAccountId}",
+    });
+  }
+
+  /**
+   * Delete connection
+   * Delete a connection
+   */
+  public static deleteConnection<ThrowOnError extends boolean = false>(
+    options: Options<DeleteConnectionData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).delete<
+      DeleteConnectionResponse,
+      DeleteConnectionError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/connectedAccounts/{connectedAccountId}",
+    });
+  }
+
+  /**
+   * Get Auth credentials
+   * Get authentication crdentials for the connected account, i.e all the headers, query parameters, etc. that are required to make requests to the third-party service directly.
+   */
+  public static getConnectionInfo<ThrowOnError extends boolean = false>(
+    options: Options<GetConnectionInfoData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).get<
+      GetConnectionInfoResponse,
+      GetConnectionInfoError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/connectedAccounts/{connectedAccountId}/info",
+    });
+  }
+
+  /**
+   * Disable connection
+   * Disable a connection
+   */
+  public static disableConnection<ThrowOnError extends boolean = false>(
+    options: Options<DisableConnectionData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).post<
+      DisableConnectionResponse,
+      DisableConnectionError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/connectedAccounts/{connectedAccountId}/disable",
+    });
+  }
+
+  /**
+   * Enable connection
+   * Enable a connection
+   */
+  public static enableConnection<ThrowOnError extends boolean = false>(
+    options: Options<EnableConnectionData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).post<
+      EnableConnectionResponse,
+      EnableConnectionError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/connectedAccounts/{connectedAccountId}/enable",
+    });
+  }
+}
+
+export class TriggersService {
+  /**
+   * List triggers
+   * List triggers
+   */
+  public static listTriggers<ThrowOnError extends boolean = false>(
+    options?: Options<ListTriggersData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).get<
+      ListTriggersResponse,
+      ListTriggersError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/triggers",
+    });
+  }
+
+  /**
+   * List trigger enums
+   * List trigger enums
+   */
+  public static listTriggerEnums<ThrowOnError extends boolean = false>(
+    options?: Options<unknown, ThrowOnError>
+  ) {
+    return (options?.client ?? client).get<
+      ListTriggerEnumsResponse,
+      ListTriggerEnumsError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/triggers/list/enums",
+    });
+  }
+
+  /**
+   * Update new webhook
+   * Update isNewWebhook
+   */
+  public static updateNewWebhook<ThrowOnError extends boolean = false>(
+    options?: Options<UpdateNewWebhookData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).post<
+      UpdateNewWebhookResponse,
+      UpdateNewWebhookError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/triggers/update_webhook_format",
+    });
+  }
+
+  /**
+   * Enable trigger
+   * Enables a trigger for a connected account and specific trigger name.
+   */
+  public static enableTrigger<ThrowOnError extends boolean = false>(
+    options: Options<EnableTriggerData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).post<
+      EnableTriggerResponse,
+      EnableTriggerError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/triggers/enable/{connectedAccountId}/{triggerName}",
+    });
+  }
+
+  /**
+   * Get active triggers
+   * Lists active triggers based on query parameters.
+   */
+  public static getActiveTriggers<ThrowOnError extends boolean = false>(
+    options?: Options<GetActiveTriggersData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).get<
+      GetActiveTriggersResponse,
+      GetActiveTriggersError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/triggers/active_triggers",
+    });
+  }
+
+  /**
+   * Switch trigger instance status
+   * Switches the status of a trigger instance.
+   */
+  public static switchTriggerInstanceStatus<
+    ThrowOnError extends boolean = false,
+  >(options: Options<SwitchTriggerInstanceStatusData, ThrowOnError>) {
+    return (options?.client ?? client).patch<
+      SwitchTriggerInstanceStatusResponse,
+      SwitchTriggerInstanceStatusError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/triggers/instance/{triggerId}/status",
+    });
+  }
+
+  /**
+   * Disable trigger
+   * Disables a specified trigger instance.
+   */
+  public static disableTrigger<ThrowOnError extends boolean = false>(
+    options: Options<DisableTriggerData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).post<
+      DisableTriggerResponse,
+      DisableTriggerError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/triggers/disable/{triggerInstanceId}",
+    });
+  }
+
+  /**
+   * Delete trigger
+   * Deletes a specified trigger instance.
+   */
+  public static deleteTrigger<ThrowOnError extends boolean = false>(
+    options: Options<DeleteTriggerData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).delete<
+      DeleteTriggerResponse,
+      DeleteTriggerError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/triggers/instance/{triggerInstanceId}",
+    });
+  }
+
+  /**
+   * Set callback url
+   * Sets a universal callback URL for the client.
+   */
+  public static setCallbackUrl<ThrowOnError extends boolean = false>(
+    options?: Options<SetCallbackUrlData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).post<
+      SetCallbackUrlResponse,
+      SetCallbackUrlError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/triggers/set_callback_url",
+    });
+  }
+
+  /**
+   * Get webhook url
+   * Retrieves the universal callback URL set for the client.
+   */
+  public static getWebhookUrl<ThrowOnError extends boolean = false>(
+    options?: Options<unknown, ThrowOnError>
+  ) {
+    return (options?.client ?? client).get<
+      GetWebhookUrlResponse,
+      GetWebhookUrlError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/triggers/callback_url",
+    });
+  }
+
+  /**
+   * Get logs
+   * Fetches logs based on connection and integration details.
+   */
+  public static getTriggerLogs<ThrowOnError extends boolean = false>(
+    options?: Options<GetTriggerLogsData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).get<
+      GetTriggerLogsResponse,
+      GetTriggerLogsError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/triggers/logs",
+    });
+  }
+
+  /**
+   * Get trigger info
+   * Get Trigger Info
+   */
+  public static getTriggerInfoV2<ThrowOnError extends boolean = false>(
+    options: Options<GetTriggerInfoV2Data, ThrowOnError>
+  ) {
+    return (options?.client ?? client).get<
+      GetTriggerInfoV2Response,
+      GetTriggerInfoV2Error,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v2/triggers/{triggerName}",
+    });
+  }
+}
+
+export class CliService {
+  /**
+   * Handle cli code exchange
+   */
+  public static generateCliSession<ThrowOnError extends boolean = false>(
+    options?: Options<unknown, ThrowOnError>
+  ) {
+    return (options?.client ?? client).get<
+      GenerateCliSessionResponse,
+      GenerateCliSessionError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/cli/generate-cli-session",
+    });
+  }
+
+  /**
+   * Get cli code
+   */
+  public static getCliCode<ThrowOnError extends boolean = false>(
+    options: Options<GetCliCodeData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).get<
+      GetCliCodeResponse,
+      GetCliCodeError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/cli/get-cli-code",
+    });
+  }
+
+  /**
+   * Handle cli code verification
+   */
+  public static verifyCliCode<ThrowOnError extends boolean = false>(
+    options: Options<VerifyCliCodeData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).get<
+      VerifyCliCodeResponse,
+      VerifyCliCodeError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/cli/verify-cli-code",
+    });
+  }
+}
+
+export class LogsService {
+  /**
+   * Get logs
+   * List logs
+   */
+  public static getLogs<ThrowOnError extends boolean = false>(
+    options?: Options<GetLogsData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).get<
+      GetLogsResponse,
+      GetLogsError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/logs/",
+    });
+  }
+
+  /**
+   * Post logs
+   * Add new logs
+   */
+  public static postLogs<ThrowOnError extends boolean = false>(
+    options?: Options<PostLogsData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).post<
+      PostLogsResponse,
+      PostLogsError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/logs/",
+    });
+  }
+}
+
+export class ProjectsService {
+  /**
+   * Create new project
+   * Create a new project to the client's organization
+   */
+  public static createProject<ThrowOnError extends boolean = false>(
+    options?: Options<CreateProjectData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).post<
+      CreateProjectResponse,
+      CreateProjectError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/org/projects/create",
+    });
+  }
+
+  /**
+   * List all projects
+   */
+  public static getProjects<ThrowOnError extends boolean = false>(
+    options?: Options<unknown, ThrowOnError>
+  ) {
+    return (options?.client ?? client).get<
+      GetProjectsResponse,
+      GetProjectsError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/org/projects",
+    });
+  }
+
+  /**
+   * Regenerate project api key
+   * Regenerate project API key. Ideally use when no API key is available as project can have multiple API keys
+   */
+  public static regenerateProjectApiKey<ThrowOnError extends boolean = false>(
+    options: Options<RegenerateProjectApiKeyData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).post<
+      RegenerateProjectApiKeyResponse,
+      RegenerateProjectApiKeyError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/org/projects/{projectId}/api-key/regenerate",
+    });
+  }
+
+  /**
+   * Get project
+   */
+  public static getProject<ThrowOnError extends boolean = false>(
+    options: Options<GetProjectData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).get<
+      GetProjectResponse,
+      GetProjectError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/org/projects/{projectId}",
+    });
+  }
+
+  /**
+   * Delete project
+   */
+  public static deleteProject<ThrowOnError extends boolean = false>(
+    options: Options<DeleteProjectData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).delete<
+      DeleteProjectResponse,
+      DeleteProjectError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/org/projects/{projectId}",
+    });
+  }
+
+  /**
+   * Rename project
+   */
+  public static renameProject<ThrowOnError extends boolean = false>(
+    options: Options<RenameProjectData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).post<
+      RenameProjectResponse,
+      RenameProjectError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v1/org/projects/{projectId}/rename",
+    });
+  }
+}
+
+export class IntegrationsV2Service {
+  /**
+   * Search connector
+   * Search for a connector
+   */
+  public static searchConnector<ThrowOnError extends boolean = false>(
+    options?: Options<SearchConnectorData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).post<
+      SearchConnectorResponse,
+      SearchConnectorError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v2/integrations/search-by-filters",
+    });
+  }
+
+  /**
+   * Create connector
+   * Create a new connector
+   */
+  public static createConnectorV2<ThrowOnError extends boolean = false>(
+    options?: Options<CreateConnectorV2Data, ThrowOnError>
+  ) {
+    return (options?.client ?? client).post<
+      CreateConnectorV2Response,
+      CreateConnectorV2Error,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v2/integrations/create",
+    });
+  }
+
+  /**
+   * Get or create connector
+   * Get or create a connector
+   */
+  public static getOrCreateConnector<ThrowOnError extends boolean = false>(
+    options?: Options<GetOrCreateConnectorData, ThrowOnError>
+  ) {
+    return (options?.client ?? client).post<
+      GetOrCreateConnectorResponse,
+      GetOrCreateConnectorError,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v2/integrations/get-or-create",
+    });
+  }
+}
+
+export class Connectionsv2Service {
+  /**
+   * Initiate connection
+   */
+  public static initiateConnectionV2<ThrowOnError extends boolean = false>(
+    options?: Options<InitiateConnectionV2Data, ThrowOnError>
+  ) {
+    return (options?.client ?? client).post<
+      InitiateConnectionV2Response,
+      InitiateConnectionV2Error,
+      ThrowOnError
+    >({
+      ...options,
+      url: "/api/v2/connectedAccounts/initiateConnection",
+    });
+  }
+}
```
