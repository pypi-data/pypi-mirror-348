```diff
--- test_files/002-original.txt	2025-03-07 19:06:12
+++ test_files/002-modified.txt	2025-03-07 19:06:12
@@ -4,47 +4,32 @@
 
 import types
 import typing as t
+import warnings
 from inspect import Signature
 
+import typing_extensions as te
 from lyzr_automata import Tool
 
-from composio.client.enums import Action, App, Tag
-from composio.constants import DEFAULT_ENTITY_ID
+from composio import Action, ActionType, AppType, TagType
 from composio.tools import ComposioToolSet as BaseComposioToolSet
+from composio.tools.toolset import ProcessorsType
+from composio.utils import help_msg
 from composio.utils.shared import (
     get_signature_format_from_schema_params,
     json_schema_to_model,
 )
 
 
-class ComposioToolSet(BaseComposioToolSet):
+class ComposioToolSet(
+    BaseComposioToolSet,
+    runtime="lyzr",
+    description_char_limit=1024,
+    action_name_char_limit=64,
+):
     """
     Composio toolset for Lyzr framework.
     """
 
-    def __init__(
-        self,
-        api_key: t.Optional[str] = None,
-        base_url: t.Optional[str] = None,
-        entity_id: str = DEFAULT_ENTITY_ID,
-        output_in_file: bool = False,
-    ) -> None:
-        """
-        Initialize composio toolset.
-
-        :param api_key: Composio API key
-        :param base_url: Base URL for the Composio API server
-        :param entity_id: Entity ID for making function calls
-        :param output_in_file: Whether to write output to a file
-        """
-        super().__init__(
-            api_key=api_key,
-            base_url=base_url,
-            runtime="lyzr",
-            entity_id=entity_id,
-            output_in_file=output_in_file,
-        )
-
     def _wrap_tool(
         self,
         schema: t.Dict,
@@ -54,18 +39,15 @@
         Wrap composio tool as Lyzr `Tool` object.
         """
         name = schema["name"]
-        app = schema["appName"]
         description = schema["description"]
 
         def function(**kwargs: t.Any) -> t.Dict:
             """Composio tool wrapped as Lyzr tool."""
             return self.execute_action(
-                action=Action.from_app_and_action(
-                    app=app,
-                    name=name,
-                ),
+                action=Action(value=name),
                 params=kwargs,
                 entity_id=entity_id or self.entity_id,
+                _check_requested_actions=True,
             )
 
         action_func = types.FunctionType(
@@ -93,44 +75,60 @@
             default_params={},
         )
 
+    @te.deprecated("Use `ComposioToolSet.get_tools` instead.\n", category=None)
     def get_actions(
         self,
-        actions: t.Sequence[Action],
+        actions: t.Sequence[ActionType],
         entity_id: t.Optional[str] = None,
     ) -> t.List[Tool]:
         """
         Get composio tools wrapped as Lyzr `Tool` objects.
 
         :param actions: List of actions to wrap
-        :param entity_id: Entity ID to use for executing function calls.
+        :param entity_id: Entity ID for the function wrapper
+
         :return: Composio tools wrapped as `Tool` objects
         """
-        return [
-            self._wrap_tool(
-                schema=schema.model_dump(exclude_none=True),
-                entity_id=entity_id or self.entity_id,
-            )
-            for schema in self.get_action_schemas(actions=actions)
-        ]
+        warnings.warn(
+            "Use `ComposioToolSet.get_tools` instead.\n" + help_msg(),
+            DeprecationWarning,
+            stacklevel=2,
+        )
+        return self.get_tools(actions=actions, entity_id=entity_id)
 
     def get_tools(
         self,
-        apps: t.Sequence[App],
-        tags: t.Optional[t.List[t.Union[str, Tag]]] = None,
+        actions: t.Optional[t.Sequence[ActionType]] = None,
+        apps: t.Optional[t.Sequence[AppType]] = None,
+        tags: t.Optional[t.List[TagType]] = None,
         entity_id: t.Optional[str] = None,
-    ) -> t.Sequence[Tool]:
+        *,
+        processors: t.Optional[ProcessorsType] = None,
+        check_connected_accounts: bool = True,
+    ) -> t.List[Tool]:
         """
         Get composio tools wrapped as Lyzr `Tool` objects.
 
+        :param actions: List of actions to wrap
         :param apps: List of apps to wrap
         :param tags: Filter the apps by given tags
-        :param entity_id: Entity ID to use for executing function calls.
+        :param entity_id: Entity ID for the function wrapper
+
         :return: Composio tools wrapped as `Tool` objects
         """
+        self.validate_tools(apps=apps, actions=actions, tags=tags)
+        if processors is not None:
+            self._processor_helpers.merge_processors(processors)
         return [
             self._wrap_tool(
                 schema=schema.model_dump(exclude_none=True),
                 entity_id=entity_id or self.entity_id,
             )
-            for schema in self.get_action_schemas(apps=apps, tags=tags)
+            for schema in self.get_action_schemas(
+                actions=actions,
+                apps=apps,
+                tags=tags,
+                check_connected_accounts=check_connected_accounts,
+                _populate_requested=True,
+            )
         ]
```
