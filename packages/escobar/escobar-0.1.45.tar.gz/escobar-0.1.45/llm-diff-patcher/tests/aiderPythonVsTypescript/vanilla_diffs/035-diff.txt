```diff
--- test_files/035-original.txt	2025-03-07 19:06:15
+++ test_files/035-modified.txt	2025-03-07 19:06:15
@@ -3,20 +3,31 @@
 """
 
 import typing as t
+import warnings
 
+import typing_extensions as te
+
 # pylint: disable=E0611
-from camel.functions import OpenAIFunction
+from camel.toolkits import OpenAIFunction
 
-from composio.client.enums import Action, ActionType, AppType, TagType
+from composio import Action, ActionType, AppType, TagType
 from composio.constants import DEFAULT_ENTITY_ID
+from composio.exceptions import InvalidEntityIdError
 from composio.tools import ComposioToolSet as BaseComposioToolSet
 from composio.tools.schema import OpenAISchema, SchemaType
+from composio.tools.toolset import ProcessorsType
+from composio.utils import help_msg
 
 
 # pylint: enable=E0611
 
 
-class ComposioToolSet(BaseComposioToolSet):
+class ComposioToolSet(
+    BaseComposioToolSet,
+    runtime="camel",
+    description_char_limit=1024,
+    action_name_char_limit=64,
+):
     """
     Composio toolset for OpenAI framework.
 
@@ -34,7 +45,7 @@
 
         composio_toolset = ComposioToolSet()
         tools = composio_toolset.get_actions(
-            actions=[Action.GITHUB_ACTIVITY_STAR_REPO_FOR_AUTHENTICATED_USER]
+            actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER]
         )
 
         # set up LLM model
@@ -71,7 +82,7 @@
         # set up agent
 
         prompt = (
-            "I have craeted a new Github Repo,"
+            "I have created a new Github Repo,"
             "Please star my github repository: camel-ai/camel"
         )
         user_msg = BaseMessage.make_user_message(role_name="User", content=prompt)
@@ -83,30 +94,8 @@
     ```
     """
 
-    def __init__(
-        self,
-        api_key: t.Optional[str] = None,
-        base_url: t.Optional[str] = None,
-        entity_id: str = DEFAULT_ENTITY_ID,
-        output_in_file: bool = False,
-    ) -> None:
-        """
-        Initialize composio toolset.
+    schema = SchemaType.OPENAI
 
-        :param api_key: Composio API key
-        :param base_url: Base URL for the Composio API server
-        :param entity_id: Entity ID for making function calls
-        :param output_in_file: Whether to write output to a file
-        """
-        super().__init__(
-            api_key,
-            base_url,
-            runtime="camel",
-            entity_id=entity_id,
-            output_in_file=output_in_file,
-        )
-        self.schema = SchemaType.OPENAI
-
     def validate_entity_id(self, entity_id: str) -> str:
         """Validate entity ID."""
         if (
@@ -114,9 +103,9 @@
             and entity_id != DEFAULT_ENTITY_ID
             and self.entity_id != entity_id
         ):
-            raise ValueError(
-                "Seperate `entity_id` can not be provided during "
-                "intialization and handelling tool calls"
+            raise InvalidEntityIdError(
+                "Separate `entity_id` can not be provided during "
+                "initialization and handling tool calls"
             )
         if self.entity_id != DEFAULT_ENTITY_ID:
             entity_id = self.entity_id
@@ -138,6 +127,7 @@
                 action=Action(value=name),
                 params=kwargs,
                 entity_id=entity_id or self.entity_id,
+                _check_requested_actions=True,
             )
 
         return OpenAIFunction(
@@ -145,6 +135,7 @@
             openai_tool_schema=schema,
         )
 
+    @te.deprecated("Use `ComposioToolSet.get_tools` instead.\n", category=None)
     def get_actions(
         self,
         actions: t.Sequence[ActionType],
@@ -154,47 +145,57 @@
         Get composio tools wrapped as Camel `OpenAIFunction` objects.
 
         :param actions: List of actions to wrap
+        :param entity_id: Entity ID for the function wrapper
+
         :return: Composio tools wrapped as `OpenAIFunction` objects
         """
-        return [
-            self._wrap_tool(
-                t.cast(
-                    OpenAISchema,
-                    self.schema.format(
-                        schema.model_dump(
-                            exclude_none=True,
-                        )
-                    ),
-                ).model_dump(),
-                entity_id=entity_id,
-            )
-            for schema in self.get_action_schemas(actions=actions)
-        ]
+        warnings.warn(
+            "Use `ComposioToolSet.get_tools` instead.\n" + help_msg(),
+            DeprecationWarning,
+            stacklevel=2,
+        )
+        return self.get_tools(actions=actions, entity_id=entity_id)
 
     def get_tools(
         self,
-        apps: t.Sequence[AppType],
+        actions: t.Optional[t.Sequence[ActionType]] = None,
+        apps: t.Optional[t.Sequence[AppType]] = None,
         tags: t.Optional[t.List[TagType]] = None,
         entity_id: t.Optional[str] = None,
+        *,
+        processors: t.Optional[ProcessorsType] = None,
+        check_connected_accounts: bool = True,
     ) -> t.List[OpenAIFunction]:
         """
         Get composio tools wrapped as Camel `OpenAIFunction` objects.
 
+        :param actions: List of actions to wrap
         :param apps: List of apps to wrap
         :param tags: Filter the apps by given tags
+        :param entity_id: Entity ID for the function wrapper
+
         :return: Composio tools wrapped as `OpenAIFunction` objects
         """
+        self.validate_tools(apps=apps, actions=actions, tags=tags)
+        if processors is not None:
+            self._processor_helpers.merge_processors(processors)
         return [
             self._wrap_tool(  # type: ignore
-                **t.cast(
+                t.cast(
                     OpenAISchema,
                     self.schema.format(
                         schema.model_dump(
                             exclude_none=True,
-                        )
+                        ),
                     ),
                 ).model_dump(),
-                entity_id=entity_id
+                entity_id=entity_id,
             )
-            for schema in self.get_action_schemas(apps=apps, tags=tags)
+            for schema in self.get_action_schemas(
+                actions=actions,
+                apps=apps,
+                tags=tags,
+                check_connected_accounts=check_connected_accounts,
+                _populate_requested=True,
+            )
         ]
```
