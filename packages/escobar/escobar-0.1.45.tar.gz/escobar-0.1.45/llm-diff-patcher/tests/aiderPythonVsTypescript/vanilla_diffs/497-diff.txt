```diff
--- test_files/497-original.txt	2025-03-07 19:07:04
+++ test_files/497-modified.txt	2025-03-07 19:07:04
@@ -1,52 +1,63 @@
-import { describe, it, expect, beforeAll } from "@jest/globals";
+import { beforeAll, describe, expect, it } from "@jest/globals";
 import { getBackendClient } from "../testUtils/getBackendClient";
+import { Apps } from "./apps";
 import { Integrations } from "./integrations";
 
 describe("Integrations class tests", () => {
-    let backendClient;
-    let integrations: Integrations;
-    let createdIntegrationId: string;
+  let integrations: Integrations;
+  let createdIntegrationId: string;
+  let apps: Apps;
+  let appId: string;
 
-    beforeAll(() => {
-        backendClient = getBackendClient();
-        integrations = new Integrations(backendClient);
-    });
+  beforeAll(() => {
+    const backendClient = getBackendClient();
+    integrations = new Integrations(backendClient);
+    apps = new Apps(backendClient);
+  });
 
-    it("Retrieve integrations list", async () => {
-        const integrationsList = await integrations.list();
-        expect(integrationsList?.items).toBeInstanceOf(Array);
-        expect(integrationsList?.items).not.toHaveLength(0);    
-    }); 
+  it("Retrieve integrations list", async () => {
+    const integrationsList = await integrations.list();
+    expect(integrationsList?.items).toBeInstanceOf(Array);
+    expect(integrationsList?.items).not.toHaveLength(0);
+  });
 
-    it("should create an integration and verify its properties", async () => {
-        const integrationCreation = await integrations.create({
-            appId: "01e22f33-dc3f-46ae-b58d-050e4d2d1909",
-            name: "test_integration_220",
-            useComposioAuth: true,
-            // @ts-ignore
-            forceNewIntegration:true
-        });
-        expect(integrationCreation.id).toBeTruthy();
-        expect(integrationCreation.appName).toBe("github");
+  it("should create an integration and verify its properties", async () => {
+    const app = await apps.get({ appKey: "github" });
+    if (!app) throw new Error("App not found");
+    appId = app.appId;
 
-        createdIntegrationId = integrationCreation.id;
-    }); 
+    const integrationCreation = await integrations.create({
+      appId: appId,
+      name: "test_integration_220",
+      authScheme: "OAUTH2",
+      useComposioAuth: true,
+    });
+    expect(integrationCreation.id).toBeTruthy();
+    expect(integrationCreation.appName).toBe("github");
 
-    it("should retrieve the created integration by ID and verify its properties", async () => {
-        const integration = await integrations.get({
-            integrationId: createdIntegrationId
-        });
-        expect(integration.id).toBe(createdIntegrationId);
-        expect(integration.appId).toBe("01e22f33-dc3f-46ae-b58d-050e4d2d1909");
-        expect(integration.authScheme).toBe("OAUTH2");
+    // @ts-ignore
+    createdIntegrationId = integrationCreation.id;
+  });
+
+  it("should retrieve the created integration by ID and verify its properties", async () => {
+    const integration = await integrations.get({
+      integrationId: createdIntegrationId,
     });
+    expect(integration?.id).toBe(createdIntegrationId);
+    expect(integration?.appId).toBe(appId);
+    expect(integration?.authScheme).toBe("OAUTH2");
+    expect(integration?.expectedInputFields).toBeDefined();
+  });
 
-    it("should delete the created integration", async () => {
-        if (!createdIntegrationId) return;
-        await integrations.delete({
-            path:{
-                integrationId: createdIntegrationId
-            }
-        });
+  it("should get the required params for the created integration", async () => {
+    const requiredParams = await integrations.getRequiredParams({
+      integrationId: createdIntegrationId,
     });
+    expect(requiredParams).toBeDefined();
+  });
+
+  it("should delete the created integration", async () => {
+    if (!createdIntegrationId) return;
+    await integrations.delete({ integrationId: createdIntegrationId });
+  });
 });
```
