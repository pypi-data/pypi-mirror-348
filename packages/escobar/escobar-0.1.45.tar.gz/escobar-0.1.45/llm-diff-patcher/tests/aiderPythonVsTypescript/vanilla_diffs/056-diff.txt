```diff
--- test_files/056-original.txt	2025-03-07 19:06:16
+++ test_files/056-modified.txt	2025-03-07 19:06:16
@@ -1,42 +1,24 @@
 import json
-import typing as t
 
-from composio_openai import ComposioToolSet as BaseComposioToolSet
 from julep import Client
 from julep.api.types import ChatResponse
 
-from composio.client.enums import Action
+from composio import Action
 from composio.constants import DEFAULT_ENTITY_ID
 
+from composio_openai import ComposioToolSet as BaseComposioToolSet
 
-class ComposioToolSet(BaseComposioToolSet):
+
+class ComposioToolSet(
+    BaseComposioToolSet,
+    runtime="julep",
+    description_char_limit=1024,
+    action_name_char_limit=64,
+):
     """
     Composio toolset wrapper for Julep framework.
     """
 
-    def __init__(
-        self,
-        api_key: t.Optional[str] = None,
-        base_url: t.Optional[str] = None,
-        entity_id: str = DEFAULT_ENTITY_ID,
-        output_in_file: bool = False,
-    ) -> None:
-        """
-        Initialize composio toolset.
-
-        :param api_key: Composio API key
-        :param base_url: Base URL for the Composio API server
-        :param entity_id: Entity ID for making function calls
-        :param output_in_file: Whether to write output to a file
-        """
-        super().__init__(
-            api_key,
-            base_url,
-            entity_id=entity_id,
-            output_in_file=output_in_file,
-        )
-        self._runtime = "julep"
-
     def handle_tool_calls(  # type: ignore[override]
         self,
         julep_client: Client,
@@ -52,18 +34,19 @@
         :param entity_id: Entity ID to use for executing function calls.
         :return: A list of output objects from the function calls.
         """
-        entity_id = self.validate_entity_id(entity_id or self.entity_id)
         outputs = []
+        entity_id = self.validate_entity_id(entity_id or self.entity_id)
         while response.finish_reason == "tool_calls":
             for _responses in response.response:
                 for _response in _responses:
                     try:
-                        tool_function = json.loads(_response.content)
+                        tool_function = json.loads(_response.content)  # type: ignore
                         outputs.append(
                             self.execute_action(
-                                action=Action.from_action(name=tool_function["name"]),
+                                action=Action(value=tool_function["name"]),
                                 params=json.loads(tool_function["arguments"]),
                                 entity_id=entity_id or self.entity_id,
+                                _check_requested_actions=True,
                             )
                         )
                     except json.JSONDecodeError:
@@ -71,12 +54,7 @@
 
             response = julep_client.sessions.chat(  # submit the tool call
                 session_id=session_id,
-                messages=[
-                    {
-                        "role": "assistant",
-                        "content": json.dumps(outputs),
-                    }
-                ],
+                messages=[{"role": "assistant", "content": json.dumps(outputs)}],  # type: ignore
                 recall=True,
                 remember=True,
             )
```
