```diff
--- test_files/444-original.txt	2025-03-07 19:07:00
+++ test_files/444-modified.txt	2025-03-07 19:07:00
@@ -1,8 +1,9 @@
+/* eslint-disable no-console */
 import chalk from "chalk";
 import { Command } from "commander";
 
 import client from "../sdk/client/client";
-import { getAPISDK } from "../sdk/utils/config";
+import { getOpenAPIClient } from "../sdk/utils/config";
 
 export default class ConnectionsCommand {
   private program: Command;
@@ -21,24 +22,24 @@
   }
 
   private async handleAction(options: { active: boolean }): Promise<void> {
-    getAPISDK();
-    const { data, error } = await client.connections.getConnections({
+    getOpenAPIClient();
+    const { data, error } = await client.connections.listConnections({
       query: options.active ? { status: "ACTIVE" } : {},
       throwOnError: false,
     });
 
     if (error) {
-      console.log(chalk.red((error as any).message));
+      console.log(chalk.red(error.message));
       return;
     }
 
     for (const connection of data?.items || []) {
       console.log(chalk.cyan(`â€¢ ${chalk.bold("Id")}: ${connection.id}`));
       console.log(
-        chalk.magenta(`  ${chalk.bold("App")}: ${connection.appName}`),
+        chalk.magenta(`  ${chalk.bold("App")}: ${connection.appName}`)
       );
       console.log(
-        chalk.yellow(`  ${chalk.bold("Status")}: ${connection.status}`),
+        chalk.yellow(`  ${chalk.bold("Status")}: ${connection.status}`)
       );
       console.log(""); // Add an empty line for better readability between connections
     }
@@ -53,25 +54,27 @@
     this.program
       .command("get")
       .description("Get a connection by id")
-      .argument("<id>", "Connection id")
+      .argument("<id>", "Connection id (required)")
       .action(this.handleAction.bind(this));
   }
 
   private async handleAction(id: string): Promise<void> {
-    getAPISDK();
+    getOpenAPIClient();
     const { data, error } = await client.connections.getConnection({
       path: { connectedAccountId: id },
       throwOnError: false,
     });
 
     if (error) {
-      console.log(chalk.red((error as any).message));
+      console.log(chalk.red((error as Error).message));
       return;
     }
 
-    for (const [key, value] of Object.entries(data as Record<string, any>)) {
+    for (const [key, value] of Object.entries(
+      data as Record<string, unknown>
+    )) {
       console.log(
-        `- ${chalk.cyan.bold(key)}: ${JSON.stringify(value, null, 2)}`,
+        `- ${chalk.cyan.bold(key)}: ${JSON.stringify(value, null, 2)}`
       );
     }
   }
```
