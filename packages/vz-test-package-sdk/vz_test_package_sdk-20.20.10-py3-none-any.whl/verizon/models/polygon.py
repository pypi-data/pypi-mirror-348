# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Polygon(object):

    """Implementation of the 'Polygon' model.

    A Polygon is a type of geometry that represents a collection of points
    that form a closed ring.
    NOTE: This API only supports a single polygon in the Polygon geometry, so
    holes cannot be defines at this point. Support for hole will be added in
    future releases.

    Attributes:
        mtype (str): The model property of type str.
        coordinates (List[float]): The model property of type List[float].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mtype": 'type',
        "coordinates": 'coordinates'
    }

    def __init__(self,
                 coordinates=None):
        """Constructor for the Polygon class"""

        # Initialize members of the class
        self.mtype = 'Polygon' 
        self.coordinates = coordinates 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        coordinates = dictionary.get("coordinates") if dictionary.get("coordinates") else None
        # Return an object of this model
        return cls(coordinates)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!r}, '
                f'coordinates={self.coordinates!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!s}, '
                f'coordinates={self.coordinates!s})')
