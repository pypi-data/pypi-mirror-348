# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class FlowInfo(object):

    """Implementation of the 'FlowInfo' model.

    Attributes:
        flow_server (str): The model property of type str.
        flow_device (str): The model property of type str.
        flow_direction (str): The model property of type str.
        flow_protocol (str): The model property of type str.
        qci_option (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "flow_server": 'flowServer',
        "flow_device": 'flowDevice',
        "flow_direction": 'flowDirection',
        "flow_protocol": 'flowProtocol',
        "qci_option": 'qciOption'
    }

    _optionals = [
        'flow_server',
        'flow_device',
        'flow_direction',
        'flow_protocol',
        'qci_option',
    ]

    def __init__(self,
                 flow_server=APIHelper.SKIP,
                 flow_device=APIHelper.SKIP,
                 flow_direction=APIHelper.SKIP,
                 flow_protocol=APIHelper.SKIP,
                 qci_option=APIHelper.SKIP):
        """Constructor for the FlowInfo class"""

        # Initialize members of the class
        if flow_server is not APIHelper.SKIP:
            self.flow_server = flow_server 
        if flow_device is not APIHelper.SKIP:
            self.flow_device = flow_device 
        if flow_direction is not APIHelper.SKIP:
            self.flow_direction = flow_direction 
        if flow_protocol is not APIHelper.SKIP:
            self.flow_protocol = flow_protocol 
        if qci_option is not APIHelper.SKIP:
            self.qci_option = qci_option 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        flow_server = dictionary.get("flowServer") if dictionary.get("flowServer") else APIHelper.SKIP
        flow_device = dictionary.get("flowDevice") if dictionary.get("flowDevice") else APIHelper.SKIP
        flow_direction = dictionary.get("flowDirection") if dictionary.get("flowDirection") else APIHelper.SKIP
        flow_protocol = dictionary.get("flowProtocol") if dictionary.get("flowProtocol") else APIHelper.SKIP
        qci_option = dictionary.get("qciOption") if dictionary.get("qciOption") else APIHelper.SKIP
        # Return an object of this model
        return cls(flow_server,
                   flow_device,
                   flow_direction,
                   flow_protocol,
                   qci_option)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'flow_server={(self.flow_server if hasattr(self, "flow_server") else None)!r}, '
                f'flow_device={(self.flow_device if hasattr(self, "flow_device") else None)!r}, '
                f'flow_direction={(self.flow_direction if hasattr(self, "flow_direction") else None)!r}, '
                f'flow_protocol={(self.flow_protocol if hasattr(self, "flow_protocol") else None)!r}, '
                f'qci_option={(self.qci_option if hasattr(self, "qci_option") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'flow_server={(self.flow_server if hasattr(self, "flow_server") else None)!s}, '
                f'flow_device={(self.flow_device if hasattr(self, "flow_device") else None)!s}, '
                f'flow_direction={(self.flow_direction if hasattr(self, "flow_direction") else None)!s}, '
                f'flow_protocol={(self.flow_protocol if hasattr(self, "flow_protocol") else None)!s}, '
                f'qci_option={(self.qci_option if hasattr(self, "qci_option") else None)!s})')
