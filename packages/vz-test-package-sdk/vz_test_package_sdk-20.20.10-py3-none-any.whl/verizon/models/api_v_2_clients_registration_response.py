# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.models.certificate_1 import Certificate1


class ApiV2ClientsRegistrationResponse(object):

    """Implementation of the 'Api V2 Clients Registration Response' model.

    Attributes:
        device_id (uuid|str): The generated ID (UUID v4) for the device. It
            can be used as:   - the MQTT Client ID when connecting to the
            Message Exchange system   - a parameter when asking for the
            connection endpoint   - a parameter when finishing the device
            registration   - a parameter when unregistering the device
        certificate (Certificate1): The model property of type Certificate1.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "device_id": 'DeviceID',
        "certificate": 'Certificate'
    }

    def __init__(self,
                 device_id=None,
                 certificate=None):
        """Constructor for the ApiV2ClientsRegistrationResponse class"""

        # Initialize members of the class
        self.device_id = device_id 
        self.certificate = certificate 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        device_id = dictionary.get("DeviceID") if dictionary.get("DeviceID") else None
        certificate = Certificate1.from_dictionary(dictionary.get('Certificate')) if dictionary.get('Certificate') else None
        # Return an object of this model
        return cls(device_id,
                   certificate)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'device_id={self.device_id!r}, '
                f'certificate={self.certificate!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'device_id={self.device_id!s}, '
                f'certificate={self.certificate!s})')
