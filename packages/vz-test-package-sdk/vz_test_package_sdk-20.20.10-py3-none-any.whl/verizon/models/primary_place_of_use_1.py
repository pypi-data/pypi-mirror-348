# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.models.address_1 import Address1
from verizon.models.customer_name_2 import CustomerName2


class PrimaryPlaceOfUse1(object):

    """Implementation of the 'PrimaryPlaceOfUse1' model.

    Attributes:
        address (Address1): The model property of type Address1.
        customer_name (CustomerName2): The model property of type
            CustomerName2.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "address": 'address',
        "customer_name": 'customerName'
    }

    def __init__(self,
                 address=None,
                 customer_name=None):
        """Constructor for the PrimaryPlaceOfUse1 class"""

        # Initialize members of the class
        self.address = address 
        self.customer_name = customer_name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        address = Address1.from_dictionary(dictionary.get('address')) if dictionary.get('address') else None
        customer_name = CustomerName2.from_dictionary(dictionary.get('customerName')) if dictionary.get('customerName') else None
        # Return an object of this model
        return cls(address,
                   customer_name)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'address={self.address!r}, '
                f'customer_name={self.customer_name!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'address={self.address!s}, '
                f'customer_name={self.customer_name!s})')
