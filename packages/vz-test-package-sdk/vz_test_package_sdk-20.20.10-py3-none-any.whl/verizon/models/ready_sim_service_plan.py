# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class ReadySimServicePlan(object):

    """Implementation of the 'ReadySimServicePlan' model.

    Attributes:
        service_plan (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "service_plan": 'servicePlan'
    }

    _optionals = [
        'service_plan',
    ]

    def __init__(self,
                 service_plan=APIHelper.SKIP):
        """Constructor for the ReadySimServicePlan class"""

        # Initialize members of the class
        if service_plan is not APIHelper.SKIP:
            self.service_plan = service_plan 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        service_plan = dictionary.get("servicePlan") if dictionary.get("servicePlan") else APIHelper.SKIP
        # Return an object of this model
        return cls(service_plan)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'service_plan={(self.service_plan if hasattr(self, "service_plan") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'service_plan={(self.service_plan if hasattr(self, "service_plan") else None)!s})')
