# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.distribution_schedule_2 import DistributionSchedule2


class MessageBase(object):

    """Implementation of the 'MessageBase' model.

    Attributes:
        is_private (bool): Defines whether the message is private or public.
            Private messages are published under the Vendor ID defined in the
            configuration and only visible to devices of selected vendors.
            Public messages are published under the Public vendor and are
            visible to all the users.
        road_user_type (List[RoadUserTypesEnum]): Type of the Road User.
        trigger_conditions (List[TriggerConditionEnum]): Trigger conditions
            that define on which road user action the message will be sent. If
            multiple Trigger Conditions are defined any of them will trigger
            the message.
        limits (List[Any]): List of limitations. These limitations can be used
            for making the trigger condition more precise by defining speed
            and motion direction requirements to be met before the messages
            are sent out.
        distribution_type (List[DistributionTypesEnum]): Type of the
            distribution.
        distribution_schedule (DistributionSchedule2): The model property of
            type DistributionSchedule2.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "is_private": 'isPrivate',
        "road_user_type": 'roadUserType',
        "trigger_conditions": 'triggerConditions',
        "limits": 'limits',
        "distribution_type": 'distributionType',
        "distribution_schedule": 'distributionSchedule'
    }

    _optionals = [
        'trigger_conditions',
        'limits',
        'distribution_type',
        'distribution_schedule',
    ]

    def __init__(self,
                 is_private=None,
                 road_user_type=None,
                 trigger_conditions=APIHelper.SKIP,
                 limits=APIHelper.SKIP,
                 distribution_type=APIHelper.SKIP,
                 distribution_schedule=APIHelper.SKIP):
        """Constructor for the MessageBase class"""

        # Initialize members of the class
        self.is_private = is_private 
        self.road_user_type = road_user_type 
        if trigger_conditions is not APIHelper.SKIP:
            self.trigger_conditions = trigger_conditions 
        if limits is not APIHelper.SKIP:
            self.limits = limits 
        if distribution_type is not APIHelper.SKIP:
            self.distribution_type = distribution_type 
        if distribution_schedule is not APIHelper.SKIP:
            self.distribution_schedule = distribution_schedule 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        is_private = dictionary.get("isPrivate") if "isPrivate" in dictionary.keys() else None
        road_user_type = dictionary.get("roadUserType") if dictionary.get("roadUserType") else None
        trigger_conditions = dictionary.get("triggerConditions") if dictionary.get("triggerConditions") else APIHelper.SKIP
        limits = dictionary.get("limits") if dictionary.get("limits") else APIHelper.SKIP
        distribution_type = dictionary.get("distributionType") if dictionary.get("distributionType") else APIHelper.SKIP
        distribution_schedule = DistributionSchedule2.from_dictionary(dictionary.get('distributionSchedule')) if 'distributionSchedule' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(is_private,
                   road_user_type,
                   trigger_conditions,
                   limits,
                   distribution_type,
                   distribution_schedule)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'is_private={self.is_private!r}, '
                f'road_user_type={self.road_user_type!r}, '
                f'trigger_conditions={(self.trigger_conditions if hasattr(self, "trigger_conditions") else None)!r}, '
                f'limits={(self.limits if hasattr(self, "limits") else None)!r}, '
                f'distribution_type={(self.distribution_type if hasattr(self, "distribution_type") else None)!r}, '
                f'distribution_schedule={(self.distribution_schedule if hasattr(self, "distribution_schedule") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'is_private={self.is_private!s}, '
                f'road_user_type={self.road_user_type!s}, '
                f'trigger_conditions={(self.trigger_conditions if hasattr(self, "trigger_conditions") else None)!s}, '
                f'limits={(self.limits if hasattr(self, "limits") else None)!s}, '
                f'distribution_type={(self.distribution_type if hasattr(self, "distribution_type") else None)!s}, '
                f'distribution_schedule={(self.distribution_schedule if hasattr(self, "distribution_schedule") else None)!s})')
