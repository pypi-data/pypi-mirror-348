# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.ready_sim_device_id import ReadySimDeviceId
from verizon.models.usagehistory import Usagehistory


class ResponsetoUsageQuery(object):

    """Implementation of the 'ResponsetoUsageQuery' model.

    Attributes:
        hasmoredata (bool): The model property of type bool.
        device_id (ReadySimDeviceId): The model property of type
            ReadySimDeviceId.
        usage_history (List[Usagehistory]): The model property of type
            List[Usagehistory].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "hasmoredata": 'hasmoredata',
        "device_id": 'deviceId',
        "usage_history": 'usageHistory'
    }

    _optionals = [
        'hasmoredata',
        'device_id',
        'usage_history',
    ]

    def __init__(self,
                 hasmoredata=APIHelper.SKIP,
                 device_id=APIHelper.SKIP,
                 usage_history=APIHelper.SKIP):
        """Constructor for the ResponsetoUsageQuery class"""

        # Initialize members of the class
        if hasmoredata is not APIHelper.SKIP:
            self.hasmoredata = hasmoredata 
        if device_id is not APIHelper.SKIP:
            self.device_id = device_id 
        if usage_history is not APIHelper.SKIP:
            self.usage_history = usage_history 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        hasmoredata = dictionary.get("hasmoredata") if "hasmoredata" in dictionary.keys() else APIHelper.SKIP
        device_id = ReadySimDeviceId.from_dictionary(dictionary.get('deviceId')) if 'deviceId' in dictionary.keys() else APIHelper.SKIP
        usage_history = None
        if dictionary.get('usageHistory') is not None:
            usage_history = [Usagehistory.from_dictionary(x) for x in dictionary.get('usageHistory')]
        else:
            usage_history = APIHelper.SKIP
        # Return an object of this model
        return cls(hasmoredata,
                   device_id,
                   usage_history)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'hasmoredata={(self.hasmoredata if hasattr(self, "hasmoredata") else None)!r}, '
                f'device_id={(self.device_id if hasattr(self, "device_id") else None)!r}, '
                f'usage_history={(self.usage_history if hasattr(self, "usage_history") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'hasmoredata={(self.hasmoredata if hasattr(self, "hasmoredata") else None)!s}, '
                f'device_id={(self.device_id if hasattr(self, "device_id") else None)!s}, '
                f'usage_history={(self.usage_history if hasattr(self, "usage_history") else None)!s})')
