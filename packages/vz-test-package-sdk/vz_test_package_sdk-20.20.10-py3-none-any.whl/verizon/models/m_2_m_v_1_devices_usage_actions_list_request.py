# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.device_id_1 import DeviceId1
from verizon.models.label import Label


class M2mV1DevicesUsageActionsListRequest(object):

    """Implementation of the 'M2m V1 Devices Usage Actions List Request' model.

    Attributes:
        earliest (str): The earliest date for which you want usage data.
        latest (str): The last date for which you want usage data.
        device_id (DeviceId1): The model property of type DeviceId1.
        label (Label): The model property of type Label.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "earliest": 'earliest',
        "latest": 'latest',
        "device_id": 'deviceId',
        "label": 'label'
    }

    _optionals = [
        'device_id',
        'label',
    ]

    def __init__(self,
                 earliest=None,
                 latest=None,
                 device_id=APIHelper.SKIP,
                 label=APIHelper.SKIP):
        """Constructor for the M2mV1DevicesUsageActionsListRequest class"""

        # Initialize members of the class
        self.earliest = earliest 
        self.latest = latest 
        if device_id is not APIHelper.SKIP:
            self.device_id = device_id 
        if label is not APIHelper.SKIP:
            self.label = label 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        earliest = dictionary.get("earliest") if dictionary.get("earliest") else None
        latest = dictionary.get("latest") if dictionary.get("latest") else None
        device_id = DeviceId1.from_dictionary(dictionary.get('deviceId')) if 'deviceId' in dictionary.keys() else APIHelper.SKIP
        label = Label.from_dictionary(dictionary.get('label')) if 'label' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(earliest,
                   latest,
                   device_id,
                   label)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'earliest={self.earliest!r}, '
                f'latest={self.latest!r}, '
                f'device_id={(self.device_id if hasattr(self, "device_id") else None)!r}, '
                f'label={(self.label if hasattr(self, "label") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'earliest={self.earliest!s}, '
                f'latest={self.latest!s}, '
                f'device_id={(self.device_id if hasattr(self, "device_id") else None)!s}, '
                f'label={(self.label if hasattr(self, "label") else None)!s})')
