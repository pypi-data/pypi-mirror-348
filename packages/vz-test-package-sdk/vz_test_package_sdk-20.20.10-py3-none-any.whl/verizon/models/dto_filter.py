# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class DtoFilter(object):

    """Implementation of the 'dto.Filter' model.

    Attributes:
        expand (str): Use to provide device details for alerts specific to a
            device
        limitnumber (int): Limit the number of results returned
        nopagination (bool): A flag set to show if pagination requested
            (false) or not (true)
        page (str): The model property of type str.
        pagenumber (int): The model property of type int.
        projection (List[str]): Limits the fields of the device that the user
            is interested in rather than all of the fields
        selection (Dict[str, Any]): Filters results based on user defined
            criteria

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "expand": '$expand',
        "limitnumber": '$limitnumber',
        "nopagination": '$nopagination',
        "page": '$page',
        "pagenumber": '$pagenumber',
        "projection": '$projection',
        "selection": '$selection'
    }

    _optionals = [
        'expand',
        'limitnumber',
        'nopagination',
        'page',
        'pagenumber',
        'projection',
        'selection',
    ]

    def __init__(self,
                 expand=APIHelper.SKIP,
                 limitnumber=APIHelper.SKIP,
                 nopagination=APIHelper.SKIP,
                 page=APIHelper.SKIP,
                 pagenumber=APIHelper.SKIP,
                 projection=APIHelper.SKIP,
                 selection=APIHelper.SKIP):
        """Constructor for the DtoFilter class"""

        # Initialize members of the class
        if expand is not APIHelper.SKIP:
            self.expand = expand 
        if limitnumber is not APIHelper.SKIP:
            self.limitnumber = limitnumber 
        if nopagination is not APIHelper.SKIP:
            self.nopagination = nopagination 
        if page is not APIHelper.SKIP:
            self.page = page 
        if pagenumber is not APIHelper.SKIP:
            self.pagenumber = pagenumber 
        if projection is not APIHelper.SKIP:
            self.projection = projection 
        if selection is not APIHelper.SKIP:
            self.selection = selection 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        expand = dictionary.get("$expand") if dictionary.get("$expand") else APIHelper.SKIP
        limitnumber = dictionary.get("$limitnumber") if dictionary.get("$limitnumber") else APIHelper.SKIP
        nopagination = dictionary.get("$nopagination") if "$nopagination" in dictionary.keys() else APIHelper.SKIP
        page = dictionary.get("$page") if dictionary.get("$page") else APIHelper.SKIP
        pagenumber = dictionary.get("$pagenumber") if dictionary.get("$pagenumber") else APIHelper.SKIP
        projection = dictionary.get("$projection") if dictionary.get("$projection") else APIHelper.SKIP
        selection = dictionary.get("$selection") if dictionary.get("$selection") else APIHelper.SKIP
        # Return an object of this model
        return cls(expand,
                   limitnumber,
                   nopagination,
                   page,
                   pagenumber,
                   projection,
                   selection)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'expand={(self.expand if hasattr(self, "expand") else None)!r}, '
                f'limitnumber={(self.limitnumber if hasattr(self, "limitnumber") else None)!r}, '
                f'nopagination={(self.nopagination if hasattr(self, "nopagination") else None)!r}, '
                f'page={(self.page if hasattr(self, "page") else None)!r}, '
                f'pagenumber={(self.pagenumber if hasattr(self, "pagenumber") else None)!r}, '
                f'projection={(self.projection if hasattr(self, "projection") else None)!r}, '
                f'selection={(self.selection if hasattr(self, "selection") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'expand={(self.expand if hasattr(self, "expand") else None)!s}, '
                f'limitnumber={(self.limitnumber if hasattr(self, "limitnumber") else None)!s}, '
                f'nopagination={(self.nopagination if hasattr(self, "nopagination") else None)!s}, '
                f'page={(self.page if hasattr(self, "page") else None)!s}, '
                f'pagenumber={(self.pagenumber if hasattr(self, "pagenumber") else None)!s}, '
                f'projection={(self.projection if hasattr(self, "projection") else None)!s}, '
                f'selection={(self.selection if hasattr(self, "selection") else None)!s})')
