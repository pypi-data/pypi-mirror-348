# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.dto_health_score_metric import DtoHealthScoreMetric


class DtoHealthScoreSummary(object):

    """Implementation of the 'dto.HealthScoreSummary' model.

    The values measured are for sensors and gateways

    Attributes:
        overallsummary (List[DtoHealthScoreMetric]): The model property of
            type List[DtoHealthScoreMetric].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "overallsummary": 'overallsummary'
    }

    _optionals = [
        'overallsummary',
    ]

    def __init__(self,
                 overallsummary=APIHelper.SKIP):
        """Constructor for the DtoHealthScoreSummary class"""

        # Initialize members of the class
        if overallsummary is not APIHelper.SKIP:
            self.overallsummary = overallsummary 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        overallsummary = None
        if dictionary.get('overallsummary') is not None:
            overallsummary = [DtoHealthScoreMetric.from_dictionary(x) for x in dictionary.get('overallsummary')]
        else:
            overallsummary = APIHelper.SKIP
        # Return an object of this model
        return cls(overallsummary)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'overallsummary={(self.overallsummary if hasattr(self, "overallsummary") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'overallsummary={(self.overallsummary if hasattr(self, "overallsummary") else None)!s})')
