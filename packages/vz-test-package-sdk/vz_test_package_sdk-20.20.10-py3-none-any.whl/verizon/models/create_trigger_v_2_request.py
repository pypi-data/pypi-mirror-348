# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.notification import Notification
from verizon.models.price_plan_trigger import PricePlanTrigger


class CreateTriggerV2Request(object):

    """Implementation of the 'CreateTriggerV2Request' model.

    Create Trigger Request

    Attributes:
        trigger_name (str): The model property of type str.
        ecpd_id (str): The model property of type str.
        device_group_name (str): The model property of type str.
        trigger_category (str): The model property of type str.
        price_plan_trigger (PricePlanTrigger): The model property of type
            PricePlanTrigger.
        notification (Notification): The model property of type Notification.
        active (bool): The model property of type bool.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "trigger_name": 'triggerName',
        "ecpd_id": 'ecpdId',
        "device_group_name": 'deviceGroupName',
        "trigger_category": 'triggerCategory',
        "price_plan_trigger": 'pricePlanTrigger',
        "notification": 'notification',
        "active": 'active'
    }

    _optionals = [
        'trigger_name',
        'ecpd_id',
        'device_group_name',
        'trigger_category',
        'price_plan_trigger',
        'notification',
        'active',
    ]

    def __init__(self,
                 trigger_name=APIHelper.SKIP,
                 ecpd_id=APIHelper.SKIP,
                 device_group_name=APIHelper.SKIP,
                 trigger_category=APIHelper.SKIP,
                 price_plan_trigger=APIHelper.SKIP,
                 notification=APIHelper.SKIP,
                 active=APIHelper.SKIP):
        """Constructor for the CreateTriggerV2Request class"""

        # Initialize members of the class
        if trigger_name is not APIHelper.SKIP:
            self.trigger_name = trigger_name 
        if ecpd_id is not APIHelper.SKIP:
            self.ecpd_id = ecpd_id 
        if device_group_name is not APIHelper.SKIP:
            self.device_group_name = device_group_name 
        if trigger_category is not APIHelper.SKIP:
            self.trigger_category = trigger_category 
        if price_plan_trigger is not APIHelper.SKIP:
            self.price_plan_trigger = price_plan_trigger 
        if notification is not APIHelper.SKIP:
            self.notification = notification 
        if active is not APIHelper.SKIP:
            self.active = active 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        trigger_name = dictionary.get("triggerName") if dictionary.get("triggerName") else APIHelper.SKIP
        ecpd_id = dictionary.get("ecpdId") if dictionary.get("ecpdId") else APIHelper.SKIP
        device_group_name = dictionary.get("deviceGroupName") if dictionary.get("deviceGroupName") else APIHelper.SKIP
        trigger_category = dictionary.get("triggerCategory") if dictionary.get("triggerCategory") else APIHelper.SKIP
        price_plan_trigger = PricePlanTrigger.from_dictionary(dictionary.get('pricePlanTrigger')) if 'pricePlanTrigger' in dictionary.keys() else APIHelper.SKIP
        notification = Notification.from_dictionary(dictionary.get('notification')) if 'notification' in dictionary.keys() else APIHelper.SKIP
        active = dictionary.get("active") if "active" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(trigger_name,
                   ecpd_id,
                   device_group_name,
                   trigger_category,
                   price_plan_trigger,
                   notification,
                   active)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'trigger_name={(self.trigger_name if hasattr(self, "trigger_name") else None)!r}, '
                f'ecpd_id={(self.ecpd_id if hasattr(self, "ecpd_id") else None)!r}, '
                f'device_group_name={(self.device_group_name if hasattr(self, "device_group_name") else None)!r}, '
                f'trigger_category={(self.trigger_category if hasattr(self, "trigger_category") else None)!r}, '
                f'price_plan_trigger={(self.price_plan_trigger if hasattr(self, "price_plan_trigger") else None)!r}, '
                f'notification={(self.notification if hasattr(self, "notification") else None)!r}, '
                f'active={(self.active if hasattr(self, "active") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'trigger_name={(self.trigger_name if hasattr(self, "trigger_name") else None)!s}, '
                f'ecpd_id={(self.ecpd_id if hasattr(self, "ecpd_id") else None)!s}, '
                f'device_group_name={(self.device_group_name if hasattr(self, "device_group_name") else None)!s}, '
                f'trigger_category={(self.trigger_category if hasattr(self, "trigger_category") else None)!s}, '
                f'price_plan_trigger={(self.price_plan_trigger if hasattr(self, "price_plan_trigger") else None)!s}, '
                f'notification={(self.notification if hasattr(self, "notification") else None)!s}, '
                f'active={(self.active if hasattr(self, "active") else None)!s})')
