# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class DtoUserDTO(object):

    """Implementation of the 'dto.UserDTO' model.

    Attributes:
        email (str): Contact email for the group
        firstname (str): The first name in the user record
        lastname (str): The last name in the user record
        mdn (str): The Mobile Directory Number
        customdata (Dict[str, Any]): Name/value pair, where the value is
            client defined.  The purpose is to keep track of current state per
            device action.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "email": 'email',
        "firstname": 'firstname',
        "lastname": 'lastname',
        "mdn": 'mdn',
        "customdata": 'customdata'
    }

    _optionals = [
        'email',
        'firstname',
        'lastname',
        'mdn',
        'customdata',
    ]

    def __init__(self,
                 email=APIHelper.SKIP,
                 firstname=APIHelper.SKIP,
                 lastname=APIHelper.SKIP,
                 mdn=APIHelper.SKIP,
                 customdata=APIHelper.SKIP):
        """Constructor for the DtoUserDTO class"""

        # Initialize members of the class
        if email is not APIHelper.SKIP:
            self.email = email 
        if firstname is not APIHelper.SKIP:
            self.firstname = firstname 
        if lastname is not APIHelper.SKIP:
            self.lastname = lastname 
        if mdn is not APIHelper.SKIP:
            self.mdn = mdn 
        if customdata is not APIHelper.SKIP:
            self.customdata = customdata 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        email = dictionary.get("email") if dictionary.get("email") else APIHelper.SKIP
        firstname = dictionary.get("firstname") if dictionary.get("firstname") else APIHelper.SKIP
        lastname = dictionary.get("lastname") if dictionary.get("lastname") else APIHelper.SKIP
        mdn = dictionary.get("mdn") if dictionary.get("mdn") else APIHelper.SKIP
        customdata = dictionary.get("customdata") if dictionary.get("customdata") else APIHelper.SKIP
        # Return an object of this model
        return cls(email,
                   firstname,
                   lastname,
                   mdn,
                   customdata)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'email={(self.email if hasattr(self, "email") else None)!r}, '
                f'firstname={(self.firstname if hasattr(self, "firstname") else None)!r}, '
                f'lastname={(self.lastname if hasattr(self, "lastname") else None)!r}, '
                f'mdn={(self.mdn if hasattr(self, "mdn") else None)!r}, '
                f'customdata={(self.customdata if hasattr(self, "customdata") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'email={(self.email if hasattr(self, "email") else None)!s}, '
                f'firstname={(self.firstname if hasattr(self, "firstname") else None)!s}, '
                f'lastname={(self.lastname if hasattr(self, "lastname") else None)!s}, '
                f'mdn={(self.mdn if hasattr(self, "mdn") else None)!s}, '
                f'customdata={(self.customdata if hasattr(self, "customdata") else None)!s})')
