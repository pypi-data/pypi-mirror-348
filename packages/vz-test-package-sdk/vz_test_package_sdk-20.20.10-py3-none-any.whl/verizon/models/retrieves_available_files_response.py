# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class RetrievesAvailableFilesResponse(object):

    """Implementation of the 'RetrievesAvailableFilesResponse' model.

    Attributes:
        file_name (str): ThingSpace-generated name of the file. You will use
            this name when listing or scheduling campaigns for the file.
        file_version (str): Version of the file.
        release_note (str): Software release note.
        make (str): The software-applicable device make.
        model (str): The software-applicable device model.
        local_target_path (str): Local target path on the device.
        distribution_type (str): Valid values
        device_platform_id (str): The platform (Android, iOS, etc.,) that the
            software can be applied to.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "file_name": 'fileName',
        "file_version": 'fileVersion',
        "release_note": 'releaseNote',
        "make": 'make',
        "model": 'model',
        "local_target_path": 'localTargetPath',
        "distribution_type": 'distributionType',
        "device_platform_id": 'devicePlatformId'
    }

    _optionals = [
        'file_name',
        'file_version',
        'release_note',
        'make',
        'model',
        'local_target_path',
        'distribution_type',
        'device_platform_id',
    ]

    def __init__(self,
                 file_name=APIHelper.SKIP,
                 file_version=APIHelper.SKIP,
                 release_note=APIHelper.SKIP,
                 make=APIHelper.SKIP,
                 model=APIHelper.SKIP,
                 local_target_path=APIHelper.SKIP,
                 distribution_type=APIHelper.SKIP,
                 device_platform_id=APIHelper.SKIP):
        """Constructor for the RetrievesAvailableFilesResponse class"""

        # Initialize members of the class
        if file_name is not APIHelper.SKIP:
            self.file_name = file_name 
        if file_version is not APIHelper.SKIP:
            self.file_version = file_version 
        if release_note is not APIHelper.SKIP:
            self.release_note = release_note 
        if make is not APIHelper.SKIP:
            self.make = make 
        if model is not APIHelper.SKIP:
            self.model = model 
        if local_target_path is not APIHelper.SKIP:
            self.local_target_path = local_target_path 
        if distribution_type is not APIHelper.SKIP:
            self.distribution_type = distribution_type 
        if device_platform_id is not APIHelper.SKIP:
            self.device_platform_id = device_platform_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        file_name = dictionary.get("fileName") if dictionary.get("fileName") else APIHelper.SKIP
        file_version = dictionary.get("fileVersion") if dictionary.get("fileVersion") else APIHelper.SKIP
        release_note = dictionary.get("releaseNote") if dictionary.get("releaseNote") else APIHelper.SKIP
        make = dictionary.get("make") if dictionary.get("make") else APIHelper.SKIP
        model = dictionary.get("model") if dictionary.get("model") else APIHelper.SKIP
        local_target_path = dictionary.get("localTargetPath") if dictionary.get("localTargetPath") else APIHelper.SKIP
        distribution_type = dictionary.get("distributionType") if dictionary.get("distributionType") else APIHelper.SKIP
        device_platform_id = dictionary.get("devicePlatformId") if dictionary.get("devicePlatformId") else APIHelper.SKIP
        # Return an object of this model
        return cls(file_name,
                   file_version,
                   release_note,
                   make,
                   model,
                   local_target_path,
                   distribution_type,
                   device_platform_id)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'file_name={(self.file_name if hasattr(self, "file_name") else None)!r}, '
                f'file_version={(self.file_version if hasattr(self, "file_version") else None)!r}, '
                f'release_note={(self.release_note if hasattr(self, "release_note") else None)!r}, '
                f'make={(self.make if hasattr(self, "make") else None)!r}, '
                f'model={(self.model if hasattr(self, "model") else None)!r}, '
                f'local_target_path={(self.local_target_path if hasattr(self, "local_target_path") else None)!r}, '
                f'distribution_type={(self.distribution_type if hasattr(self, "distribution_type") else None)!r}, '
                f'device_platform_id={(self.device_platform_id if hasattr(self, "device_platform_id") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'file_name={(self.file_name if hasattr(self, "file_name") else None)!s}, '
                f'file_version={(self.file_version if hasattr(self, "file_version") else None)!s}, '
                f'release_note={(self.release_note if hasattr(self, "release_note") else None)!s}, '
                f'make={(self.make if hasattr(self, "make") else None)!s}, '
                f'model={(self.model if hasattr(self, "model") else None)!s}, '
                f'local_target_path={(self.local_target_path if hasattr(self, "local_target_path") else None)!s}, '
                f'distribution_type={(self.distribution_type if hasattr(self, "distribution_type") else None)!s}, '
                f'device_platform_id={(self.device_platform_id if hasattr(self, "device_platform_id") else None)!s})')
