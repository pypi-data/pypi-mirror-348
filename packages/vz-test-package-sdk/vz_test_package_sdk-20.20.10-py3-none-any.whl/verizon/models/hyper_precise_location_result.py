# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.fault import Fault


class HyperPreciseLocationResult(object):

    """Implementation of the 'HyperPreciseLocationResult' model.

    Error response.

    Attributes:
        response_code (ErrorResponseCodeEnum): The model property of type
            ErrorResponseCodeEnum.
        message (str): Error message.
        fault (Fault): The model property of type Fault.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "response_code": 'responseCode',
        "message": 'message',
        "fault": 'fault'
    }

    _optionals = [
        'response_code',
        'message',
        'fault',
    ]

    def __init__(self,
                 response_code=APIHelper.SKIP,
                 message=APIHelper.SKIP,
                 fault=APIHelper.SKIP):
        """Constructor for the HyperPreciseLocationResult class"""

        # Initialize members of the class
        if response_code is not APIHelper.SKIP:
            self.response_code = response_code 
        if message is not APIHelper.SKIP:
            self.message = message 
        if fault is not APIHelper.SKIP:
            self.fault = fault 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        response_code = dictionary.get("responseCode") if dictionary.get("responseCode") else APIHelper.SKIP
        message = dictionary.get("message") if dictionary.get("message") else APIHelper.SKIP
        fault = Fault.from_dictionary(dictionary.get('fault')) if 'fault' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(response_code,
                   message,
                   fault)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'response_code={(self.response_code if hasattr(self, "response_code") else None)!r}, '
                f'message={(self.message if hasattr(self, "message") else None)!r}, '
                f'fault={(self.fault if hasattr(self, "fault") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'response_code={(self.response_code if hasattr(self, "response_code") else None)!s}, '
                f'message={(self.message if hasattr(self, "message") else None)!s}, '
                f'fault={(self.fault if hasattr(self, "fault") else None)!s})')
