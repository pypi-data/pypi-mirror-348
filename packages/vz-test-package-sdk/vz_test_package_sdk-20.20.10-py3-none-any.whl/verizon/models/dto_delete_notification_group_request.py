# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class DtoDeleteNotificationGroupRequest(object):

    """Implementation of the 'dto.DeleteNotificationGroupRequest' model.

    Attributes:
        accountname (str): The numeric account name, which must include
            leading zeros
        force (bool): The model property of type bool.
        id (str): UUID of the user record, assigned at creation

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "accountname": 'accountname',
        "force": 'force',
        "id": 'id'
    }

    _optionals = [
        'accountname',
        'force',
        'id',
    ]

    def __init__(self,
                 accountname=APIHelper.SKIP,
                 force=APIHelper.SKIP,
                 id=APIHelper.SKIP):
        """Constructor for the DtoDeleteNotificationGroupRequest class"""

        # Initialize members of the class
        if accountname is not APIHelper.SKIP:
            self.accountname = accountname 
        if force is not APIHelper.SKIP:
            self.force = force 
        if id is not APIHelper.SKIP:
            self.id = id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        accountname = dictionary.get("accountname") if dictionary.get("accountname") else APIHelper.SKIP
        force = dictionary.get("force") if "force" in dictionary.keys() else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        # Return an object of this model
        return cls(accountname,
                   force,
                   id)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'accountname={(self.accountname if hasattr(self, "accountname") else None)!r}, '
                f'force={(self.force if hasattr(self, "force") else None)!r}, '
                f'id={(self.id if hasattr(self, "id") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'accountname={(self.accountname if hasattr(self, "accountname") else None)!s}, '
                f'force={(self.force if hasattr(self, "force") else None)!s}, '
                f'id={(self.id if hasattr(self, "id") else None)!s})')
