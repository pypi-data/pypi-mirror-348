# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.filter_5 import Filter5
from verizon.models.limit_time import LimitTime


class HistorySearchRequest(object):

    """Implementation of the 'HistorySearchRequest' model.

    Used to filter data by time period or number of devices.

    Attributes:
        filter (Filter5): The model property of type Filter5.
        limit_number (int): The maximum number of historical attributes to
            include in the response. If the request matches more than this
            number of attributes, the response will contain an X-Next value in
            the header that can be used as the page value in the next request
            to retrieve the next page of events.
        limit_time (LimitTime): The model property of type LimitTime.
        page (str): Page number for pagination purposes.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "filter": '$filter',
        "limit_number": '$limitNumber',
        "limit_time": '$limitTime',
        "page": '$page'
    }

    _optionals = [
        'limit_number',
        'limit_time',
        'page',
    ]

    def __init__(self,
                 filter=None,
                 limit_number=APIHelper.SKIP,
                 limit_time=APIHelper.SKIP,
                 page=APIHelper.SKIP):
        """Constructor for the HistorySearchRequest class"""

        # Initialize members of the class
        self.filter = filter 
        if limit_number is not APIHelper.SKIP:
            self.limit_number = limit_number 
        if limit_time is not APIHelper.SKIP:
            self.limit_time = limit_time 
        if page is not APIHelper.SKIP:
            self.page = page 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        filter = Filter5.from_dictionary(dictionary.get('$filter')) if dictionary.get('$filter') else None
        limit_number = dictionary.get("$limitNumber") if dictionary.get("$limitNumber") else APIHelper.SKIP
        limit_time = LimitTime.from_dictionary(dictionary.get('$limitTime')) if '$limitTime' in dictionary.keys() else APIHelper.SKIP
        page = dictionary.get("$page") if dictionary.get("$page") else APIHelper.SKIP
        # Return an object of this model
        return cls(filter,
                   limit_number,
                   limit_time,
                   page)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'filter={self.filter!r}, '
                f'limit_number={(self.limit_number if hasattr(self, "limit_number") else None)!r}, '
                f'limit_time={(self.limit_time if hasattr(self, "limit_time") else None)!r}, '
                f'page={(self.page if hasattr(self, "page") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'filter={self.filter!s}, '
                f'limit_number={(self.limit_number if hasattr(self, "limit_number") else None)!s}, '
                f'limit_time={(self.limit_time if hasattr(self, "limit_time") else None)!s}, '
                f'page={(self.page if hasattr(self, "page") else None)!s})')
