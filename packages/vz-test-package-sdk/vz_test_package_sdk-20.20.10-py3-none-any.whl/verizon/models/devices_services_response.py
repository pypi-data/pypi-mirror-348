# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.device_service_information import DeviceServiceInformation
from verizon.models.response_type import ResponseType


class DevicesServicesResponse(object):

    """Implementation of the 'Devices Services Response' model.

    Attributes:
        account_number (str): The account the device belongs to.
        device_list (List[DeviceServiceInformation]): List of devices.
        response_type (ResponseType): The model property of type ResponseType.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_number": 'accountNumber',
        "device_list": 'deviceList',
        "response_type": 'responseType'
    }

    _optionals = [
        'account_number',
        'device_list',
        'response_type',
    ]

    def __init__(self,
                 account_number=APIHelper.SKIP,
                 device_list=APIHelper.SKIP,
                 response_type=APIHelper.SKIP):
        """Constructor for the DevicesServicesResponse class"""

        # Initialize members of the class
        if account_number is not APIHelper.SKIP:
            self.account_number = account_number 
        if device_list is not APIHelper.SKIP:
            self.device_list = device_list 
        if response_type is not APIHelper.SKIP:
            self.response_type = response_type 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_number = dictionary.get("accountNumber") if dictionary.get("accountNumber") else APIHelper.SKIP
        device_list = None
        if dictionary.get('deviceList') is not None:
            device_list = [DeviceServiceInformation.from_dictionary(x) for x in dictionary.get('deviceList')]
        else:
            device_list = APIHelper.SKIP
        response_type = ResponseType.from_dictionary(dictionary.get('responseType')) if 'responseType' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(account_number,
                   device_list,
                   response_type)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_number={(self.account_number if hasattr(self, "account_number") else None)!r}, '
                f'device_list={(self.device_list if hasattr(self, "device_list") else None)!r}, '
                f'response_type={(self.response_type if hasattr(self, "response_type") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_number={(self.account_number if hasattr(self, "account_number") else None)!s}, '
                f'device_list={(self.device_list if hasattr(self, "device_list") else None)!s}, '
                f'response_type={(self.response_type if hasattr(self, "response_type") else None)!s})')
