# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.accountidentifier_1 import Accountidentifier1
from verizon.models.create_target_request_fields import CreateTargetRequestFields
from verizon.models.oauth import Oauth


class CreateTargetRequest(object):

    """Implementation of the 'CreateTargetRequest' model.

    Details of the target that you want to create.

    Attributes:
        accountidentifier (Accountidentifier1): The model property of type
            Accountidentifier1.
        billingaccountid (str): The ID of the authenticating billing account.
        kind (str): Identifies the resource kind. Targets are ts.target.
        address (str): The endpoint for notifications or data streams. The
            format depends on the selected `addressscheme`.<br />`streamrest`
            requires a `host:port` value <br />`streamawsiot` requres a valid
            ARN.
        addressscheme (str): The transport format. Valid values are: <br
            />streamawsiot - streamed data to an AWS account <br />streamrest
            - streamed REST data to a defined endpoint.
        fields (CreateTargetRequestFields): The model property of type
            CreateTargetRequestFields.
        description (str): Descriptive information about the target.
        externalid (str): Security identification string created by a POST
            /targets/actions/newextid request.
        name (str): Name of the target.
        region (str): AWS region value.
        key_1 (str): OAuth 2.0 bearer token.
        oauth (Oauth): The model property of type Oauth.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "accountidentifier": 'accountidentifier',
        "billingaccountid": 'billingaccountid',
        "kind": 'kind',
        "address": 'address',
        "addressscheme": 'addressscheme',
        "fields": 'fields',
        "description": 'description',
        "externalid": 'externalid',
        "name": 'name',
        "region": 'region',
        "key_1": 'key1',
        "oauth": 'oauth'
    }

    _optionals = [
        'accountidentifier',
        'billingaccountid',
        'kind',
        'address',
        'addressscheme',
        'fields',
        'description',
        'externalid',
        'name',
        'region',
        'key_1',
        'oauth',
    ]

    def __init__(self,
                 accountidentifier=APIHelper.SKIP,
                 billingaccountid=APIHelper.SKIP,
                 kind=APIHelper.SKIP,
                 address=APIHelper.SKIP,
                 addressscheme=APIHelper.SKIP,
                 fields=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 externalid=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 region=APIHelper.SKIP,
                 key_1=APIHelper.SKIP,
                 oauth=APIHelper.SKIP):
        """Constructor for the CreateTargetRequest class"""

        # Initialize members of the class
        if accountidentifier is not APIHelper.SKIP:
            self.accountidentifier = accountidentifier 
        if billingaccountid is not APIHelper.SKIP:
            self.billingaccountid = billingaccountid 
        if kind is not APIHelper.SKIP:
            self.kind = kind 
        if address is not APIHelper.SKIP:
            self.address = address 
        if addressscheme is not APIHelper.SKIP:
            self.addressscheme = addressscheme 
        if fields is not APIHelper.SKIP:
            self.fields = fields 
        if description is not APIHelper.SKIP:
            self.description = description 
        if externalid is not APIHelper.SKIP:
            self.externalid = externalid 
        if name is not APIHelper.SKIP:
            self.name = name 
        if region is not APIHelper.SKIP:
            self.region = region 
        if key_1 is not APIHelper.SKIP:
            self.key_1 = key_1 
        if oauth is not APIHelper.SKIP:
            self.oauth = oauth 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        accountidentifier = Accountidentifier1.from_dictionary(dictionary.get('accountidentifier')) if 'accountidentifier' in dictionary.keys() else APIHelper.SKIP
        billingaccountid = dictionary.get("billingaccountid") if dictionary.get("billingaccountid") else APIHelper.SKIP
        kind = dictionary.get("kind") if dictionary.get("kind") else APIHelper.SKIP
        address = dictionary.get("address") if dictionary.get("address") else APIHelper.SKIP
        addressscheme = dictionary.get("addressscheme") if dictionary.get("addressscheme") else APIHelper.SKIP
        fields = CreateTargetRequestFields.from_dictionary(dictionary.get('fields')) if 'fields' in dictionary.keys() else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        externalid = dictionary.get("externalid") if dictionary.get("externalid") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        region = dictionary.get("region") if dictionary.get("region") else APIHelper.SKIP
        key_1 = dictionary.get("key1") if dictionary.get("key1") else APIHelper.SKIP
        oauth = Oauth.from_dictionary(dictionary.get('oauth')) if 'oauth' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(accountidentifier,
                   billingaccountid,
                   kind,
                   address,
                   addressscheme,
                   fields,
                   description,
                   externalid,
                   name,
                   region,
                   key_1,
                   oauth)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'accountidentifier={(self.accountidentifier if hasattr(self, "accountidentifier") else None)!r}, '
                f'billingaccountid={(self.billingaccountid if hasattr(self, "billingaccountid") else None)!r}, '
                f'kind={(self.kind if hasattr(self, "kind") else None)!r}, '
                f'address={(self.address if hasattr(self, "address") else None)!r}, '
                f'addressscheme={(self.addressscheme if hasattr(self, "addressscheme") else None)!r}, '
                f'fields={(self.fields if hasattr(self, "fields") else None)!r}, '
                f'description={(self.description if hasattr(self, "description") else None)!r}, '
                f'externalid={(self.externalid if hasattr(self, "externalid") else None)!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'region={(self.region if hasattr(self, "region") else None)!r}, '
                f'key_1={(self.key_1 if hasattr(self, "key_1") else None)!r}, '
                f'oauth={(self.oauth if hasattr(self, "oauth") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'accountidentifier={(self.accountidentifier if hasattr(self, "accountidentifier") else None)!s}, '
                f'billingaccountid={(self.billingaccountid if hasattr(self, "billingaccountid") else None)!s}, '
                f'kind={(self.kind if hasattr(self, "kind") else None)!s}, '
                f'address={(self.address if hasattr(self, "address") else None)!s}, '
                f'addressscheme={(self.addressscheme if hasattr(self, "addressscheme") else None)!s}, '
                f'fields={(self.fields if hasattr(self, "fields") else None)!s}, '
                f'description={(self.description if hasattr(self, "description") else None)!s}, '
                f'externalid={(self.externalid if hasattr(self, "externalid") else None)!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'region={(self.region if hasattr(self, "region") else None)!s}, '
                f'key_1={(self.key_1 if hasattr(self, "key_1") else None)!s}, '
                f'oauth={(self.oauth if hasattr(self, "oauth") else None)!s})')
