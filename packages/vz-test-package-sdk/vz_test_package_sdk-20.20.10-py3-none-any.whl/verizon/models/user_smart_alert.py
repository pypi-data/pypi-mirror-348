# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class UserSmartAlert(object):

    """Implementation of the 'user.SmartAlert' model.

    Attributes:
        accountclientid (str): Not used in this release, future functionality
        billingaccountid (str): The billing account ID. This is the same value
            as the Account ID
        category (str): The type of alert and will be either `telemetry` or
            `infrastructure`
        condition (int): The condition or threshold for an alert
        createdon (datetime): Timestamp of the record
        description (str): a short description
        deviceid (str): This is a UUID value of the device created when the
            device is onboarded
        foreignid (str): UUID of the ECPD account the user belongs to
        id (str): UUID of the user record, assigned at creation
        isacknowledged (bool): A flag that indicates if the alarm has been
            acknowledged
        iscleared (bool): A flag that indicates if the alarm has been cleared
        isdisabled (bool): A flag that indicates if the alarm has been disabled
        lastupdated (datetime): Timestamp of the record
        name (str): User defined name of the record
        ruleid (str): The UUID of a rule for alerts
        severity (str): The threshold value to trigger an alert and will be
            Critical, major or minor
        state (str): The current status of the device or transaction and will
            be `success` or `failed`
        template (str): template of the rule which triggered a given alert
        version (str): The resource version
        versionid (str): The UUID of the resource version

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "createdon": 'createdon',
        "lastupdated": 'lastupdated',
        "versionid": 'versionid',
        "accountclientid": 'accountclientid',
        "billingaccountid": 'billingaccountid',
        "category": 'category',
        "condition": 'condition',
        "description": 'description',
        "deviceid": 'deviceid',
        "foreignid": 'foreignid',
        "id": 'id',
        "isacknowledged": 'isacknowledged',
        "iscleared": 'iscleared',
        "isdisabled": 'isdisabled',
        "name": 'name',
        "ruleid": 'ruleid',
        "severity": 'severity',
        "state": 'state',
        "template": 'template',
        "version": 'version'
    }

    _optionals = [
        'accountclientid',
        'billingaccountid',
        'category',
        'condition',
        'description',
        'deviceid',
        'foreignid',
        'id',
        'isacknowledged',
        'iscleared',
        'isdisabled',
        'name',
        'ruleid',
        'severity',
        'state',
        'template',
        'version',
    ]

    def __init__(self,
                 createdon=None,
                 lastupdated=None,
                 versionid=None,
                 accountclientid=APIHelper.SKIP,
                 billingaccountid=APIHelper.SKIP,
                 category=APIHelper.SKIP,
                 condition=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 deviceid=APIHelper.SKIP,
                 foreignid=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 isacknowledged=APIHelper.SKIP,
                 iscleared=APIHelper.SKIP,
                 isdisabled=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 ruleid=APIHelper.SKIP,
                 severity=APIHelper.SKIP,
                 state=APIHelper.SKIP,
                 template=APIHelper.SKIP,
                 version=APIHelper.SKIP):
        """Constructor for the UserSmartAlert class"""

        # Initialize members of the class
        if accountclientid is not APIHelper.SKIP:
            self.accountclientid = accountclientid 
        if billingaccountid is not APIHelper.SKIP:
            self.billingaccountid = billingaccountid 
        if category is not APIHelper.SKIP:
            self.category = category 
        if condition is not APIHelper.SKIP:
            self.condition = condition 
        self.createdon = APIHelper.apply_datetime_converter(createdon, APIHelper.RFC3339DateTime) if createdon else None 
        if description is not APIHelper.SKIP:
            self.description = description 
        if deviceid is not APIHelper.SKIP:
            self.deviceid = deviceid 
        if foreignid is not APIHelper.SKIP:
            self.foreignid = foreignid 
        if id is not APIHelper.SKIP:
            self.id = id 
        if isacknowledged is not APIHelper.SKIP:
            self.isacknowledged = isacknowledged 
        if iscleared is not APIHelper.SKIP:
            self.iscleared = iscleared 
        if isdisabled is not APIHelper.SKIP:
            self.isdisabled = isdisabled 
        self.lastupdated = APIHelper.apply_datetime_converter(lastupdated, APIHelper.RFC3339DateTime) if lastupdated else None 
        if name is not APIHelper.SKIP:
            self.name = name 
        if ruleid is not APIHelper.SKIP:
            self.ruleid = ruleid 
        if severity is not APIHelper.SKIP:
            self.severity = severity 
        if state is not APIHelper.SKIP:
            self.state = state 
        if template is not APIHelper.SKIP:
            self.template = template 
        if version is not APIHelper.SKIP:
            self.version = version 
        self.versionid = versionid 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        createdon = APIHelper.RFC3339DateTime.from_value(dictionary.get("createdon")).datetime if dictionary.get("createdon") else None
        lastupdated = APIHelper.RFC3339DateTime.from_value(dictionary.get("lastupdated")).datetime if dictionary.get("lastupdated") else None
        versionid = dictionary.get("versionid") if dictionary.get("versionid") else None
        accountclientid = dictionary.get("accountclientid") if dictionary.get("accountclientid") else APIHelper.SKIP
        billingaccountid = dictionary.get("billingaccountid") if dictionary.get("billingaccountid") else APIHelper.SKIP
        category = dictionary.get("category") if dictionary.get("category") else APIHelper.SKIP
        condition = dictionary.get("condition") if dictionary.get("condition") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        deviceid = dictionary.get("deviceid") if dictionary.get("deviceid") else APIHelper.SKIP
        foreignid = dictionary.get("foreignid") if dictionary.get("foreignid") else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        isacknowledged = dictionary.get("isacknowledged") if "isacknowledged" in dictionary.keys() else APIHelper.SKIP
        iscleared = dictionary.get("iscleared") if "iscleared" in dictionary.keys() else APIHelper.SKIP
        isdisabled = dictionary.get("isdisabled") if "isdisabled" in dictionary.keys() else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        ruleid = dictionary.get("ruleid") if dictionary.get("ruleid") else APIHelper.SKIP
        severity = dictionary.get("severity") if dictionary.get("severity") else APIHelper.SKIP
        state = dictionary.get("state") if dictionary.get("state") else APIHelper.SKIP
        template = dictionary.get("template") if dictionary.get("template") else APIHelper.SKIP
        version = dictionary.get("version") if dictionary.get("version") else APIHelper.SKIP
        # Return an object of this model
        return cls(createdon,
                   lastupdated,
                   versionid,
                   accountclientid,
                   billingaccountid,
                   category,
                   condition,
                   description,
                   deviceid,
                   foreignid,
                   id,
                   isacknowledged,
                   iscleared,
                   isdisabled,
                   name,
                   ruleid,
                   severity,
                   state,
                   template,
                   version)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'accountclientid={(self.accountclientid if hasattr(self, "accountclientid") else None)!r}, '
                f'billingaccountid={(self.billingaccountid if hasattr(self, "billingaccountid") else None)!r}, '
                f'category={(self.category if hasattr(self, "category") else None)!r}, '
                f'condition={(self.condition if hasattr(self, "condition") else None)!r}, '
                f'createdon={self.createdon!r}, '
                f'description={(self.description if hasattr(self, "description") else None)!r}, '
                f'deviceid={(self.deviceid if hasattr(self, "deviceid") else None)!r}, '
                f'foreignid={(self.foreignid if hasattr(self, "foreignid") else None)!r}, '
                f'id={(self.id if hasattr(self, "id") else None)!r}, '
                f'isacknowledged={(self.isacknowledged if hasattr(self, "isacknowledged") else None)!r}, '
                f'iscleared={(self.iscleared if hasattr(self, "iscleared") else None)!r}, '
                f'isdisabled={(self.isdisabled if hasattr(self, "isdisabled") else None)!r}, '
                f'lastupdated={self.lastupdated!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'ruleid={(self.ruleid if hasattr(self, "ruleid") else None)!r}, '
                f'severity={(self.severity if hasattr(self, "severity") else None)!r}, '
                f'state={(self.state if hasattr(self, "state") else None)!r}, '
                f'template={(self.template if hasattr(self, "template") else None)!r}, '
                f'version={(self.version if hasattr(self, "version") else None)!r}, '
                f'versionid={self.versionid!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'accountclientid={(self.accountclientid if hasattr(self, "accountclientid") else None)!s}, '
                f'billingaccountid={(self.billingaccountid if hasattr(self, "billingaccountid") else None)!s}, '
                f'category={(self.category if hasattr(self, "category") else None)!s}, '
                f'condition={(self.condition if hasattr(self, "condition") else None)!s}, '
                f'createdon={self.createdon!s}, '
                f'description={(self.description if hasattr(self, "description") else None)!s}, '
                f'deviceid={(self.deviceid if hasattr(self, "deviceid") else None)!s}, '
                f'foreignid={(self.foreignid if hasattr(self, "foreignid") else None)!s}, '
                f'id={(self.id if hasattr(self, "id") else None)!s}, '
                f'isacknowledged={(self.isacknowledged if hasattr(self, "isacknowledged") else None)!s}, '
                f'iscleared={(self.iscleared if hasattr(self, "iscleared") else None)!s}, '
                f'isdisabled={(self.isdisabled if hasattr(self, "isdisabled") else None)!s}, '
                f'lastupdated={self.lastupdated!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'ruleid={(self.ruleid if hasattr(self, "ruleid") else None)!s}, '
                f'severity={(self.severity if hasattr(self, "severity") else None)!s}, '
                f'state={(self.state if hasattr(self, "state") else None)!s}, '
                f'template={(self.template if hasattr(self, "template") else None)!s}, '
                f'version={(self.version if hasattr(self, "version") else None)!s}, '
                f'versionid={self.versionid!s})')
