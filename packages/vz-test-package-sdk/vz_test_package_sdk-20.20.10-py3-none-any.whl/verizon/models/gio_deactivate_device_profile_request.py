# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.gio_device_list import GIODeviceList


class GIODeactivateDeviceProfileRequest(object):

    """Implementation of the 'GIODeactivateDeviceProfileRequest' model.

    Attributes:
        devices (List[GIODeviceList]): The model property of type
            List[GIODeviceList].
        account_name (str): The model property of type str.
        service_plan (str): The model property of type str.
        etf_waiver (bool): The model property of type bool.
        reason_code (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "devices": 'devices',
        "account_name": 'accountName',
        "service_plan": 'servicePlan',
        "etf_waiver": 'etfWaiver',
        "reason_code": 'reasonCode'
    }

    _optionals = [
        'devices',
        'account_name',
        'service_plan',
        'etf_waiver',
        'reason_code',
    ]

    def __init__(self,
                 devices=APIHelper.SKIP,
                 account_name=APIHelper.SKIP,
                 service_plan=APIHelper.SKIP,
                 etf_waiver=False,
                 reason_code=APIHelper.SKIP):
        """Constructor for the GIODeactivateDeviceProfileRequest class"""

        # Initialize members of the class
        if devices is not APIHelper.SKIP:
            self.devices = devices 
        if account_name is not APIHelper.SKIP:
            self.account_name = account_name 
        if service_plan is not APIHelper.SKIP:
            self.service_plan = service_plan 
        self.etf_waiver = etf_waiver 
        if reason_code is not APIHelper.SKIP:
            self.reason_code = reason_code 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        devices = None
        if dictionary.get('devices') is not None:
            devices = [GIODeviceList.from_dictionary(x) for x in dictionary.get('devices')]
        else:
            devices = APIHelper.SKIP
        account_name = dictionary.get("accountName") if dictionary.get("accountName") else APIHelper.SKIP
        service_plan = dictionary.get("servicePlan") if dictionary.get("servicePlan") else APIHelper.SKIP
        etf_waiver = dictionary.get("etfWaiver") if dictionary.get("etfWaiver") else False
        reason_code = dictionary.get("reasonCode") if dictionary.get("reasonCode") else APIHelper.SKIP
        # Return an object of this model
        return cls(devices,
                   account_name,
                   service_plan,
                   etf_waiver,
                   reason_code)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'devices={(self.devices if hasattr(self, "devices") else None)!r}, '
                f'account_name={(self.account_name if hasattr(self, "account_name") else None)!r}, '
                f'service_plan={(self.service_plan if hasattr(self, "service_plan") else None)!r}, '
                f'etf_waiver={(self.etf_waiver if hasattr(self, "etf_waiver") else None)!r}, '
                f'reason_code={(self.reason_code if hasattr(self, "reason_code") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'devices={(self.devices if hasattr(self, "devices") else None)!s}, '
                f'account_name={(self.account_name if hasattr(self, "account_name") else None)!s}, '
                f'service_plan={(self.service_plan if hasattr(self, "service_plan") else None)!s}, '
                f'etf_waiver={(self.etf_waiver if hasattr(self, "etf_waiver") else None)!s}, '
                f'reason_code={(self.reason_code if hasattr(self, "reason_code") else None)!s})')
