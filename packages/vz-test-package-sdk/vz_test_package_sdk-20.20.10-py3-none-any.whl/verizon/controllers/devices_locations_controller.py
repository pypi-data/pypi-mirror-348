# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from verizon.api_helper import APIHelper
from verizon.configuration import Server
from verizon.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from verizon.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from verizon.models.location import Location
from verizon.models.synchronous_location_request_result import SynchronousLocationRequestResult
from verizon.models.asynchronous_location_request_result import AsynchronousLocationRequestResult
from verizon.models.locationreports_report_index_startindex_response import LocationreportsReportIndexStartindexResponse
from verizon.models.locationreports_report_status_response import LocationreportsReportStatusResponse
from verizon.models.locationreports_report_response import LocationreportsReportResponse
from verizon.exceptions.locations_0_error_exception import Locations0ErrorException
from verizon.exceptions.devicelocations_0_error_exception import Devicelocations0ErrorException
from verizon.exceptions.locationreports_0_error_exception import Locationreports0ErrorException
from verizon.exceptions.locationreports_report_index_startindex_0_error_exception import LocationreportsReportIndexStartindex0ErrorException
from verizon.exceptions.locationreports_report_status_0_error_exception import LocationreportsReportStatus0ErrorException
from verizon.exceptions.locationreports_report_0_error_exception import LocationreportsReport0ErrorException


class DevicesLocationsController(BaseController):

    """A Controller to access Endpoints in the verizon API."""
    def __init__(self, config):
        super(DevicesLocationsController, self).__init__(config)

    def list_devices_locations_synchronous(self,
                                           body):
        """Does a POST request to /locations.

        This locations endpoint retrieves the locations for a list of devices.

        Args:
            body (LocationsRequest): Request to obtain location of devices.

        Returns:
            List[Location]: Response from the API. List of JSON objects, each
                containing the position data or an error for a device in the
                request.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/locations')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Location.from_dictionary)
            .local_error('default', 'Unexpected error.', Locations0ErrorException)
        ).execute()

    def list_devices_locations_asynchronous(self,
                                            body):
        """Does a POST request to /devicelocations.

        Requests the current or cached location of up to 10,000 IoT or
        consumer devices (phones, tablets. etc.). This request returns a
        synchronous transaction ID, and the location information for each
        device is returned asynchronously as a DeviceLocation callback message.

        Args:
            body (DevicelocationsRequest): An asynchronous request to obtain
                locations of devices.

        Returns:
            SynchronousLocationRequestResult: Response from the API. Request
                accepted; location report in progress

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/devicelocations')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('*/*'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SynchronousLocationRequestResult.from_dictionary)
            .local_error('default', 'Unexpected error.', Devicelocations0ErrorException)
        ).execute()

    def create_location_report(self,
                               body):
        """Does a POST request to /locationreports.

        Request an asynchronous device location report.

        Args:
            body (LocationreportsRequest): Request for device location report.

        Returns:
            AsynchronousLocationRequestResult: Response from the API. Request
                accepted; location report in progress.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/locationreports')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('*/*'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AsynchronousLocationRequestResult.from_dictionary)
            .local_error('default', 'Unexpected error.', Locationreports0ErrorException)
        ).execute()

    def retrieve_location_report(self,
                                 account_name,
                                 txid,
                                 startindex):
        """Does a GET request to /locationreports/{accountName}/report/{txid}/index/{startindex}.

        Download a completed asynchronous device location report.

        Args:
            account_name (str): Account identifier in "##########-#####".
            txid (str): Transaction ID from POST /locationreports response.
            startindex (int): Zero-based number of the first record to return.

        Returns:
            LocationreportsReportIndexStartindexResponse: Response from the
                API. Location information for up to 1,000 devices.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/locationreports/{accountName}/report/{txid}/index/{startindex}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('accountName')
                            .value(account_name)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('txid')
                            .value(txid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('startindex')
                            .value(startindex)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LocationreportsReportIndexStartindexResponse.from_dictionary)
            .local_error('default', 'Unexpected error.', LocationreportsReportIndexStartindex0ErrorException)
        ).execute()

    def get_location_report_status(self,
                                   account_name,
                                   txid):
        """Does a GET request to /locationreports/{accountName}/report/{txid}/status.

        Returns the current status of a requested device location report.

        Args:
            account_name (str): Account identifier in "##########-#####".
            txid (str): Transaction ID of the report.

        Returns:
            LocationreportsReportStatusResponse: Response from the API.
                Location report status.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/locationreports/{accountName}/report/{txid}/status')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('accountName')
                            .value(account_name)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('txid')
                            .value(txid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LocationreportsReportStatusResponse.from_dictionary)
            .local_error('default', 'Unexpected error.', LocationreportsReportStatus0ErrorException)
        ).execute()

    def cancel_queued_location_report_generation(self,
                                                 account_name,
                                                 txid):
        """Does a DELETE request to /locationreports/{accountName}/report/{txid}.

        Cancel a queued device location report.

        Args:
            account_name (str): Account identifier in "##########-#####".
            txid (str): Transaction ID of the report to cancel.

        Returns:
            LocationreportsReportResponse: Response from the API. Report
                generation cancelled.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/locationreports/{accountName}/report/{txid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('accountName')
                            .value(account_name)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('txid')
                            .value(txid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LocationreportsReportResponse.from_dictionary)
            .local_error('default', 'Unexpected error.', LocationreportsReport0ErrorException)
        ).execute()
