# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from verizon.api_helper import APIHelper
from verizon.configuration import Server
from verizon.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from verizon.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from verizon.models.report_aggregate_response import ReportAggregateResponse
from verizon.models.report_async_aggregate_response import ReportAsyncAggregateResponse
from verizon.models.report_sessions_response import ReportSessionsResponse
from verizon.exceptions.report_aggregate_400_error_exception import ReportAggregate400ErrorException
from verizon.exceptions.report_aggregate_401_error_exception import ReportAggregate401ErrorException
from verizon.exceptions.report_aggregate_403_error_exception import ReportAggregate403ErrorException
from verizon.exceptions.report_aggregate_404_error_exception import ReportAggregate404ErrorException
from verizon.exceptions.report_aggregate_409_error_exception import ReportAggregate409ErrorException
from verizon.exceptions.report_aggregate_500_error_exception import ReportAggregate500ErrorException
from verizon.exceptions.report_async_aggregate_400_error_exception import ReportAsyncAggregate400ErrorException
from verizon.exceptions.report_async_aggregate_401_error_exception import ReportAsyncAggregate401ErrorException
from verizon.exceptions.report_async_aggregate_403_error_exception import ReportAsyncAggregate403ErrorException
from verizon.exceptions.report_async_aggregate_404_error_exception import ReportAsyncAggregate404ErrorException
from verizon.exceptions.report_async_aggregate_409_error_exception import ReportAsyncAggregate409ErrorException
from verizon.exceptions.report_async_aggregate_500_error_exception import ReportAsyncAggregate500ErrorException
from verizon.exceptions.report_sessions_400_error_exception import ReportSessions400ErrorException
from verizon.exceptions.report_sessions_401_error_exception import ReportSessions401ErrorException
from verizon.exceptions.report_sessions_403_error_exception import ReportSessions403ErrorException
from verizon.exceptions.report_sessions_404_error_exception import ReportSessions404ErrorException
from verizon.exceptions.report_sessions_409_error_exception import ReportSessions409ErrorException
from verizon.exceptions.report_sessions_500_error_exception import ReportSessions500ErrorException


class DeviceReportsController(BaseController):

    """A Controller to access Endpoints in the verizon API."""
    def __init__(self, config):
        super(DeviceReportsController, self).__init__(config)

    def calculate_aggregated_report_synchronous(self,
                                                body):
        """Does a POST request to /report/aggregate.

        Calculate aggregated report per day with number of sessions and usage
        information. User will receive synchronous response for specified list
        of devices (Max 10) and date range (Max 180 days).

        Args:
            body (ReportAggregateRequest): Aggregated report request.

        Returns:
            ReportAggregateResponse: Response from the API. A successful
                response shows session and usage details for up to 10 devices.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/report/aggregate')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReportAggregateResponse.from_dictionary)
            .local_error('400', 'Bad request.', ReportAggregate400ErrorException)
            .local_error('401', 'Unauthorized request. Access token is missing or invalid.', ReportAggregate401ErrorException)
            .local_error('403', 'Forbidden request.', ReportAggregate403ErrorException)
            .local_error('404', 'Bad request. Not found.', ReportAggregate404ErrorException)
            .local_error('409', 'Bad request. Conflict state.', ReportAggregate409ErrorException)
            .local_error('500', 'Internal Server Error.', ReportAggregate500ErrorException)
        ).execute()

    def calculate_aggregated_report_asynchronous(self,
                                                 body):
        """Does a POST request to /report/async/aggregate.

        Calculate aggregated report per day with number of sessions and usage
        information. User will receive an asynchronous callback for the
        specified list of devices (Max 10000) and date range (Max 180 days).

        Args:
            body (ReportAsyncAggregateRequest): Aggregated session report
                request.

        Returns:
            ReportAsyncAggregateResponse: Response from the API. A successful
                response shows the request is queued with a unique `txid` to
                identify the report data with.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/report/async/aggregate')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReportAsyncAggregateResponse.from_dictionary)
            .local_error('400', 'Bad request.', ReportAsyncAggregate400ErrorException)
            .local_error('401', 'Unauthorized request. Access token is missing or invalid.', ReportAsyncAggregate401ErrorException)
            .local_error('403', 'Forbidden request.', ReportAsyncAggregate403ErrorException)
            .local_error('404', 'Bad request. Not found.', ReportAsyncAggregate404ErrorException)
            .local_error('409', 'Bad request. Conflict state.', ReportAsyncAggregate409ErrorException)
            .local_error('500', 'Internal Server Error.', ReportAsyncAggregate500ErrorException)
        ).execute()

    def get_sessions_report(self,
                            body):
        """Does a POST request to /report/sessions.

        Detailed report of session duration and number of bytes transferred
        per day.

        Args:
            body (ReportSessionsRequest): Request for sessions report.

        Returns:
            ReportSessionsResponse: Response from the API. A successful
                response includes the session information for an individual
                device.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/report/sessions')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReportSessionsResponse.from_dictionary)
            .local_error('400', 'Bad request.', ReportSessions400ErrorException)
            .local_error('401', 'Unauthorized request. Access token is missing or invalid.', ReportSessions401ErrorException)
            .local_error('403', 'Forbidden request.', ReportSessions403ErrorException)
            .local_error('404', 'Bad request. Not found.', ReportSessions404ErrorException)
            .local_error('409', 'Bad request. Conflict state.', ReportSessions409ErrorException)
            .local_error('500', 'Internal Server Error.', ReportSessions500ErrorException)
        ).execute()
