# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from verizon.api_helper import APIHelper
from verizon.configuration import Server
from verizon.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from verizon.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from verizon.models.m_2_m_v_1_diagnostics_basic_devicereachability_status_response import M2mV1DiagnosticsBasicDevicereachabilityStatusResponse
from verizon.models.m_2_m_v_1_diagnostics_basic_devicereachability_monitors_response import M2mV1DiagnosticsBasicDevicereachabilityMonitorsResponse
from verizon.exceptions.m_2_m_v_1_diagnostics_basic_devicereachability_status_400_error_exception import M2mV1DiagnosticsBasicDevicereachabilityStatus400ErrorException
from verizon.exceptions.m_2_m_v_1_diagnostics_basic_devicereachability_monitors_400_error_exception import M2mV1DiagnosticsBasicDevicereachabilityMonitors400ErrorException


class DeviceDiagnosticsController(BaseController):

    """A Controller to access Endpoints in the verizon API."""
    def __init__(self, config):
        super(DeviceDiagnosticsController, self).__init__(config)

    def device_reachability_status_using_post(self,
                                              body):
        """Does a POST request to /m2m/v1/diagnostics/basic/devicereachability/status.

        If the devices do not already exist in the account, this API resource
        adds them before activation.

        Args:
            body (NotificationReportStatusRequest): Retrieve Reachability
                Report Status for a device.

        Returns:
            M2mV1DiagnosticsBasicDevicereachabilityStatusResponse: Response
                from the API. Request ID received on a successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/diagnostics/basic/devicereachability/status')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M2mV1DiagnosticsBasicDevicereachabilityStatusResponse.from_dictionary)
            .local_error('400', 'Error response.', M2mV1DiagnosticsBasicDevicereachabilityStatus400ErrorException)
        ).execute()

    def retrieve_active_monitors_using_post(self,
                                            body):
        """Does a POST request to /m2m/v1/diagnostics/basic/devicereachability/monitors.

        Retrieve all the active monitors.

        Args:
            body (RetrieveMonitorsRequest): Retrieve Monitor Request.

        Returns:
            M2mV1DiagnosticsBasicDevicereachabilityMonitorsResponse: Response
                from the API. Request ID received on a successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/diagnostics/basic/devicereachability/monitors')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M2mV1DiagnosticsBasicDevicereachabilityMonitorsResponse.from_dictionary)
            .local_error('400', 'Error response.', M2mV1DiagnosticsBasicDevicereachabilityMonitors400ErrorException)
        ).execute()
