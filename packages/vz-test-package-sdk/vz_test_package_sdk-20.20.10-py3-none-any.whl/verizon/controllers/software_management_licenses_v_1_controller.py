# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from deprecation import deprecated
from verizon.api_helper import APIHelper
from verizon.configuration import Server
from verizon.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from verizon.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from verizon.models.licenses_assign_response import LicensesAssignResponse
from verizon.models.licenses_remove_response import LicensesRemoveResponse
from verizon.models.licenses_cancel_response import LicensesCancelResponse
from verizon.models.licenses_cancel_response_1 import LicensesCancelResponse1
from verizon.models.licenses_cancel_index_response import LicensesCancelIndexResponse
from verizon.exceptions.licenses_assign_400_error_exception import LicensesAssign400ErrorException
from verizon.exceptions.licenses_remove_400_error_exception import LicensesRemove400ErrorException
from verizon.exceptions.licenses_cancel_400_error_exception import LicensesCancel400ErrorException
from verizon.exceptions.licenses_cancel_index_400_error_exception import LicensesCancelIndex400ErrorException


class SoftwareManagementLicensesV1Controller(BaseController):

    """A Controller to access Endpoints in the verizon API."""
    def __init__(self, config):
        super(SoftwareManagementLicensesV1Controller, self).__init__(config)

    @deprecated()
    def assign_licenses_to_devices(self,
                                   account,
                                   body):
        """Does a POST request to /licenses/{account}/assign.

        Assigns licenses to a specified list of devices so that firmware
        upgrades can be scheduled for those devices.

        Args:
            account (str): Account identifier in "##########-#####".
            body (LicensesAssignRequest): IMEIs of the devices to assign
                licenses to.

        Returns:
            LicensesAssignResponse: Response from the API. List of licenses
                assigned.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/licenses/{account}/assign')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LicensesAssignResponse.from_dictionary)
            .local_error('400', 'Unexpected error.', LicensesAssign400ErrorException)
        ).execute()

    @deprecated()
    def remove_licenses_from_devices(self,
                                     account,
                                     body):
        """Does a POST request to /licenses/{account}/remove.

        Remove unused licenses from device.

        Args:
            account (str): Account identifier in "##########-#####".
            body (LicensesRemoveRequest): IMEIs of the devices to remove
                licenses from.

        Returns:
            LicensesRemoveResponse: Response from the API. List of devices
                with license removal status.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/licenses/{account}/remove')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LicensesRemoveResponse.from_dictionary)
            .local_error('400', 'Unexpected error.', LicensesRemove400ErrorException)
        ).execute()

    @deprecated()
    def create_list_of_licenses_to_remove(self,
                                          account,
                                          body):
        """Does a POST request to /licenses/{account}/cancel.

        Creates a list of devices from which licenses will be removed if the
        number of MRC licenses becomes less than the number of assigned
        licenses.

        Args:
            account (str): Account identifier in "##########-#####".
            body (LicensesCancelRequest): Cancellation candidate device list.

        Returns:
            LicensesCancelResponse: Response from the API. List of licenses
                assigned.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/licenses/{account}/cancel')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LicensesCancelResponse.from_dictionary)
            .local_error('400', 'Unexpected error.', LicensesCancel400ErrorException)
        ).execute()

    @deprecated()
    def delete_list_of_licenses_to_remove(self,
                                          account):
        """Does a DELETE request to /licenses/{account}/cancel.

        Deletes the entire list of cancellation candidate devices.

        Args:
            account (str): Account identifier in "##########-#####".

        Returns:
            LicensesCancelResponse1: Response from the API. Upgrade canceled.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/licenses/{account}/cancel')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LicensesCancelResponse1.from_dictionary)
            .local_error('400', 'Unexpected error.', LicensesCancel400ErrorException)
        ).execute()

    @deprecated()
    def list_licenses_to_remove(self,
                                account,
                                start_index):
        """Does a GET request to /licenses/{account}/cancel/index/{startIndex}.

        Returns a list of devices from which licenses will be removed if the
        number of MRC licenses becomes less than the number of assigned
        licenses.

        Args:
            account (str): Account identifier in "##########-#####".
            start_index (str): The zero-based number of the first record to
                return. Set startIndex=0 for the first request. If there are
                more than 1,000 devices in the response, set startIndex=1000
                for the second request, 2000 for the third request, etc.

        Returns:
            LicensesCancelIndexResponse: Response from the API. List of
                cancellation candidate devices.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/licenses/{account}/cancel/index/{startIndex}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('startIndex')
                            .value(start_index)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LicensesCancelIndexResponse.from_dictionary)
            .local_error('400', 'Unexpected error.', LicensesCancelIndex400ErrorException)
        ).execute()
