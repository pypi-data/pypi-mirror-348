# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from verizon.api_helper import APIHelper
from verizon.configuration import Server
from verizon.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from verizon.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from verizon.models.m_2_m_v_1_devices_actions_activate_response import M2mV1DevicesActionsActivateResponse
from verizon.models.add_devices_result import AddDevicesResult
from verizon.models.m_2_m_v_1_devices_actions_contact_info_response import M2mV1DevicesActionsContactInfoResponse
from verizon.models.m_2_m_v_1_devices_actions_custom_fields_response import M2mV1DevicesActionsCustomFieldsResponse
from verizon.models.m_2_m_v_1_devices_actions_deactivate_response import M2mV1DevicesActionsDeactivateResponse
from verizon.models.delete_devices_result import DeleteDevicesResult
from verizon.models.m_2_m_v_1_devices_actions_list_response import M2mV1DevicesActionsListResponse
from verizon.models.m_2_m_v_1_devices_actions_list_imeiiccidmismatch_response import M2mV1DevicesActionsListImeiiccidmismatchResponse
from verizon.models.m_2_m_v_1_devices_actions_move_response import M2mV1DevicesActionsMoveResponse
from verizon.models.m_2_m_v_1_devices_actions_gotostate_response import M2mV1DevicesActionsGotostateResponse
from verizon.models.m_2_m_v_1_devices_actions_plan_response import M2mV1DevicesActionsPlanResponse
from verizon.models.m_2_m_v_1_devices_actions_suspend_response import M2mV1DevicesActionsSuspendResponse
from verizon.models.m_2_m_v_1_devices_actions_restore_response import M2mV1DevicesActionsRestoreResponse
from verizon.models.m_2_m_v_1_devices_availability_actions_list_response import M2mV1DevicesAvailabilityActionsListResponse
from verizon.models.m_2_m_v_1_devices_connections_actions_list_history_response import M2mV1DevicesConnectionsActionsListHistoryResponse
from verizon.models.m_2_m_v_1_devices_cost_center_response import M2mV1DevicesCostCenterResponse
from verizon.models.m_2_m_v_1_devices_extendeddiagnostics_actions_list_response import M2mV1DevicesExtendeddiagnosticsActionsListResponse
from verizon.models.device_provisioning_history_list_result import DeviceProvisioningHistoryListResult
from verizon.models.m_2_m_v_1_devices_prl_actions_list_response import M2mV1DevicesPrlActionsListResponse
from verizon.models.m_2_m_v_1_devices_suspension_status_response import M2mV1DevicesSuspensionStatusResponse
from verizon.models.m_2_m_v_1_devices_usage_actions_list_response import M2mV1DevicesUsageActionsListResponse
from verizon.models.m_2_m_v_1_devices_usage_actions_list_aggregate_response import M2mV1DevicesUsageActionsListAggregateResponse
from verizon.models.m_2_m_v_1_devices_actions_device_id_response import M2mV1DevicesActionsDeviceIdResponse
from verizon.models.request_response import RequestResponse
from verizon.models.m_2_m_v_1_devices_usage_actions_billedusage_list_response import M2mV1DevicesUsageActionsBilledusageListResponse
from verizon.models.m_2_m_v_1_devices_actions_usagesegmentationlabels_response import M2mV1DevicesActionsUsagesegmentationlabelsResponse
from verizon.models.m_2_m_v_1_devices_actions_uploadactivate_response import M2mV1DevicesActionsUploadactivateResponse
from verizon.models.m_2_m_v_1_devices_requests_status_response import M2mV1DevicesRequestsStatusResponse
from verizon.exceptions.m_2_m_v_1_devices_actions_activate_400_error_exception import M2mV1DevicesActionsActivate400ErrorException
from verizon.exceptions.m_2_m_v_1_devices_actions_add_400_error_exception import M2mV1DevicesActionsAdd400ErrorException
from verizon.exceptions.m_2_m_v_1_devices_actions_contact_info_400_error_exception import M2mV1DevicesActionsContactInfo400ErrorException
from verizon.exceptions.m_2_m_v_1_devices_actions_custom_fields_400_error_exception import M2mV1DevicesActionsCustomFields400ErrorException
from verizon.exceptions.m_2_m_v_1_devices_actions_deactivate_400_error_exception import M2mV1DevicesActionsDeactivate400ErrorException
from verizon.exceptions.m_2_m_v_1_devices_actions_delete_400_error_exception import M2mV1DevicesActionsDelete400ErrorException
from verizon.exceptions.m_2_m_v_1_devices_actions_list_400_error_exception import M2mV1DevicesActionsList400ErrorException
from verizon.exceptions.m_2_m_v_1_devices_actions_list_imeiiccidmismatch_400_error_exception import M2mV1DevicesActionsListImeiiccidmismatch400ErrorException
from verizon.exceptions.m_2_m_v_1_devices_actions_move_400_error_exception import M2mV1DevicesActionsMove400ErrorException
from verizon.exceptions.m_2_m_v_1_devices_actions_gotostate_400_error_exception import M2mV1DevicesActionsGotostate400ErrorException
from verizon.exceptions.m_2_m_v_1_devices_actions_plan_400_error_exception import M2mV1DevicesActionsPlan400ErrorException
from verizon.exceptions.m_2_m_v_1_devices_actions_suspend_400_error_exception import M2mV1DevicesActionsSuspend400ErrorException
from verizon.exceptions.m_2_m_v_1_devices_actions_restore_400_error_exception import M2mV1DevicesActionsRestore400ErrorException
from verizon.exceptions.m_2_m_v_1_devices_availability_actions_list_400_error_exception import M2mV1DevicesAvailabilityActionsList400ErrorException
from verizon.exceptions.m_2_m_v_1_devices_connections_actions_list_history_400_error_exception import M2mV1DevicesConnectionsActionsListHistory400ErrorException
from verizon.exceptions.m_2_m_v_1_devices_cost_center_400_error_exception import M2mV1DevicesCostCenter400ErrorException
from verizon.exceptions.m_2_m_v_1_devices_extendeddiagnostics_actions_list_400_error_exception import M2mV1DevicesExtendeddiagnosticsActionsList400ErrorException
from verizon.exceptions.m_2_m_v_1_devices_history_actions_list_400_error_exception import M2mV1DevicesHistoryActionsList400ErrorException
from verizon.exceptions.m_2_m_v_1_devices_prl_actions_list_400_error_exception import M2mV1DevicesPrlActionsList400ErrorException
from verizon.exceptions.m_2_m_v_1_devices_suspension_status_400_error_exception import M2mV1DevicesSuspensionStatus400ErrorException
from verizon.exceptions.m_2_m_v_1_devices_usage_actions_list_400_error_exception import M2mV1DevicesUsageActionsList400ErrorException
from verizon.exceptions.m_2_m_v_1_devices_usage_actions_list_aggregate_400_error_exception import M2mV1DevicesUsageActionsListAggregate400ErrorException
from verizon.exceptions.m_2_m_v_1_devices_actions_device_id_400_error_exception import M2mV1DevicesActionsDeviceId400ErrorException
from verizon.exceptions.rest_error_response_exception import RestErrorResponseException
from verizon.exceptions.m_2_m_v_1_devices_usage_actions_billedusage_list_400_error_exception import M2mV1DevicesUsageActionsBilledusageList400ErrorException
from verizon.exceptions.m_2_m_v_1_devices_actions_usagesegmentationlabels_400_error_exception import M2mV1DevicesActionsUsagesegmentationlabels400ErrorException
from verizon.exceptions.m_2_m_v_1_devices_actions_uploadactivate_400_error_exception import M2mV1DevicesActionsUploadactivate400ErrorException
from verizon.exceptions.m_2_m_v_1_devices_requests_status_400_error_exception import M2mV1DevicesRequestsStatus400ErrorException


class DeviceManagementController(BaseController):

    """A Controller to access Endpoints in the verizon API."""
    def __init__(self, config):
        super(DeviceManagementController, self).__init__(config)

    def activate_service_for_devices(self,
                                     body):
        """Does a POST request to /m2m/v1/devices/actions/activate.

        If the devices do not already exist in the account, this API resource
        adds them before activation.

        Args:
            body (M2mV1DevicesActionsActivateRequest): Request for activating
                a service on devices.

        Returns:
            M2mV1DevicesActionsActivateResponse: Response from the API.
                Request ID received on a successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/devices/actions/activate')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M2mV1DevicesActionsActivateResponse.from_dictionary)
            .local_error('400', 'Error response.', M2mV1DevicesActionsActivate400ErrorException)
        ).execute()

    def add_devices(self,
                    body):
        """Does a POST request to /m2m/v1/devices/actions/add.

        Use this API if you want to manage some device settings before you are
        ready to activate service for the devices.

        Args:
            body (M2mV1DevicesActionsAddRequest): Devices to add.

        Returns:
            List[AddDevicesResult]: Response from the API. For each device in
                the request, contains device identifiers and a success or
                failure response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/devices/actions/add')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AddDevicesResult.from_dictionary)
            .local_error('400', 'Error response.', M2mV1DevicesActionsAdd400ErrorException)
        ).execute()

    def update_devices_contact_information(self,
                                           body):
        """Does a PUT request to /m2m/v1/devices/actions/contactInfo.

        Sends a CarrierService callback message for each device in the request
        when the contact information has been changed, or if there was a
        problem and the change could not be completed.

        Args:
            body (M2mV1DevicesActionsContactInfoRequest): Request to update
                contact information for devices.

        Returns:
            M2mV1DevicesActionsContactInfoResponse: Response from the API.
                Request ID returned in a success response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/devices/actions/contactInfo')
            .http_method(HttpMethodEnum.PUT)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M2mV1DevicesActionsContactInfoResponse.from_dictionary)
            .local_error('400', 'Error response.', M2mV1DevicesActionsContactInfo400ErrorException)
        ).execute()

    def update_devices_custom_fields(self,
                                     body):
        """Does a PUT request to /m2m/v1/devices/actions/customFields.

        Sends a CarrierService callback message for each device in the request
        when the custom fields have been changed, or if there was a problem
        and the change could not be completed.

        Args:
            body (M2mV1DevicesActionsCustomFieldsRequest): Request to update
                custom field of devices.

        Returns:
            M2mV1DevicesActionsCustomFieldsResponse: Response from the API.
                Request ID received on a successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/devices/actions/customFields')
            .http_method(HttpMethodEnum.PUT)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M2mV1DevicesActionsCustomFieldsResponse.from_dictionary)
            .local_error('400', 'Error response.', M2mV1DevicesActionsCustomFields400ErrorException)
        ).execute()

    def deactivate_service_for_devices(self,
                                       body):
        """Does a POST request to /m2m/v1/devices/actions/deactivate.

        Deactivating service for a device may result in an early termination
        fee (ETF) being charged to the account, depending on the terms of the
        contract with Verizon. If your contract allows ETF waivers and if you
        want to use one for a particular deactivation, set the etfWaiver value
        to True.

        Args:
            body (M2mV1DevicesActionsDeactivateRequest): Request to deactivate
                service for one or more devices.

        Returns:
            M2mV1DevicesActionsDeactivateResponse: Response from the API.
                Request ID received on a successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/devices/actions/deactivate')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M2mV1DevicesActionsDeactivateResponse.from_dictionary)
            .local_error('400', 'Error response.', M2mV1DevicesActionsDeactivate400ErrorException)
        ).execute()

    def delete_deactivated_devices(self,
                                   body):
        """Does a POST request to /m2m/v1/devices/actions/delete.

        Use this API to remove unneeded devices from an account.

        Args:
            body (M2mV1DevicesActionsDeleteRequest): Devices to delete.

        Returns:
            List[DeleteDevicesResult]: Response from the API. For each device
                in the request, contains device identifiers and a success or
                failure response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/devices/actions/delete')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeleteDevicesResult.from_dictionary)
            .local_error('400', 'Error response.', M2mV1DevicesActionsDelete400ErrorException)
        ).execute()

    def list_devices_information(self,
                                 body):
        """Does a POST request to /m2m/v1/devices/actions/list.

        Returns information about a single device or information about all
        devices that match the given parameters. Returned information includes
        device provisioning state, service plan, MDN, MIN, and IP address.

        Args:
            body (M2mV1DevicesActionsListRequest): Device information query.

        Returns:
            M2mV1DevicesActionsListResponse: Response from the API. List of
                devices that match the request parameters, ordered by device
                creation date, oldest first.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/devices/actions/list')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M2mV1DevicesActionsListResponse.from_dictionary)
            .local_error('400', 'Error response.', M2mV1DevicesActionsList400ErrorException)
        ).execute()

    def list_devices_with_imei_iccid_mismatch(self,
                                              body):
        """Does a POST request to /m2m/v1/devices/actions/list/imeiiccidmismatch.

        Returns a list of all 4G devices with an ICCID (SIM) that was not
        activated with the expected IMEI (hardware) during a specified time
        frame.

        Args:
            body (M2mV1DevicesActionsListImeiiccidmismatchRequest): Request to
                list devices with mismatched IMEIs and ICCIDs.

        Returns:
            M2mV1DevicesActionsListImeiiccidmismatchResponse: Response from
                the API. List of devices that have mismatched IMEIs and ICCIDs.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/devices/actions/list/imeiiccidmismatch')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M2mV1DevicesActionsListImeiiccidmismatchResponse.from_dictionary)
            .local_error('400', 'Error response.', M2mV1DevicesActionsListImeiiccidmismatch400ErrorException)
        ).execute()

    def move_devices_within_accounts_of_profile(self,
                                                body):
        """Does a PUT request to /m2m/v1/devices/actions/move.

        Move active devices from one billing account to another within a
        customer profile.

        Args:
            body (M2mV1DevicesActionsMoveRequest): Request to move devices
                between accounts.

        Returns:
            M2mV1DevicesActionsMoveResponse: Response from the API. Request ID
                received on a successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/devices/actions/move')
            .http_method(HttpMethodEnum.PUT)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M2mV1DevicesActionsMoveResponse.from_dictionary)
            .local_error('400', 'Error response.', M2mV1DevicesActionsMove400ErrorException)
        ).execute()

    def update_devices_state(self,
                             body):
        """Does a PUT request to /m2m/v1/devices/actions/gotostate.

        Changes the provisioning state of one or more devices to a specified
        customer-defined service and state.

        Args:
            body (M2mV1DevicesActionsGotostateRequest): Request to change
                device state to one defined by the user.

        Returns:
            M2mV1DevicesActionsGotostateResponse: Response from the API.
                Request ID received on a successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/devices/actions/gotostate')
            .http_method(HttpMethodEnum.PUT)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M2mV1DevicesActionsGotostateResponse.from_dictionary)
            .local_error('400', 'Error response.', M2mV1DevicesActionsGotostate400ErrorException)
        ).execute()

    def change_devices_service_plan(self,
                                    body):
        """Does a PUT request to /m2m/v1/devices/actions/plan.

        Changes the service plan for one or more devices.

        Args:
            body (M2mV1DevicesActionsPlanRequest): Request to change device
                service plan.

        Returns:
            M2mV1DevicesActionsPlanResponse: Response from the API. Request ID
                received on a successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/devices/actions/plan')
            .http_method(HttpMethodEnum.PUT)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M2mV1DevicesActionsPlanResponse.from_dictionary)
            .local_error('400', 'Error response.', M2mV1DevicesActionsPlan400ErrorException)
        ).execute()

    def suspend_service_for_devices(self,
                                    body):
        """Does a POST request to /m2m/v1/devices/actions/suspend.

        Suspends service for one or more devices.

        Args:
            body (M2mV1DevicesActionsSuspendRequest): Request to suspend
                service for one or more devices.

        Returns:
            M2mV1DevicesActionsSuspendResponse: Response from the API. Request
                ID received on a successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/devices/actions/suspend')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M2mV1DevicesActionsSuspendResponse.from_dictionary)
            .local_error('400', 'Error response.', M2mV1DevicesActionsSuspend400ErrorException)
        ).execute()

    def restore_service_for_suspended_devices(self,
                                              body):
        """Does a POST request to /m2m/v1/devices/actions/restore.

        Restores service to one or more suspended devices.

        Args:
            body (M2mV1DevicesActionsRestoreRequest): Request to restore
                services of one or more suspended devices.

        Returns:
            M2mV1DevicesActionsRestoreResponse: Response from the API. Request
                ID received on a successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/devices/actions/restore')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M2mV1DevicesActionsRestoreResponse.from_dictionary)
            .local_error('400', 'Error response.', M2mV1DevicesActionsRestore400ErrorException)
        ).execute()

    def check_devices_availability_for_activation(self,
                                                  body):
        """Does a POST request to /m2m/v1/devices/availability/actions/list.

        Checks whether specified devices are registered by the manufacturer
        with the Verizon network and are available to be activated.

        Args:
            body (M2mV1DevicesAvailabilityActionsListRequest): Request to
                check if devices can be activated or not.

        Returns:
            M2mV1DevicesAvailabilityActionsListResponse: Response from the
                API. Request ID received on a successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/devices/availability/actions/list')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M2mV1DevicesAvailabilityActionsListResponse.from_dictionary)
            .local_error('400', 'Error response.', M2mV1DevicesAvailabilityActionsList400ErrorException)
        ).execute()

    def retrieve_device_connection_history(self,
                                           body):
        """Does a POST request to /m2m/v1/devices/connections/actions/listHistory.

        Each response includes a maximum of 500 records. To obtain more
        records, you can call the API multiple times, adjusting the earliest
        value each time to start where the previous request finished.

        Args:
            body (M2mV1DevicesConnectionsActionsListHistoryRequest): Query to
                retrieve device connection history.

        Returns:
            M2mV1DevicesConnectionsActionsListHistoryResponse: Response from
                the API. List of device connection events, sorted by the
                occurredAt timestamp, oldest first.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/devices/connections/actions/listHistory')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M2mV1DevicesConnectionsActionsListHistoryResponse.from_dictionary)
            .local_error('400', 'Error response.', M2mV1DevicesConnectionsActionsListHistory400ErrorException)
        ).execute()

    def update_devices_cost_center_code(self,
                                        body):
        """Does a PUT request to /m2m/v1/devices/costCenter.

        Changes or removes the CostCenterCode value or customer name and
        address (Primary Place of Use) for one or more devices.

        Args:
            body (M2mV1DevicesCostCenterRequest): Request to update cost
                center code value for one or more devices.

        Returns:
            M2mV1DevicesCostCenterResponse: Response from the API. Request ID
                received on a successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/devices/costCenter')
            .http_method(HttpMethodEnum.PUT)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M2mV1DevicesCostCenterResponse.from_dictionary)
            .local_error('400', 'Error response.', M2mV1DevicesCostCenter400ErrorException)
        ).execute()

    def get_device_extended_diagnostic_information(self,
                                                   body):
        """Does a POST request to /m2m/v1/devices/extendeddiagnostics/actions/list.

        Returns extended diagnostic information about a specified device,
        including connectivity, provisioning, billing and location status.

        Args:
            body (M2mV1DevicesExtendeddiagnosticsActionsListRequest): Request
                to query extended diagnostics information for a device.

        Returns:
            M2mV1DevicesExtendeddiagnosticsActionsListResponse: Response from
                the API. Device diagnostic information.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/devices/extendeddiagnostics/actions/list')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M2mV1DevicesExtendeddiagnosticsActionsListResponse.from_dictionary)
            .local_error('400', 'Error response.', M2mV1DevicesExtendeddiagnosticsActionsList400ErrorException)
        ).execute()

    def list_devices_provisioning_history(self,
                                          body):
        """Does a POST request to /m2m/v1/devices/history/actions/list.

        Returns the provisioning history of a specified device during a
        specified time period.

        Args:
            body (M2mV1DevicesHistoryActionsListRequest): Query to obtain
                device provisioning history.

        Returns:
            List[DeviceProvisioningHistoryListResult]: Response from the API.
                List of Device Provision History events, sorted by the
                timestamp, oldest first.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/devices/history/actions/list')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeviceProvisioningHistoryListResult.from_dictionary)
            .local_error('400', 'Error response.', M2mV1DevicesHistoryActionsList400ErrorException)
        ).execute()

    def list_current_devices_prl_version(self,
                                         body):
        """Does a POST request to /m2m/v1/devices/prl/actions/list.

        4G and GSM devices do not have a PRL.

        Args:
            body (M2mV1DevicesPrlActionsListRequest): Request to query device
                PRL.

        Returns:
            M2mV1DevicesPrlActionsListResponse: Response from the API. Request
                ID received on a successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/devices/prl/actions/list')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M2mV1DevicesPrlActionsListResponse.from_dictionary)
            .local_error('400', 'Error response.', M2mV1DevicesPrlActionsList400ErrorException)
        ).execute()

    def get_device_service_suspension_status(self,
                                             body):
        """Does a POST request to /m2m/v1/devices/suspension/status.

        Returns DeviceSuspensionStatus callback messages containing the
        current device state and information on how many days a device has
        been suspended and can continue to be suspended.

        Args:
            body (M2mV1DevicesSuspensionStatusRequest): Request to obtain
                service suspenstion status for a device.

        Returns:
            M2mV1DevicesSuspensionStatusResponse: Response from the API.
                Request ID received on a successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/devices/suspension/status')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M2mV1DevicesSuspensionStatusResponse.from_dictionary)
            .local_error('400', 'Error response.', M2mV1DevicesSuspensionStatus400ErrorException)
        ).execute()

    def list_devices_usage_history(self,
                                   body):
        """Does a POST request to /m2m/v1/devices/usage/actions/list.

        Returns the network data usage history of a device during a specified
        time period.

        Args:
            body (M2mV1DevicesUsageActionsListRequest): Request to obtain
                usage history for a specific device.

        Returns:
            M2mV1DevicesUsageActionsListResponse: Response from the API. List
                of device usage events, sorted by the timestamp, oldest first.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/devices/usage/actions/list')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M2mV1DevicesUsageActionsListResponse.from_dictionary)
            .local_error('400', 'Error response.', M2mV1DevicesUsageActionsList400ErrorException)
        ).execute()

    def retrieve_aggregate_device_usage_history(self,
                                                body):
        """Does a POST request to /m2m/v1/devices/usage/actions/list/aggregate.

        The information is returned in a callback response, so you must
        register a URL for DeviceUsage callback messages using the POST
        /callbacks API.

        Args:
            body (M2mV1DevicesUsageActionsListAggregateRequest): A request to
                retrieve aggregated device usage history information.

        Returns:
            M2mV1DevicesUsageActionsListAggregateResponse: Response from the
                API. A unique string that associates the request with the
                results that are sent via a callback service.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/devices/usage/actions/list/aggregate')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M2mV1DevicesUsageActionsListAggregateResponse.from_dictionary)
            .local_error('400', 'Error response.', M2mV1DevicesUsageActionsListAggregate400ErrorException)
        ).execute()

    def update_device_id(self,
                         service_type,
                         body):
        """Does a PUT request to /m2m/v1/devices/{serviceType}/actions/deviceId.

        Changes the identifier of a 3G or 4G device to match hardware changes
        made for a line of service. Use this request to transfer the line of
        service and the MDN to new hardware, or to change the MDN.

        Args:
            service_type (str): Identifier type.
            body (M2mV1DevicesActionsDeviceIdRequest): Request to update
                device id.

        Returns:
            M2mV1DevicesActionsDeviceIdResponse: Response from the API. A
                unique string that associates the request with the results
                that are sent via a callback service.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/devices/{serviceType}/actions/deviceId')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('serviceType')
                            .value(service_type)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M2mV1DevicesActionsDeviceIdResponse.from_dictionary)
            .local_error('400', 'Error response.', M2mV1DevicesActionsDeviceId400ErrorException)
        ).execute()

    def device_upload(self,
                      body):
        """Does a POST request to /m2m/v1/devices/actions/upload.

        Upload a device record

        Args:
            body (DeviceUploadRequest): Device Upload Query

        Returns:
            RequestResponse: Response from the API. Request ID

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/devices/actions/upload')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RequestResponse.from_dictionary)
            .local_error('400', 'Error Response', RestErrorResponseException)
        ).execute()

    def billed_usage_info(self,
                          body):
        """Does a POST request to /m2m/v1/devices/usage/actions/billedusage/list.

        Gets billed usage for for either multiple devices or an entire billing
        account.

        Args:
            body (M2mV1DevicesUsageActionsBilledusageListRequest): Request to
                list devices with mismatched IMEIs and ICCIDs.

        Returns:
            M2mV1DevicesUsageActionsBilledusageListResponse: Response from the
                API. Request ID received on a successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/devices/usage/actions/billedusage/list')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M2mV1DevicesUsageActionsBilledusageListResponse.from_dictionary)
            .local_error('400', 'Error response.', M2mV1DevicesUsageActionsBilledusageList400ErrorException)
        ).execute()

    def usage_segmentation_label_association(self,
                                             body):
        """Does a POST request to /m2m/v1/devices/actions/usagesegmentationlabels.

        Allows you to associate your own usage segmentation label with a
        device.

        Args:
            body (AssociateLabelRequest): Request to associate a label to a
                device.

        Returns:
            M2mV1DevicesActionsUsagesegmentationlabelsResponse: Response from
                the API. Request ID received on a successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/devices/actions/usagesegmentationlabels')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M2mV1DevicesActionsUsagesegmentationlabelsResponse.from_dictionary)
            .local_error('400', 'Error response.', M2mV1DevicesActionsUsagesegmentationlabels400ErrorException)
        ).execute()

    def usage_segmentation_label_deletion(self,
                                          account_name,
                                          label_list):
        """Does a DELETE request to /m2m/v1/devices/actions/usagesegmentationlabels.

        Allow customers to remove the associated label from a device.

        Args:
            account_name (str): The numeric name of the account.
            label_list (LabelsList): A list of the Label IDs to remove from
                the exclusion list.

        Returns:
            M2mV1DevicesActionsUsagesegmentationlabelsResponse: Response from
                the API. Request ID received on a successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/devices/actions/usagesegmentationlabels')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('accountName')
                         .value(account_name))
            .query_param(Parameter()
                         .key('LabelList')
                         .value(label_list))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M2mV1DevicesActionsUsagesegmentationlabelsResponse.from_dictionary)
            .local_error('400', 'Error response.', M2mV1DevicesActionsUsagesegmentationlabels400ErrorException)
        ).execute()

    def upload_activate_device(self,
                               body):
        """Does a POST request to /m2m/v1/devices/actions/uploadactivate.

        Uploads and activates device identifiers and SKUs for new devices from
        OEMs to Verizon.

        Args:
            body (M2mV1DevicesActionsUploadactivateRequest): Request to Upload
                and Activate device.

        Returns:
            M2mV1DevicesActionsUploadactivateResponse: Response from the API.
                Request ID received on a successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/devices/actions/uploadactivate')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M2mV1DevicesActionsUploadactivateResponse.from_dictionary)
            .local_error('400', 'Error response.', M2mV1DevicesActionsUploadactivate400ErrorException)
        ).execute()

    def device_upload_status(self,
                             body):
        """Does a POST request to /m2m/v1/devices/requests/status.

        Checks the status of an activation order and lists where the order is
        in the provisioning process.

        Args:
            body (M2mV1DevicesRequestsStatusRequest): The request body
                identifies the device and reporting period that you want
                included in the report.

        Returns:
            M2mV1DevicesRequestsStatusResponse: Response from the API. Request
                ID received on a successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/devices/requests/status')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M2mV1DevicesRequestsStatusResponse.from_dictionary)
            .local_error('400', 'Error response.', M2mV1DevicesRequestsStatus400ErrorException)
        ).execute()
