# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from verizon.api_helper import APIHelper
from verizon.configuration import Server
from verizon.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from verizon.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from verizon.models.devicelocations_response_1 import DevicelocationsResponse1
from verizon.models.device_location_callback import DeviceLocationCallback
from verizon.models.callback_registration_result import CallbackRegistrationResult
from verizon.models.success_response import SuccessResponse
from verizon.exceptions.devicelocations_0_error_exception import Devicelocations0ErrorException
from verizon.exceptions.callbacks_400_error_exception import Callbacks400ErrorException
from verizon.exceptions.callbacks_name_400_error_exception import CallbacksName400ErrorException


class DeviceLocationCallbacksController(BaseController):

    """A Controller to access Endpoints in the verizon API."""
    def __init__(self, config):
        super(DeviceLocationCallbacksController, self).__init__(config)

    def cancel_async_report(self,
                            account_name,
                            txid):
        """Does a DELETE request to /devicelocations/{txid}.

        Cancel an asynchronous report request.

        Args:
            account_name (str): Account identifier in "##########-#####".
            txid (str): The `transactionId` value.

        Returns:
            DevicelocationsResponse1: Response from the API. Request canceled.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/devicelocations/{txid}')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('accountName')
                         .value(account_name))
            .template_param(Parameter()
                            .key('txid')
                            .value(txid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DevicelocationsResponse1.from_dictionary)
            .local_error('default', 'Unexpected error.', Devicelocations0ErrorException)
        ).execute()

    def get_list_registered_callbacks(self,
                                      account_name):
        """Does a GET request to /callbacks/{accountName}.

        Returns a list of all registered callback URLs for the account.

        Args:
            account_name (str): Account number.

        Returns:
            List[DeviceLocationCallback]: Response from the API. List of all
                registered callback URLs.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/callbacks/{accountName}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('accountName')
                            .value(account_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeviceLocationCallback.from_dictionary)
            .local_error('400', 'Error response.', Callbacks400ErrorException)
        ).execute()

    def post_register_callback(self,
                               account_name,
                               body):
        """Does a POST request to /callbacks/{accountName}.

        Provide a URL to receive messages from a ThingSpace callback service.

        Args:
            account_name (str): Account number.
            body (DeviceLocationCallback): Request to register a callback.

        Returns:
            CallbackRegistrationResult: Response from the API. Callback
                registration response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/callbacks/{accountName}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('accountName')
                            .value(account_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('*/*'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CallbackRegistrationResult.from_dictionary)
            .local_error('400', 'Error response.', Callbacks400ErrorException)
        ).execute()

    def delete_deregister_callback(self,
                                   account_name,
                                   service):
        """Does a DELETE request to /callbacks/{accountName}/name/{service}.

        Deregister a URL to stop receiving callback messages.

        Args:
            account_name (str): Account number.
            service (CallbackServiceNameEnum): Callback service name.

        Returns:
            SuccessResponse: Response from the API. Deregistration successful.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/callbacks/{accountName}/name/{service}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('accountName')
                            .value(account_name)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('service')
                            .value(service)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SuccessResponse.from_dictionary)
            .local_error('400', 'Error response.', CallbacksName400ErrorException)
        ).execute()
