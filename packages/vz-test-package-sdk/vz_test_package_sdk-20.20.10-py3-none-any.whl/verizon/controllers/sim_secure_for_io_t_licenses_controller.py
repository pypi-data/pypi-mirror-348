# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from verizon.api_helper import APIHelper
from verizon.configuration import Server
from verizon.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from verizon.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from verizon.models.v_1_devices_license_actions_assign_response import V1DevicesLicenseActionsAssignResponse
from verizon.exceptions.v_1_devices_license_actions_assign_400_error_exception import V1DevicesLicenseActionsAssign400ErrorException
from verizon.exceptions.v_1_devices_license_actions_assign_401_error_exception import V1DevicesLicenseActionsAssign401ErrorException
from verizon.exceptions.v_1_devices_license_actions_assign_403_error_exception import V1DevicesLicenseActionsAssign403ErrorException
from verizon.exceptions.v_1_devices_license_actions_assign_404_error_exception import V1DevicesLicenseActionsAssign404ErrorException
from verizon.exceptions.v_1_devices_license_actions_assign_406_error_exception import V1DevicesLicenseActionsAssign406ErrorException
from verizon.exceptions.v_1_devices_license_actions_assign_429_error_exception import V1DevicesLicenseActionsAssign429ErrorException
from verizon.exceptions.v_1_devices_license_actions_assign_0_error_exception import V1DevicesLicenseActionsAssign0ErrorException


class SIMSecureForIoTLicensesController(BaseController):

    """A Controller to access Endpoints in the verizon API."""
    def __init__(self, config):
        super(SIMSecureForIoTLicensesController, self).__init__(config)

    def assign_license_to_devices(self,
                                  body,
                                  x_request_id=None):
        """Does a POST request to /v1/devices/license/actions/assign.

        Assigns SIM-Secure for IoT licenses to SIMs.

        Args:
            body (V1DevicesLicenseActionsAssignRequest): Request to assign
                license to devices.
            x_request_id (str, optional): Transaction Id.

        Returns:
            V1DevicesLicenseActionsAssignResponse: Response from the API.
                Success response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/v1/devices/license/actions/assign')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('X-Request-ID')
                          .value(x_request_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(V1DevicesLicenseActionsAssignResponse.from_dictionary)
            .local_error('400', 'Bad request.', V1DevicesLicenseActionsAssign400ErrorException)
            .local_error('401', 'Unauthorized request.', V1DevicesLicenseActionsAssign401ErrorException)
            .local_error('403', 'Request Forbidden.', V1DevicesLicenseActionsAssign403ErrorException)
            .local_error('404', 'Not Found / Does not exist.', V1DevicesLicenseActionsAssign404ErrorException)
            .local_error('406', 'Format / Request Unacceptable.', V1DevicesLicenseActionsAssign406ErrorException)
            .local_error('429', 'Too many requests.', V1DevicesLicenseActionsAssign429ErrorException)
            .local_error('default', 'Error response.', V1DevicesLicenseActionsAssign0ErrorException)
        ).execute()

    def unassign_license_to_devices(self,
                                    x_request_id):
        """Does a DELETE request to /v1/devices/license/actions/assign.

        Unassigns SIM-Secure for IoT Flexible and Flexible Bundle license from
        SIMs.

        Args:
            x_request_id (str): Transaction Id.

        Returns:
            V1DevicesLicenseActionsAssignResponse: Response from the API.
                Success response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/v1/devices/license/actions/assign')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('X-Request-ID')
                          .value(x_request_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(V1DevicesLicenseActionsAssignResponse.from_dictionary)
            .local_error('400', 'Bad request.', V1DevicesLicenseActionsAssign400ErrorException)
            .local_error('401', 'Unauthorized request.', V1DevicesLicenseActionsAssign401ErrorException)
            .local_error('403', 'Request forbidden.', V1DevicesLicenseActionsAssign403ErrorException)
            .local_error('404', 'Not Found / Does not exist.', V1DevicesLicenseActionsAssign404ErrorException)
            .local_error('406', 'Format / Request Unacceptable.', V1DevicesLicenseActionsAssign406ErrorException)
            .local_error('429', 'Too many requests.', V1DevicesLicenseActionsAssign429ErrorException)
            .local_error('default', 'Error response.', V1DevicesLicenseActionsAssign0ErrorException)
        ).execute()
