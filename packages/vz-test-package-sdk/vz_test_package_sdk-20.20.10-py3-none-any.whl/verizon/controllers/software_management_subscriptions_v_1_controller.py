# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from verizon.api_helper import APIHelper
from verizon.configuration import Server
from verizon.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from verizon.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from verizon.models.subscriptions_response_1 import SubscriptionsResponse1
from verizon.models.licenses_index_response import LicensesIndexResponse
from verizon.exceptions.subscriptions_400_error_2_exception import Subscriptions400Error2Exception
from verizon.exceptions.licenses_index_400_error_exception import LicensesIndex400ErrorException


class SoftwareManagementSubscriptionsV1Controller(BaseController):

    """A Controller to access Endpoints in the verizon API."""
    def __init__(self, config):
        super(SoftwareManagementSubscriptionsV1Controller, self).__init__(config)

    def get_account_subscription_status(self,
                                        account):
        """Does a GET request to /subscriptions/{account}.

        This subscriptions endpoint retrieves an account's current Software
        Management Service subscription status.

        Args:
            account (str): Account identifier in "##########-#####".

        Returns:
            SubscriptionsResponse1: Response from the API. Account
                subscription information.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/subscriptions/{account}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SubscriptionsResponse1.from_dictionary)
            .local_error('400', 'Unexpected error.', Subscriptions400Error2Exception)
        ).execute()

    def get_account_license_status(self,
                                   account,
                                   start_index):
        """Does a GET request to /licenses/{account}/index/{startIndex}.

        Returns information about an account's Software Management Services
        licenses and a list of licensed devices.

        Args:
            account (str): Account identifier in "##########-#####".
            start_index (str): The zero-based number of the first record to
                return. Set startIndex=0 for the first request. If there are
                more than 1,000 devices in the response, set startIndex=1000
                for the second request, 2000 for the third request, etc.

        Returns:
            LicensesIndexResponse: Response from the API. Account license
                information.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/licenses/{account}/index/{startIndex}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('startIndex')
                            .value(start_index)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LicensesIndexResponse.from_dictionary)
            .local_error('400', 'Unexpected error.', LicensesIndex400ErrorException)
        ).execute()
