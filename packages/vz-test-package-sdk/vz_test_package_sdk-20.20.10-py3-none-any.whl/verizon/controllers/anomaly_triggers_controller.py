# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from verizon.api_helper import APIHelper
from verizon.configuration import Server
from verizon.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from verizon.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from verizon.models.get_trigger_response_list import GetTriggerResponseList
from verizon.models.m_2_m_v_1_triggers_response import M2mV1TriggersResponse
from verizon.exceptions.m_2_m_v_1_triggers_400_error_exception import M2mV1Triggers400ErrorException
from verizon.exceptions.m_2_m_v_1_triggers_401_error_exception import M2mV1Triggers401ErrorException
from verizon.exceptions.m_2_m_v_1_triggers_403_error_exception import M2mV1Triggers403ErrorException
from verizon.exceptions.m_2_m_v_1_triggers_404_error_exception import M2mV1Triggers404ErrorException
from verizon.exceptions.m_2_m_v_1_triggers_406_error_exception import M2mV1Triggers406ErrorException
from verizon.exceptions.m_2_m_v_1_triggers_429_error_exception import M2mV1Triggers429ErrorException
from verizon.exceptions.m_2_m_v_1_triggers_0_error_exception import M2mV1Triggers0ErrorException


class AnomalyTriggersController(BaseController):

    """A Controller to access Endpoints in the verizon API."""
    def __init__(self, config):
        super(AnomalyTriggersController, self).__init__(config)

    def list_anomaly_detection_triggers(self):
        """Does a GET request to /m2m/v1/triggers.

        This corresponds to the M2M-MC SOAP interface, ```GetTriggers```.

        Returns:
            List[GetTriggerResponseList]: Response from the API. List of
                triggers associated to a Contact

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/triggers')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(GetTriggerResponseList.from_dictionary)
            .local_error('400', 'Bad request', M2mV1Triggers400ErrorException)
            .local_error('401', 'Unauthorized', M2mV1Triggers401ErrorException)
            .local_error('403', 'Forbidden', M2mV1Triggers403ErrorException)
            .local_error('404', 'Not Found / Does not exist', M2mV1Triggers404ErrorException)
            .local_error('406', 'Format / Request Unacceptable', M2mV1Triggers406ErrorException)
            .local_error('429', 'Too many requests', M2mV1Triggers429ErrorException)
            .local_error('default', 'Error response', M2mV1Triggers0ErrorException)
        ).execute()

    def update_anomaly_detection_trigger(self,
                                         body):
        """Does a PUT request to /m2m/v1/triggers.

        This corresponds to the M2M-MC SOAP interface,
        ```UpdateTriggerRequest```.

        Args:
            body (UpdateTriggerRequest): Update Trigger Request

        Returns:
            M2mV1TriggersResponse: Response from the API. Trigger ID

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/triggers')
            .http_method(HttpMethodEnum.PUT)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M2mV1TriggersResponse.from_dictionary)
            .local_error('400', 'Bad request', M2mV1Triggers400ErrorException)
            .local_error('401', 'Unauthorized', M2mV1Triggers401ErrorException)
            .local_error('403', 'Forbidden', M2mV1Triggers403ErrorException)
            .local_error('404', 'Not Found / Does not exist', M2mV1Triggers404ErrorException)
            .local_error('406', 'Format / Request Unacceptable', M2mV1Triggers406ErrorException)
            .local_error('429', 'Too many requests', M2mV1Triggers429ErrorException)
            .local_error('default', 'Error response', M2mV1Triggers0ErrorException)
        ).execute()

    def create_anomaly_detection_trigger(self,
                                         body):
        """Does a POST request to /m2m/v1/triggers.

        This corresponds to the M2M-MC SOAP interface, ```CreateTrigger```.

        Args:
            body (CreateTriggerRequest): Create Trigger Request

        Returns:
            M2mV1TriggersResponse: Response from the API. Trigger ID

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/triggers')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M2mV1TriggersResponse.from_dictionary)
            .local_error('400', 'Bad request', M2mV1Triggers400ErrorException)
            .local_error('401', 'Unauthorized', M2mV1Triggers401ErrorException)
            .local_error('403', 'Forbidden', M2mV1Triggers403ErrorException)
            .local_error('404', 'Not Found / Does not exist', M2mV1Triggers404ErrorException)
            .local_error('406', 'Format / Request Unacceptable', M2mV1Triggers406ErrorException)
            .local_error('429', 'Too many requests', M2mV1Triggers429ErrorException)
            .local_error('default', 'Error response', M2mV1Triggers0ErrorException)
        ).execute()

    def list_anomaly_detection_trigger_settings(self,
                                                trigger_id):
        """Does a GET request to /m2m/v1/triggers/{triggerId}.

        This corresponds to the M2M-MC SOAP interface, ```GetTriggers```.

        Args:
            trigger_id (str): trigger ID

        Returns:
            List[GetTriggerResponseList]: Response from the API. Trigger
                information associated to a Trigger Id

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/triggers/{triggerId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('triggerId')
                            .value(trigger_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(GetTriggerResponseList.from_dictionary)
            .local_error('400', 'Bad request', M2mV1Triggers400ErrorException)
            .local_error('401', 'Unauthorized', M2mV1Triggers401ErrorException)
            .local_error('403', 'Forbidden', M2mV1Triggers403ErrorException)
            .local_error('404', 'Not Found / Does not exist', M2mV1Triggers404ErrorException)
            .local_error('406', 'Format / Request Unacceptable', M2mV1Triggers406ErrorException)
            .local_error('429', 'Too many requests', M2mV1Triggers429ErrorException)
            .local_error('default', 'Error response', M2mV1Triggers0ErrorException)
        ).execute()

    def delete_anomaly_detection_trigger(self,
                                         trigger_id):
        """Does a DELETE request to /m2m/v1/triggers/{triggerId}.

        Deletes a specific trigger ID

        Args:
            trigger_id (str): The trigger ID to be deleted

        Returns:
            M2mV1TriggersResponse: Response from the API. The ID of the
                deleted trigger is returned

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v1/triggers/{triggerId}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('triggerId')
                            .value(trigger_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M2mV1TriggersResponse.from_dictionary)
            .local_error('default', 'Error response', M2mV1Triggers0ErrorException)
        ).execute()
