# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from verizon.api_helper import APIHelper
from verizon.configuration import Server
from verizon.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from verizon.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from verizon.models.licenses_response_1 import LicensesResponse1
from verizon.models.licenses_assign_response_1 import LicensesAssignResponse1
from verizon.models.licenses_remove_response_1 import LicensesRemoveResponse1
from verizon.exceptions.licenses_400_error_2_exception import Licenses400Error2Exception
from verizon.exceptions.licenses_assign_400_error_2_exception import LicensesAssign400Error2Exception
from verizon.exceptions.licenses_remove_400_error_2_exception import LicensesRemove400Error2Exception


class SoftwareManagementLicensesV3Controller(BaseController):

    """A Controller to access Endpoints in the verizon API."""
    def __init__(self, config):
        super(SoftwareManagementLicensesV3Controller, self).__init__(config)

    def get_account_licenses_status(self,
                                    acc,
                                    last_seen_device_id=None):
        """Does a GET request to /licenses/{acc}.

        The endpoint allows user to list license usage.

        Args:
            acc (str): Account identifier.
            last_seen_device_id (str, optional): Last seen device identifier.

        Returns:
            LicensesResponse1: Response from the API. Summary of license
                assignment.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/licenses/{acc}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('acc')
                            .value(acc)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('lastSeenDeviceId')
                         .value(last_seen_device_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LicensesResponse1.from_dictionary)
            .local_error('400', 'Unexpected error.', Licenses400Error2Exception)
        ).execute()

    def post_assign_licenses_to_devices_1(self,
                                          acc,
                                          body):
        """Does a POST request to /licenses/{acc}/assign.

        This endpoint allows user to assign licenses to a list of devices.

        Args:
            acc (str): Account identifier.
            body (LicensesAssignRequest1): License assignment.

        Returns:
            LicensesAssignResponse1: Response from the API. License assignment
                result.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/licenses/{acc}/assign')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('acc')
                            .value(acc)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LicensesAssignResponse1.from_dictionary)
            .local_error('400', 'Unexpected error.', LicensesAssign400Error2Exception)
        ).execute()

    def post_remove_licenses_from_devices_1(self,
                                            acc,
                                            body):
        """Does a POST request to /licenses/{acc}/remove.

        This endpoint allows user to remove licenses from a list of devices.

        Args:
            acc (str): Account identifier.
            body (LicensesRemoveRequest1): License removal.

        Returns:
            LicensesRemoveResponse1: Response from the API. License removal
                result.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/licenses/{acc}/remove')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('acc')
                            .value(acc)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LicensesRemoveResponse1.from_dictionary)
            .local_error('400', 'Unexpected error.', LicensesRemove400Error2Exception)
        ).execute()
