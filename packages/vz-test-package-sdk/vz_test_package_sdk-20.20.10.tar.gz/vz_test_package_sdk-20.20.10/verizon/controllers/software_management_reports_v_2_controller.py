# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from verizon.api_helper import APIHelper
from verizon.configuration import Server
from verizon.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from verizon.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from verizon.models.software_package import SoftwarePackage
from verizon.models.devices_response import DevicesResponse
from verizon.models.reports_campaigns_response import ReportsCampaignsResponse
from verizon.models.reports_campaigns_devices_response import ReportsCampaignsDevicesResponse
from verizon.exceptions.software_400_error_exception import Software400ErrorException
from verizon.exceptions.devices_400_error_exception import Devices400ErrorException
from verizon.exceptions.reports_campaigns_400_error_exception import ReportsCampaigns400ErrorException
from verizon.exceptions.reports_campaigns_devices_400_error_exception import ReportsCampaignsDevices400ErrorException


class SoftwareManagementReportsV2Controller(BaseController):

    """A Controller to access Endpoints in the verizon API."""
    def __init__(self, config):
        super(SoftwareManagementReportsV2Controller, self).__init__(config)

    def list_available_software(self,
                                account,
                                distribution_type=None):
        """Does a GET request to /software/{account}.

        This endpoint allows user to list a certain type of software of an
        account.

        Args:
            account (str): Account identifier.
            distribution_type (str, optional): Filter distributionType to get
                specific type of software. Value is LWM2M, OMD-DM or HTTP.

        Returns:
            List[SoftwarePackage]: Response from the API. Return array of
                software.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/software/{account}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('distributionType')
                         .value(distribution_type))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SoftwarePackage.from_dictionary)
            .local_error('400', 'Unexpected error.', Software400ErrorException)
        ).execute()

    def get_list_account_devices(self,
                                 account,
                                 last_seen_device_id=None,
                                 distribution_type=None):
        """Does a GET request to /devices/{account}.

        The device endpoint gets devices information of an account.

        Args:
            account (str): Account identifier.
            last_seen_device_id (str, optional): Last seen device identifier.
            distribution_type (str, optional): Filter distributionType to get
                specific type of devices. Values is LWM2M, OMD-DM or HTTP.

        Returns:
            DevicesResponse: Response from the API. Return array of devices.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/devices/{account}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('lastSeenDeviceId')
                         .value(last_seen_device_id))
            .query_param(Parameter()
                         .key('distributionType')
                         .value(distribution_type))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DevicesResponse.from_dictionary)
            .local_error('400', 'Unexpected error.', Devices400ErrorException)
        ).execute()

    def get_campaign_history_by_status(self,
                                       account,
                                       campaign_status,
                                       last_seen_campaign_id=None):
        """Does a GET request to /reports/{account}/campaigns.

        The report endpoint allows user to get campaign history of an account
        for specified status.

        Args:
            account (str): Account identifier.
            campaign_status (str): Status of the campaign.
            last_seen_campaign_id (str, optional): Last seen campaign Id.

        Returns:
            ReportsCampaignsResponse: Response from the API. Return list of
                campaign history.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/reports/{account}/campaigns')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('campaignStatus')
                         .value(campaign_status))
            .query_param(Parameter()
                         .key('lastSeenCampaignId')
                         .value(last_seen_campaign_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReportsCampaignsResponse.from_dictionary)
            .local_error('400', 'Unexpected error.', ReportsCampaigns400ErrorException)
        ).execute()

    def get_campaign_device_status(self,
                                   account,
                                   campaign_id,
                                   last_seen_device_id=None):
        """Does a GET request to /reports/{account}/campaigns/{campaignId}/devices.

        The report endpoint allows user to get the full list of device of a
        campaign.

        Args:
            account (str): Account identifier.
            campaign_id (str): Campaign identifier.
            last_seen_device_id (str, optional): Last seen device identifier.

        Returns:
            ReportsCampaignsDevicesResponse: Response from the API. Return
                list of campaign history.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/reports/{account}/campaigns/{campaignId}/devices')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('campaignId')
                            .value(campaign_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('lastSeenDeviceId')
                         .value(last_seen_device_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReportsCampaignsDevicesResponse.from_dictionary)
            .local_error('400', 'Unexpected error.', ReportsCampaignsDevices400ErrorException)
        ).execute()
