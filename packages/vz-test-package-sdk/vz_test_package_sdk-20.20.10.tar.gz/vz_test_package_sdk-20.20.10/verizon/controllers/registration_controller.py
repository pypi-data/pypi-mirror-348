# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from verizon.api_helper import APIHelper
from verizon.configuration import Server
from verizon.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from verizon.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from verizon.models.api_v_2_clients_registration_response import ApiV2ClientsRegistrationResponse
from verizon.models.api_v_2_clients_registration_response_4 import ApiV2ClientsRegistrationResponse4
from verizon.models.api_v_2_clients_connection_response import ApiV2ClientsConnectionResponse
from verizon.exceptions.api_v_2_clients_registration_400_error_exception import ApiV2ClientsRegistration400ErrorException
from verizon.exceptions.api_v_2_clients_registration_401_error_exception import ApiV2ClientsRegistration401ErrorException
from verizon.exceptions.api_v_2_clients_registration_403_error_exception import ApiV2ClientsRegistration403ErrorException
from verizon.exceptions.api_v_2_clients_registration_429_error_exception import ApiV2ClientsRegistration429ErrorException
from verizon.exceptions.api_v_2_clients_registration_503_error_exception import ApiV2ClientsRegistration503ErrorException
from verizon.exceptions.api_v_2_clients_registration_0_error_exception import ApiV2ClientsRegistration0ErrorException
from verizon.exceptions.api_v_2_clients_registration_404_error_exception import ApiV2ClientsRegistration404ErrorException
from verizon.exceptions.api_v_2_clients_registration_500_error_exception import ApiV2ClientsRegistration500ErrorException
from verizon.exceptions.api_v_2_clients_connection_400_error_exception import ApiV2ClientsConnection400ErrorException
from verizon.exceptions.api_v_2_clients_connection_401_error_exception import ApiV2ClientsConnection401ErrorException
from verizon.exceptions.api_v_2_clients_connection_403_error_exception import ApiV2ClientsConnection403ErrorException
from verizon.exceptions.api_v_2_clients_connection_429_error_exception import ApiV2ClientsConnection429ErrorException
from verizon.exceptions.api_v_2_clients_connection_503_error_exception import ApiV2ClientsConnection503ErrorException
from verizon.exceptions.api_v_2_clients_connection_0_error_exception import ApiV2ClientsConnection0ErrorException


class RegistrationController(BaseController):

    """A Controller to access Endpoints in the verizon API."""
    def __init__(self, config):
        super(RegistrationController, self).__init__(config)

    def register_etx_device(self,
                            body):
        """Does a POST request to /api/v2/clients/registration.

        With this API call the user (client) registers its device or software
        service to the ETX system. Therefore, when a connection is initiated
        from the device or software service to the ETX system along with the
        credential provided by this registration call, then the connection
        will be authorized.
        - The user can register multiple devices or software services, which
        can all be used at the same time.
        - There rules set in the system that limit the type and subtype of the
        clients that are allowed to be registered under the VendorID. The
        rules are created based ont he agreement between the Vendor and
        Verizon.
        - The user will only be able to register a limited number of devices
        or software services under the same VendorID. This registration limit
        is specified by the agreement between the Vendor and Verizon.
        Note: The user needs to authenticate with their ThingSpace credentials
        using the Access/Bearer and Session/M2M tokens in order to call this
        API.

        Args:
            body (ClientRegistrationRequest): The request body parameter.

        Returns:
            ApiV2ClientsRegistrationResponse: Response from the API.
                Successful Registration

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v2/clients/registration')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('SessionToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV2ClientsRegistrationResponse.from_dictionary)
            .local_error('400', 'Invalid Request', ApiV2ClientsRegistration400ErrorException)
            .local_error('401', 'Unauthorized Request', ApiV2ClientsRegistration401ErrorException)
            .local_error('403', 'Forbidden Request', ApiV2ClientsRegistration403ErrorException)
            .local_error('429', 'Too Many Requests', ApiV2ClientsRegistration429ErrorException)
            .local_error('503', 'Internal Server Error', ApiV2ClientsRegistration503ErrorException)
            .local_error('default', 'Forbidden', ApiV2ClientsRegistration0ErrorException)
        ).execute()

    def renew_etx_device(self,
                         device_id,
                         vendor_id,
                         body=None):
        """Does a PUT request to /api/v2/clients/registration.

        With this API call the user (client) can:
        - renew the certificate of a device or software service in the ETX
        system if the original certificate has expired. If the client's
        certificate expired or going to expire within 30 days and new
        certificate will be issued. If the certificate expires more than 30
        days, the current certificate will be returned to the client.
        - complete its device or software service registration to the ETX
        system if the original registration request was not successful because
        of a pending certificate generation. Whenever the user receives a
        "client registration is pending" response (HTTP 202) from POST
        /clients/registration call. The client should initiate this PUT API
        call to finish the registration process and get the required
        certificate.
        Note: The user needs to authenticate with their ThingSpace credentials
        using the Access/Bearer and Session/M2M tokens in order to call this
        API.

        Args:
            device_id (uuid|str): The request header parameter.
            vendor_id (str): The VendorID set during the Vendor registration
                call.
            body (Any, optional): The request body parameter.

        Returns:
            ApiV2ClientsRegistrationResponse: Response from the API.
                Successful Registration

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v2/clients/registration')
            .http_method(HttpMethodEnum.PUT)
            .header_param(Parameter()
                          .key('DeviceID')
                          .value(device_id))
            .header_param(Parameter()
                          .key('VendorID')
                          .value(vendor_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('SessionToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV2ClientsRegistrationResponse.from_dictionary)
            .local_error('400', 'Invalid Request', ApiV2ClientsRegistration400ErrorException)
            .local_error('401', 'Unauthorized Request', ApiV2ClientsRegistration401ErrorException)
            .local_error('403', 'Forbidden Request', ApiV2ClientsRegistration403ErrorException)
            .local_error('429', 'Too Many Requests', ApiV2ClientsRegistration429ErrorException)
            .local_error('503', 'Internal Server Error', ApiV2ClientsRegistration503ErrorException)
            .local_error('default', 'Forbidden', ApiV2ClientsRegistration0ErrorException)
        ).execute()

    def unregister_etx_device(self,
                              vendor_id,
                              device_i_ds):
        """Does a DELETE request to /api/v2/clients/registration.

        With this API call the user (client) can unregister its devices and
        software services from the ETX system. The unregistered devices and
        services will no longer be able to use the ETX Message Exchange.
        Note: The user needs to authenticate with their ThingSpace credentials
        using the Access/Bearer and Session/M2M tokens in order to call this
        API.

        Args:
            vendor_id (str): The VendorID set during the Vendor registration
                call.
            device_i_ds (List[uuid|str]): The list of device IDs and software
                service IDs to be unregistered

        Returns:
            void: Response from the API. Successful Deletion

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v2/clients/registration')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('VendorID')
                          .value(vendor_id))
            .query_param(Parameter()
                         .key('DeviceIDs')
                         .value(device_i_ds))
            .auth(And(Single('thingspace_oauth'), Single('SessionToken')))
        ).execute()

    def get_etx_device_certificate(self,
                                   device_id=None,
                                   imei=None,
                                   iccid=None):
        """Does a GET request to /api/v2/clients/registration.

        With this API call the user can check the certificate of the device.
        At least one of the DeviceID, IMEI or ICCID is required to make the
        call.
        Note: The user needs to authenticate with their ThingSpace credentials
        using the Access/Bearer and Session/M2M tokens in order to call this
        API.

        Args:
            device_id (uuid|str, optional): The request query parameter.
            imei (str, optional): The request query parameter.
            iccid (str, optional): The request query parameter.

        Returns:
            ApiV2ClientsRegistrationResponse4: Response from the API.
                Successful retrieval

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v2/clients/registration')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('DeviceID')
                         .value(device_id))
            .query_param(Parameter()
                         .key('IMEI')
                         .value(imei))
            .query_param(Parameter()
                         .key('ICCID')
                         .value(iccid))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('thingspace_oauth'), Single('SessionToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV2ClientsRegistrationResponse4.from_dictionary)
            .local_error('400', 'Invalid request', ApiV2ClientsRegistration400ErrorException)
            .local_error('401', 'Unauthorized', ApiV2ClientsRegistration401ErrorException)
            .local_error('403', 'Forbidden Request', ApiV2ClientsRegistration403ErrorException)
            .local_error('404', 'Not Found', ApiV2ClientsRegistration404ErrorException)
            .local_error('429', 'Too Many Requests', ApiV2ClientsRegistration429ErrorException)
            .local_error('500', 'Internal server Error', ApiV2ClientsRegistration500ErrorException)
            .local_error('default', 'Forbidden', ApiV2ClientsRegistration0ErrorException)
        ).execute()

    def retrieve_mqtturl(self,
                         vendor_id,
                         body):
        """Does a POST request to /api/v2/clients/connection.

        With this API call the device or software service requests the MQTT
        URL for the location that it needs to connect. To determine the proper
        URL the device or software service needs to provide its ID (the one
        that was provided in the registration request), location (GPS
        coordinates), and whether it is on the Verizon cellular network or not.
        Note: The user needs to authenticate with their ThingSpace credentials
        using the Access/Bearer and Session/M2M tokens in order to call this
        API.

        Args:
            vendor_id (str): The VendorID set during the Vendor registration
                call.
            body (ConnectionRequest): The request body parameter.

        Returns:
            ApiV2ClientsConnectionResponse: Response from the API. Successful
                retrieval

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/api/v2/clients/connection')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('VendorID')
                          .value(vendor_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('SessionToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiV2ClientsConnectionResponse.from_dictionary)
            .local_error('400', 'Invalid request', ApiV2ClientsConnection400ErrorException)
            .local_error('401', 'Unauthorized', ApiV2ClientsConnection401ErrorException)
            .local_error('403', 'Forbidden Request', ApiV2ClientsConnection403ErrorException)
            .local_error('429', 'Too Many Requests', ApiV2ClientsConnection429ErrorException)
            .local_error('503', 'Internal server Error', ApiV2ClientsConnection503ErrorException)
            .local_error('default', 'Forbidden', ApiV2ClientsConnection0ErrorException)
        ).execute()
