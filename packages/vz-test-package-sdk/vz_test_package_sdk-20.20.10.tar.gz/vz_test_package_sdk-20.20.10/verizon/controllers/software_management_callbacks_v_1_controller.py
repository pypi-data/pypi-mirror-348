# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from verizon.api_helper import APIHelper
from verizon.configuration import Server
from verizon.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from verizon.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from verizon.models.registered_callbacks import RegisteredCallbacks
from verizon.models.callbacks_response_1 import CallbacksResponse1
from verizon.models.callbacks_name_response_1 import CallbacksNameResponse1
from verizon.exceptions.callbacks_400_error_3_exception import Callbacks400Error3Exception
from verizon.exceptions.callbacks_name_400_error_2_exception import CallbacksName400Error2Exception


class SoftwareManagementCallbacksV1Controller(BaseController):

    """A Controller to access Endpoints in the verizon API."""
    def __init__(self, config):
        super(SoftwareManagementCallbacksV1Controller, self).__init__(config)

    def get_list_registered_callbacks_1(self,
                                        account):
        """Does a GET request to /callbacks/{account}.

        Returns the name and endpoint URL of the callback listening services
        registered for a given account.

        Args:
            account (str): Account identifier in "##########-#####".

        Returns:
            List[RegisteredCallbacks]: Response from the API. List of
                callbacks.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/callbacks/{account}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RegisteredCallbacks.from_dictionary)
            .local_error('400', 'Unexpected error.', Callbacks400Error3Exception)
        ).execute()

    def post_register_callback_1(self,
                                 account,
                                 body):
        """Does a POST request to /callbacks/{account}.

        Registers a URL to receive RESTful messages from a callback service
        when new firmware versions are available and when upgrades start and
        finish.

        Args:
            account (str): Account identifier in "##########-#####".
            body (CallbacksRequest1): Callback details.

        Returns:
            CallbacksResponse1: Response from the API. Result of registering a
                callback.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/callbacks/{account}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CallbacksResponse1.from_dictionary)
            .local_error('400', 'Unexpected error.', Callbacks400Error3Exception)
        ).execute()

    def delete_deregister_callback_1(self,
                                     account,
                                     service):
        """Does a DELETE request to /callbacks/{account}/name/{service}.

        Deregisters the callback endpoint and stops ThingSpace from sending
        FOTA callback messages for the specified account.

        Args:
            account (str): Account identifier in "##########-#####".
            service (CallbackServiceEnum): Callback type. Must be 'Fota' for
                Software Management Services API.

        Returns:
            CallbacksNameResponse1: Response from the API. Callback
                successfully deregistered.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/callbacks/{account}/name/{service}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('service')
                            .value(service)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CallbacksNameResponse1.from_dictionary)
            .local_error('400', 'Unexpected error.', CallbacksName400Error2Exception)
        ).execute()
