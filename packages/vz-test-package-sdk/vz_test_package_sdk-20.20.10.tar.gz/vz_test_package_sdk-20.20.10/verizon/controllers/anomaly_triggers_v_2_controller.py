# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from verizon.api_helper import APIHelper
from verizon.configuration import Server
from verizon.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from verizon.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from verizon.models.m_2_m_v_2_triggers_response import M2mV2TriggersResponse
from verizon.models.m_2_m_v_2_triggers_response_1 import M2mV2TriggersResponse1
from verizon.models.m_2_m_v_2_triggers_response_2 import M2mV2TriggersResponse2
from verizon.exceptions.m_2_m_v_2_triggers_0_error_exception import M2mV2Triggers0ErrorException


class AnomalyTriggersV2Controller(BaseController):

    """A Controller to access Endpoints in the verizon API."""
    def __init__(self, config):
        super(AnomalyTriggersV2Controller, self).__init__(config)

    def create_anomaly_detection_trigger_v_2(self,
                                             body):
        """Does a POST request to /m2m/v2/triggers.

        Creates the trigger to identify an anomaly.

        Args:
            body (List[CreateTriggerRequestOptions]): Request to create an
                anomaly trigger.

        Returns:
            M2mV2TriggersResponse: Response from the API. Result of request to
                create a trigger for anomaly detection.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v2/triggers')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M2mV2TriggersResponse.from_dictionary)
            .local_error('default', 'An error occurred.', M2mV2Triggers0ErrorException)
        ).execute()

    def update_anomaly_detection_trigger_v_2(self,
                                             body):
        """Does a PUT request to /m2m/v2/triggers.

        Updates an existing trigger using the account name.

        Args:
            body (List[UpdateTriggerRequestOptions]): Request to update
                existing trigger.

        Returns:
            M2mV2TriggersResponse1: Response from the API. Success response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v2/triggers')
            .http_method(HttpMethodEnum.PUT)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M2mV2TriggersResponse1.from_dictionary)
            .local_error('default', 'An error occurred.', M2mV2Triggers0ErrorException)
        ).execute()

    def list_anomaly_detection_trigger_settings_v_2(self,
                                                    trigger_id):
        """Does a GET request to /m2m/v2/triggers/{triggerId}.

        Retrieves the values for a specific trigger ID.

        Args:
            trigger_id (str): The trigger ID of a specific trigger.

        Returns:
            M2mV2TriggersResponse2: Response from the API. Anomaly detection
                trigger details.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/m2m/v2/triggers/{triggerId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('triggerId')
                            .value(trigger_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M2mV2TriggersResponse2.from_dictionary)
            .local_error('default', 'An error occurred.', M2mV2Triggers0ErrorException)
        ).execute()
