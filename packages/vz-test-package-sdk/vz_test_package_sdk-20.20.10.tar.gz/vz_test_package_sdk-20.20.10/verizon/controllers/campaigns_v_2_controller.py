# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from verizon.api_helper import APIHelper
from verizon.configuration import Server
from verizon.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from verizon.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from verizon.models.campaigns_response import CampaignsResponse
from verizon.models.campaigns_response_2 import CampaignsResponse2
from verizon.models.campaigns_response_3 import CampaignsResponse3
from verizon.models.campaigns_dates_response import CampaignsDatesResponse
from verizon.models.upload_and_schedule_file_response import UploadAndScheduleFileResponse
from verizon.exceptions.campaigns_400_error_exception import Campaigns400ErrorException
from verizon.exceptions.campaigns_dates_400_error_exception import CampaignsDates400ErrorException
from verizon.exceptions.campaigns_files_400_error_exception import CampaignsFiles400ErrorException
from verizon.exceptions.campaigns_software_400_error_exception import CampaignsSoftware400ErrorException


class CampaignsV2Controller(BaseController):

    """A Controller to access Endpoints in the verizon API."""
    def __init__(self, config):
        super(CampaignsV2Controller, self).__init__(config)

    def schedule_campaign_firmware_upgrade(self,
                                           account,
                                           body):
        """Does a POST request to /campaigns/{account}.

        This endpoint allows user to schedule a software upgrade.

        Args:
            account (str): Account identifier.
            body (CampaignsRequest): Software upgrade information.

        Returns:
            CampaignsResponse: Response from the API. Return software upgrade
                information.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/campaigns/{account}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('*/*'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CampaignsResponse.from_dictionary)
            .local_error('400', 'Unexpected error.', Campaigns400ErrorException)
        ).execute()

    def get_campaign_information(self,
                                 account,
                                 campaign_id):
        """Does a GET request to /campaigns/{account}/{campaignId}.

        This endpoint allows user to get information of a software upgrade.

        Args:
            account (str): Account identifier.
            campaign_id (str): Software upgrade identifier.

        Returns:
            CampaignsResponse: Response from the API. Return software upgrade
                information.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/campaigns/{account}/{campaignId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('campaignId')
                            .value(campaign_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CampaignsResponse.from_dictionary)
            .local_error('400', 'Unexpected error.', Campaigns400ErrorException)
        ).execute()

    def update_campaign_firmware_devices(self,
                                         account,
                                         campaign_id,
                                         body):
        """Does a PUT request to /campaigns/{account}/{campaignId}.

        This endpoint allows user to Add or Remove devices to an existing
        software upgrade.

        Args:
            account (str): Account identifier.
            campaign_id (str): Software upgrade information.
            body (CampaignsRequest1): Request to add or remove device to
                existing software upgrade information.

        Returns:
            CampaignsResponse2: Response from the API. Result of adding or
                removing devices to existing software upgrade information.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/campaigns/{account}/{campaignId}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('campaignId')
                            .value(campaign_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('*/*'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CampaignsResponse2.from_dictionary)
            .local_error('400', 'Unexpected error.', Campaigns400ErrorException)
        ).execute()

    def cancel_campaign(self,
                        account,
                        campaign_id):
        """Does a DELETE request to /campaigns/{account}/{campaignId}.

        This endpoint allows user to cancel software upgrade. A software
        upgrade already started can not be cancelled.

        Args:
            account (str): Account identifier.
            campaign_id (str): Unique identifier of campaign.

        Returns:
            CampaignsResponse3: Response from the API. Return cancellation
                status.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/campaigns/{account}/{campaignId}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('campaignId')
                            .value(campaign_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CampaignsResponse3.from_dictionary)
            .local_error('400', 'Unexpected error.', Campaigns400ErrorException)
        ).execute()

    def update_campaign_dates(self,
                              account,
                              campaign_id,
                              body):
        """Does a PUT request to /campaigns/{account}/{campaignId}/dates.

        This endpoint allows user to change campaign dates and time windows.
        Fields which need to remain unchanged should be also provided.

        Args:
            account (str): Account identifier.
            campaign_id (str): Software upgrade information.
            body (CampaignsDatesRequest): New dates and time windows.

        Returns:
            CampaignsDatesResponse: Response from the API. Updated campaign
                information.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/campaigns/{account}/{campaignId}/dates')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('campaignId')
                            .value(campaign_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('*/*'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CampaignsDatesResponse.from_dictionary)
            .local_error('400', 'Unexpected error.', CampaignsDates400ErrorException)
        ).execute()

    def schedule_file_upgrade(self,
                              acc,
                              body):
        """Does a POST request to /campaigns/files/{acc}.

        You can upload configuration files and schedule them in a campaign to
        devices.

        Args:
            acc (str): Account identifier.
            body (UploadAndScheduleFileRequest): Device logging information.

        Returns:
            UploadAndScheduleFileResponse: Response from the API. Successful
                responses.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/campaigns/files/{acc}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('acc')
                            .value(acc)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UploadAndScheduleFileResponse.from_dictionary)
            .local_error('400', 'Unexpected error.', CampaignsFiles400ErrorException)
        ).execute()

    def schedule_sw_upgrade_http_devices(self,
                                         acc,
                                         body):
        """Does a POST request to /campaigns/software/{acc}.

        Campaign time windows for downloading and installing software are
        available as long as the device OEM supports this.

        Args:
            acc (str): Account identifier.
            body (SchedulesSoftwareUpgradeRequest): Device logging information.

        Returns:
            UploadAndScheduleFileResponse: Response from the API. Successful
                responses.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/campaigns/software/{acc}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('acc')
                            .value(acc)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UploadAndScheduleFileResponse.from_dictionary)
            .local_error('400', 'Unexpected error.', CampaignsSoftware400ErrorException)
        ).execute()
