# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from deprecation import deprecated
from verizon.api_helper import APIHelper
from verizon.configuration import Server
from verizon.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from verizon.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from verizon.models.licenses_cancel_response_2 import LicensesCancelResponse2
from verizon.models.licenses_response import LicensesResponse
from verizon.exceptions.licenses_cancel_400_error_3_exception import LicensesCancel400Error3Exception
from verizon.exceptions.licenses_400_error_exception import Licenses400ErrorException


class SoftwareManagementLicensesV2Controller(BaseController):

    """A Controller to access Endpoints in the verizon API."""
    def __init__(self, config):
        super(SoftwareManagementLicensesV2Controller, self).__init__(config)

    @deprecated()
    def get_list_licenses_to_remove(self,
                                    account,
                                    start_index=None):
        """Does a GET request to /licenses/{account}/cancel.

        The license cancel endpoint allows user to list registered license
        cancellation candidate devices.

        Args:
            account (str): Account identifier.
            start_index (str, optional): Start index to retrieve.

        Returns:
            LicensesCancelResponse2: Response from the API. A list of license
                cancellation candidate devices.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/licenses/{account}/cancel')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('startIndex')
                         .value(start_index))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LicensesCancelResponse2.from_dictionary)
            .local_error('400', 'Unexpected error.', LicensesCancel400Error3Exception)
        ).execute()

    def get_account_license_status_1(self,
                                     account,
                                     last_seen_device_id=None):
        """Does a GET request to /licenses/{account}.

        The endpoint allows user to list license usage.

        Args:
            account (str): Account identifier.
            last_seen_device_id (str, optional): Last seen device identifier.

        Returns:
            LicensesResponse: Response from the API. Summary of license
                assignment.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/licenses/{account}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('lastSeenDeviceId')
                         .value(last_seen_device_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LicensesResponse.from_dictionary)
            .local_error('400', 'Unexpected error.', Licenses400ErrorException)
        ).execute()
