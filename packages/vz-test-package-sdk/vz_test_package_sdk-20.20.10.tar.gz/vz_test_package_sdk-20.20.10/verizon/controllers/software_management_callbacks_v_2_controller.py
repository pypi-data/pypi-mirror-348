# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from verizon.api_helper import APIHelper
from verizon.configuration import Server
from verizon.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from verizon.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from verizon.models.callbacks_response_2 import CallbacksResponse2
from verizon.models.callbacks_response_3 import CallbacksResponse3
from verizon.exceptions.callbacks_400_error_5_exception import Callbacks400Error5Exception


class SoftwareManagementCallbacksV2Controller(BaseController):

    """A Controller to access Endpoints in the verizon API."""
    def __init__(self, config):
        super(SoftwareManagementCallbacksV2Controller, self).__init__(config)

    def update_callback(self,
                        account,
                        body):
        """Does a PUT request to /callbacks/{account}.

        This endpoint allows user to update the HTTPS callback address.

        Args:
            account (str): Account identifier.
            body (CallbacksRequest2): Callback URL registration.

        Returns:
            CallbacksResponse2: Response from the API. Return callback
                registration.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/callbacks/{account}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('*/*'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CallbacksResponse2.from_dictionary)
            .local_error('400', 'Unexpected error.', Callbacks400Error5Exception)
        ).execute()

    def delete_deregister_callback_2(self,
                                     account):
        """Does a DELETE request to /callbacks/{account}.

        This endpoint allows user to delete a previously registered callback
        URL.

        Args:
            account (str): Account identifier.

        Returns:
            CallbacksResponse3: Response from the API. Result of deregistering
                a callback.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/callbacks/{account}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CallbacksResponse3.from_dictionary)
            .local_error('400', 'Unexpected error.', Callbacks400Error5Exception)
        ).execute()
