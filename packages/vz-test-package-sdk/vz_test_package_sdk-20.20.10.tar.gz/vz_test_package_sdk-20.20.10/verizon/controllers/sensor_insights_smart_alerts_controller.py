# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from verizon.api_helper import APIHelper
from verizon.configuration import Server
from verizon.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from verizon.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from verizon.models.user_smart_alert import UserSmartAlert
from verizon.exceptions.m_400_management_error_exception import M400ManagementErrorException
from verizon.exceptions.management_error_exception import ManagementErrorException
from verizon.exceptions.m_403_management_error_exception import M403ManagementErrorException
from verizon.exceptions.m_404_management_error_exception import M404ManagementErrorException
from verizon.exceptions.m_500_management_error_exception import M500ManagementErrorException


class SensorInsightsSmartAlertsController(BaseController):

    """A Controller to access Endpoints in the verizon API."""
    def __init__(self, config):
        super(SensorInsightsSmartAlertsController, self).__init__(config)

    def sensor_insights_list_smart_alerts_request(self,
                                                  body):
        """Does a POST request to /dm/v1/smartAlerts/actions/query.

        Args:
            body (DtoListRulesRequest): Retrieve a smart alert

        Returns:
            List[UserSmartAlert]: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/dm/v1/smartAlerts/actions/query')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UserSmartAlert.from_dictionary)
            .local_error('400', 'Bad Request', M400ManagementErrorException)
            .local_error('401', 'UnAuthorized', ManagementErrorException)
            .local_error('403', 'Forbidden', M403ManagementErrorException)
            .local_error('404', 'Not Found', M404ManagementErrorException)
            .local_error('406', 'Not Acceptable', ManagementErrorException)
            .local_error('415', 'Unsupported media type', ManagementErrorException)
            .local_error('429', 'Too many requests', ManagementErrorException)
            .local_error('500', 'Internal server error.', M500ManagementErrorException)
            .local_error('default', 'Unexpected error', ManagementErrorException)
        ).execute()

    def sensor_insights_patch_smart_alert_request(self,
                                                  body):
        """Does a PATCH request to /dm/v1/smartAlerts.

        Args:
            body (DtoPatchSmartAlertRequest): Partially update a smart alert

        Returns:
            UserSmartAlert: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/dm/v1/smartAlerts')
            .http_method(HttpMethodEnum.PATCH)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UserSmartAlert.from_dictionary)
            .local_error('400', 'Bad Request', M400ManagementErrorException)
            .local_error('401', 'UnAuthorized', ManagementErrorException)
            .local_error('403', 'Forbidden', M403ManagementErrorException)
            .local_error('404', 'Not Found', M404ManagementErrorException)
            .local_error('406', 'Not Acceptable', ManagementErrorException)
            .local_error('415', 'Unsupported media type', ManagementErrorException)
            .local_error('429', 'Too many requests', ManagementErrorException)
            .local_error('500', 'Internal server error.', M500ManagementErrorException)
            .local_error('default', 'Unexpected error', ManagementErrorException)
        ).execute()

    def sensor_insights_bulk_update(self,
                                    body):
        """Does a POST request to /dm/v1/smartAlerts/actions/bulkupdate.

        Args:
            body (DtoBulkUpdate): Bulk update smart alerts

        Returns:
            UserSmartAlert: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/dm/v1/smartAlerts/actions/bulkupdate')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UserSmartAlert.from_dictionary)
            .local_error('400', 'Bad Request', M400ManagementErrorException)
            .local_error('401', 'UnAuthorized', ManagementErrorException)
            .local_error('403', 'Forbidden', M403ManagementErrorException)
            .local_error('404', 'Not Found', M404ManagementErrorException)
            .local_error('406', 'Not Acceptable', ManagementErrorException)
            .local_error('415', 'Unsupported media type', ManagementErrorException)
            .local_error('429', 'Too many requests', ManagementErrorException)
            .local_error('500', 'Internal server error.', M500ManagementErrorException)
            .local_error('default', 'Unexpected error', ManagementErrorException)
        ).execute()
