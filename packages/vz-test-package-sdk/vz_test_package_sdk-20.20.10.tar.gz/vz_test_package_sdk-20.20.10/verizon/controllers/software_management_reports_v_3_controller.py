# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from verizon.api_helper import APIHelper
from verizon.configuration import Server
from verizon.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from verizon.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from verizon.models.reports_firmware_campaigns_response import ReportsFirmwareCampaignsResponse
from verizon.models.device_firmware_upgrade import DeviceFirmwareUpgrade
from verizon.models.reports_campaigns_devices_response_1 import ReportsCampaignsDevicesResponse1
from verizon.exceptions.reports_firmware_campaigns_400_error_exception import ReportsFirmwareCampaigns400ErrorException
from verizon.exceptions.reports_devices_400_error_2_exception import ReportsDevices400Error2Exception
from verizon.exceptions.reports_campaigns_devices_400_error_2_exception import ReportsCampaignsDevices400Error2Exception


class SoftwareManagementReportsV3Controller(BaseController):

    """A Controller to access Endpoints in the verizon API."""
    def __init__(self, config):
        super(SoftwareManagementReportsV3Controller, self).__init__(config)

    def get_campaign_history_by_status_1(self,
                                         acc,
                                         campaign_status,
                                         last_seen_campaign_id=None):
        """Does a GET request to /reports/{acc}/firmware/campaigns.

        Retrieve a list of campaigns for an account that have a specified
        campaign status.

        Args:
            acc (str): Account identifier.
            campaign_status (CampaignStatusEnum): Campaign status.
            last_seen_campaign_id (str, optional): Last seen campaign Id.

        Returns:
            ReportsFirmwareCampaignsResponse: Response from the API. Return
                array of campaign history.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/reports/{acc}/firmware/campaigns')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('acc')
                            .value(acc)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('campaignStatus')
                         .value(campaign_status))
            .query_param(Parameter()
                         .key('lastSeenCampaignId')
                         .value(last_seen_campaign_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReportsFirmwareCampaignsResponse.from_dictionary)
            .local_error('400', 'Unexpected error.', ReportsFirmwareCampaigns400ErrorException)
        ).execute()

    def get_device_firmware_upgrade_history_2(self,
                                              acc,
                                              device_id):
        """Does a GET request to /reports/{acc}/devices/{deviceId}.

        Retrieve campaign history for a specific device.

        Args:
            acc (str): Account identifier.
            device_id (str): Device IMEI identifier.

        Returns:
            List[DeviceFirmwareUpgrade]: Response from the API. Returns a list
                of firmware upgrades.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/reports/{acc}/devices/{deviceId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('acc')
                            .value(acc)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('deviceId')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeviceFirmwareUpgrade.from_dictionary)
            .local_error('400', 'Unexpected error.', ReportsDevices400Error2Exception)
        ).execute()

    def get_campaign_device_status_1(self,
                                     acc,
                                     campaign_id,
                                     last_seen_device_id=None):
        """Does a GET request to /reports/{acc}/campaigns/{campaignId}/devices.

        Retrieve a list of all devices in a campaign and the status of each
        device.

        Args:
            acc (str): Account identifier.
            campaign_id (str): Campaign identifier.
            last_seen_device_id (str, optional): Last seen device identifier.

        Returns:
            ReportsCampaignsDevicesResponse1: Response from the API. Returns
                an array of campaign history.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/reports/{acc}/campaigns/{campaignId}/devices')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('acc')
                            .value(acc)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('campaignId')
                            .value(campaign_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('lastSeenDeviceId')
                         .value(last_seen_device_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReportsCampaignsDevicesResponse1.from_dictionary)
            .local_error('400', 'Unexpected error.', ReportsCampaignsDevices400Error2Exception)
        ).execute()
