# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.models.accountidentifier_1 import Accountidentifier1
from verizon.models.resourceidentifier_1 import Resourceidentifier1


class RemoveDeviceRequest(object):

    """Implementation of the 'RemoveDeviceRequest' model.

    The request body identifies the device to delete.

    Attributes:
        accountidentifier (Accountidentifier1): The model property of type
            Accountidentifier1.
        resourceidentifier (Resourceidentifier1): The model property of type
            Resourceidentifier1.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "accountidentifier": 'accountidentifier',
        "resourceidentifier": 'resourceidentifier'
    }

    def __init__(self,
                 accountidentifier=None,
                 resourceidentifier=None):
        """Constructor for the RemoveDeviceRequest class"""

        # Initialize members of the class
        self.accountidentifier = accountidentifier 
        self.resourceidentifier = resourceidentifier 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        accountidentifier = Accountidentifier1.from_dictionary(dictionary.get('accountidentifier')) if dictionary.get('accountidentifier') else None
        resourceidentifier = Resourceidentifier1.from_dictionary(dictionary.get('resourceidentifier')) if dictionary.get('resourceidentifier') else None
        # Return an object of this model
        return cls(accountidentifier,
                   resourceidentifier)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'accountidentifier={self.accountidentifier!r}, '
                f'resourceidentifier={self.resourceidentifier!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'accountidentifier={self.accountidentifier!s}, '
                f'resourceidentifier={self.resourceidentifier!s})')
