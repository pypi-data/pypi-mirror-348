# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class CampaignsResponse2(object):

    """Implementation of the 'Campaigns Response2' model.

    Attributes:
        account_name (str): Account identifier.
        campaign_id (str): Campaign identifier.
        request_id (str): Request identifier.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_name": 'accountName',
        "campaign_id": 'campaignId',
        "request_id": 'requestId'
    }

    def __init__(self,
                 account_name=None,
                 campaign_id=None,
                 request_id=None):
        """Constructor for the CampaignsResponse2 class"""

        # Initialize members of the class
        self.account_name = account_name 
        self.campaign_id = campaign_id 
        self.request_id = request_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_name = dictionary.get("accountName") if dictionary.get("accountName") else None
        campaign_id = dictionary.get("campaignId") if dictionary.get("campaignId") else None
        request_id = dictionary.get("requestId") if dictionary.get("requestId") else None
        # Return an object of this model
        return cls(account_name,
                   campaign_id,
                   request_id)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_name={self.account_name!r}, '
                f'campaign_id={self.campaign_id!r}, '
                f'request_id={self.request_id!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_name={self.account_name!s}, '
                f'campaign_id={self.campaign_id!s}, '
                f'request_id={self.request_id!s})')
