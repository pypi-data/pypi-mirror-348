# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class DtoDeviceResourceIdentifier(object):

    """Implementation of the 'dto.DeviceResourceIdentifier' model.

    Device identifiers, one or more are required

    Attributes:
        deveui (str): the IEEE EUI64 address space used to identify a device.
            It is supplied by the device manufacturer
        deviceid (str): This is a UUID value of the device created when the
            device is onboarded
        esn (int): The Electronic Serial Number (ESN) of the device
        iccid (str): The 20-digit Integrated Circuit Card ID (SIM card ID)
        imei (int): The 15-digit International Mobile Equipment ID
        imsi (int): The 64-bit International Mobile Subscriber Identity
        mac (str): The Media Access Control address of the device, listed on
            the device in the format XX-XX-XX-XX-XX-XX or XX:XX:XX:XX:XX:XX
        manufacturer (str): The manufacturer of the device
        meid (str): The 56-bit Mobile Equipment ID
        msisdn (str): The Mobile Station International Subscriber Directory
            Number. In the USA, this is 1+ a 10-digit phone number
        node_uuid (str): The UUID of the node the device is associated with
        qrcode (str): The numeric value of the Quick Response (QR) code
        serial (str): The device's serial number

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "deveui": 'deveui',
        "deviceid": 'deviceid',
        "esn": 'esn',
        "iccid": 'iccid',
        "imei": 'imei',
        "imsi": 'imsi',
        "mac": 'mac',
        "manufacturer": 'manufacturer',
        "meid": 'meid',
        "msisdn": 'msisdn',
        "node_uuid": 'node_uuid',
        "qrcode": 'qrcode',
        "serial": 'serial'
    }

    _optionals = [
        'deveui',
        'deviceid',
        'esn',
        'iccid',
        'imei',
        'imsi',
        'mac',
        'manufacturer',
        'meid',
        'msisdn',
        'node_uuid',
        'qrcode',
        'serial',
    ]

    def __init__(self,
                 deveui=APIHelper.SKIP,
                 deviceid=APIHelper.SKIP,
                 esn=APIHelper.SKIP,
                 iccid=APIHelper.SKIP,
                 imei=APIHelper.SKIP,
                 imsi=APIHelper.SKIP,
                 mac=APIHelper.SKIP,
                 manufacturer=APIHelper.SKIP,
                 meid=APIHelper.SKIP,
                 msisdn=APIHelper.SKIP,
                 node_uuid=APIHelper.SKIP,
                 qrcode=APIHelper.SKIP,
                 serial=APIHelper.SKIP):
        """Constructor for the DtoDeviceResourceIdentifier class"""

        # Initialize members of the class
        if deveui is not APIHelper.SKIP:
            self.deveui = deveui 
        if deviceid is not APIHelper.SKIP:
            self.deviceid = deviceid 
        if esn is not APIHelper.SKIP:
            self.esn = esn 
        if iccid is not APIHelper.SKIP:
            self.iccid = iccid 
        if imei is not APIHelper.SKIP:
            self.imei = imei 
        if imsi is not APIHelper.SKIP:
            self.imsi = imsi 
        if mac is not APIHelper.SKIP:
            self.mac = mac 
        if manufacturer is not APIHelper.SKIP:
            self.manufacturer = manufacturer 
        if meid is not APIHelper.SKIP:
            self.meid = meid 
        if msisdn is not APIHelper.SKIP:
            self.msisdn = msisdn 
        if node_uuid is not APIHelper.SKIP:
            self.node_uuid = node_uuid 
        if qrcode is not APIHelper.SKIP:
            self.qrcode = qrcode 
        if serial is not APIHelper.SKIP:
            self.serial = serial 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        deveui = dictionary.get("deveui") if dictionary.get("deveui") else APIHelper.SKIP
        deviceid = dictionary.get("deviceid") if dictionary.get("deviceid") else APIHelper.SKIP
        esn = dictionary.get("esn") if dictionary.get("esn") else APIHelper.SKIP
        iccid = dictionary.get("iccid") if dictionary.get("iccid") else APIHelper.SKIP
        imei = dictionary.get("imei") if dictionary.get("imei") else APIHelper.SKIP
        imsi = dictionary.get("imsi") if dictionary.get("imsi") else APIHelper.SKIP
        mac = dictionary.get("mac") if dictionary.get("mac") else APIHelper.SKIP
        manufacturer = dictionary.get("manufacturer") if dictionary.get("manufacturer") else APIHelper.SKIP
        meid = dictionary.get("meid") if dictionary.get("meid") else APIHelper.SKIP
        msisdn = dictionary.get("msisdn") if dictionary.get("msisdn") else APIHelper.SKIP
        node_uuid = dictionary.get("node_uuid") if dictionary.get("node_uuid") else APIHelper.SKIP
        qrcode = dictionary.get("qrcode") if dictionary.get("qrcode") else APIHelper.SKIP
        serial = dictionary.get("serial") if dictionary.get("serial") else APIHelper.SKIP
        # Return an object of this model
        return cls(deveui,
                   deviceid,
                   esn,
                   iccid,
                   imei,
                   imsi,
                   mac,
                   manufacturer,
                   meid,
                   msisdn,
                   node_uuid,
                   qrcode,
                   serial)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'deveui={(self.deveui if hasattr(self, "deveui") else None)!r}, '
                f'deviceid={(self.deviceid if hasattr(self, "deviceid") else None)!r}, '
                f'esn={(self.esn if hasattr(self, "esn") else None)!r}, '
                f'iccid={(self.iccid if hasattr(self, "iccid") else None)!r}, '
                f'imei={(self.imei if hasattr(self, "imei") else None)!r}, '
                f'imsi={(self.imsi if hasattr(self, "imsi") else None)!r}, '
                f'mac={(self.mac if hasattr(self, "mac") else None)!r}, '
                f'manufacturer={(self.manufacturer if hasattr(self, "manufacturer") else None)!r}, '
                f'meid={(self.meid if hasattr(self, "meid") else None)!r}, '
                f'msisdn={(self.msisdn if hasattr(self, "msisdn") else None)!r}, '
                f'node_uuid={(self.node_uuid if hasattr(self, "node_uuid") else None)!r}, '
                f'qrcode={(self.qrcode if hasattr(self, "qrcode") else None)!r}, '
                f'serial={(self.serial if hasattr(self, "serial") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'deveui={(self.deveui if hasattr(self, "deveui") else None)!s}, '
                f'deviceid={(self.deviceid if hasattr(self, "deviceid") else None)!s}, '
                f'esn={(self.esn if hasattr(self, "esn") else None)!s}, '
                f'iccid={(self.iccid if hasattr(self, "iccid") else None)!s}, '
                f'imei={(self.imei if hasattr(self, "imei") else None)!s}, '
                f'imsi={(self.imsi if hasattr(self, "imsi") else None)!s}, '
                f'mac={(self.mac if hasattr(self, "mac") else None)!s}, '
                f'manufacturer={(self.manufacturer if hasattr(self, "manufacturer") else None)!s}, '
                f'meid={(self.meid if hasattr(self, "meid") else None)!s}, '
                f'msisdn={(self.msisdn if hasattr(self, "msisdn") else None)!s}, '
                f'node_uuid={(self.node_uuid if hasattr(self, "node_uuid") else None)!s}, '
                f'qrcode={(self.qrcode if hasattr(self, "qrcode") else None)!s}, '
                f'serial={(self.serial if hasattr(self, "serial") else None)!s})')
