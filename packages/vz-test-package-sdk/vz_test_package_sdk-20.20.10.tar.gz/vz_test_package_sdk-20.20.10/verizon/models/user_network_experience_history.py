# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class UserNetworkExperienceHistory(object):

    """Implementation of the 'user.NetworkExperienceHistory' model.

    Attributes:
        billingaccountid (str): The billing account ID. This is the same value
            as the Account ID
        createdon (datetime): Timestamp of the record
        date (datetime): Timestamp of the record
        devicesbad (int): This is a score based on combination of network
            coverage and network outage affecting the device's ability to
            connect to the network. This is a count of devices that have failed
        devicesfair (int): This is a score based on combination of network
            coverage and network outage affecting the device's ability to
            connect to the network. This is a count of devices that are
            impaired
        devicesgood (int): This is a score based on combination of network
            coverage and network outage affecting the device's ability to
            connect to the network. This is a count of devices that have no
            issues
        devicestotal (int): A count of all devices
        foreignid (str): UUID of the ECPD account the user belongs to
        hours (int): The model property of type int.
        id (str): UUID of the user record, assigned at creation
        lastupdated (datetime): Timestamp of the record
        minutes (int): The model property of type int.
        version (str): The resource version
        versionid (str): The UUID of the resource version

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "billingaccountid": 'billingaccountid',
        "createdon": 'createdon',
        "date": 'date',
        "devicesbad": 'devicesbad',
        "devicesfair": 'devicesfair',
        "devicesgood": 'devicesgood',
        "devicestotal": 'devicestotal',
        "foreignid": 'foreignid',
        "hours": 'hours',
        "id": 'id',
        "lastupdated": 'lastupdated',
        "minutes": 'minutes',
        "version": 'version',
        "versionid": 'versionid'
    }

    _optionals = [
        'billingaccountid',
        'createdon',
        'date',
        'devicesbad',
        'devicesfair',
        'devicesgood',
        'devicestotal',
        'foreignid',
        'hours',
        'id',
        'lastupdated',
        'minutes',
        'version',
        'versionid',
    ]

    def __init__(self,
                 billingaccountid=APIHelper.SKIP,
                 createdon=APIHelper.SKIP,
                 date=APIHelper.SKIP,
                 devicesbad=APIHelper.SKIP,
                 devicesfair=APIHelper.SKIP,
                 devicesgood=APIHelper.SKIP,
                 devicestotal=APIHelper.SKIP,
                 foreignid=APIHelper.SKIP,
                 hours=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 lastupdated=APIHelper.SKIP,
                 minutes=APIHelper.SKIP,
                 version=APIHelper.SKIP,
                 versionid=APIHelper.SKIP):
        """Constructor for the UserNetworkExperienceHistory class"""

        # Initialize members of the class
        if billingaccountid is not APIHelper.SKIP:
            self.billingaccountid = billingaccountid 
        if createdon is not APIHelper.SKIP:
            self.createdon = APIHelper.apply_datetime_converter(createdon, APIHelper.RFC3339DateTime) if createdon else None 
        if date is not APIHelper.SKIP:
            self.date = APIHelper.apply_datetime_converter(date, APIHelper.RFC3339DateTime) if date else None 
        if devicesbad is not APIHelper.SKIP:
            self.devicesbad = devicesbad 
        if devicesfair is not APIHelper.SKIP:
            self.devicesfair = devicesfair 
        if devicesgood is not APIHelper.SKIP:
            self.devicesgood = devicesgood 
        if devicestotal is not APIHelper.SKIP:
            self.devicestotal = devicestotal 
        if foreignid is not APIHelper.SKIP:
            self.foreignid = foreignid 
        if hours is not APIHelper.SKIP:
            self.hours = hours 
        if id is not APIHelper.SKIP:
            self.id = id 
        if lastupdated is not APIHelper.SKIP:
            self.lastupdated = APIHelper.apply_datetime_converter(lastupdated, APIHelper.RFC3339DateTime) if lastupdated else None 
        if minutes is not APIHelper.SKIP:
            self.minutes = minutes 
        if version is not APIHelper.SKIP:
            self.version = version 
        if versionid is not APIHelper.SKIP:
            self.versionid = versionid 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        billingaccountid = dictionary.get("billingaccountid") if dictionary.get("billingaccountid") else APIHelper.SKIP
        createdon = APIHelper.RFC3339DateTime.from_value(dictionary.get("createdon")).datetime if dictionary.get("createdon") else APIHelper.SKIP
        date = APIHelper.RFC3339DateTime.from_value(dictionary.get("date")).datetime if dictionary.get("date") else APIHelper.SKIP
        devicesbad = dictionary.get("devicesbad") if dictionary.get("devicesbad") else APIHelper.SKIP
        devicesfair = dictionary.get("devicesfair") if dictionary.get("devicesfair") else APIHelper.SKIP
        devicesgood = dictionary.get("devicesgood") if dictionary.get("devicesgood") else APIHelper.SKIP
        devicestotal = dictionary.get("devicestotal") if dictionary.get("devicestotal") else APIHelper.SKIP
        foreignid = dictionary.get("foreignid") if dictionary.get("foreignid") else APIHelper.SKIP
        hours = dictionary.get("hours") if dictionary.get("hours") else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        lastupdated = APIHelper.RFC3339DateTime.from_value(dictionary.get("lastupdated")).datetime if dictionary.get("lastupdated") else APIHelper.SKIP
        minutes = dictionary.get("minutes") if dictionary.get("minutes") else APIHelper.SKIP
        version = dictionary.get("version") if dictionary.get("version") else APIHelper.SKIP
        versionid = dictionary.get("versionid") if dictionary.get("versionid") else APIHelper.SKIP
        # Return an object of this model
        return cls(billingaccountid,
                   createdon,
                   date,
                   devicesbad,
                   devicesfair,
                   devicesgood,
                   devicestotal,
                   foreignid,
                   hours,
                   id,
                   lastupdated,
                   minutes,
                   version,
                   versionid)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'billingaccountid={(self.billingaccountid if hasattr(self, "billingaccountid") else None)!r}, '
                f'createdon={(self.createdon if hasattr(self, "createdon") else None)!r}, '
                f'date={(self.date if hasattr(self, "date") else None)!r}, '
                f'devicesbad={(self.devicesbad if hasattr(self, "devicesbad") else None)!r}, '
                f'devicesfair={(self.devicesfair if hasattr(self, "devicesfair") else None)!r}, '
                f'devicesgood={(self.devicesgood if hasattr(self, "devicesgood") else None)!r}, '
                f'devicestotal={(self.devicestotal if hasattr(self, "devicestotal") else None)!r}, '
                f'foreignid={(self.foreignid if hasattr(self, "foreignid") else None)!r}, '
                f'hours={(self.hours if hasattr(self, "hours") else None)!r}, '
                f'id={(self.id if hasattr(self, "id") else None)!r}, '
                f'lastupdated={(self.lastupdated if hasattr(self, "lastupdated") else None)!r}, '
                f'minutes={(self.minutes if hasattr(self, "minutes") else None)!r}, '
                f'version={(self.version if hasattr(self, "version") else None)!r}, '
                f'versionid={(self.versionid if hasattr(self, "versionid") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'billingaccountid={(self.billingaccountid if hasattr(self, "billingaccountid") else None)!s}, '
                f'createdon={(self.createdon if hasattr(self, "createdon") else None)!s}, '
                f'date={(self.date if hasattr(self, "date") else None)!s}, '
                f'devicesbad={(self.devicesbad if hasattr(self, "devicesbad") else None)!s}, '
                f'devicesfair={(self.devicesfair if hasattr(self, "devicesfair") else None)!s}, '
                f'devicesgood={(self.devicesgood if hasattr(self, "devicesgood") else None)!s}, '
                f'devicestotal={(self.devicestotal if hasattr(self, "devicestotal") else None)!s}, '
                f'foreignid={(self.foreignid if hasattr(self, "foreignid") else None)!s}, '
                f'hours={(self.hours if hasattr(self, "hours") else None)!s}, '
                f'id={(self.id if hasattr(self, "id") else None)!s}, '
                f'lastupdated={(self.lastupdated if hasattr(self, "lastupdated") else None)!s}, '
                f'minutes={(self.minutes if hasattr(self, "minutes") else None)!s}, '
                f'version={(self.version if hasattr(self, "version") else None)!s}, '
                f'versionid={(self.versionid if hasattr(self, "versionid") else None)!s})')
