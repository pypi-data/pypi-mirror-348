# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.dto_notification_group_request_entity import DtoNotificationGroupRequestEntity


class DtoCreateNotificationGroupRequest(object):

    """Implementation of the 'dto.CreateNotificationGroupRequest' model.

    Attributes:
        accountname (str): The numeric account name, which must include
            leading zeros
        group (DtoNotificationGroupRequestEntity): The model property of type
            DtoNotificationGroupRequestEntity.
        userids (List[str]): The model property of type List[str].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "group": 'group',
        "accountname": 'accountname',
        "userids": 'userids'
    }

    _optionals = [
        'accountname',
        'userids',
    ]

    def __init__(self,
                 group=None,
                 accountname=APIHelper.SKIP,
                 userids=APIHelper.SKIP):
        """Constructor for the DtoCreateNotificationGroupRequest class"""

        # Initialize members of the class
        if accountname is not APIHelper.SKIP:
            self.accountname = accountname 
        self.group = group 
        if userids is not APIHelper.SKIP:
            self.userids = userids 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        group = DtoNotificationGroupRequestEntity.from_dictionary(dictionary.get('group')) if dictionary.get('group') else None
        accountname = dictionary.get("accountname") if dictionary.get("accountname") else APIHelper.SKIP
        userids = dictionary.get("userids") if dictionary.get("userids") else APIHelper.SKIP
        # Return an object of this model
        return cls(group,
                   accountname,
                   userids)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'accountname={(self.accountname if hasattr(self, "accountname") else None)!r}, '
                f'group={self.group!r}, '
                f'userids={(self.userids if hasattr(self, "userids") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'accountname={(self.accountname if hasattr(self, "accountname") else None)!s}, '
                f'group={self.group!s}, '
                f'userids={(self.userids if hasattr(self, "userids") else None)!s})')
