# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class CallbacksRequest5(object):

    """Implementation of the 'Callbacks Request5' model.

    Attributes:
        account_name (str): The name of the billing account for which callback
            messages will be sent. Format: "##########-#####".
        service_name (str): The name of the callback service, which identifies
            the type and format of messages that will be sent to the
            registered URL.
        endpoint (str): The URL for your web server.
        http_headers (Any): Your HTTP headers.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_name": 'accountName',
        "service_name": 'serviceName',
        "endpoint": 'endpoint',
        "http_headers": 'httpHeaders'
    }

    _optionals = [
        'http_headers',
    ]

    def __init__(self,
                 account_name=None,
                 service_name=None,
                 endpoint=None,
                 http_headers=APIHelper.SKIP):
        """Constructor for the CallbacksRequest5 class"""

        # Initialize members of the class
        self.account_name = account_name 
        self.service_name = service_name 
        self.endpoint = endpoint 
        if http_headers is not APIHelper.SKIP:
            self.http_headers = http_headers 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_name = dictionary.get("accountName") if dictionary.get("accountName") else None
        service_name = dictionary.get("serviceName") if dictionary.get("serviceName") else None
        endpoint = dictionary.get("endpoint") if dictionary.get("endpoint") else None
        http_headers = dictionary.get("httpHeaders") if dictionary.get("httpHeaders") else APIHelper.SKIP
        # Return an object of this model
        return cls(account_name,
                   service_name,
                   endpoint,
                   http_headers)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_name={self.account_name!r}, '
                f'service_name={self.service_name!r}, '
                f'endpoint={self.endpoint!r}, '
                f'http_headers={(self.http_headers if hasattr(self, "http_headers") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_name={self.account_name!s}, '
                f'service_name={self.service_name!s}, '
                f'endpoint={self.endpoint!s}, '
                f'http_headers={(self.http_headers if hasattr(self, "http_headers") else None)!s})')
