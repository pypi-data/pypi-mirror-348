# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class KPIInfo(object):

    """Implementation of the 'KPIInfo' model.

    KPI Info Object

    Attributes:
        name (str): The model property of type str.
        value (str): The model property of type str.
        node_name (str): The model property of type str.
        node_type (str): The model property of type str.
        description (str): The model property of type str.
        unit (str): The model property of type str.
        category (str): The model property of type str.
        time_of_last_update (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "value": 'value',
        "node_name": 'nodeName',
        "node_type": 'nodeType',
        "description": 'description',
        "unit": 'unit',
        "category": 'category',
        "time_of_last_update": 'timeOfLastUpdate'
    }

    _optionals = [
        'name',
        'value',
        'node_name',
        'node_type',
        'description',
        'unit',
        'category',
        'time_of_last_update',
    ]

    def __init__(self,
                 name=APIHelper.SKIP,
                 value=APIHelper.SKIP,
                 node_name=APIHelper.SKIP,
                 node_type=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 unit=APIHelper.SKIP,
                 category=APIHelper.SKIP,
                 time_of_last_update=APIHelper.SKIP):
        """Constructor for the KPIInfo class"""

        # Initialize members of the class
        if name is not APIHelper.SKIP:
            self.name = name 
        if value is not APIHelper.SKIP:
            self.value = value 
        if node_name is not APIHelper.SKIP:
            self.node_name = node_name 
        if node_type is not APIHelper.SKIP:
            self.node_type = node_type 
        if description is not APIHelper.SKIP:
            self.description = description 
        if unit is not APIHelper.SKIP:
            self.unit = unit 
        if category is not APIHelper.SKIP:
            self.category = category 
        if time_of_last_update is not APIHelper.SKIP:
            self.time_of_last_update = time_of_last_update 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        value = dictionary.get("value") if dictionary.get("value") else APIHelper.SKIP
        node_name = dictionary.get("nodeName") if dictionary.get("nodeName") else APIHelper.SKIP
        node_type = dictionary.get("nodeType") if dictionary.get("nodeType") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        unit = dictionary.get("unit") if dictionary.get("unit") else APIHelper.SKIP
        category = dictionary.get("category") if dictionary.get("category") else APIHelper.SKIP
        time_of_last_update = dictionary.get("timeOfLastUpdate") if dictionary.get("timeOfLastUpdate") else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   value,
                   node_name,
                   node_type,
                   description,
                   unit,
                   category,
                   time_of_last_update)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'value={(self.value if hasattr(self, "value") else None)!r}, '
                f'node_name={(self.node_name if hasattr(self, "node_name") else None)!r}, '
                f'node_type={(self.node_type if hasattr(self, "node_type") else None)!r}, '
                f'description={(self.description if hasattr(self, "description") else None)!r}, '
                f'unit={(self.unit if hasattr(self, "unit") else None)!r}, '
                f'category={(self.category if hasattr(self, "category") else None)!r}, '
                f'time_of_last_update={(self.time_of_last_update if hasattr(self, "time_of_last_update") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'value={(self.value if hasattr(self, "value") else None)!s}, '
                f'node_name={(self.node_name if hasattr(self, "node_name") else None)!s}, '
                f'node_type={(self.node_type if hasattr(self, "node_type") else None)!s}, '
                f'description={(self.description if hasattr(self, "description") else None)!s}, '
                f'unit={(self.unit if hasattr(self, "unit") else None)!s}, '
                f'category={(self.category if hasattr(self, "category") else None)!s}, '
                f'time_of_last_update={(self.time_of_last_update if hasattr(self, "time_of_last_update") else None)!s})')
