# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.description import Description


class GeographicalPath(object):

    """Implementation of the 'GeographicalPath' model.

    The data frame is used to support the cross-cutting need in many V2X
    messages to describe arbitrary spatial areas (polygons, boundary lines,
    and other basic shapes) required by various message types in a small
    message size.

    Attributes:
        description (Description): The model property of type Description.
        direction (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "description": 'description',
        "direction": 'direction'
    }

    _optionals = [
        'description',
        'direction',
    ]

    def __init__(self,
                 description=APIHelper.SKIP,
                 direction=APIHelper.SKIP):
        """Constructor for the GeographicalPath class"""

        # Initialize members of the class
        if description is not APIHelper.SKIP:
            self.description = description 
        if direction is not APIHelper.SKIP:
            self.direction = direction 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        description = Description.from_dictionary(dictionary.get('description')) if 'description' in dictionary.keys() else APIHelper.SKIP
        direction = dictionary.get("direction") if dictionary.get("direction") else APIHelper.SKIP
        # Return an object of this model
        return cls(description,
                   direction)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'description={(self.description if hasattr(self, "description") else None)!r}, '
                f'direction={(self.direction if hasattr(self, "direction") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'description={(self.description if hasattr(self, "description") else None)!s}, '
                f'direction={(self.direction if hasattr(self, "direction") else None)!s})')
