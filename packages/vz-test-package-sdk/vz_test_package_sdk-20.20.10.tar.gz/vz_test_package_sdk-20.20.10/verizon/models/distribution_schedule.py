# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class DistributionSchedule(object):

    """Implementation of the 'DistributionSchedule' model.

    The distribution schedule parameters for broadcast messages.

    Attributes:
        repeat_period (int): The period (in seconds) that the message needs to
            be repeatedly send out.
        duration (int): The amount of time (in minutes) while the messages
            needs to be sent out.
        start_time (datetime): The time (in UTC) when the message transmission
            should be started.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "repeat_period": 'repeatPeriod',
        "duration": 'duration',
        "start_time": 'startTime'
    }

    _optionals = [
        'start_time',
    ]

    def __init__(self,
                 repeat_period=None,
                 duration=None,
                 start_time=APIHelper.SKIP):
        """Constructor for the DistributionSchedule class"""

        # Initialize members of the class
        self.repeat_period = repeat_period 
        self.duration = duration 
        if start_time is not APIHelper.SKIP:
            self.start_time = APIHelper.apply_datetime_converter(start_time, APIHelper.RFC3339DateTime) if start_time else None 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        repeat_period = dictionary.get("repeatPeriod") if dictionary.get("repeatPeriod") else None
        duration = dictionary.get("duration") if dictionary.get("duration") else None
        start_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("startTime")).datetime if dictionary.get("startTime") else APIHelper.SKIP
        # Return an object of this model
        return cls(repeat_period,
                   duration,
                   start_time)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'repeat_period={self.repeat_period!r}, '
                f'duration={self.duration!r}, '
                f'start_time={(self.start_time if hasattr(self, "start_time") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'repeat_period={self.repeat_period!s}, '
                f'duration={self.duration!s}, '
                f'start_time={(self.start_time if hasattr(self, "start_time") else None)!s})')
