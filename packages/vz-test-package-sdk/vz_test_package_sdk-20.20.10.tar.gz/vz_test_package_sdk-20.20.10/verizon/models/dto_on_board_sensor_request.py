# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.payload import Payload


class DtoOnBoardSensorRequest(object):

    """Implementation of the 'dto.OnBoardSensorRequest' model.

    Attributes:
        accountname (str): The numeric account name, which must include
            leading zeros
        payload (Payload): The model property of type Payload.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "accountname": 'accountname',
        "payload": 'payload'
    }

    _optionals = [
        'accountname',
        'payload',
    ]

    def __init__(self,
                 accountname=APIHelper.SKIP,
                 payload=APIHelper.SKIP):
        """Constructor for the DtoOnBoardSensorRequest class"""

        # Initialize members of the class
        if accountname is not APIHelper.SKIP:
            self.accountname = accountname 
        if payload is not APIHelper.SKIP:
            self.payload = payload 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        accountname = dictionary.get("accountname") if dictionary.get("accountname") else APIHelper.SKIP
        payload = Payload.from_dictionary(dictionary.get('payload')) if 'payload' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(accountname,
                   payload)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'accountname={(self.accountname if hasattr(self, "accountname") else None)!r}, '
                f'payload={(self.payload if hasattr(self, "payload") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'accountname={(self.accountname if hasattr(self, "accountname") else None)!s}, '
                f'payload={(self.payload if hasattr(self, "payload") else None)!s})')
