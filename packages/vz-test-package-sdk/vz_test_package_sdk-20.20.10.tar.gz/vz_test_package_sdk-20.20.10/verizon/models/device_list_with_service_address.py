# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.m_5_gbiaddress_andcustomerinfo import M5gbiaddressAndcustomerinfo
from verizon.models.m_5_gbidevice_id_1 import M5gbideviceId1


class DeviceListWithServiceAddress(object):

    """Implementation of the 'DeviceListWithServiceAddress' model.

    Attributes:
        device_id (List[M5gbideviceId1]): The model property of type
            List[M5gbideviceId1].
        primary_placeofuse (M5gbiaddressAndcustomerinfo): The model property
            of type M5gbiaddressAndcustomerinfo.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "device_id": 'deviceId',
        "primary_placeofuse": 'primaryPlaceofuse'
    }

    _optionals = [
        'device_id',
        'primary_placeofuse',
    ]

    def __init__(self,
                 device_id=APIHelper.SKIP,
                 primary_placeofuse=APIHelper.SKIP):
        """Constructor for the DeviceListWithServiceAddress class"""

        # Initialize members of the class
        if device_id is not APIHelper.SKIP:
            self.device_id = device_id 
        if primary_placeofuse is not APIHelper.SKIP:
            self.primary_placeofuse = primary_placeofuse 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        device_id = None
        if dictionary.get('deviceId') is not None:
            device_id = [M5gbideviceId1.from_dictionary(x) for x in dictionary.get('deviceId')]
        else:
            device_id = APIHelper.SKIP
        primary_placeofuse = M5gbiaddressAndcustomerinfo.from_dictionary(dictionary.get('primaryPlaceofuse')) if 'primaryPlaceofuse' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(device_id,
                   primary_placeofuse)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'device_id={(self.device_id if hasattr(self, "device_id") else None)!r}, '
                f'primary_placeofuse={(self.primary_placeofuse if hasattr(self, "primary_placeofuse") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'device_id={(self.device_id if hasattr(self, "device_id") else None)!s}, '
                f'primary_placeofuse={(self.primary_placeofuse if hasattr(self, "primary_placeofuse") else None)!s})')
