# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class Fields4(object):

    """Implementation of the 'Fields4' model.

    Attributes:
        additional_prop_1 (str): The model property of type str.
        additional_prop_2 (str): The model property of type str.
        additional_prop_3 (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "additional_prop_1": 'additionalProp1',
        "additional_prop_2": 'additionalProp2',
        "additional_prop_3": 'additionalProp3'
    }

    _optionals = [
        'additional_prop_1',
        'additional_prop_2',
        'additional_prop_3',
    ]

    def __init__(self,
                 additional_prop_1=APIHelper.SKIP,
                 additional_prop_2=APIHelper.SKIP,
                 additional_prop_3=APIHelper.SKIP):
        """Constructor for the Fields4 class"""

        # Initialize members of the class
        if additional_prop_1 is not APIHelper.SKIP:
            self.additional_prop_1 = additional_prop_1 
        if additional_prop_2 is not APIHelper.SKIP:
            self.additional_prop_2 = additional_prop_2 
        if additional_prop_3 is not APIHelper.SKIP:
            self.additional_prop_3 = additional_prop_3 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        additional_prop_1 = dictionary.get("additionalProp1") if dictionary.get("additionalProp1") else APIHelper.SKIP
        additional_prop_2 = dictionary.get("additionalProp2") if dictionary.get("additionalProp2") else APIHelper.SKIP
        additional_prop_3 = dictionary.get("additionalProp3") if dictionary.get("additionalProp3") else APIHelper.SKIP
        # Return an object of this model
        return cls(additional_prop_1,
                   additional_prop_2,
                   additional_prop_3)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'additional_prop_1={(self.additional_prop_1 if hasattr(self, "additional_prop_1") else None)!r}, '
                f'additional_prop_2={(self.additional_prop_2 if hasattr(self, "additional_prop_2") else None)!r}, '
                f'additional_prop_3={(self.additional_prop_3 if hasattr(self, "additional_prop_3") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'additional_prop_1={(self.additional_prop_1 if hasattr(self, "additional_prop_1") else None)!s}, '
                f'additional_prop_2={(self.additional_prop_2 if hasattr(self, "additional_prop_2") else None)!s}, '
                f'additional_prop_3={(self.additional_prop_3 if hasattr(self, "additional_prop_3") else None)!s})')
