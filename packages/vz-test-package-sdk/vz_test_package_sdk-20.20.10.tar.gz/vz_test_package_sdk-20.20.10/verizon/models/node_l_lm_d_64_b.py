# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class NodeLLmD64b(object):

    """Implementation of the 'Node-LLmD-64b' model.

    A 64-bit node type with lat-long values expressed in standard SAE 1/10th
    of a microdegree.

    Attributes:
        lon (int): The geographic longitude of an object, expressed in 1/10th
            integer microdegrees, as a 32-bit value, and with reference to the
            horizontal datum then in use. The value 1800000001 shall be used
            when unavailable.
        lat (int): The geographic latitude of an object, expressed in 1/10th
            integer microdegrees, as a 31 bit value, and with reference to the
            horizontal datum then in use. The value 900000001 shall be used
            when unavailable.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "lon": 'lon',
        "lat": 'lat'
    }

    def __init__(self,
                 lon=None,
                 lat=None):
        """Constructor for the NodeLLmD64b class"""

        # Initialize members of the class
        self.lon = lon 
        self.lat = lat 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        lon = dictionary.get("lon") if dictionary.get("lon") else None
        lat = dictionary.get("lat") if dictionary.get("lat") else None
        # Return an object of this model
        return cls(lon,
                   lat)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'lon={self.lon!r}, '
                f'lat={self.lat!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'lon={self.lon!s}, '
                f'lat={self.lat!s})')
