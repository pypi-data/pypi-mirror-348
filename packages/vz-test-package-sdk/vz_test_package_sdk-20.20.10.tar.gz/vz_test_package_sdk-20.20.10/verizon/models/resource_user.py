# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class ResourceUser(object):

    """Implementation of the 'resource.User' model.

    Attributes:
        accountclientid (str): Not used in this release, future functionality
        ackterms (bool): Indicates if terms are agreed to (true) or not
        acktermson (datetime): The model property of type datetime.
        billingaccountid (str): The billing account ID. This is the same value
            as the Account ID
        createdon (datetime): Timestamp of the record
        credentialsid (str): User credentials. The only valid value is an
            email address
        credentialstype (str): The type of credential represented by the ID.
            The only valid value is `email`
        customdata (Dict[str, Any]): Name/value pair, where the value is
            client defined.  The purpose is to keep track of current state per
            device action.
        description (str): a short description
        displayname (str): the user name value to display
        email (str): Contact email for the group
        firstname (str): The first name in the user record
        foreignid (str): UUID of the ECPD account the user belongs to
        id (str): UUID of the user record, assigned at creation
        lastname (str): The last name in the user record
        lastupdated (datetime): Timestamp of the record
        mdn (str): The Mobile Directory Number
        middlename (str): optional field for middle name or initial
        name (str): User defined name of the record
        secondarybillingaccountids (List[str]): Virtual field; will not be
            used in this implementation
        state (str): The current status of the device or transaction and will
            be `success` or `failed`
        version (str): The resource version
        versionid (str): The UUID of the resource version

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "createdon": 'createdon',
        "credentialstype": 'credentialstype',
        "foreignid": 'foreignid',
        "lastupdated": 'lastupdated',
        "versionid": 'versionid',
        "accountclientid": 'accountclientid',
        "ackterms": 'ackterms',
        "acktermson": 'acktermson',
        "billingaccountid": 'billingaccountid',
        "credentialsid": 'credentialsid',
        "customdata": 'customdata',
        "description": 'description',
        "displayname": 'displayname',
        "email": 'email',
        "firstname": 'firstname',
        "id": 'id',
        "lastname": 'lastname',
        "mdn": 'mdn',
        "middlename": 'middlename',
        "name": 'name',
        "secondarybillingaccountids": 'secondarybillingaccountids',
        "state": 'state',
        "version": 'version'
    }

    _optionals = [
        'accountclientid',
        'ackterms',
        'acktermson',
        'billingaccountid',
        'credentialsid',
        'customdata',
        'description',
        'displayname',
        'email',
        'firstname',
        'id',
        'lastname',
        'mdn',
        'middlename',
        'name',
        'secondarybillingaccountids',
        'state',
        'version',
    ]

    def __init__(self,
                 createdon=None,
                 credentialstype=None,
                 foreignid=None,
                 lastupdated=None,
                 versionid=None,
                 accountclientid=APIHelper.SKIP,
                 ackterms=APIHelper.SKIP,
                 acktermson=APIHelper.SKIP,
                 billingaccountid=APIHelper.SKIP,
                 credentialsid=APIHelper.SKIP,
                 customdata=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 displayname=APIHelper.SKIP,
                 email=APIHelper.SKIP,
                 firstname=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 lastname=APIHelper.SKIP,
                 mdn=APIHelper.SKIP,
                 middlename=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 secondarybillingaccountids=APIHelper.SKIP,
                 state=APIHelper.SKIP,
                 version=APIHelper.SKIP):
        """Constructor for the ResourceUser class"""

        # Initialize members of the class
        if accountclientid is not APIHelper.SKIP:
            self.accountclientid = accountclientid 
        if ackterms is not APIHelper.SKIP:
            self.ackterms = ackterms 
        if acktermson is not APIHelper.SKIP:
            self.acktermson = APIHelper.apply_datetime_converter(acktermson, APIHelper.RFC3339DateTime) if acktermson else None 
        if billingaccountid is not APIHelper.SKIP:
            self.billingaccountid = billingaccountid 
        self.createdon = APIHelper.apply_datetime_converter(createdon, APIHelper.RFC3339DateTime) if createdon else None 
        if credentialsid is not APIHelper.SKIP:
            self.credentialsid = credentialsid 
        self.credentialstype = credentialstype 
        if customdata is not APIHelper.SKIP:
            self.customdata = customdata 
        if description is not APIHelper.SKIP:
            self.description = description 
        if displayname is not APIHelper.SKIP:
            self.displayname = displayname 
        if email is not APIHelper.SKIP:
            self.email = email 
        if firstname is not APIHelper.SKIP:
            self.firstname = firstname 
        self.foreignid = foreignid 
        if id is not APIHelper.SKIP:
            self.id = id 
        if lastname is not APIHelper.SKIP:
            self.lastname = lastname 
        self.lastupdated = APIHelper.apply_datetime_converter(lastupdated, APIHelper.RFC3339DateTime) if lastupdated else None 
        if mdn is not APIHelper.SKIP:
            self.mdn = mdn 
        if middlename is not APIHelper.SKIP:
            self.middlename = middlename 
        if name is not APIHelper.SKIP:
            self.name = name 
        if secondarybillingaccountids is not APIHelper.SKIP:
            self.secondarybillingaccountids = secondarybillingaccountids 
        if state is not APIHelper.SKIP:
            self.state = state 
        if version is not APIHelper.SKIP:
            self.version = version 
        self.versionid = versionid 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        createdon = APIHelper.RFC3339DateTime.from_value(dictionary.get("createdon")).datetime if dictionary.get("createdon") else None
        credentialstype = dictionary.get("credentialstype") if dictionary.get("credentialstype") else None
        foreignid = dictionary.get("foreignid") if dictionary.get("foreignid") else None
        lastupdated = APIHelper.RFC3339DateTime.from_value(dictionary.get("lastupdated")).datetime if dictionary.get("lastupdated") else None
        versionid = dictionary.get("versionid") if dictionary.get("versionid") else None
        accountclientid = dictionary.get("accountclientid") if dictionary.get("accountclientid") else APIHelper.SKIP
        ackterms = dictionary.get("ackterms") if "ackterms" in dictionary.keys() else APIHelper.SKIP
        acktermson = APIHelper.RFC3339DateTime.from_value(dictionary.get("acktermson")).datetime if dictionary.get("acktermson") else APIHelper.SKIP
        billingaccountid = dictionary.get("billingaccountid") if dictionary.get("billingaccountid") else APIHelper.SKIP
        credentialsid = dictionary.get("credentialsid") if dictionary.get("credentialsid") else APIHelper.SKIP
        customdata = dictionary.get("customdata") if dictionary.get("customdata") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        displayname = dictionary.get("displayname") if dictionary.get("displayname") else APIHelper.SKIP
        email = dictionary.get("email") if dictionary.get("email") else APIHelper.SKIP
        firstname = dictionary.get("firstname") if dictionary.get("firstname") else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        lastname = dictionary.get("lastname") if dictionary.get("lastname") else APIHelper.SKIP
        mdn = dictionary.get("mdn") if dictionary.get("mdn") else APIHelper.SKIP
        middlename = dictionary.get("middlename") if dictionary.get("middlename") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        secondarybillingaccountids = dictionary.get("secondarybillingaccountids") if dictionary.get("secondarybillingaccountids") else APIHelper.SKIP
        state = dictionary.get("state") if dictionary.get("state") else APIHelper.SKIP
        version = dictionary.get("version") if dictionary.get("version") else APIHelper.SKIP
        # Return an object of this model
        return cls(createdon,
                   credentialstype,
                   foreignid,
                   lastupdated,
                   versionid,
                   accountclientid,
                   ackterms,
                   acktermson,
                   billingaccountid,
                   credentialsid,
                   customdata,
                   description,
                   displayname,
                   email,
                   firstname,
                   id,
                   lastname,
                   mdn,
                   middlename,
                   name,
                   secondarybillingaccountids,
                   state,
                   version)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'accountclientid={(self.accountclientid if hasattr(self, "accountclientid") else None)!r}, '
                f'ackterms={(self.ackterms if hasattr(self, "ackterms") else None)!r}, '
                f'acktermson={(self.acktermson if hasattr(self, "acktermson") else None)!r}, '
                f'billingaccountid={(self.billingaccountid if hasattr(self, "billingaccountid") else None)!r}, '
                f'createdon={self.createdon!r}, '
                f'credentialsid={(self.credentialsid if hasattr(self, "credentialsid") else None)!r}, '
                f'credentialstype={self.credentialstype!r}, '
                f'customdata={(self.customdata if hasattr(self, "customdata") else None)!r}, '
                f'description={(self.description if hasattr(self, "description") else None)!r}, '
                f'displayname={(self.displayname if hasattr(self, "displayname") else None)!r}, '
                f'email={(self.email if hasattr(self, "email") else None)!r}, '
                f'firstname={(self.firstname if hasattr(self, "firstname") else None)!r}, '
                f'foreignid={self.foreignid!r}, '
                f'id={(self.id if hasattr(self, "id") else None)!r}, '
                f'lastname={(self.lastname if hasattr(self, "lastname") else None)!r}, '
                f'lastupdated={self.lastupdated!r}, '
                f'mdn={(self.mdn if hasattr(self, "mdn") else None)!r}, '
                f'middlename={(self.middlename if hasattr(self, "middlename") else None)!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'secondarybillingaccountids={(self.secondarybillingaccountids if hasattr(self, "secondarybillingaccountids") else None)!r}, '
                f'state={(self.state if hasattr(self, "state") else None)!r}, '
                f'version={(self.version if hasattr(self, "version") else None)!r}, '
                f'versionid={self.versionid!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'accountclientid={(self.accountclientid if hasattr(self, "accountclientid") else None)!s}, '
                f'ackterms={(self.ackterms if hasattr(self, "ackterms") else None)!s}, '
                f'acktermson={(self.acktermson if hasattr(self, "acktermson") else None)!s}, '
                f'billingaccountid={(self.billingaccountid if hasattr(self, "billingaccountid") else None)!s}, '
                f'createdon={self.createdon!s}, '
                f'credentialsid={(self.credentialsid if hasattr(self, "credentialsid") else None)!s}, '
                f'credentialstype={self.credentialstype!s}, '
                f'customdata={(self.customdata if hasattr(self, "customdata") else None)!s}, '
                f'description={(self.description if hasattr(self, "description") else None)!s}, '
                f'displayname={(self.displayname if hasattr(self, "displayname") else None)!s}, '
                f'email={(self.email if hasattr(self, "email") else None)!s}, '
                f'firstname={(self.firstname if hasattr(self, "firstname") else None)!s}, '
                f'foreignid={self.foreignid!s}, '
                f'id={(self.id if hasattr(self, "id") else None)!s}, '
                f'lastname={(self.lastname if hasattr(self, "lastname") else None)!s}, '
                f'lastupdated={self.lastupdated!s}, '
                f'mdn={(self.mdn if hasattr(self, "mdn") else None)!s}, '
                f'middlename={(self.middlename if hasattr(self, "middlename") else None)!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'secondarybillingaccountids={(self.secondarybillingaccountids if hasattr(self, "secondarybillingaccountids") else None)!s}, '
                f'state={(self.state if hasattr(self, "state") else None)!s}, '
                f'version={(self.version if hasattr(self, "version") else None)!s}, '
                f'versionid={self.versionid!s})')
