# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class SpeedItem(object):

    """Implementation of the 'SpeedItem' model.

    Defines the acceptable speed range for road users in m/s. Messages are
    triggered when:
        1. The road user's speed is below the required minimum OR
        2. The road user's speed is above the acceptable maximum AND
        3. The associated TriggerConditions are met.
    Example: For the speed range of 10-20 m/s and a TriggerCondition of 'user
    inside geofence', the message is sent if the user's speed is below 10 m/s
    or above 20 m/s while in the geofence area.

    Attributes:
        speed (Any): The model property of type Any.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "speed": 'speed'
    }

    def __init__(self,
                 speed=None):
        """Constructor for the SpeedItem class"""

        # Initialize members of the class
        self.speed = speed 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        speed = dictionary.get("speed") if dictionary.get("speed") else None
        # Return an object of this model
        return cls(speed)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'speed={self.speed!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'speed={self.speed!s})')
