# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.dto_user_dto import DtoUserDTO


class DtoNotificationGroupResponseEntity(object):

    """Implementation of the 'dto.NotificationGroupResponseEntity' model.

    Attributes:
        createdon (datetime): Timestamp of the record
        description (str): a short description
        foreignid (str): UUID of the ECPD account the user belongs to
        groupemail (str): Contact email for the group
        id (str): UUID of the user record, assigned at creation
        lastupdated (datetime): Timestamp of the record
        name (str): User defined name of the record
        users (List[DtoUserDTO]): The model property of type List[DtoUserDTO].
        version (str): The resource version
        versionid (str): The UUID of the resource version

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "createdon": 'createdon',
        "description": 'description',
        "foreignid": 'foreignid',
        "groupemail": 'groupemail',
        "id": 'id',
        "lastupdated": 'lastupdated',
        "name": 'name',
        "users": 'users',
        "version": 'version',
        "versionid": 'versionid'
    }

    _optionals = [
        'createdon',
        'description',
        'foreignid',
        'groupemail',
        'id',
        'lastupdated',
        'name',
        'users',
        'version',
        'versionid',
    ]

    def __init__(self,
                 createdon=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 foreignid=APIHelper.SKIP,
                 groupemail=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 lastupdated=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 users=APIHelper.SKIP,
                 version=APIHelper.SKIP,
                 versionid=APIHelper.SKIP):
        """Constructor for the DtoNotificationGroupResponseEntity class"""

        # Initialize members of the class
        if createdon is not APIHelper.SKIP:
            self.createdon = APIHelper.apply_datetime_converter(createdon, APIHelper.RFC3339DateTime) if createdon else None 
        if description is not APIHelper.SKIP:
            self.description = description 
        if foreignid is not APIHelper.SKIP:
            self.foreignid = foreignid 
        if groupemail is not APIHelper.SKIP:
            self.groupemail = groupemail 
        if id is not APIHelper.SKIP:
            self.id = id 
        if lastupdated is not APIHelper.SKIP:
            self.lastupdated = APIHelper.apply_datetime_converter(lastupdated, APIHelper.RFC3339DateTime) if lastupdated else None 
        if name is not APIHelper.SKIP:
            self.name = name 
        if users is not APIHelper.SKIP:
            self.users = users 
        if version is not APIHelper.SKIP:
            self.version = version 
        if versionid is not APIHelper.SKIP:
            self.versionid = versionid 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        createdon = APIHelper.RFC3339DateTime.from_value(dictionary.get("createdon")).datetime if dictionary.get("createdon") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        foreignid = dictionary.get("foreignid") if dictionary.get("foreignid") else APIHelper.SKIP
        groupemail = dictionary.get("groupemail") if dictionary.get("groupemail") else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        lastupdated = APIHelper.RFC3339DateTime.from_value(dictionary.get("lastupdated")).datetime if dictionary.get("lastupdated") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        users = None
        if dictionary.get('users') is not None:
            users = [DtoUserDTO.from_dictionary(x) for x in dictionary.get('users')]
        else:
            users = APIHelper.SKIP
        version = dictionary.get("version") if dictionary.get("version") else APIHelper.SKIP
        versionid = dictionary.get("versionid") if dictionary.get("versionid") else APIHelper.SKIP
        # Return an object of this model
        return cls(createdon,
                   description,
                   foreignid,
                   groupemail,
                   id,
                   lastupdated,
                   name,
                   users,
                   version,
                   versionid)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'createdon={(self.createdon if hasattr(self, "createdon") else None)!r}, '
                f'description={(self.description if hasattr(self, "description") else None)!r}, '
                f'foreignid={(self.foreignid if hasattr(self, "foreignid") else None)!r}, '
                f'groupemail={(self.groupemail if hasattr(self, "groupemail") else None)!r}, '
                f'id={(self.id if hasattr(self, "id") else None)!r}, '
                f'lastupdated={(self.lastupdated if hasattr(self, "lastupdated") else None)!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'users={(self.users if hasattr(self, "users") else None)!r}, '
                f'version={(self.version if hasattr(self, "version") else None)!r}, '
                f'versionid={(self.versionid if hasattr(self, "versionid") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'createdon={(self.createdon if hasattr(self, "createdon") else None)!s}, '
                f'description={(self.description if hasattr(self, "description") else None)!s}, '
                f'foreignid={(self.foreignid if hasattr(self, "foreignid") else None)!s}, '
                f'groupemail={(self.groupemail if hasattr(self, "groupemail") else None)!s}, '
                f'id={(self.id if hasattr(self, "id") else None)!s}, '
                f'lastupdated={(self.lastupdated if hasattr(self, "lastupdated") else None)!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'users={(self.users if hasattr(self, "users") else None)!s}, '
                f'version={(self.version if hasattr(self, "version") else None)!s}, '
                f'versionid={(self.versionid if hasattr(self, "versionid") else None)!s})')
