# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.dto_device_action_set_configuration import DtoDeviceActionSetConfiguration


class ActionResultwithDeviceConfig(object):

    """Implementation of the 'actionResultwithDeviceConfig' model.

    Attributes:
        createdon (datetime): Timestamp of the record
        description (str): The model property of type str.
        deviceid (str): This is a UUID value of the device created when the
            device is onboarded
        errmsg (str): Error message
        fields (DtoDeviceActionSetConfiguration): The model property of type
            DtoDeviceActionSetConfiguration.
        foreignid (str): UUID of the ECPD account the user belongs to
        id (str): UUID of the user record, assigned at creation
        lastupdated (datetime): Timestamp of the record
        state (str): The current status of the device or transaction and will
            be `success` or `failed`
        transactionid (str): The system-generated UUID of the transaction
        version (str): The resource version
        versionid (str): The UUID of the resource version

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "createdon": 'createdon',
        "description": 'description',
        "deviceid": 'deviceid',
        "errmsg": 'errmsg',
        "fields": 'fields',
        "foreignid": 'foreignid',
        "id": 'id',
        "lastupdated": 'lastupdated',
        "state": 'state',
        "transactionid": 'transactionid',
        "version": 'version',
        "versionid": 'versionid'
    }

    _optionals = [
        'createdon',
        'description',
        'deviceid',
        'errmsg',
        'fields',
        'foreignid',
        'id',
        'lastupdated',
        'state',
        'transactionid',
        'version',
        'versionid',
    ]

    def __init__(self,
                 createdon=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 deviceid=APIHelper.SKIP,
                 errmsg=APIHelper.SKIP,
                 fields=APIHelper.SKIP,
                 foreignid=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 lastupdated=APIHelper.SKIP,
                 state=APIHelper.SKIP,
                 transactionid=APIHelper.SKIP,
                 version=APIHelper.SKIP,
                 versionid=APIHelper.SKIP):
        """Constructor for the ActionResultwithDeviceConfig class"""

        # Initialize members of the class
        if createdon is not APIHelper.SKIP:
            self.createdon = APIHelper.apply_datetime_converter(createdon, APIHelper.RFC3339DateTime) if createdon else None 
        if description is not APIHelper.SKIP:
            self.description = description 
        if deviceid is not APIHelper.SKIP:
            self.deviceid = deviceid 
        if errmsg is not APIHelper.SKIP:
            self.errmsg = errmsg 
        if fields is not APIHelper.SKIP:
            self.fields = fields 
        if foreignid is not APIHelper.SKIP:
            self.foreignid = foreignid 
        if id is not APIHelper.SKIP:
            self.id = id 
        if lastupdated is not APIHelper.SKIP:
            self.lastupdated = APIHelper.apply_datetime_converter(lastupdated, APIHelper.RFC3339DateTime) if lastupdated else None 
        if state is not APIHelper.SKIP:
            self.state = state 
        if transactionid is not APIHelper.SKIP:
            self.transactionid = transactionid 
        if version is not APIHelper.SKIP:
            self.version = version 
        if versionid is not APIHelper.SKIP:
            self.versionid = versionid 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        createdon = APIHelper.RFC3339DateTime.from_value(dictionary.get("createdon")).datetime if dictionary.get("createdon") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        deviceid = dictionary.get("deviceid") if dictionary.get("deviceid") else APIHelper.SKIP
        errmsg = dictionary.get("errmsg") if dictionary.get("errmsg") else APIHelper.SKIP
        fields = DtoDeviceActionSetConfiguration.from_dictionary(dictionary.get('fields')) if 'fields' in dictionary.keys() else APIHelper.SKIP
        foreignid = dictionary.get("foreignid") if dictionary.get("foreignid") else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        lastupdated = APIHelper.RFC3339DateTime.from_value(dictionary.get("lastupdated")).datetime if dictionary.get("lastupdated") else APIHelper.SKIP
        state = dictionary.get("state") if dictionary.get("state") else APIHelper.SKIP
        transactionid = dictionary.get("transactionid") if dictionary.get("transactionid") else APIHelper.SKIP
        version = dictionary.get("version") if dictionary.get("version") else APIHelper.SKIP
        versionid = dictionary.get("versionid") if dictionary.get("versionid") else APIHelper.SKIP
        # Return an object of this model
        return cls(createdon,
                   description,
                   deviceid,
                   errmsg,
                   fields,
                   foreignid,
                   id,
                   lastupdated,
                   state,
                   transactionid,
                   version,
                   versionid)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'createdon={(self.createdon if hasattr(self, "createdon") else None)!r}, '
                f'description={(self.description if hasattr(self, "description") else None)!r}, '
                f'deviceid={(self.deviceid if hasattr(self, "deviceid") else None)!r}, '
                f'errmsg={(self.errmsg if hasattr(self, "errmsg") else None)!r}, '
                f'fields={(self.fields if hasattr(self, "fields") else None)!r}, '
                f'foreignid={(self.foreignid if hasattr(self, "foreignid") else None)!r}, '
                f'id={(self.id if hasattr(self, "id") else None)!r}, '
                f'lastupdated={(self.lastupdated if hasattr(self, "lastupdated") else None)!r}, '
                f'state={(self.state if hasattr(self, "state") else None)!r}, '
                f'transactionid={(self.transactionid if hasattr(self, "transactionid") else None)!r}, '
                f'version={(self.version if hasattr(self, "version") else None)!r}, '
                f'versionid={(self.versionid if hasattr(self, "versionid") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'createdon={(self.createdon if hasattr(self, "createdon") else None)!s}, '
                f'description={(self.description if hasattr(self, "description") else None)!s}, '
                f'deviceid={(self.deviceid if hasattr(self, "deviceid") else None)!s}, '
                f'errmsg={(self.errmsg if hasattr(self, "errmsg") else None)!s}, '
                f'fields={(self.fields if hasattr(self, "fields") else None)!s}, '
                f'foreignid={(self.foreignid if hasattr(self, "foreignid") else None)!s}, '
                f'id={(self.id if hasattr(self, "id") else None)!s}, '
                f'lastupdated={(self.lastupdated if hasattr(self, "lastupdated") else None)!s}, '
                f'state={(self.state if hasattr(self, "state") else None)!s}, '
                f'transactionid={(self.transactionid if hasattr(self, "transactionid") else None)!s}, '
                f'version={(self.version if hasattr(self, "version") else None)!s}, '
                f'versionid={(self.versionid if hasattr(self, "versionid") else None)!s})')
