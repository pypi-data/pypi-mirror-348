# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class ClientRegistrationRequest(object):

    """Implementation of the 'ClientRegistrationRequest' model.

    Request for /clients/registration endpoint. It requires the Client Type,
    Subtype and Vendor to be defined.

    Attributes:
        client_type (ETXClientTypeEnum): The model property of type
            ETXClientTypeEnum.
        client_subtype (ClientSubtypeEnum): The model property of type
            ClientSubtypeEnum.
        vendor_id (str): The ID the vendor wants its devices to be registered
            under. E.g. Verizon, GM, Ford, etc.
        device_id (uuid|str): The generated ID (UUID v4) for the device. It
            can be used as:   - the MQTT Client ID when connecting to the
            Message Exchange system   - a parameter when asking for the
            connection endpoint   - a parameter when finishing the device
            registration   - a parameter when unregistering the device
        imei (str): The IMEI number of the device.
        iccid (str): The ICCID number of the device.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "client_type": 'ClientType',
        "client_subtype": 'ClientSubtype',
        "vendor_id": 'VendorID',
        "device_id": 'DeviceID',
        "imei": 'IMEI',
        "iccid": 'ICCID'
    }

    _optionals = [
        'device_id',
        'imei',
        'iccid',
    ]

    def __init__(self,
                 client_type=None,
                 client_subtype=None,
                 vendor_id=None,
                 device_id=APIHelper.SKIP,
                 imei=APIHelper.SKIP,
                 iccid=APIHelper.SKIP):
        """Constructor for the ClientRegistrationRequest class"""

        # Initialize members of the class
        self.client_type = client_type 
        self.client_subtype = client_subtype 
        self.vendor_id = vendor_id 
        if device_id is not APIHelper.SKIP:
            self.device_id = device_id 
        if imei is not APIHelper.SKIP:
            self.imei = imei 
        if iccid is not APIHelper.SKIP:
            self.iccid = iccid 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        client_type = dictionary.get("ClientType") if dictionary.get("ClientType") else None
        client_subtype = dictionary.get("ClientSubtype") if dictionary.get("ClientSubtype") else None
        vendor_id = dictionary.get("VendorID") if dictionary.get("VendorID") else None
        device_id = dictionary.get("DeviceID") if dictionary.get("DeviceID") else APIHelper.SKIP
        imei = dictionary.get("IMEI") if dictionary.get("IMEI") else APIHelper.SKIP
        iccid = dictionary.get("ICCID") if dictionary.get("ICCID") else APIHelper.SKIP
        # Return an object of this model
        return cls(client_type,
                   client_subtype,
                   vendor_id,
                   device_id,
                   imei,
                   iccid)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'client_type={self.client_type!r}, '
                f'client_subtype={self.client_subtype!r}, '
                f'vendor_id={self.vendor_id!r}, '
                f'device_id={(self.device_id if hasattr(self, "device_id") else None)!r}, '
                f'imei={(self.imei if hasattr(self, "imei") else None)!r}, '
                f'iccid={(self.iccid if hasattr(self, "iccid") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'client_type={self.client_type!s}, '
                f'client_subtype={self.client_subtype!s}, '
                f'vendor_id={self.vendor_id!s}, '
                f'device_id={(self.device_id if hasattr(self, "device_id") else None)!s}, '
                f'imei={(self.imei if hasattr(self, "imei") else None)!s}, '
                f'iccid={(self.iccid if hasattr(self, "iccid") else None)!s})')
