# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.promo_alert_1 import PromoAlert1


class RequestTrigger(object):

    """Implementation of the 'requestTrigger' model.

    Attributes:
        trigger_id (str): The model property of type str.
        trigger_name (str): The model property of type str.
        account_name (str): The model property of type str.
        organization_name (str): The model property of type str.
        trigger_category (str): The model property of type str.
        promo_alerts (List[PromoAlert1]): The model property of type
            List[PromoAlert1].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "trigger_id": 'triggerId',
        "trigger_name": 'triggerName',
        "account_name": 'accountName',
        "organization_name": 'organizationName',
        "trigger_category": 'triggerCategory',
        "promo_alerts": 'promoAlerts'
    }

    _optionals = [
        'trigger_id',
        'trigger_name',
        'account_name',
        'organization_name',
        'trigger_category',
        'promo_alerts',
    ]

    def __init__(self,
                 trigger_id=APIHelper.SKIP,
                 trigger_name=APIHelper.SKIP,
                 account_name=APIHelper.SKIP,
                 organization_name=APIHelper.SKIP,
                 trigger_category=APIHelper.SKIP,
                 promo_alerts=APIHelper.SKIP):
        """Constructor for the RequestTrigger class"""

        # Initialize members of the class
        if trigger_id is not APIHelper.SKIP:
            self.trigger_id = trigger_id 
        if trigger_name is not APIHelper.SKIP:
            self.trigger_name = trigger_name 
        if account_name is not APIHelper.SKIP:
            self.account_name = account_name 
        if organization_name is not APIHelper.SKIP:
            self.organization_name = organization_name 
        if trigger_category is not APIHelper.SKIP:
            self.trigger_category = trigger_category 
        if promo_alerts is not APIHelper.SKIP:
            self.promo_alerts = promo_alerts 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        trigger_id = dictionary.get("triggerId") if dictionary.get("triggerId") else APIHelper.SKIP
        trigger_name = dictionary.get("triggerName") if dictionary.get("triggerName") else APIHelper.SKIP
        account_name = dictionary.get("accountName") if dictionary.get("accountName") else APIHelper.SKIP
        organization_name = dictionary.get("organizationName") if dictionary.get("organizationName") else APIHelper.SKIP
        trigger_category = dictionary.get("triggerCategory") if dictionary.get("triggerCategory") else APIHelper.SKIP
        promo_alerts = None
        if dictionary.get('promoAlerts') is not None:
            promo_alerts = [PromoAlert1.from_dictionary(x) for x in dictionary.get('promoAlerts')]
        else:
            promo_alerts = APIHelper.SKIP
        # Return an object of this model
        return cls(trigger_id,
                   trigger_name,
                   account_name,
                   organization_name,
                   trigger_category,
                   promo_alerts)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'trigger_id={(self.trigger_id if hasattr(self, "trigger_id") else None)!r}, '
                f'trigger_name={(self.trigger_name if hasattr(self, "trigger_name") else None)!r}, '
                f'account_name={(self.account_name if hasattr(self, "account_name") else None)!r}, '
                f'organization_name={(self.organization_name if hasattr(self, "organization_name") else None)!r}, '
                f'trigger_category={(self.trigger_category if hasattr(self, "trigger_category") else None)!r}, '
                f'promo_alerts={(self.promo_alerts if hasattr(self, "promo_alerts") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'trigger_id={(self.trigger_id if hasattr(self, "trigger_id") else None)!s}, '
                f'trigger_name={(self.trigger_name if hasattr(self, "trigger_name") else None)!s}, '
                f'account_name={(self.account_name if hasattr(self, "account_name") else None)!s}, '
                f'organization_name={(self.organization_name if hasattr(self, "organization_name") else None)!s}, '
                f'trigger_category={(self.trigger_category if hasattr(self, "trigger_category") else None)!s}, '
                f'promo_alerts={(self.promo_alerts if hasattr(self, "promo_alerts") else None)!s})')
