# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.anomaly_trigger_request_1 import AnomalyTriggerRequest1
from verizon.models.notification_1 import Notification1


class TriggerType3(object):

    """Implementation of the 'TriggerType3' model.

    Trigger details.

    Attributes:
        trigger_id (str): Trigger ID.
        trigger_name (str): Trigger name.
        trigger_category (str): This is the value to use in the request body
            to detect anomalous behaivior. The values in this table will only
            be relevant when this parameter is set to this value.
        account_name (str): Account name.
        anomaly_trigger_request (AnomalyTriggerRequest1): The model property
            of type AnomalyTriggerRequest1.
        notification (Notification1): The model property of type Notification1.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "trigger_id": 'triggerId',
        "trigger_name": 'triggerName',
        "trigger_category": 'triggerCategory',
        "account_name": 'accountName',
        "anomaly_trigger_request": 'anomalyTriggerRequest',
        "notification": 'notification'
    }

    _optionals = [
        'trigger_id',
        'trigger_name',
        'trigger_category',
        'account_name',
        'anomaly_trigger_request',
        'notification',
    ]

    def __init__(self,
                 trigger_id=APIHelper.SKIP,
                 trigger_name=APIHelper.SKIP,
                 trigger_category=APIHelper.SKIP,
                 account_name=APIHelper.SKIP,
                 anomaly_trigger_request=APIHelper.SKIP,
                 notification=APIHelper.SKIP):
        """Constructor for the TriggerType3 class"""

        # Initialize members of the class
        if trigger_id is not APIHelper.SKIP:
            self.trigger_id = trigger_id 
        if trigger_name is not APIHelper.SKIP:
            self.trigger_name = trigger_name 
        if trigger_category is not APIHelper.SKIP:
            self.trigger_category = trigger_category 
        if account_name is not APIHelper.SKIP:
            self.account_name = account_name 
        if anomaly_trigger_request is not APIHelper.SKIP:
            self.anomaly_trigger_request = anomaly_trigger_request 
        if notification is not APIHelper.SKIP:
            self.notification = notification 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        trigger_id = dictionary.get("triggerId") if dictionary.get("triggerId") else APIHelper.SKIP
        trigger_name = dictionary.get("triggerName") if dictionary.get("triggerName") else APIHelper.SKIP
        trigger_category = dictionary.get("triggerCategory") if dictionary.get("triggerCategory") else APIHelper.SKIP
        account_name = dictionary.get("accountName") if dictionary.get("accountName") else APIHelper.SKIP
        anomaly_trigger_request = AnomalyTriggerRequest1.from_dictionary(dictionary.get('anomalyTriggerRequest')) if 'anomalyTriggerRequest' in dictionary.keys() else APIHelper.SKIP
        notification = Notification1.from_dictionary(dictionary.get('notification')) if 'notification' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(trigger_id,
                   trigger_name,
                   trigger_category,
                   account_name,
                   anomaly_trigger_request,
                   notification)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'trigger_id={(self.trigger_id if hasattr(self, "trigger_id") else None)!r}, '
                f'trigger_name={(self.trigger_name if hasattr(self, "trigger_name") else None)!r}, '
                f'trigger_category={(self.trigger_category if hasattr(self, "trigger_category") else None)!r}, '
                f'account_name={(self.account_name if hasattr(self, "account_name") else None)!r}, '
                f'anomaly_trigger_request={(self.anomaly_trigger_request if hasattr(self, "anomaly_trigger_request") else None)!r}, '
                f'notification={(self.notification if hasattr(self, "notification") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'trigger_id={(self.trigger_id if hasattr(self, "trigger_id") else None)!s}, '
                f'trigger_name={(self.trigger_name if hasattr(self, "trigger_name") else None)!s}, '
                f'trigger_category={(self.trigger_category if hasattr(self, "trigger_category") else None)!s}, '
                f'account_name={(self.account_name if hasattr(self, "account_name") else None)!s}, '
                f'anomaly_trigger_request={(self.anomaly_trigger_request if hasattr(self, "anomaly_trigger_request") else None)!s}, '
                f'notification={(self.notification if hasattr(self, "notification") else None)!s})')
