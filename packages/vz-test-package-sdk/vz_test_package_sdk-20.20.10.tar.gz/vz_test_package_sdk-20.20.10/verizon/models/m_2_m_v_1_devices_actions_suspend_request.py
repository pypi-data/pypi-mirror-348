# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.account_device_list import AccountDeviceList
from verizon.models.custom_fields import CustomFields


class M2mV1DevicesActionsSuspendRequest(object):

    """Implementation of the 'M2m V1 Devices Actions Suspend Request' model.

    Attributes:
        account_name (str): The name of a billing account.
        custom_fields (List[CustomFields]): Custom field names and values, if
            you want to only include devices that have matching values.
        devices (List[AccountDeviceList]): The devices for which you want to
            restore service, specified by device identifier.
        with_billing (bool): set to "true" to suspend with billing, set to
            "false" to suspend without billing
        group_name (str): The name of a device group, if you want to restore
            service for all devices in that group.
        service_plan (str): The name of a service plan, if you want to only
            include devices that have that service plan.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_name": 'accountName',
        "custom_fields": 'customFields',
        "devices": 'devices',
        "with_billing": 'withBilling',
        "group_name": 'groupName',
        "service_plan": 'servicePlan'
    }

    _optionals = [
        'account_name',
        'custom_fields',
        'devices',
        'with_billing',
        'group_name',
        'service_plan',
    ]

    def __init__(self,
                 account_name=APIHelper.SKIP,
                 custom_fields=APIHelper.SKIP,
                 devices=APIHelper.SKIP,
                 with_billing=APIHelper.SKIP,
                 group_name=APIHelper.SKIP,
                 service_plan=APIHelper.SKIP):
        """Constructor for the M2mV1DevicesActionsSuspendRequest class"""

        # Initialize members of the class
        if account_name is not APIHelper.SKIP:
            self.account_name = account_name 
        if custom_fields is not APIHelper.SKIP:
            self.custom_fields = custom_fields 
        if devices is not APIHelper.SKIP:
            self.devices = devices 
        if with_billing is not APIHelper.SKIP:
            self.with_billing = with_billing 
        if group_name is not APIHelper.SKIP:
            self.group_name = group_name 
        if service_plan is not APIHelper.SKIP:
            self.service_plan = service_plan 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_name = dictionary.get("accountName") if dictionary.get("accountName") else APIHelper.SKIP
        custom_fields = None
        if dictionary.get('customFields') is not None:
            custom_fields = [CustomFields.from_dictionary(x) for x in dictionary.get('customFields')]
        else:
            custom_fields = APIHelper.SKIP
        devices = None
        if dictionary.get('devices') is not None:
            devices = [AccountDeviceList.from_dictionary(x) for x in dictionary.get('devices')]
        else:
            devices = APIHelper.SKIP
        with_billing = dictionary.get("withBilling") if "withBilling" in dictionary.keys() else APIHelper.SKIP
        group_name = dictionary.get("groupName") if dictionary.get("groupName") else APIHelper.SKIP
        service_plan = dictionary.get("servicePlan") if dictionary.get("servicePlan") else APIHelper.SKIP
        # Return an object of this model
        return cls(account_name,
                   custom_fields,
                   devices,
                   with_billing,
                   group_name,
                   service_plan)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_name={(self.account_name if hasattr(self, "account_name") else None)!r}, '
                f'custom_fields={(self.custom_fields if hasattr(self, "custom_fields") else None)!r}, '
                f'devices={(self.devices if hasattr(self, "devices") else None)!r}, '
                f'with_billing={(self.with_billing if hasattr(self, "with_billing") else None)!r}, '
                f'group_name={(self.group_name if hasattr(self, "group_name") else None)!r}, '
                f'service_plan={(self.service_plan if hasattr(self, "service_plan") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_name={(self.account_name if hasattr(self, "account_name") else None)!s}, '
                f'custom_fields={(self.custom_fields if hasattr(self, "custom_fields") else None)!s}, '
                f'devices={(self.devices if hasattr(self, "devices") else None)!s}, '
                f'with_billing={(self.with_billing if hasattr(self, "with_billing") else None)!s}, '
                f'group_name={(self.group_name if hasattr(self, "group_name") else None)!s}, '
                f'service_plan={(self.service_plan if hasattr(self, "service_plan") else None)!s})')
