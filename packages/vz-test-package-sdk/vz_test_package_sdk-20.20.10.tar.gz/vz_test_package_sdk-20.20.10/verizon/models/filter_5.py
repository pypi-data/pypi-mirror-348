# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.attributes import Attributes
from verizon.models.device_2 import Device2


class Filter5(object):

    """Implementation of the 'Filter5' model.

    Attributes:
        account_name (str): Account name identifier.
        device (Device2): The model property of type Device2.
        attributes (Attributes): The model property of type Attributes.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_name": 'accountName',
        "device": 'device',
        "attributes": 'attributes'
    }

    _optionals = [
        'attributes',
    ]

    def __init__(self,
                 account_name=None,
                 device=None,
                 attributes=APIHelper.SKIP):
        """Constructor for the Filter5 class"""

        # Initialize members of the class
        self.account_name = account_name 
        self.device = device 
        if attributes is not APIHelper.SKIP:
            self.attributes = attributes 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_name = dictionary.get("accountName") if dictionary.get("accountName") else None
        device = Device2.from_dictionary(dictionary.get('device')) if dictionary.get('device') else None
        attributes = Attributes.from_dictionary(dictionary.get('attributes')) if 'attributes' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(account_name,
                   device,
                   attributes)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_name={self.account_name!r}, '
                f'device={self.device!r}, '
                f'attributes={(self.attributes if hasattr(self, "attributes") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_name={self.account_name!s}, '
                f'device={self.device!s}, '
                f'attributes={(self.attributes if hasattr(self, "attributes") else None)!s})')
