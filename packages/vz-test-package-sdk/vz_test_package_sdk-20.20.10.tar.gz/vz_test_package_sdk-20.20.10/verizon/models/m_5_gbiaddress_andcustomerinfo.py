# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.m_5_gbiprimary_placeofuse import M5gbiprimaryPlaceofuse


class M5gbiaddressAndcustomerinfo(object):

    """Implementation of the '5gbiaddressAndcustomerinfo' model.

    Attributes:
        primary_placeofuse (M5gbiprimaryPlaceofuse): The model property of
            type M5gbiprimaryPlaceofuse.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "primary_placeofuse": 'primaryPlaceofuse'
    }

    _optionals = [
        'primary_placeofuse',
    ]

    def __init__(self,
                 primary_placeofuse=APIHelper.SKIP):
        """Constructor for the M5gbiaddressAndcustomerinfo class"""

        # Initialize members of the class
        if primary_placeofuse is not APIHelper.SKIP:
            self.primary_placeofuse = primary_placeofuse 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        primary_placeofuse = M5gbiprimaryPlaceofuse.from_dictionary(dictionary.get('primaryPlaceofuse')) if 'primaryPlaceofuse' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(primary_placeofuse)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'primary_placeofuse={(self.primary_placeofuse if hasattr(self, "primary_placeofuse") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'primary_placeofuse={(self.primary_placeofuse if hasattr(self, "primary_placeofuse") else None)!s})')
