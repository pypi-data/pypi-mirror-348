# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.error import Error
from verizon.models.pd import Pd


class Location(object):

    """Implementation of the 'Location' model.

    Device location information.

    Attributes:
        msid (str): MDN.
        pd (Pd): The model property of type Pd.
        error (Error): The model property of type Error.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "msid": 'msid',
        "pd": 'pd',
        "error": 'error'
    }

    _optionals = [
        'msid',
        'pd',
        'error',
    ]

    def __init__(self,
                 msid=APIHelper.SKIP,
                 pd=APIHelper.SKIP,
                 error=APIHelper.SKIP):
        """Constructor for the Location class"""

        # Initialize members of the class
        if msid is not APIHelper.SKIP:
            self.msid = msid 
        if pd is not APIHelper.SKIP:
            self.pd = pd 
        if error is not APIHelper.SKIP:
            self.error = error 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        msid = dictionary.get("msid") if dictionary.get("msid") else APIHelper.SKIP
        pd = Pd.from_dictionary(dictionary.get('pd')) if 'pd' in dictionary.keys() else APIHelper.SKIP
        error = Error.from_dictionary(dictionary.get('error')) if 'error' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(msid,
                   pd,
                   error)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'msid={(self.msid if hasattr(self, "msid") else None)!r}, '
                f'pd={(self.pd if hasattr(self, "pd") else None)!r}, '
                f'error={(self.error if hasattr(self, "error") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'msid={(self.msid if hasattr(self, "msid") else None)!s}, '
                f'pd={(self.pd if hasattr(self, "pd") else None)!s}, '
                f'error={(self.error if hasattr(self, "error") else None)!s})')
