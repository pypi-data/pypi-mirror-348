# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class SMSTriggerRequest(object):

    """Implementation of the 'SMSTriggerRequest' model.

    Attributes:
        comparator (str): The model property of type str.
        sms_type (str): The model property of type str.
        threshold (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "comparator": 'comparator',
        "sms_type": 'smsType',
        "threshold": 'threshold'
    }

    _optionals = [
        'comparator',
        'sms_type',
        'threshold',
    ]

    def __init__(self,
                 comparator=APIHelper.SKIP,
                 sms_type=APIHelper.SKIP,
                 threshold=APIHelper.SKIP):
        """Constructor for the SMSTriggerRequest class"""

        # Initialize members of the class
        if comparator is not APIHelper.SKIP:
            self.comparator = comparator 
        if sms_type is not APIHelper.SKIP:
            self.sms_type = sms_type 
        if threshold is not APIHelper.SKIP:
            self.threshold = threshold 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        comparator = dictionary.get("comparator") if dictionary.get("comparator") else APIHelper.SKIP
        sms_type = dictionary.get("smsType") if dictionary.get("smsType") else APIHelper.SKIP
        threshold = dictionary.get("threshold") if dictionary.get("threshold") else APIHelper.SKIP
        # Return an object of this model
        return cls(comparator,
                   sms_type,
                   threshold)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'comparator={(self.comparator if hasattr(self, "comparator") else None)!r}, '
                f'sms_type={(self.sms_type if hasattr(self, "sms_type") else None)!r}, '
                f'threshold={(self.threshold if hasattr(self, "threshold") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'comparator={(self.comparator if hasattr(self, "comparator") else None)!s}, '
                f'sms_type={(self.sms_type if hasattr(self, "sms_type") else None)!s}, '
                f'threshold={(self.threshold if hasattr(self, "threshold") else None)!s})')
