# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.resource_event import ResourceEvent


class DtoLastReportedTimeResponse(object):

    """Implementation of the 'dto.LastReportedTimeResponse' model.

    Attributes:
        event (ResourceEvent): The model property of type ResourceEvent.
        timestamp (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "event": 'event',
        "timestamp": 'timestamp'
    }

    _optionals = [
        'event',
        'timestamp',
    ]

    def __init__(self,
                 event=APIHelper.SKIP,
                 timestamp=APIHelper.SKIP):
        """Constructor for the DtoLastReportedTimeResponse class"""

        # Initialize members of the class
        if event is not APIHelper.SKIP:
            self.event = event 
        if timestamp is not APIHelper.SKIP:
            self.timestamp = timestamp 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        event = ResourceEvent.from_dictionary(dictionary.get('event')) if 'event' in dictionary.keys() else APIHelper.SKIP
        timestamp = dictionary.get("timestamp") if dictionary.get("timestamp") else APIHelper.SKIP
        # Return an object of this model
        return cls(event,
                   timestamp)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'event={(self.event if hasattr(self, "event") else None)!r}, '
                f'timestamp={(self.timestamp if hasattr(self, "timestamp") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'event={(self.event if hasattr(self, "event") else None)!s}, '
                f'timestamp={(self.timestamp if hasattr(self, "timestamp") else None)!s})')
