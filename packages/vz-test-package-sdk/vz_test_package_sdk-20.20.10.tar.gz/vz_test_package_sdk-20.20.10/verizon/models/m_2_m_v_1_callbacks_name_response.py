# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class M2mV1CallbacksNameResponse(object):

    """Implementation of the 'M2m V1 Callbacks Name Response' model.

    Attributes:
        account_name (str): The name of the billing account.
        service_name (str): The name of the callback service that was
            registered/deregistered.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_name": 'accountName',
        "service_name": 'serviceName'
    }

    _optionals = [
        'account_name',
        'service_name',
    ]

    def __init__(self,
                 account_name=APIHelper.SKIP,
                 service_name=APIHelper.SKIP):
        """Constructor for the M2mV1CallbacksNameResponse class"""

        # Initialize members of the class
        if account_name is not APIHelper.SKIP:
            self.account_name = account_name 
        if service_name is not APIHelper.SKIP:
            self.service_name = service_name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_name = dictionary.get("accountName") if dictionary.get("accountName") else APIHelper.SKIP
        service_name = dictionary.get("serviceName") if dictionary.get("serviceName") else APIHelper.SKIP
        # Return an object of this model
        return cls(account_name,
                   service_name)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_name={(self.account_name if hasattr(self, "account_name") else None)!r}, '
                f'service_name={(self.service_name if hasattr(self, "service_name") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_name={(self.account_name if hasattr(self, "account_name") else None)!s}, '
                f'service_name={(self.service_name if hasattr(self, "service_name") else None)!s})')
