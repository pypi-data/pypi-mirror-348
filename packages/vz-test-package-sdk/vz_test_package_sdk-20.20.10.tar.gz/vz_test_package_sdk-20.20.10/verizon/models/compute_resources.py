# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.gpu_2 import GPU2


class ComputeResources(object):

    """Implementation of the 'ComputeResources' model.

    Attributes:
        gpu (GPU2): The model property of type GPU2.
        min_ramgb (int): Minimum RAM required in Gigabytes.
        min_storage_gb (int): Minimum storage requirement in Gigabytes.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "gpu": 'GPU',
        "min_ramgb": 'minRAMGB',
        "min_storage_gb": 'minStorageGB'
    }

    _optionals = [
        'gpu',
        'min_ramgb',
        'min_storage_gb',
    ]

    def __init__(self,
                 gpu=APIHelper.SKIP,
                 min_ramgb=APIHelper.SKIP,
                 min_storage_gb=APIHelper.SKIP):
        """Constructor for the ComputeResources class"""

        # Initialize members of the class
        if gpu is not APIHelper.SKIP:
            self.gpu = gpu 
        if min_ramgb is not APIHelper.SKIP:
            self.min_ramgb = min_ramgb 
        if min_storage_gb is not APIHelper.SKIP:
            self.min_storage_gb = min_storage_gb 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        gpu = GPU2.from_dictionary(dictionary.get('GPU')) if 'GPU' in dictionary.keys() else APIHelper.SKIP
        min_ramgb = dictionary.get("minRAMGB") if dictionary.get("minRAMGB") else APIHelper.SKIP
        min_storage_gb = dictionary.get("minStorageGB") if dictionary.get("minStorageGB") else APIHelper.SKIP
        # Return an object of this model
        return cls(gpu,
                   min_ramgb,
                   min_storage_gb)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'gpu={(self.gpu if hasattr(self, "gpu") else None)!r}, '
                f'min_ramgb={(self.min_ramgb if hasattr(self, "min_ramgb") else None)!r}, '
                f'min_storage_gb={(self.min_storage_gb if hasattr(self, "min_storage_gb") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'gpu={(self.gpu if hasattr(self, "gpu") else None)!s}, '
                f'min_ramgb={(self.min_ramgb if hasattr(self, "min_ramgb") else None)!s}, '
                f'min_storage_gb={(self.min_storage_gb if hasattr(self, "min_storage_gb") else None)!s})')
