# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class ResourceRule(object):

    """Implementation of the 'resource.Rule' model.

    Attributes:
        accountclientid (str): Not used in this release, future functionality
        billingaccountid (str): The billing account ID. This is the same value
            as the Account ID
        createdon (datetime): Timestamp of the record
        description (str): a short description
        deviceid (str): This is a UUID value of the device created when the
            device is onboarded
        disabled (bool): The model property of type bool.
        foreignid (str): UUID of the ECPD account the user belongs to
        id (str): UUID of the user record, assigned at creation
        lastupdated (datetime): Timestamp of the record
        name (str): User defined name of the record
        rulechain (Any): The model property of type Any.
        rulesyntax (str): The syntax of the rule and supports camel and json
            style syntaxes
        version (str): The resource version
        versionid (str): The UUID of the resource version

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "createdon": 'createdon',
        "foreignid": 'foreignid',
        "lastupdated": 'lastupdated',
        "rulechain": 'rulechain',
        "versionid": 'versionid',
        "accountclientid": 'accountclientid',
        "billingaccountid": 'billingaccountid',
        "description": 'description',
        "deviceid": 'deviceid',
        "disabled": 'disabled',
        "id": 'id',
        "name": 'name',
        "rulesyntax": 'rulesyntax',
        "version": 'version'
    }

    _optionals = [
        'accountclientid',
        'billingaccountid',
        'description',
        'deviceid',
        'disabled',
        'id',
        'name',
        'rulesyntax',
        'version',
    ]

    def __init__(self,
                 createdon=None,
                 foreignid=None,
                 lastupdated=None,
                 rulechain=None,
                 versionid=None,
                 accountclientid=APIHelper.SKIP,
                 billingaccountid=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 deviceid=APIHelper.SKIP,
                 disabled=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 rulesyntax=APIHelper.SKIP,
                 version=APIHelper.SKIP):
        """Constructor for the ResourceRule class"""

        # Initialize members of the class
        if accountclientid is not APIHelper.SKIP:
            self.accountclientid = accountclientid 
        if billingaccountid is not APIHelper.SKIP:
            self.billingaccountid = billingaccountid 
        self.createdon = APIHelper.apply_datetime_converter(createdon, APIHelper.RFC3339DateTime) if createdon else None 
        if description is not APIHelper.SKIP:
            self.description = description 
        if deviceid is not APIHelper.SKIP:
            self.deviceid = deviceid 
        if disabled is not APIHelper.SKIP:
            self.disabled = disabled 
        self.foreignid = foreignid 
        if id is not APIHelper.SKIP:
            self.id = id 
        self.lastupdated = APIHelper.apply_datetime_converter(lastupdated, APIHelper.RFC3339DateTime) if lastupdated else None 
        if name is not APIHelper.SKIP:
            self.name = name 
        self.rulechain = rulechain 
        if rulesyntax is not APIHelper.SKIP:
            self.rulesyntax = rulesyntax 
        if version is not APIHelper.SKIP:
            self.version = version 
        self.versionid = versionid 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        createdon = APIHelper.RFC3339DateTime.from_value(dictionary.get("createdon")).datetime if dictionary.get("createdon") else None
        foreignid = dictionary.get("foreignid") if dictionary.get("foreignid") else None
        lastupdated = APIHelper.RFC3339DateTime.from_value(dictionary.get("lastupdated")).datetime if dictionary.get("lastupdated") else None
        rulechain = dictionary.get("rulechain") if dictionary.get("rulechain") else None
        versionid = dictionary.get("versionid") if dictionary.get("versionid") else None
        accountclientid = dictionary.get("accountclientid") if dictionary.get("accountclientid") else APIHelper.SKIP
        billingaccountid = dictionary.get("billingaccountid") if dictionary.get("billingaccountid") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        deviceid = dictionary.get("deviceid") if dictionary.get("deviceid") else APIHelper.SKIP
        disabled = dictionary.get("disabled") if "disabled" in dictionary.keys() else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        rulesyntax = dictionary.get("rulesyntax") if dictionary.get("rulesyntax") else APIHelper.SKIP
        version = dictionary.get("version") if dictionary.get("version") else APIHelper.SKIP
        # Return an object of this model
        return cls(createdon,
                   foreignid,
                   lastupdated,
                   rulechain,
                   versionid,
                   accountclientid,
                   billingaccountid,
                   description,
                   deviceid,
                   disabled,
                   id,
                   name,
                   rulesyntax,
                   version)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'accountclientid={(self.accountclientid if hasattr(self, "accountclientid") else None)!r}, '
                f'billingaccountid={(self.billingaccountid if hasattr(self, "billingaccountid") else None)!r}, '
                f'createdon={self.createdon!r}, '
                f'description={(self.description if hasattr(self, "description") else None)!r}, '
                f'deviceid={(self.deviceid if hasattr(self, "deviceid") else None)!r}, '
                f'disabled={(self.disabled if hasattr(self, "disabled") else None)!r}, '
                f'foreignid={self.foreignid!r}, '
                f'id={(self.id if hasattr(self, "id") else None)!r}, '
                f'lastupdated={self.lastupdated!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'rulechain={self.rulechain!r}, '
                f'rulesyntax={(self.rulesyntax if hasattr(self, "rulesyntax") else None)!r}, '
                f'version={(self.version if hasattr(self, "version") else None)!r}, '
                f'versionid={self.versionid!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'accountclientid={(self.accountclientid if hasattr(self, "accountclientid") else None)!s}, '
                f'billingaccountid={(self.billingaccountid if hasattr(self, "billingaccountid") else None)!s}, '
                f'createdon={self.createdon!s}, '
                f'description={(self.description if hasattr(self, "description") else None)!s}, '
                f'deviceid={(self.deviceid if hasattr(self, "deviceid") else None)!s}, '
                f'disabled={(self.disabled if hasattr(self, "disabled") else None)!s}, '
                f'foreignid={self.foreignid!s}, '
                f'id={(self.id if hasattr(self, "id") else None)!s}, '
                f'lastupdated={self.lastupdated!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'rulechain={self.rulechain!s}, '
                f'rulesyntax={(self.rulesyntax if hasattr(self, "rulesyntax") else None)!s}, '
                f'version={(self.version if hasattr(self, "version") else None)!s}, '
                f'versionid={self.versionid!s})')
