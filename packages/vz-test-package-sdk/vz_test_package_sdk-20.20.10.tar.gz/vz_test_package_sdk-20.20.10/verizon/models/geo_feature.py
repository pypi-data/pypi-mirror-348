# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class GeoFeature(object):

    """Implementation of the 'GeoFeature' model.

    Attributes:
        mtype (str): The model property of type str.
        geometry (Any): The model property of type Any.
        properties (Any): The model property of type Any.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mtype": 'type',
        "geometry": 'geometry',
        "properties": 'properties'
    }

    def __init__(self,
                 geometry=None,
                 properties=None):
        """Constructor for the GeoFeature class"""

        # Initialize members of the class
        self.mtype = 'Feature' 
        self.geometry = geometry 
        self.properties = properties 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        geometry = dictionary.get("geometry") if dictionary.get("geometry") else None
        properties = dictionary.get("properties") if dictionary.get("properties") else None
        # Return an object of this model
        return cls(geometry,
                   properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!r}, '
                f'geometry={self.geometry!r}, '
                f'properties={self.properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!s}, '
                f'geometry={self.geometry!s}, '
                f'properties={self.properties!s})')
