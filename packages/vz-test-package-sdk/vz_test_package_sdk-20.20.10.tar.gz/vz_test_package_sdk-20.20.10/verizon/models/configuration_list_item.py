# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class ConfigurationListItem(object):

    """Implementation of the 'ConfigurationListItem' model.

    The ConfigurationList's item that contains the configuration identifier,
    name, description and the active flag.

    Attributes:
        id (str): The generated ID (UUID v4) for the configuration. It has to
            be used when asking for changing any of the configuration
            parameters.
        name (str): Name of the configuration.
        description (str): Description of the configuration.
        is_active (bool): The model property of type bool.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "is_active": 'isActive',
        "name": 'name',
        "description": 'description'
    }

    _optionals = [
        'name',
        'description',
    ]

    def __init__(self,
                 id=None,
                 is_active=None,
                 name=APIHelper.SKIP,
                 description=APIHelper.SKIP):
        """Constructor for the ConfigurationListItem class"""

        # Initialize members of the class
        self.id = id 
        if name is not APIHelper.SKIP:
            self.name = name 
        if description is not APIHelper.SKIP:
            self.description = description 
        self.is_active = is_active 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else None
        is_active = dictionary.get("isActive") if "isActive" in dictionary.keys() else None
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   is_active,
                   name,
                   description)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'description={(self.description if hasattr(self, "description") else None)!r}, '
                f'is_active={self.is_active!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'description={(self.description if hasattr(self, "description") else None)!s}, '
                f'is_active={self.is_active!s})')
