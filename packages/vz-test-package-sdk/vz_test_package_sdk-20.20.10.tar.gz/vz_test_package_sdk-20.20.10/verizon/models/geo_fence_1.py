# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.models.geo_feature import GeoFeature


class GeoFence1(object):

    """Implementation of the 'GeoFence1' model.

    Attributes:
        mtype (str): The model property of type str.
        features (List[GeoFeature]): The model property of type
            List[GeoFeature].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mtype": 'type',
        "features": 'features'
    }

    def __init__(self,
                 features=None):
        """Constructor for the GeoFence1 class"""

        # Initialize members of the class
        self.mtype = 'FeatureCollection' 
        self.features = features 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        features = None
        if dictionary.get('features') is not None:
            features = [GeoFeature.from_dictionary(x) for x in dictionary.get('features')]
        # Return an object of this model
        return cls(features)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!r}, '
                f'features={self.features!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!s}, '
                f'features={self.features!s})')
