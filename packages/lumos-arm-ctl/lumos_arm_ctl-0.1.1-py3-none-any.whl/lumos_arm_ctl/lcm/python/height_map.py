"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class height_map(object):
    __slots__ = ["h"]

    def __init__(self):
        self.h = [ 0.0 for dim0 in range(315) ]

    def encode(self):
        buf = BytesIO()
        buf.write(height_map._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>315f', *self.h[:315]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != height_map._get_packed_fingerprint():
            raise ValueError("Decode error")
        return height_map._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = height_map()
        self.h = struct.unpack('>315f', buf.read(1260))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if height_map in parents: return 0
        tmphash = (0xf19bfc2ff1ff5284) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if height_map._packed_fingerprint is None:
            height_map._packed_fingerprint = struct.pack(">Q", height_map._get_hash_recursive([]))
        return height_map._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

