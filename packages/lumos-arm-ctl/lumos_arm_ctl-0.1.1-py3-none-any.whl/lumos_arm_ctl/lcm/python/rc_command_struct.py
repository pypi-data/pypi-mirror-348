"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class rc_command_struct(object):
    __slots__ = ["SWA", "SWB", "SWC", "SWD", "SWE", "SWF", "SWG", "left_stick_x", "left_stick_y", "right_stick_x", "right_stick_y", "varB"]

    def __init__(self):
        self.SWA = 0
        self.SWB = 0
        self.SWC = 0
        self.SWD = 0
        self.SWE = 0
        self.SWF = 0
        self.SWG = 0
        self.left_stick_x = 0.0
        self.left_stick_y = 0.0
        self.right_stick_x = 0.0
        self.right_stick_y = 0.0
        self.varB = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(rc_command_struct._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">hhhhhhhfffff", self.SWA, self.SWB, self.SWC, self.SWD, self.SWE, self.SWF, self.SWG, self.left_stick_x, self.left_stick_y, self.right_stick_x, self.right_stick_y, self.varB))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != rc_command_struct._get_packed_fingerprint():
            raise ValueError("Decode error")
        return rc_command_struct._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = rc_command_struct()
        self.SWA, self.SWB, self.SWC, self.SWD, self.SWE, self.SWF, self.SWG, self.left_stick_x, self.left_stick_y, self.right_stick_x, self.right_stick_y, self.varB = struct.unpack(">hhhhhhhfffff", buf.read(34))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if rc_command_struct in parents: return 0
        tmphash = (0xbbd622bb13e6c801) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if rc_command_struct._packed_fingerprint is None:
            rc_command_struct._packed_fingerprint = struct.pack(">Q", rc_command_struct._get_hash_recursive([]))
        return rc_command_struct._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

