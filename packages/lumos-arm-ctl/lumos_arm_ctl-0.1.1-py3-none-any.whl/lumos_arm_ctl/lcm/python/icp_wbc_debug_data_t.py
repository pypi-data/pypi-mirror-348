"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class icp_wbc_debug_data_t(object):
    __slots__ = ["swing_state", "contact_state", "current_cop", "planned_cop", "desired_cop", "current_icp", "planned_icp", "desired_icp", "current_com", "planned_com", "desired_com", "delta_cmp", "cmp_zmp_kp", "cmp_zmp_kd", "cmp_com_kcom", "cmp_com_kzmp", "cmp_alpha_inv", "contactEstimate", "foot_zmp_local", "foot_zmp", "foot_pos_cmd", "foot_vel_cmd", "foot_acc_cmd", "foot_acc_numeric", "body_pos_cmd", "current_rpy", "modified_foot_pos", "foot_pos", "foot_vel", "foot_local_pos_cmd", "foot_local_vel_cmd", "foot_local_pos", "foot_local_vel", "jpos_cmd", "jvel_cmd", "jacc_cmd", "jpos", "jvel", "pDesFootWorldInit", "rpyDesFootWorldInit", "pDesFootWorldFinal", "rpyDesFootWorldFinal", "pDesBodyWorldInit", "rpyDesBodyWorldInit", "pDesBodyWorldFinal", "rpyDesBodyWorldFinal", "pDefautDesFinalFootWorld", "pDefaultDesFootWorld", "init_place_foot_pos", "stepL", "stepW", "stepYaw"]

    def __init__(self):
        self.swing_state = [ 0.0 for dim0 in range(2) ]
        self.contact_state = [ 0.0 for dim0 in range(2) ]
        self.current_cop = [ 0.0 for dim0 in range(9) ]
        self.planned_cop = [ 0.0 for dim0 in range(9) ]
        self.desired_cop = [ 0.0 for dim0 in range(9) ]
        self.current_icp = [ 0.0 for dim0 in range(9) ]
        self.planned_icp = [ 0.0 for dim0 in range(9) ]
        self.desired_icp = [ 0.0 for dim0 in range(9) ]
        self.current_com = [ 0.0 for dim0 in range(9) ]
        self.planned_com = [ 0.0 for dim0 in range(9) ]
        self.desired_com = [ 0.0 for dim0 in range(9) ]
        self.delta_cmp = [ 0.0 for dim0 in range(6) ]
        self.cmp_zmp_kp = [ 0.0 for dim0 in range(3) ]
        self.cmp_zmp_kd = [ 0.0 for dim0 in range(3) ]
        self.cmp_com_kcom = [ 0.0 for dim0 in range(3) ]
        self.cmp_com_kzmp = [ 0.0 for dim0 in range(3) ]
        self.cmp_alpha_inv = [ 0.0 for dim0 in range(3) ]
        self.contactEstimate = [ 0.0 for dim0 in range(4) ]
        self.foot_zmp_local = [ 0.0 for dim0 in range(6) ]
        self.foot_zmp = [ 0.0 for dim0 in range(6) ]
        self.foot_pos_cmd = [ 0.0 for dim0 in range(12) ]
        self.foot_vel_cmd = [ 0.0 for dim0 in range(12) ]
        self.foot_acc_cmd = [ 0.0 for dim0 in range(12) ]
        self.foot_acc_numeric = [ 0.0 for dim0 in range(12) ]
        self.body_pos_cmd = [ 0.0 for dim0 in range(12) ]
        self.current_rpy = [ 0.0 for dim0 in range(3) ]
        self.modified_foot_pos = [ 0.0 for dim0 in range(6) ]
        self.foot_pos = [ 0.0 for dim0 in range(12) ]
        self.foot_vel = [ 0.0 for dim0 in range(12) ]
        self.foot_local_pos_cmd = [ 0.0 for dim0 in range(12) ]
        self.foot_local_vel_cmd = [ 0.0 for dim0 in range(12) ]
        self.foot_local_pos = [ 0.0 for dim0 in range(12) ]
        self.foot_local_vel = [ 0.0 for dim0 in range(12) ]
        self.jpos_cmd = [ 0.0 for dim0 in range(12) ]
        self.jvel_cmd = [ 0.0 for dim0 in range(12) ]
        self.jacc_cmd = [ 0.0 for dim0 in range(12) ]
        self.jpos = [ 0.0 for dim0 in range(12) ]
        self.jvel = [ 0.0 for dim0 in range(12) ]
        self.pDesFootWorldInit = [ 0.0 for dim0 in range(6) ]
        self.rpyDesFootWorldInit = [ 0.0 for dim0 in range(6) ]
        self.pDesFootWorldFinal = [ 0.0 for dim0 in range(6) ]
        self.rpyDesFootWorldFinal = [ 0.0 for dim0 in range(6) ]
        self.pDesBodyWorldInit = [ 0.0 for dim0 in range(6) ]
        self.rpyDesBodyWorldInit = [ 0.0 for dim0 in range(6) ]
        self.pDesBodyWorldFinal = [ 0.0 for dim0 in range(6) ]
        self.rpyDesBodyWorldFinal = [ 0.0 for dim0 in range(6) ]
        self.pDefautDesFinalFootWorld = [ 0.0 for dim0 in range(6) ]
        self.pDefaultDesFootWorld = [ 0.0 for dim0 in range(6) ]
        self.init_place_foot_pos = [ 0.0 for dim0 in range(6) ]
        self.stepL = 0.0
        self.stepW = 0.0
        self.stepYaw = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(icp_wbc_debug_data_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>2f', *self.swing_state[:2]))
        buf.write(struct.pack('>2f', *self.contact_state[:2]))
        buf.write(struct.pack('>9f', *self.current_cop[:9]))
        buf.write(struct.pack('>9f', *self.planned_cop[:9]))
        buf.write(struct.pack('>9f', *self.desired_cop[:9]))
        buf.write(struct.pack('>9f', *self.current_icp[:9]))
        buf.write(struct.pack('>9f', *self.planned_icp[:9]))
        buf.write(struct.pack('>9f', *self.desired_icp[:9]))
        buf.write(struct.pack('>9f', *self.current_com[:9]))
        buf.write(struct.pack('>9f', *self.planned_com[:9]))
        buf.write(struct.pack('>9f', *self.desired_com[:9]))
        buf.write(struct.pack('>6f', *self.delta_cmp[:6]))
        buf.write(struct.pack('>3f', *self.cmp_zmp_kp[:3]))
        buf.write(struct.pack('>3f', *self.cmp_zmp_kd[:3]))
        buf.write(struct.pack('>3f', *self.cmp_com_kcom[:3]))
        buf.write(struct.pack('>3f', *self.cmp_com_kzmp[:3]))
        buf.write(struct.pack('>3f', *self.cmp_alpha_inv[:3]))
        buf.write(struct.pack('>4f', *self.contactEstimate[:4]))
        buf.write(struct.pack('>6f', *self.foot_zmp_local[:6]))
        buf.write(struct.pack('>6f', *self.foot_zmp[:6]))
        buf.write(struct.pack('>12f', *self.foot_pos_cmd[:12]))
        buf.write(struct.pack('>12f', *self.foot_vel_cmd[:12]))
        buf.write(struct.pack('>12f', *self.foot_acc_cmd[:12]))
        buf.write(struct.pack('>12f', *self.foot_acc_numeric[:12]))
        buf.write(struct.pack('>12f', *self.body_pos_cmd[:12]))
        buf.write(struct.pack('>3f', *self.current_rpy[:3]))
        buf.write(struct.pack('>6f', *self.modified_foot_pos[:6]))
        buf.write(struct.pack('>12f', *self.foot_pos[:12]))
        buf.write(struct.pack('>12f', *self.foot_vel[:12]))
        buf.write(struct.pack('>12f', *self.foot_local_pos_cmd[:12]))
        buf.write(struct.pack('>12f', *self.foot_local_vel_cmd[:12]))
        buf.write(struct.pack('>12f', *self.foot_local_pos[:12]))
        buf.write(struct.pack('>12f', *self.foot_local_vel[:12]))
        buf.write(struct.pack('>12f', *self.jpos_cmd[:12]))
        buf.write(struct.pack('>12f', *self.jvel_cmd[:12]))
        buf.write(struct.pack('>12f', *self.jacc_cmd[:12]))
        buf.write(struct.pack('>12f', *self.jpos[:12]))
        buf.write(struct.pack('>12f', *self.jvel[:12]))
        buf.write(struct.pack('>6f', *self.pDesFootWorldInit[:6]))
        buf.write(struct.pack('>6f', *self.rpyDesFootWorldInit[:6]))
        buf.write(struct.pack('>6f', *self.pDesFootWorldFinal[:6]))
        buf.write(struct.pack('>6f', *self.rpyDesFootWorldFinal[:6]))
        buf.write(struct.pack('>6f', *self.pDesBodyWorldInit[:6]))
        buf.write(struct.pack('>6f', *self.rpyDesBodyWorldInit[:6]))
        buf.write(struct.pack('>6f', *self.pDesBodyWorldFinal[:6]))
        buf.write(struct.pack('>6f', *self.rpyDesBodyWorldFinal[:6]))
        buf.write(struct.pack('>6f', *self.pDefautDesFinalFootWorld[:6]))
        buf.write(struct.pack('>6f', *self.pDefaultDesFootWorld[:6]))
        buf.write(struct.pack('>6f', *self.init_place_foot_pos[:6]))
        buf.write(struct.pack(">fff", self.stepL, self.stepW, self.stepYaw))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != icp_wbc_debug_data_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return icp_wbc_debug_data_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = icp_wbc_debug_data_t()
        self.swing_state = struct.unpack('>2f', buf.read(8))
        self.contact_state = struct.unpack('>2f', buf.read(8))
        self.current_cop = struct.unpack('>9f', buf.read(36))
        self.planned_cop = struct.unpack('>9f', buf.read(36))
        self.desired_cop = struct.unpack('>9f', buf.read(36))
        self.current_icp = struct.unpack('>9f', buf.read(36))
        self.planned_icp = struct.unpack('>9f', buf.read(36))
        self.desired_icp = struct.unpack('>9f', buf.read(36))
        self.current_com = struct.unpack('>9f', buf.read(36))
        self.planned_com = struct.unpack('>9f', buf.read(36))
        self.desired_com = struct.unpack('>9f', buf.read(36))
        self.delta_cmp = struct.unpack('>6f', buf.read(24))
        self.cmp_zmp_kp = struct.unpack('>3f', buf.read(12))
        self.cmp_zmp_kd = struct.unpack('>3f', buf.read(12))
        self.cmp_com_kcom = struct.unpack('>3f', buf.read(12))
        self.cmp_com_kzmp = struct.unpack('>3f', buf.read(12))
        self.cmp_alpha_inv = struct.unpack('>3f', buf.read(12))
        self.contactEstimate = struct.unpack('>4f', buf.read(16))
        self.foot_zmp_local = struct.unpack('>6f', buf.read(24))
        self.foot_zmp = struct.unpack('>6f', buf.read(24))
        self.foot_pos_cmd = struct.unpack('>12f', buf.read(48))
        self.foot_vel_cmd = struct.unpack('>12f', buf.read(48))
        self.foot_acc_cmd = struct.unpack('>12f', buf.read(48))
        self.foot_acc_numeric = struct.unpack('>12f', buf.read(48))
        self.body_pos_cmd = struct.unpack('>12f', buf.read(48))
        self.current_rpy = struct.unpack('>3f', buf.read(12))
        self.modified_foot_pos = struct.unpack('>6f', buf.read(24))
        self.foot_pos = struct.unpack('>12f', buf.read(48))
        self.foot_vel = struct.unpack('>12f', buf.read(48))
        self.foot_local_pos_cmd = struct.unpack('>12f', buf.read(48))
        self.foot_local_vel_cmd = struct.unpack('>12f', buf.read(48))
        self.foot_local_pos = struct.unpack('>12f', buf.read(48))
        self.foot_local_vel = struct.unpack('>12f', buf.read(48))
        self.jpos_cmd = struct.unpack('>12f', buf.read(48))
        self.jvel_cmd = struct.unpack('>12f', buf.read(48))
        self.jacc_cmd = struct.unpack('>12f', buf.read(48))
        self.jpos = struct.unpack('>12f', buf.read(48))
        self.jvel = struct.unpack('>12f', buf.read(48))
        self.pDesFootWorldInit = struct.unpack('>6f', buf.read(24))
        self.rpyDesFootWorldInit = struct.unpack('>6f', buf.read(24))
        self.pDesFootWorldFinal = struct.unpack('>6f', buf.read(24))
        self.rpyDesFootWorldFinal = struct.unpack('>6f', buf.read(24))
        self.pDesBodyWorldInit = struct.unpack('>6f', buf.read(24))
        self.rpyDesBodyWorldInit = struct.unpack('>6f', buf.read(24))
        self.pDesBodyWorldFinal = struct.unpack('>6f', buf.read(24))
        self.rpyDesBodyWorldFinal = struct.unpack('>6f', buf.read(24))
        self.pDefautDesFinalFootWorld = struct.unpack('>6f', buf.read(24))
        self.pDefaultDesFootWorld = struct.unpack('>6f', buf.read(24))
        self.init_place_foot_pos = struct.unpack('>6f', buf.read(24))
        self.stepL, self.stepW, self.stepYaw = struct.unpack(">fff", buf.read(12))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if icp_wbc_debug_data_t in parents: return 0
        tmphash = (0xa63df7014975beb) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if icp_wbc_debug_data_t._packed_fingerprint is None:
            icp_wbc_debug_data_t._packed_fingerprint = struct.pack(">Q", icp_wbc_debug_data_t._get_hash_recursive([]))
        return icp_wbc_debug_data_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

