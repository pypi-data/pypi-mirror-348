/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class hand_cmd_struct implements lcm.lcm.LCMEncodable
{
    public int isUsed[];
    public int control_mode;
    public int trajectoryLength;
    public int motionType;
    public float jointPosVec[];
    public float jointSpeedVec[];
    public float forceMaxValue[];
    public byte gestureSequence;
 
    public hand_cmd_struct()
    {
        isUsed = new int[12];
        jointPosVec = new float[12];
        jointSpeedVec = new float[12];
        forceMaxValue = new float[12];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x0a71cf6d7888eeeeL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.hand_cmd_struct.class))
            return 0L;
 
        classes.add(lcmtypes.hand_cmd_struct.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 12; a++) {
            outs.writeInt(this.isUsed[a]); 
        }
 
        outs.writeInt(this.control_mode); 
 
        outs.writeInt(this.trajectoryLength); 
 
        outs.writeInt(this.motionType); 
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.jointPosVec[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.jointSpeedVec[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.forceMaxValue[a]); 
        }
 
        outs.writeByte(this.gestureSequence); 
 
    }
 
    public hand_cmd_struct(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public hand_cmd_struct(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.hand_cmd_struct _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.hand_cmd_struct o = new lcmtypes.hand_cmd_struct();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.isUsed = new int[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.isUsed[a] = ins.readInt();
        }
 
        this.control_mode = ins.readInt();
 
        this.trajectoryLength = ins.readInt();
 
        this.motionType = ins.readInt();
 
        this.jointPosVec = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.jointPosVec[a] = ins.readFloat();
        }
 
        this.jointSpeedVec = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.jointSpeedVec[a] = ins.readFloat();
        }
 
        this.forceMaxValue = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.forceMaxValue[a] = ins.readFloat();
        }
 
        this.gestureSequence = ins.readByte();
 
    }
 
    public lcmtypes.hand_cmd_struct copy()
    {
        lcmtypes.hand_cmd_struct outobj = new lcmtypes.hand_cmd_struct();
        outobj.isUsed = new int[(int) 12];
        System.arraycopy(this.isUsed, 0, outobj.isUsed, 0, 12); 
        outobj.control_mode = this.control_mode;
 
        outobj.trajectoryLength = this.trajectoryLength;
 
        outobj.motionType = this.motionType;
 
        outobj.jointPosVec = new float[(int) 12];
        System.arraycopy(this.jointPosVec, 0, outobj.jointPosVec, 0, 12); 
        outobj.jointSpeedVec = new float[(int) 12];
        System.arraycopy(this.jointSpeedVec, 0, outobj.jointSpeedVec, 0, 12); 
        outobj.forceMaxValue = new float[(int) 12];
        System.arraycopy(this.forceMaxValue, 0, outobj.forceMaxValue, 0, 12); 
        outobj.gestureSequence = this.gestureSequence;
 
        return outobj;
    }
 
}

