/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class can_debug_data_lcmt implements lcm.lcm.LCMEncodable
{
    public int error_code[];
    public int raw_actual_position[];
    public short raw_actual_velocity[];
    public short raw_actual_current[];
    public float motor_curPos[];
    public float motor_curVel[];
    public float motor_curCurrent[];
 
    public can_debug_data_lcmt()
    {
        error_code = new int[14];
        raw_actual_position = new int[14];
        raw_actual_velocity = new short[14];
        raw_actual_current = new short[14];
        motor_curPos = new float[14];
        motor_curVel = new float[14];
        motor_curCurrent = new float[14];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x8ff92819340decc5L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.can_debug_data_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.can_debug_data_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 14; a++) {
            outs.writeInt(this.error_code[a]); 
        }
 
        for (int a = 0; a < 14; a++) {
            outs.writeInt(this.raw_actual_position[a]); 
        }
 
        for (int a = 0; a < 14; a++) {
            outs.writeShort(this.raw_actual_velocity[a]); 
        }
 
        for (int a = 0; a < 14; a++) {
            outs.writeShort(this.raw_actual_current[a]); 
        }
 
        for (int a = 0; a < 14; a++) {
            outs.writeFloat(this.motor_curPos[a]); 
        }
 
        for (int a = 0; a < 14; a++) {
            outs.writeFloat(this.motor_curVel[a]); 
        }
 
        for (int a = 0; a < 14; a++) {
            outs.writeFloat(this.motor_curCurrent[a]); 
        }
 
    }
 
    public can_debug_data_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public can_debug_data_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.can_debug_data_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.can_debug_data_lcmt o = new lcmtypes.can_debug_data_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.error_code = new int[(int) 14];
        for (int a = 0; a < 14; a++) {
            this.error_code[a] = ins.readInt();
        }
 
        this.raw_actual_position = new int[(int) 14];
        for (int a = 0; a < 14; a++) {
            this.raw_actual_position[a] = ins.readInt();
        }
 
        this.raw_actual_velocity = new short[(int) 14];
        for (int a = 0; a < 14; a++) {
            this.raw_actual_velocity[a] = ins.readShort();
        }
 
        this.raw_actual_current = new short[(int) 14];
        for (int a = 0; a < 14; a++) {
            this.raw_actual_current[a] = ins.readShort();
        }
 
        this.motor_curPos = new float[(int) 14];
        for (int a = 0; a < 14; a++) {
            this.motor_curPos[a] = ins.readFloat();
        }
 
        this.motor_curVel = new float[(int) 14];
        for (int a = 0; a < 14; a++) {
            this.motor_curVel[a] = ins.readFloat();
        }
 
        this.motor_curCurrent = new float[(int) 14];
        for (int a = 0; a < 14; a++) {
            this.motor_curCurrent[a] = ins.readFloat();
        }
 
    }
 
    public lcmtypes.can_debug_data_lcmt copy()
    {
        lcmtypes.can_debug_data_lcmt outobj = new lcmtypes.can_debug_data_lcmt();
        outobj.error_code = new int[(int) 14];
        System.arraycopy(this.error_code, 0, outobj.error_code, 0, 14); 
        outobj.raw_actual_position = new int[(int) 14];
        System.arraycopy(this.raw_actual_position, 0, outobj.raw_actual_position, 0, 14); 
        outobj.raw_actual_velocity = new short[(int) 14];
        System.arraycopy(this.raw_actual_velocity, 0, outobj.raw_actual_velocity, 0, 14); 
        outobj.raw_actual_current = new short[(int) 14];
        System.arraycopy(this.raw_actual_current, 0, outobj.raw_actual_current, 0, 14); 
        outobj.motor_curPos = new float[(int) 14];
        System.arraycopy(this.motor_curPos, 0, outobj.motor_curPos, 0, 14); 
        outobj.motor_curVel = new float[(int) 14];
        System.arraycopy(this.motor_curVel, 0, outobj.motor_curVel, 0, 14); 
        outobj.motor_curCurrent = new float[(int) 14];
        System.arraycopy(this.motor_curCurrent, 0, outobj.motor_curCurrent, 0, 14); 
        return outobj;
    }
 
}

