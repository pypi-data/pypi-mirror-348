/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class icp_wbc_debug_data_t implements lcm.lcm.LCMEncodable
{
    public float swing_state[];
    public float contact_state[];
    public float current_cop[];
    public float planned_cop[];
    public float desired_cop[];
    public float current_icp[];
    public float planned_icp[];
    public float desired_icp[];
    public float current_com[];
    public float planned_com[];
    public float desired_com[];
    public float delta_cmp[];
    public float cmp_zmp_kp[];
    public float cmp_zmp_kd[];
    public float cmp_com_kcom[];
    public float cmp_com_kzmp[];
    public float cmp_alpha_inv[];
    public float contactEstimate[];
    public float foot_zmp_local[];
    public float foot_zmp[];
    public float foot_pos_cmd[];
    public float foot_vel_cmd[];
    public float foot_acc_cmd[];
    public float foot_acc_numeric[];
    public float body_pos_cmd[];
    public float current_rpy[];
    public float modified_foot_pos[];
    public float foot_pos[];
    public float foot_vel[];
    public float foot_local_pos_cmd[];
    public float foot_local_vel_cmd[];
    public float foot_local_pos[];
    public float foot_local_vel[];
    public float jpos_cmd[];
    public float jvel_cmd[];
    public float jacc_cmd[];
    public float jpos[];
    public float jvel[];
    public float pDesFootWorldInit[];
    public float rpyDesFootWorldInit[];
    public float pDesFootWorldFinal[];
    public float rpyDesFootWorldFinal[];
    public float pDesBodyWorldInit[];
    public float rpyDesBodyWorldInit[];
    public float pDesBodyWorldFinal[];
    public float rpyDesBodyWorldFinal[];
    public float pDefautDesFinalFootWorld[];
    public float pDefaultDesFootWorld[];
    public float init_place_foot_pos[];
    public float stepL;
    public float stepW;
    public float stepYaw;
 
    public icp_wbc_debug_data_t()
    {
        swing_state = new float[2];
        contact_state = new float[2];
        current_cop = new float[9];
        planned_cop = new float[9];
        desired_cop = new float[9];
        current_icp = new float[9];
        planned_icp = new float[9];
        desired_icp = new float[9];
        current_com = new float[9];
        planned_com = new float[9];
        desired_com = new float[9];
        delta_cmp = new float[6];
        cmp_zmp_kp = new float[3];
        cmp_zmp_kd = new float[3];
        cmp_com_kcom = new float[3];
        cmp_com_kzmp = new float[3];
        cmp_alpha_inv = new float[3];
        contactEstimate = new float[4];
        foot_zmp_local = new float[6];
        foot_zmp = new float[6];
        foot_pos_cmd = new float[12];
        foot_vel_cmd = new float[12];
        foot_acc_cmd = new float[12];
        foot_acc_numeric = new float[12];
        body_pos_cmd = new float[12];
        current_rpy = new float[3];
        modified_foot_pos = new float[6];
        foot_pos = new float[12];
        foot_vel = new float[12];
        foot_local_pos_cmd = new float[12];
        foot_local_vel_cmd = new float[12];
        foot_local_pos = new float[12];
        foot_local_vel = new float[12];
        jpos_cmd = new float[12];
        jvel_cmd = new float[12];
        jacc_cmd = new float[12];
        jpos = new float[12];
        jvel = new float[12];
        pDesFootWorldInit = new float[6];
        rpyDesFootWorldInit = new float[6];
        pDesFootWorldFinal = new float[6];
        rpyDesFootWorldFinal = new float[6];
        pDesBodyWorldInit = new float[6];
        rpyDesBodyWorldInit = new float[6];
        pDesBodyWorldFinal = new float[6];
        rpyDesBodyWorldFinal = new float[6];
        pDefautDesFinalFootWorld = new float[6];
        pDefaultDesFootWorld = new float[6];
        init_place_foot_pos = new float[6];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x0a63df7014975bebL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.icp_wbc_debug_data_t.class))
            return 0L;
 
        classes.add(lcmtypes.icp_wbc_debug_data_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 2; a++) {
            outs.writeFloat(this.swing_state[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeFloat(this.contact_state[a]); 
        }
 
        for (int a = 0; a < 9; a++) {
            outs.writeFloat(this.current_cop[a]); 
        }
 
        for (int a = 0; a < 9; a++) {
            outs.writeFloat(this.planned_cop[a]); 
        }
 
        for (int a = 0; a < 9; a++) {
            outs.writeFloat(this.desired_cop[a]); 
        }
 
        for (int a = 0; a < 9; a++) {
            outs.writeFloat(this.current_icp[a]); 
        }
 
        for (int a = 0; a < 9; a++) {
            outs.writeFloat(this.planned_icp[a]); 
        }
 
        for (int a = 0; a < 9; a++) {
            outs.writeFloat(this.desired_icp[a]); 
        }
 
        for (int a = 0; a < 9; a++) {
            outs.writeFloat(this.current_com[a]); 
        }
 
        for (int a = 0; a < 9; a++) {
            outs.writeFloat(this.planned_com[a]); 
        }
 
        for (int a = 0; a < 9; a++) {
            outs.writeFloat(this.desired_com[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeFloat(this.delta_cmp[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.cmp_zmp_kp[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.cmp_zmp_kd[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.cmp_com_kcom[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.cmp_com_kzmp[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.cmp_alpha_inv[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.contactEstimate[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeFloat(this.foot_zmp_local[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeFloat(this.foot_zmp[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.foot_pos_cmd[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.foot_vel_cmd[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.foot_acc_cmd[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.foot_acc_numeric[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.body_pos_cmd[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.current_rpy[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeFloat(this.modified_foot_pos[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.foot_pos[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.foot_vel[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.foot_local_pos_cmd[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.foot_local_vel_cmd[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.foot_local_pos[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.foot_local_vel[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.jpos_cmd[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.jvel_cmd[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.jacc_cmd[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.jpos[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.jvel[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeFloat(this.pDesFootWorldInit[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeFloat(this.rpyDesFootWorldInit[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeFloat(this.pDesFootWorldFinal[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeFloat(this.rpyDesFootWorldFinal[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeFloat(this.pDesBodyWorldInit[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeFloat(this.rpyDesBodyWorldInit[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeFloat(this.pDesBodyWorldFinal[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeFloat(this.rpyDesBodyWorldFinal[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeFloat(this.pDefautDesFinalFootWorld[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeFloat(this.pDefaultDesFootWorld[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeFloat(this.init_place_foot_pos[a]); 
        }
 
        outs.writeFloat(this.stepL); 
 
        outs.writeFloat(this.stepW); 
 
        outs.writeFloat(this.stepYaw); 
 
    }
 
    public icp_wbc_debug_data_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public icp_wbc_debug_data_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.icp_wbc_debug_data_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.icp_wbc_debug_data_t o = new lcmtypes.icp_wbc_debug_data_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.swing_state = new float[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.swing_state[a] = ins.readFloat();
        }
 
        this.contact_state = new float[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.contact_state[a] = ins.readFloat();
        }
 
        this.current_cop = new float[(int) 9];
        for (int a = 0; a < 9; a++) {
            this.current_cop[a] = ins.readFloat();
        }
 
        this.planned_cop = new float[(int) 9];
        for (int a = 0; a < 9; a++) {
            this.planned_cop[a] = ins.readFloat();
        }
 
        this.desired_cop = new float[(int) 9];
        for (int a = 0; a < 9; a++) {
            this.desired_cop[a] = ins.readFloat();
        }
 
        this.current_icp = new float[(int) 9];
        for (int a = 0; a < 9; a++) {
            this.current_icp[a] = ins.readFloat();
        }
 
        this.planned_icp = new float[(int) 9];
        for (int a = 0; a < 9; a++) {
            this.planned_icp[a] = ins.readFloat();
        }
 
        this.desired_icp = new float[(int) 9];
        for (int a = 0; a < 9; a++) {
            this.desired_icp[a] = ins.readFloat();
        }
 
        this.current_com = new float[(int) 9];
        for (int a = 0; a < 9; a++) {
            this.current_com[a] = ins.readFloat();
        }
 
        this.planned_com = new float[(int) 9];
        for (int a = 0; a < 9; a++) {
            this.planned_com[a] = ins.readFloat();
        }
 
        this.desired_com = new float[(int) 9];
        for (int a = 0; a < 9; a++) {
            this.desired_com[a] = ins.readFloat();
        }
 
        this.delta_cmp = new float[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.delta_cmp[a] = ins.readFloat();
        }
 
        this.cmp_zmp_kp = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.cmp_zmp_kp[a] = ins.readFloat();
        }
 
        this.cmp_zmp_kd = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.cmp_zmp_kd[a] = ins.readFloat();
        }
 
        this.cmp_com_kcom = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.cmp_com_kcom[a] = ins.readFloat();
        }
 
        this.cmp_com_kzmp = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.cmp_com_kzmp[a] = ins.readFloat();
        }
 
        this.cmp_alpha_inv = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.cmp_alpha_inv[a] = ins.readFloat();
        }
 
        this.contactEstimate = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.contactEstimate[a] = ins.readFloat();
        }
 
        this.foot_zmp_local = new float[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.foot_zmp_local[a] = ins.readFloat();
        }
 
        this.foot_zmp = new float[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.foot_zmp[a] = ins.readFloat();
        }
 
        this.foot_pos_cmd = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.foot_pos_cmd[a] = ins.readFloat();
        }
 
        this.foot_vel_cmd = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.foot_vel_cmd[a] = ins.readFloat();
        }
 
        this.foot_acc_cmd = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.foot_acc_cmd[a] = ins.readFloat();
        }
 
        this.foot_acc_numeric = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.foot_acc_numeric[a] = ins.readFloat();
        }
 
        this.body_pos_cmd = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.body_pos_cmd[a] = ins.readFloat();
        }
 
        this.current_rpy = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.current_rpy[a] = ins.readFloat();
        }
 
        this.modified_foot_pos = new float[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.modified_foot_pos[a] = ins.readFloat();
        }
 
        this.foot_pos = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.foot_pos[a] = ins.readFloat();
        }
 
        this.foot_vel = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.foot_vel[a] = ins.readFloat();
        }
 
        this.foot_local_pos_cmd = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.foot_local_pos_cmd[a] = ins.readFloat();
        }
 
        this.foot_local_vel_cmd = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.foot_local_vel_cmd[a] = ins.readFloat();
        }
 
        this.foot_local_pos = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.foot_local_pos[a] = ins.readFloat();
        }
 
        this.foot_local_vel = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.foot_local_vel[a] = ins.readFloat();
        }
 
        this.jpos_cmd = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.jpos_cmd[a] = ins.readFloat();
        }
 
        this.jvel_cmd = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.jvel_cmd[a] = ins.readFloat();
        }
 
        this.jacc_cmd = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.jacc_cmd[a] = ins.readFloat();
        }
 
        this.jpos = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.jpos[a] = ins.readFloat();
        }
 
        this.jvel = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.jvel[a] = ins.readFloat();
        }
 
        this.pDesFootWorldInit = new float[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.pDesFootWorldInit[a] = ins.readFloat();
        }
 
        this.rpyDesFootWorldInit = new float[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.rpyDesFootWorldInit[a] = ins.readFloat();
        }
 
        this.pDesFootWorldFinal = new float[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.pDesFootWorldFinal[a] = ins.readFloat();
        }
 
        this.rpyDesFootWorldFinal = new float[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.rpyDesFootWorldFinal[a] = ins.readFloat();
        }
 
        this.pDesBodyWorldInit = new float[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.pDesBodyWorldInit[a] = ins.readFloat();
        }
 
        this.rpyDesBodyWorldInit = new float[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.rpyDesBodyWorldInit[a] = ins.readFloat();
        }
 
        this.pDesBodyWorldFinal = new float[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.pDesBodyWorldFinal[a] = ins.readFloat();
        }
 
        this.rpyDesBodyWorldFinal = new float[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.rpyDesBodyWorldFinal[a] = ins.readFloat();
        }
 
        this.pDefautDesFinalFootWorld = new float[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.pDefautDesFinalFootWorld[a] = ins.readFloat();
        }
 
        this.pDefaultDesFootWorld = new float[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.pDefaultDesFootWorld[a] = ins.readFloat();
        }
 
        this.init_place_foot_pos = new float[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.init_place_foot_pos[a] = ins.readFloat();
        }
 
        this.stepL = ins.readFloat();
 
        this.stepW = ins.readFloat();
 
        this.stepYaw = ins.readFloat();
 
    }
 
    public lcmtypes.icp_wbc_debug_data_t copy()
    {
        lcmtypes.icp_wbc_debug_data_t outobj = new lcmtypes.icp_wbc_debug_data_t();
        outobj.swing_state = new float[(int) 2];
        System.arraycopy(this.swing_state, 0, outobj.swing_state, 0, 2); 
        outobj.contact_state = new float[(int) 2];
        System.arraycopy(this.contact_state, 0, outobj.contact_state, 0, 2); 
        outobj.current_cop = new float[(int) 9];
        System.arraycopy(this.current_cop, 0, outobj.current_cop, 0, 9); 
        outobj.planned_cop = new float[(int) 9];
        System.arraycopy(this.planned_cop, 0, outobj.planned_cop, 0, 9); 
        outobj.desired_cop = new float[(int) 9];
        System.arraycopy(this.desired_cop, 0, outobj.desired_cop, 0, 9); 
        outobj.current_icp = new float[(int) 9];
        System.arraycopy(this.current_icp, 0, outobj.current_icp, 0, 9); 
        outobj.planned_icp = new float[(int) 9];
        System.arraycopy(this.planned_icp, 0, outobj.planned_icp, 0, 9); 
        outobj.desired_icp = new float[(int) 9];
        System.arraycopy(this.desired_icp, 0, outobj.desired_icp, 0, 9); 
        outobj.current_com = new float[(int) 9];
        System.arraycopy(this.current_com, 0, outobj.current_com, 0, 9); 
        outobj.planned_com = new float[(int) 9];
        System.arraycopy(this.planned_com, 0, outobj.planned_com, 0, 9); 
        outobj.desired_com = new float[(int) 9];
        System.arraycopy(this.desired_com, 0, outobj.desired_com, 0, 9); 
        outobj.delta_cmp = new float[(int) 6];
        System.arraycopy(this.delta_cmp, 0, outobj.delta_cmp, 0, 6); 
        outobj.cmp_zmp_kp = new float[(int) 3];
        System.arraycopy(this.cmp_zmp_kp, 0, outobj.cmp_zmp_kp, 0, 3); 
        outobj.cmp_zmp_kd = new float[(int) 3];
        System.arraycopy(this.cmp_zmp_kd, 0, outobj.cmp_zmp_kd, 0, 3); 
        outobj.cmp_com_kcom = new float[(int) 3];
        System.arraycopy(this.cmp_com_kcom, 0, outobj.cmp_com_kcom, 0, 3); 
        outobj.cmp_com_kzmp = new float[(int) 3];
        System.arraycopy(this.cmp_com_kzmp, 0, outobj.cmp_com_kzmp, 0, 3); 
        outobj.cmp_alpha_inv = new float[(int) 3];
        System.arraycopy(this.cmp_alpha_inv, 0, outobj.cmp_alpha_inv, 0, 3); 
        outobj.contactEstimate = new float[(int) 4];
        System.arraycopy(this.contactEstimate, 0, outobj.contactEstimate, 0, 4); 
        outobj.foot_zmp_local = new float[(int) 6];
        System.arraycopy(this.foot_zmp_local, 0, outobj.foot_zmp_local, 0, 6); 
        outobj.foot_zmp = new float[(int) 6];
        System.arraycopy(this.foot_zmp, 0, outobj.foot_zmp, 0, 6); 
        outobj.foot_pos_cmd = new float[(int) 12];
        System.arraycopy(this.foot_pos_cmd, 0, outobj.foot_pos_cmd, 0, 12); 
        outobj.foot_vel_cmd = new float[(int) 12];
        System.arraycopy(this.foot_vel_cmd, 0, outobj.foot_vel_cmd, 0, 12); 
        outobj.foot_acc_cmd = new float[(int) 12];
        System.arraycopy(this.foot_acc_cmd, 0, outobj.foot_acc_cmd, 0, 12); 
        outobj.foot_acc_numeric = new float[(int) 12];
        System.arraycopy(this.foot_acc_numeric, 0, outobj.foot_acc_numeric, 0, 12); 
        outobj.body_pos_cmd = new float[(int) 12];
        System.arraycopy(this.body_pos_cmd, 0, outobj.body_pos_cmd, 0, 12); 
        outobj.current_rpy = new float[(int) 3];
        System.arraycopy(this.current_rpy, 0, outobj.current_rpy, 0, 3); 
        outobj.modified_foot_pos = new float[(int) 6];
        System.arraycopy(this.modified_foot_pos, 0, outobj.modified_foot_pos, 0, 6); 
        outobj.foot_pos = new float[(int) 12];
        System.arraycopy(this.foot_pos, 0, outobj.foot_pos, 0, 12); 
        outobj.foot_vel = new float[(int) 12];
        System.arraycopy(this.foot_vel, 0, outobj.foot_vel, 0, 12); 
        outobj.foot_local_pos_cmd = new float[(int) 12];
        System.arraycopy(this.foot_local_pos_cmd, 0, outobj.foot_local_pos_cmd, 0, 12); 
        outobj.foot_local_vel_cmd = new float[(int) 12];
        System.arraycopy(this.foot_local_vel_cmd, 0, outobj.foot_local_vel_cmd, 0, 12); 
        outobj.foot_local_pos = new float[(int) 12];
        System.arraycopy(this.foot_local_pos, 0, outobj.foot_local_pos, 0, 12); 
        outobj.foot_local_vel = new float[(int) 12];
        System.arraycopy(this.foot_local_vel, 0, outobj.foot_local_vel, 0, 12); 
        outobj.jpos_cmd = new float[(int) 12];
        System.arraycopy(this.jpos_cmd, 0, outobj.jpos_cmd, 0, 12); 
        outobj.jvel_cmd = new float[(int) 12];
        System.arraycopy(this.jvel_cmd, 0, outobj.jvel_cmd, 0, 12); 
        outobj.jacc_cmd = new float[(int) 12];
        System.arraycopy(this.jacc_cmd, 0, outobj.jacc_cmd, 0, 12); 
        outobj.jpos = new float[(int) 12];
        System.arraycopy(this.jpos, 0, outobj.jpos, 0, 12); 
        outobj.jvel = new float[(int) 12];
        System.arraycopy(this.jvel, 0, outobj.jvel, 0, 12); 
        outobj.pDesFootWorldInit = new float[(int) 6];
        System.arraycopy(this.pDesFootWorldInit, 0, outobj.pDesFootWorldInit, 0, 6); 
        outobj.rpyDesFootWorldInit = new float[(int) 6];
        System.arraycopy(this.rpyDesFootWorldInit, 0, outobj.rpyDesFootWorldInit, 0, 6); 
        outobj.pDesFootWorldFinal = new float[(int) 6];
        System.arraycopy(this.pDesFootWorldFinal, 0, outobj.pDesFootWorldFinal, 0, 6); 
        outobj.rpyDesFootWorldFinal = new float[(int) 6];
        System.arraycopy(this.rpyDesFootWorldFinal, 0, outobj.rpyDesFootWorldFinal, 0, 6); 
        outobj.pDesBodyWorldInit = new float[(int) 6];
        System.arraycopy(this.pDesBodyWorldInit, 0, outobj.pDesBodyWorldInit, 0, 6); 
        outobj.rpyDesBodyWorldInit = new float[(int) 6];
        System.arraycopy(this.rpyDesBodyWorldInit, 0, outobj.rpyDesBodyWorldInit, 0, 6); 
        outobj.pDesBodyWorldFinal = new float[(int) 6];
        System.arraycopy(this.pDesBodyWorldFinal, 0, outobj.pDesBodyWorldFinal, 0, 6); 
        outobj.rpyDesBodyWorldFinal = new float[(int) 6];
        System.arraycopy(this.rpyDesBodyWorldFinal, 0, outobj.rpyDesBodyWorldFinal, 0, 6); 
        outobj.pDefautDesFinalFootWorld = new float[(int) 6];
        System.arraycopy(this.pDefautDesFinalFootWorld, 0, outobj.pDefautDesFinalFootWorld, 0, 6); 
        outobj.pDefaultDesFootWorld = new float[(int) 6];
        System.arraycopy(this.pDefaultDesFootWorld, 0, outobj.pDefaultDesFootWorld, 0, 6); 
        outobj.init_place_foot_pos = new float[(int) 6];
        System.arraycopy(this.init_place_foot_pos, 0, outobj.init_place_foot_pos, 0, 6); 
        outobj.stepL = this.stepL;
 
        outobj.stepW = this.stepW;
 
        outobj.stepYaw = this.stepYaw;
 
        return outobj;
    }
 
}

