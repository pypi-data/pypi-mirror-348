/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class ecat_p3b_upperbody_data_lcmt implements lcm.lcm.LCMEncodable
{
    public short stat[];
    public short curPos1H[];
    public short curPos1L[];
    public short curPos2H[];
    public short curPos2L[];
    public short curVel[];
    public short curCur[];
    public short curTor[];
    public short res1[];
    public short res2[];
    public short res3[];
    public short res4[];
    public float mc_arm_curPos[];
    public float mc_arm_curVel[];
    public float mc_arm_curTor[];
    public float mc_arm_curCur[];
    public float mc_arm_curPosH[];
    public float mc_arm_curPosL[];
    public float original_arm_curPos[];
    public float original_arm_curVel[];
    public float original_arm_curTor[];
    public float original_arm_curCur[];
    public short stat_hand[];
    public short pos_hand[];
    public short curtor_hand[];
 
    public ecat_p3b_upperbody_data_lcmt()
    {
        stat = new short[15];
        curPos1H = new short[15];
        curPos1L = new short[15];
        curPos2H = new short[15];
        curPos2L = new short[15];
        curVel = new short[15];
        curCur = new short[15];
        curTor = new short[15];
        res1 = new short[15];
        res2 = new short[15];
        res3 = new short[15];
        res4 = new short[15];
        mc_arm_curPos = new float[15];
        mc_arm_curVel = new float[15];
        mc_arm_curTor = new float[15];
        mc_arm_curCur = new float[15];
        mc_arm_curPosH = new float[15];
        mc_arm_curPosL = new float[15];
        original_arm_curPos = new float[15];
        original_arm_curVel = new float[15];
        original_arm_curTor = new float[15];
        original_arm_curCur = new float[15];
        stat_hand = new short[2];
        pos_hand = new short[14];
        curtor_hand = new short[14];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xdb8d1a09f75767bdL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.ecat_p3b_upperbody_data_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.ecat_p3b_upperbody_data_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 15; a++) {
            outs.writeShort(this.stat[a]); 
        }
 
        for (int a = 0; a < 15; a++) {
            outs.writeShort(this.curPos1H[a]); 
        }
 
        for (int a = 0; a < 15; a++) {
            outs.writeShort(this.curPos1L[a]); 
        }
 
        for (int a = 0; a < 15; a++) {
            outs.writeShort(this.curPos2H[a]); 
        }
 
        for (int a = 0; a < 15; a++) {
            outs.writeShort(this.curPos2L[a]); 
        }
 
        for (int a = 0; a < 15; a++) {
            outs.writeShort(this.curVel[a]); 
        }
 
        for (int a = 0; a < 15; a++) {
            outs.writeShort(this.curCur[a]); 
        }
 
        for (int a = 0; a < 15; a++) {
            outs.writeShort(this.curTor[a]); 
        }
 
        for (int a = 0; a < 15; a++) {
            outs.writeShort(this.res1[a]); 
        }
 
        for (int a = 0; a < 15; a++) {
            outs.writeShort(this.res2[a]); 
        }
 
        for (int a = 0; a < 15; a++) {
            outs.writeShort(this.res3[a]); 
        }
 
        for (int a = 0; a < 15; a++) {
            outs.writeShort(this.res4[a]); 
        }
 
        for (int a = 0; a < 15; a++) {
            outs.writeFloat(this.mc_arm_curPos[a]); 
        }
 
        for (int a = 0; a < 15; a++) {
            outs.writeFloat(this.mc_arm_curVel[a]); 
        }
 
        for (int a = 0; a < 15; a++) {
            outs.writeFloat(this.mc_arm_curTor[a]); 
        }
 
        for (int a = 0; a < 15; a++) {
            outs.writeFloat(this.mc_arm_curCur[a]); 
        }
 
        for (int a = 0; a < 15; a++) {
            outs.writeFloat(this.mc_arm_curPosH[a]); 
        }
 
        for (int a = 0; a < 15; a++) {
            outs.writeFloat(this.mc_arm_curPosL[a]); 
        }
 
        for (int a = 0; a < 15; a++) {
            outs.writeFloat(this.original_arm_curPos[a]); 
        }
 
        for (int a = 0; a < 15; a++) {
            outs.writeFloat(this.original_arm_curVel[a]); 
        }
 
        for (int a = 0; a < 15; a++) {
            outs.writeFloat(this.original_arm_curTor[a]); 
        }
 
        for (int a = 0; a < 15; a++) {
            outs.writeFloat(this.original_arm_curCur[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeShort(this.stat_hand[a]); 
        }
 
        for (int a = 0; a < 14; a++) {
            outs.writeShort(this.pos_hand[a]); 
        }
 
        for (int a = 0; a < 14; a++) {
            outs.writeShort(this.curtor_hand[a]); 
        }
 
    }
 
    public ecat_p3b_upperbody_data_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public ecat_p3b_upperbody_data_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.ecat_p3b_upperbody_data_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.ecat_p3b_upperbody_data_lcmt o = new lcmtypes.ecat_p3b_upperbody_data_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.stat = new short[(int) 15];
        for (int a = 0; a < 15; a++) {
            this.stat[a] = ins.readShort();
        }
 
        this.curPos1H = new short[(int) 15];
        for (int a = 0; a < 15; a++) {
            this.curPos1H[a] = ins.readShort();
        }
 
        this.curPos1L = new short[(int) 15];
        for (int a = 0; a < 15; a++) {
            this.curPos1L[a] = ins.readShort();
        }
 
        this.curPos2H = new short[(int) 15];
        for (int a = 0; a < 15; a++) {
            this.curPos2H[a] = ins.readShort();
        }
 
        this.curPos2L = new short[(int) 15];
        for (int a = 0; a < 15; a++) {
            this.curPos2L[a] = ins.readShort();
        }
 
        this.curVel = new short[(int) 15];
        for (int a = 0; a < 15; a++) {
            this.curVel[a] = ins.readShort();
        }
 
        this.curCur = new short[(int) 15];
        for (int a = 0; a < 15; a++) {
            this.curCur[a] = ins.readShort();
        }
 
        this.curTor = new short[(int) 15];
        for (int a = 0; a < 15; a++) {
            this.curTor[a] = ins.readShort();
        }
 
        this.res1 = new short[(int) 15];
        for (int a = 0; a < 15; a++) {
            this.res1[a] = ins.readShort();
        }
 
        this.res2 = new short[(int) 15];
        for (int a = 0; a < 15; a++) {
            this.res2[a] = ins.readShort();
        }
 
        this.res3 = new short[(int) 15];
        for (int a = 0; a < 15; a++) {
            this.res3[a] = ins.readShort();
        }
 
        this.res4 = new short[(int) 15];
        for (int a = 0; a < 15; a++) {
            this.res4[a] = ins.readShort();
        }
 
        this.mc_arm_curPos = new float[(int) 15];
        for (int a = 0; a < 15; a++) {
            this.mc_arm_curPos[a] = ins.readFloat();
        }
 
        this.mc_arm_curVel = new float[(int) 15];
        for (int a = 0; a < 15; a++) {
            this.mc_arm_curVel[a] = ins.readFloat();
        }
 
        this.mc_arm_curTor = new float[(int) 15];
        for (int a = 0; a < 15; a++) {
            this.mc_arm_curTor[a] = ins.readFloat();
        }
 
        this.mc_arm_curCur = new float[(int) 15];
        for (int a = 0; a < 15; a++) {
            this.mc_arm_curCur[a] = ins.readFloat();
        }
 
        this.mc_arm_curPosH = new float[(int) 15];
        for (int a = 0; a < 15; a++) {
            this.mc_arm_curPosH[a] = ins.readFloat();
        }
 
        this.mc_arm_curPosL = new float[(int) 15];
        for (int a = 0; a < 15; a++) {
            this.mc_arm_curPosL[a] = ins.readFloat();
        }
 
        this.original_arm_curPos = new float[(int) 15];
        for (int a = 0; a < 15; a++) {
            this.original_arm_curPos[a] = ins.readFloat();
        }
 
        this.original_arm_curVel = new float[(int) 15];
        for (int a = 0; a < 15; a++) {
            this.original_arm_curVel[a] = ins.readFloat();
        }
 
        this.original_arm_curTor = new float[(int) 15];
        for (int a = 0; a < 15; a++) {
            this.original_arm_curTor[a] = ins.readFloat();
        }
 
        this.original_arm_curCur = new float[(int) 15];
        for (int a = 0; a < 15; a++) {
            this.original_arm_curCur[a] = ins.readFloat();
        }
 
        this.stat_hand = new short[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.stat_hand[a] = ins.readShort();
        }
 
        this.pos_hand = new short[(int) 14];
        for (int a = 0; a < 14; a++) {
            this.pos_hand[a] = ins.readShort();
        }
 
        this.curtor_hand = new short[(int) 14];
        for (int a = 0; a < 14; a++) {
            this.curtor_hand[a] = ins.readShort();
        }
 
    }
 
    public lcmtypes.ecat_p3b_upperbody_data_lcmt copy()
    {
        lcmtypes.ecat_p3b_upperbody_data_lcmt outobj = new lcmtypes.ecat_p3b_upperbody_data_lcmt();
        outobj.stat = new short[(int) 15];
        System.arraycopy(this.stat, 0, outobj.stat, 0, 15); 
        outobj.curPos1H = new short[(int) 15];
        System.arraycopy(this.curPos1H, 0, outobj.curPos1H, 0, 15); 
        outobj.curPos1L = new short[(int) 15];
        System.arraycopy(this.curPos1L, 0, outobj.curPos1L, 0, 15); 
        outobj.curPos2H = new short[(int) 15];
        System.arraycopy(this.curPos2H, 0, outobj.curPos2H, 0, 15); 
        outobj.curPos2L = new short[(int) 15];
        System.arraycopy(this.curPos2L, 0, outobj.curPos2L, 0, 15); 
        outobj.curVel = new short[(int) 15];
        System.arraycopy(this.curVel, 0, outobj.curVel, 0, 15); 
        outobj.curCur = new short[(int) 15];
        System.arraycopy(this.curCur, 0, outobj.curCur, 0, 15); 
        outobj.curTor = new short[(int) 15];
        System.arraycopy(this.curTor, 0, outobj.curTor, 0, 15); 
        outobj.res1 = new short[(int) 15];
        System.arraycopy(this.res1, 0, outobj.res1, 0, 15); 
        outobj.res2 = new short[(int) 15];
        System.arraycopy(this.res2, 0, outobj.res2, 0, 15); 
        outobj.res3 = new short[(int) 15];
        System.arraycopy(this.res3, 0, outobj.res3, 0, 15); 
        outobj.res4 = new short[(int) 15];
        System.arraycopy(this.res4, 0, outobj.res4, 0, 15); 
        outobj.mc_arm_curPos = new float[(int) 15];
        System.arraycopy(this.mc_arm_curPos, 0, outobj.mc_arm_curPos, 0, 15); 
        outobj.mc_arm_curVel = new float[(int) 15];
        System.arraycopy(this.mc_arm_curVel, 0, outobj.mc_arm_curVel, 0, 15); 
        outobj.mc_arm_curTor = new float[(int) 15];
        System.arraycopy(this.mc_arm_curTor, 0, outobj.mc_arm_curTor, 0, 15); 
        outobj.mc_arm_curCur = new float[(int) 15];
        System.arraycopy(this.mc_arm_curCur, 0, outobj.mc_arm_curCur, 0, 15); 
        outobj.mc_arm_curPosH = new float[(int) 15];
        System.arraycopy(this.mc_arm_curPosH, 0, outobj.mc_arm_curPosH, 0, 15); 
        outobj.mc_arm_curPosL = new float[(int) 15];
        System.arraycopy(this.mc_arm_curPosL, 0, outobj.mc_arm_curPosL, 0, 15); 
        outobj.original_arm_curPos = new float[(int) 15];
        System.arraycopy(this.original_arm_curPos, 0, outobj.original_arm_curPos, 0, 15); 
        outobj.original_arm_curVel = new float[(int) 15];
        System.arraycopy(this.original_arm_curVel, 0, outobj.original_arm_curVel, 0, 15); 
        outobj.original_arm_curTor = new float[(int) 15];
        System.arraycopy(this.original_arm_curTor, 0, outobj.original_arm_curTor, 0, 15); 
        outobj.original_arm_curCur = new float[(int) 15];
        System.arraycopy(this.original_arm_curCur, 0, outobj.original_arm_curCur, 0, 15); 
        outobj.stat_hand = new short[(int) 2];
        System.arraycopy(this.stat_hand, 0, outobj.stat_hand, 0, 2); 
        outobj.pos_hand = new short[(int) 14];
        System.arraycopy(this.pos_hand, 0, outobj.pos_hand, 0, 14); 
        outobj.curtor_hand = new short[(int) 14];
        System.arraycopy(this.curtor_hand, 0, outobj.curtor_hand, 0, 14); 
        return outobj;
    }
 
}

