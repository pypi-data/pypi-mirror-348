/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class dcm_motion_tracking_control_lcmt implements lcm.lcm.LCMEncodable
{
    public float xi_act[];
    public float r_vrp_control[];
    public float F_grf[];
    public float F_WLeftFoot[];
    public float F_WRightFoot[];
    public float tau_WLeftFoot[];
    public float tau_WRightFoot[];
    public float calculate_stance_leg;
    public float wbic_q[];
    public float wbic_qd[];
    public float wbic_tau[];
    public float wbic_f[];
    public float com_dynamics_x[];
    public float com_dynamics_xdot[];
 
    public dcm_motion_tracking_control_lcmt()
    {
        xi_act = new float[3];
        r_vrp_control = new float[3];
        F_grf = new float[3];
        F_WLeftFoot = new float[3];
        F_WRightFoot = new float[3];
        tau_WLeftFoot = new float[3];
        tau_WRightFoot = new float[3];
        wbic_q = new float[12];
        wbic_qd = new float[12];
        wbic_tau = new float[12];
        wbic_f = new float[12];
        com_dynamics_x = new float[3];
        com_dynamics_xdot = new float[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xa0eaf4f73c3eb0f4L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.dcm_motion_tracking_control_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.dcm_motion_tracking_control_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.xi_act[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.r_vrp_control[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.F_grf[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.F_WLeftFoot[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.F_WRightFoot[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.tau_WLeftFoot[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.tau_WRightFoot[a]); 
        }
 
        outs.writeFloat(this.calculate_stance_leg); 
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.wbic_q[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.wbic_qd[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.wbic_tau[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.wbic_f[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.com_dynamics_x[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.com_dynamics_xdot[a]); 
        }
 
    }
 
    public dcm_motion_tracking_control_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public dcm_motion_tracking_control_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.dcm_motion_tracking_control_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.dcm_motion_tracking_control_lcmt o = new lcmtypes.dcm_motion_tracking_control_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.xi_act = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.xi_act[a] = ins.readFloat();
        }
 
        this.r_vrp_control = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.r_vrp_control[a] = ins.readFloat();
        }
 
        this.F_grf = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.F_grf[a] = ins.readFloat();
        }
 
        this.F_WLeftFoot = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.F_WLeftFoot[a] = ins.readFloat();
        }
 
        this.F_WRightFoot = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.F_WRightFoot[a] = ins.readFloat();
        }
 
        this.tau_WLeftFoot = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.tau_WLeftFoot[a] = ins.readFloat();
        }
 
        this.tau_WRightFoot = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.tau_WRightFoot[a] = ins.readFloat();
        }
 
        this.calculate_stance_leg = ins.readFloat();
 
        this.wbic_q = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.wbic_q[a] = ins.readFloat();
        }
 
        this.wbic_qd = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.wbic_qd[a] = ins.readFloat();
        }
 
        this.wbic_tau = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.wbic_tau[a] = ins.readFloat();
        }
 
        this.wbic_f = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.wbic_f[a] = ins.readFloat();
        }
 
        this.com_dynamics_x = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.com_dynamics_x[a] = ins.readFloat();
        }
 
        this.com_dynamics_xdot = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.com_dynamics_xdot[a] = ins.readFloat();
        }
 
    }
 
    public lcmtypes.dcm_motion_tracking_control_lcmt copy()
    {
        lcmtypes.dcm_motion_tracking_control_lcmt outobj = new lcmtypes.dcm_motion_tracking_control_lcmt();
        outobj.xi_act = new float[(int) 3];
        System.arraycopy(this.xi_act, 0, outobj.xi_act, 0, 3); 
        outobj.r_vrp_control = new float[(int) 3];
        System.arraycopy(this.r_vrp_control, 0, outobj.r_vrp_control, 0, 3); 
        outobj.F_grf = new float[(int) 3];
        System.arraycopy(this.F_grf, 0, outobj.F_grf, 0, 3); 
        outobj.F_WLeftFoot = new float[(int) 3];
        System.arraycopy(this.F_WLeftFoot, 0, outobj.F_WLeftFoot, 0, 3); 
        outobj.F_WRightFoot = new float[(int) 3];
        System.arraycopy(this.F_WRightFoot, 0, outobj.F_WRightFoot, 0, 3); 
        outobj.tau_WLeftFoot = new float[(int) 3];
        System.arraycopy(this.tau_WLeftFoot, 0, outobj.tau_WLeftFoot, 0, 3); 
        outobj.tau_WRightFoot = new float[(int) 3];
        System.arraycopy(this.tau_WRightFoot, 0, outobj.tau_WRightFoot, 0, 3); 
        outobj.calculate_stance_leg = this.calculate_stance_leg;
 
        outobj.wbic_q = new float[(int) 12];
        System.arraycopy(this.wbic_q, 0, outobj.wbic_q, 0, 12); 
        outobj.wbic_qd = new float[(int) 12];
        System.arraycopy(this.wbic_qd, 0, outobj.wbic_qd, 0, 12); 
        outobj.wbic_tau = new float[(int) 12];
        System.arraycopy(this.wbic_tau, 0, outobj.wbic_tau, 0, 12); 
        outobj.wbic_f = new float[(int) 12];
        System.arraycopy(this.wbic_f, 0, outobj.wbic_f, 0, 12); 
        outobj.com_dynamics_x = new float[(int) 3];
        System.arraycopy(this.com_dynamics_x, 0, outobj.com_dynamics_x, 0, 3); 
        outobj.com_dynamics_xdot = new float[(int) 3];
        System.arraycopy(this.com_dynamics_xdot, 0, outobj.com_dynamics_xdot, 0, 3); 
        return outobj;
    }
 
}

