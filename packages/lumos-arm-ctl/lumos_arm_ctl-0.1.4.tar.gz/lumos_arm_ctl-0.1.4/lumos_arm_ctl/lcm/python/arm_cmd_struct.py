"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class arm_cmd_struct(object):
    __slots__ = ["isUsed", "control_mode", "trajectoryLength", "motionType", "jointPosVec", "jointSpeedVec", "jointCurrentVec"]

    def __init__(self):
        self.isUsed = [ 0 for dim0 in range(14) ]
        self.control_mode = [ 0 for dim0 in range(14) ]
        self.trajectoryLength = 0
        self.motionType = 0
        self.jointPosVec = []
        self.jointSpeedVec = []
        self.jointCurrentVec = []

    def encode(self):
        buf = BytesIO()
        buf.write(arm_cmd_struct._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>14i', *self.isUsed[:14]))
        buf.write(struct.pack('>14i', *self.control_mode[:14]))
        buf.write(struct.pack(">ii", self.trajectoryLength, self.motionType))
        for i0 in range(self.trajectoryLength):
            buf.write(struct.pack('>14f', *self.jointPosVec[i0][:14]))
        for i0 in range(self.trajectoryLength):
            buf.write(struct.pack('>14f', *self.jointSpeedVec[i0][:14]))
        for i0 in range(self.trajectoryLength):
            buf.write(struct.pack('>14f', *self.jointCurrentVec[i0][:14]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != arm_cmd_struct._get_packed_fingerprint():
            raise ValueError("Decode error")
        return arm_cmd_struct._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = arm_cmd_struct()
        self.isUsed = struct.unpack('>14i', buf.read(56))
        self.control_mode = struct.unpack('>14i', buf.read(56))
        self.trajectoryLength, self.motionType = struct.unpack(">ii", buf.read(8))
        self.jointPosVec = []
        for i0 in range(self.trajectoryLength):
            self.jointPosVec.append(struct.unpack('>14f', buf.read(56)))
        self.jointSpeedVec = []
        for i0 in range(self.trajectoryLength):
            self.jointSpeedVec.append(struct.unpack('>14f', buf.read(56)))
        self.jointCurrentVec = []
        for i0 in range(self.trajectoryLength):
            self.jointCurrentVec.append(struct.unpack('>14f', buf.read(56)))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if arm_cmd_struct in parents: return 0
        tmphash = (0xa0c88537500170a3) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if arm_cmd_struct._packed_fingerprint is None:
            arm_cmd_struct._packed_fingerprint = struct.pack(">Q", arm_cmd_struct._get_hash_recursive([]))
        return arm_cmd_struct._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

