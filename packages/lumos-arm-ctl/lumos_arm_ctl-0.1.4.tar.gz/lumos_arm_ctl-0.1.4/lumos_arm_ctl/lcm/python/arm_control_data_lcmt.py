"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class arm_control_data_lcmt(object):
    __slots__ = ["joint_curPos", "joint_curVel", "joint_curCurrent", "stats", "shoulder_pos", "elbow_pos", "hand_pos"]

    def __init__(self):
        self.joint_curPos = [ 0.0 for dim0 in range(14) ]
        self.joint_curVel = [ 0.0 for dim0 in range(14) ]
        self.joint_curCurrent = [ 0.0 for dim0 in range(14) ]
        self.stats = [ 0.0 for dim0 in range(14) ]
        self.shoulder_pos = [ 0.0 for dim0 in range(12) ]
        self.elbow_pos = [ 0.0 for dim0 in range(12) ]
        self.hand_pos = [ 0.0 for dim0 in range(12) ]

    def encode(self):
        buf = BytesIO()
        buf.write(arm_control_data_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>14f', *self.joint_curPos[:14]))
        buf.write(struct.pack('>14f', *self.joint_curVel[:14]))
        buf.write(struct.pack('>14f', *self.joint_curCurrent[:14]))
        buf.write(struct.pack('>14f', *self.stats[:14]))
        buf.write(struct.pack('>12f', *self.shoulder_pos[:12]))
        buf.write(struct.pack('>12f', *self.elbow_pos[:12]))
        buf.write(struct.pack('>12f', *self.hand_pos[:12]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != arm_control_data_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return arm_control_data_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = arm_control_data_lcmt()
        self.joint_curPos = struct.unpack('>14f', buf.read(56))
        self.joint_curVel = struct.unpack('>14f', buf.read(56))
        self.joint_curCurrent = struct.unpack('>14f', buf.read(56))
        self.stats = struct.unpack('>14f', buf.read(56))
        self.shoulder_pos = struct.unpack('>12f', buf.read(48))
        self.elbow_pos = struct.unpack('>12f', buf.read(48))
        self.hand_pos = struct.unpack('>12f', buf.read(48))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if arm_control_data_lcmt in parents: return 0
        tmphash = (0xc96c437beb204d8b) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if arm_control_data_lcmt._packed_fingerprint is None:
            arm_control_data_lcmt._packed_fingerprint = struct.pack(">Q", arm_control_data_lcmt._get_hash_recursive([]))
        return arm_control_data_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

