"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class hand_debug_data_lcmt(object):
    __slots__ = ["joint_error_code", "joint_status", "joint_curPos", "joint_force", "joint_current"]

    def __init__(self):
        self.joint_error_code = [ 0 for dim0 in range(12) ]
        self.joint_status = [ 0 for dim0 in range(12) ]
        self.joint_curPos = [ 0.0 for dim0 in range(12) ]
        self.joint_force = [ 0.0 for dim0 in range(12) ]
        self.joint_current = [ 0.0 for dim0 in range(12) ]

    def encode(self):
        buf = BytesIO()
        buf.write(hand_debug_data_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>12b', *self.joint_error_code[:12]))
        buf.write(struct.pack('>12b', *self.joint_status[:12]))
        buf.write(struct.pack('>12f', *self.joint_curPos[:12]))
        buf.write(struct.pack('>12f', *self.joint_force[:12]))
        buf.write(struct.pack('>12f', *self.joint_current[:12]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != hand_debug_data_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return hand_debug_data_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = hand_debug_data_lcmt()
        self.joint_error_code = struct.unpack('>12b', buf.read(12))
        self.joint_status = struct.unpack('>12b', buf.read(12))
        self.joint_curPos = struct.unpack('>12f', buf.read(48))
        self.joint_force = struct.unpack('>12f', buf.read(48))
        self.joint_current = struct.unpack('>12f', buf.read(48))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if hand_debug_data_lcmt in parents: return 0
        tmphash = (0x355600c11bc3caa9) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if hand_debug_data_lcmt._packed_fingerprint is None:
            hand_debug_data_lcmt._packed_fingerprint = struct.pack(">Q", hand_debug_data_lcmt._get_hash_recursive([]))
        return hand_debug_data_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

