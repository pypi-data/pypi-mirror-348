"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class ecat_p3_upperbody_cmd_lcmt(object):
    __slots__ = ["ctrlWord_1to5", "tarPosH_1to5", "tarPosL_1to5", "tarVel_1to5", "tarCur_1to5", "tarTor_1to5", "res1_1to5", "res2_1to5", "res3_1to5", "res4_1to5", "ctrlWordMotor_6to7", "tarPos1H_6to7", "tarPos1L_6to7", "tarPos2H_6to7", "tarPos2L_6to7", "tarVel1_6to7", "tarVel2_6to7", "tarCur1_6to7", "tarCur2_6to7", "tarTor1_6to7", "tarTor2_6to7", "res1_6to7", "res2_6to7", "res3_6to7", "res4_6to7", "res5_6to7", "res6_6to7", "ctrlWord_hand", "tar1_hand", "tar2_hand", "tar3_hand", "tar4_hand", "tar5_hand", "tar6_hand", "tar7_hand", "mc_arm_tarPos", "mc_arm_tarVel", "mc_arm_tarTor", "original_arm_tarPos", "original_arm_tarVel", "original_arm_tarTor", "original_hand_tarPos"]

    def __init__(self):
        self.ctrlWord_1to5 = [ 0 for dim0 in range(10) ]
        self.tarPosH_1to5 = [ 0 for dim0 in range(10) ]
        self.tarPosL_1to5 = [ 0 for dim0 in range(10) ]
        self.tarVel_1to5 = [ 0 for dim0 in range(10) ]
        self.tarCur_1to5 = [ 0 for dim0 in range(10) ]
        self.tarTor_1to5 = [ 0 for dim0 in range(10) ]
        self.res1_1to5 = [ 0 for dim0 in range(10) ]
        self.res2_1to5 = [ 0 for dim0 in range(10) ]
        self.res3_1to5 = [ 0 for dim0 in range(10) ]
        self.res4_1to5 = [ 0 for dim0 in range(10) ]
        self.ctrlWordMotor_6to7 = [ 0 for dim0 in range(2) ]
        self.tarPos1H_6to7 = [ 0 for dim0 in range(2) ]
        self.tarPos1L_6to7 = [ 0 for dim0 in range(2) ]
        self.tarPos2H_6to7 = [ 0 for dim0 in range(2) ]
        self.tarPos2L_6to7 = [ 0 for dim0 in range(2) ]
        self.tarVel1_6to7 = [ 0 for dim0 in range(2) ]
        self.tarVel2_6to7 = [ 0 for dim0 in range(2) ]
        self.tarCur1_6to7 = [ 0 for dim0 in range(2) ]
        self.tarCur2_6to7 = [ 0 for dim0 in range(2) ]
        self.tarTor1_6to7 = [ 0 for dim0 in range(2) ]
        self.tarTor2_6to7 = [ 0 for dim0 in range(2) ]
        self.res1_6to7 = [ 0 for dim0 in range(2) ]
        self.res2_6to7 = [ 0 for dim0 in range(2) ]
        self.res3_6to7 = [ 0 for dim0 in range(2) ]
        self.res4_6to7 = [ 0 for dim0 in range(2) ]
        self.res5_6to7 = [ 0 for dim0 in range(2) ]
        self.res6_6to7 = [ 0 for dim0 in range(2) ]
        self.ctrlWord_hand = [ 0 for dim0 in range(2) ]
        self.tar1_hand = [ 0 for dim0 in range(2) ]
        self.tar2_hand = [ 0 for dim0 in range(2) ]
        self.tar3_hand = [ 0 for dim0 in range(2) ]
        self.tar4_hand = [ 0 for dim0 in range(2) ]
        self.tar5_hand = [ 0 for dim0 in range(2) ]
        self.tar6_hand = [ 0 for dim0 in range(2) ]
        self.tar7_hand = [ 0 for dim0 in range(2) ]
        self.mc_arm_tarPos = [ 0.0 for dim0 in range(14) ]
        self.mc_arm_tarVel = [ 0.0 for dim0 in range(14) ]
        self.mc_arm_tarTor = [ 0.0 for dim0 in range(14) ]
        self.original_arm_tarPos = [ 0.0 for dim0 in range(14) ]
        self.original_arm_tarVel = [ 0.0 for dim0 in range(14) ]
        self.original_arm_tarTor = [ 0.0 for dim0 in range(14) ]
        self.original_hand_tarPos = [ 0.0 for dim0 in range(12) ]

    def encode(self):
        buf = BytesIO()
        buf.write(ecat_p3_upperbody_cmd_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>10h', *self.ctrlWord_1to5[:10]))
        buf.write(struct.pack('>10h', *self.tarPosH_1to5[:10]))
        buf.write(struct.pack('>10h', *self.tarPosL_1to5[:10]))
        buf.write(struct.pack('>10h', *self.tarVel_1to5[:10]))
        buf.write(struct.pack('>10h', *self.tarCur_1to5[:10]))
        buf.write(struct.pack('>10h', *self.tarTor_1to5[:10]))
        buf.write(struct.pack('>10h', *self.res1_1to5[:10]))
        buf.write(struct.pack('>10h', *self.res2_1to5[:10]))
        buf.write(struct.pack('>10h', *self.res3_1to5[:10]))
        buf.write(struct.pack('>10h', *self.res4_1to5[:10]))
        buf.write(struct.pack('>2h', *self.ctrlWordMotor_6to7[:2]))
        buf.write(struct.pack('>2h', *self.tarPos1H_6to7[:2]))
        buf.write(struct.pack('>2h', *self.tarPos1L_6to7[:2]))
        buf.write(struct.pack('>2h', *self.tarPos2H_6to7[:2]))
        buf.write(struct.pack('>2h', *self.tarPos2L_6to7[:2]))
        buf.write(struct.pack('>2h', *self.tarVel1_6to7[:2]))
        buf.write(struct.pack('>2h', *self.tarVel2_6to7[:2]))
        buf.write(struct.pack('>2h', *self.tarCur1_6to7[:2]))
        buf.write(struct.pack('>2h', *self.tarCur2_6to7[:2]))
        buf.write(struct.pack('>2h', *self.tarTor1_6to7[:2]))
        buf.write(struct.pack('>2h', *self.tarTor2_6to7[:2]))
        buf.write(struct.pack('>2h', *self.res1_6to7[:2]))
        buf.write(struct.pack('>2h', *self.res2_6to7[:2]))
        buf.write(struct.pack('>2h', *self.res3_6to7[:2]))
        buf.write(struct.pack('>2h', *self.res4_6to7[:2]))
        buf.write(struct.pack('>2h', *self.res5_6to7[:2]))
        buf.write(struct.pack('>2h', *self.res6_6to7[:2]))
        buf.write(struct.pack('>2h', *self.ctrlWord_hand[:2]))
        buf.write(struct.pack('>2h', *self.tar1_hand[:2]))
        buf.write(struct.pack('>2h', *self.tar2_hand[:2]))
        buf.write(struct.pack('>2h', *self.tar3_hand[:2]))
        buf.write(struct.pack('>2h', *self.tar4_hand[:2]))
        buf.write(struct.pack('>2h', *self.tar5_hand[:2]))
        buf.write(struct.pack('>2h', *self.tar6_hand[:2]))
        buf.write(struct.pack('>2h', *self.tar7_hand[:2]))
        buf.write(struct.pack('>14f', *self.mc_arm_tarPos[:14]))
        buf.write(struct.pack('>14f', *self.mc_arm_tarVel[:14]))
        buf.write(struct.pack('>14f', *self.mc_arm_tarTor[:14]))
        buf.write(struct.pack('>14f', *self.original_arm_tarPos[:14]))
        buf.write(struct.pack('>14f', *self.original_arm_tarVel[:14]))
        buf.write(struct.pack('>14f', *self.original_arm_tarTor[:14]))
        buf.write(struct.pack('>12f', *self.original_hand_tarPos[:12]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ecat_p3_upperbody_cmd_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ecat_p3_upperbody_cmd_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ecat_p3_upperbody_cmd_lcmt()
        self.ctrlWord_1to5 = struct.unpack('>10h', buf.read(20))
        self.tarPosH_1to5 = struct.unpack('>10h', buf.read(20))
        self.tarPosL_1to5 = struct.unpack('>10h', buf.read(20))
        self.tarVel_1to5 = struct.unpack('>10h', buf.read(20))
        self.tarCur_1to5 = struct.unpack('>10h', buf.read(20))
        self.tarTor_1to5 = struct.unpack('>10h', buf.read(20))
        self.res1_1to5 = struct.unpack('>10h', buf.read(20))
        self.res2_1to5 = struct.unpack('>10h', buf.read(20))
        self.res3_1to5 = struct.unpack('>10h', buf.read(20))
        self.res4_1to5 = struct.unpack('>10h', buf.read(20))
        self.ctrlWordMotor_6to7 = struct.unpack('>2h', buf.read(4))
        self.tarPos1H_6to7 = struct.unpack('>2h', buf.read(4))
        self.tarPos1L_6to7 = struct.unpack('>2h', buf.read(4))
        self.tarPos2H_6to7 = struct.unpack('>2h', buf.read(4))
        self.tarPos2L_6to7 = struct.unpack('>2h', buf.read(4))
        self.tarVel1_6to7 = struct.unpack('>2h', buf.read(4))
        self.tarVel2_6to7 = struct.unpack('>2h', buf.read(4))
        self.tarCur1_6to7 = struct.unpack('>2h', buf.read(4))
        self.tarCur2_6to7 = struct.unpack('>2h', buf.read(4))
        self.tarTor1_6to7 = struct.unpack('>2h', buf.read(4))
        self.tarTor2_6to7 = struct.unpack('>2h', buf.read(4))
        self.res1_6to7 = struct.unpack('>2h', buf.read(4))
        self.res2_6to7 = struct.unpack('>2h', buf.read(4))
        self.res3_6to7 = struct.unpack('>2h', buf.read(4))
        self.res4_6to7 = struct.unpack('>2h', buf.read(4))
        self.res5_6to7 = struct.unpack('>2h', buf.read(4))
        self.res6_6to7 = struct.unpack('>2h', buf.read(4))
        self.ctrlWord_hand = struct.unpack('>2h', buf.read(4))
        self.tar1_hand = struct.unpack('>2h', buf.read(4))
        self.tar2_hand = struct.unpack('>2h', buf.read(4))
        self.tar3_hand = struct.unpack('>2h', buf.read(4))
        self.tar4_hand = struct.unpack('>2h', buf.read(4))
        self.tar5_hand = struct.unpack('>2h', buf.read(4))
        self.tar6_hand = struct.unpack('>2h', buf.read(4))
        self.tar7_hand = struct.unpack('>2h', buf.read(4))
        self.mc_arm_tarPos = struct.unpack('>14f', buf.read(56))
        self.mc_arm_tarVel = struct.unpack('>14f', buf.read(56))
        self.mc_arm_tarTor = struct.unpack('>14f', buf.read(56))
        self.original_arm_tarPos = struct.unpack('>14f', buf.read(56))
        self.original_arm_tarVel = struct.unpack('>14f', buf.read(56))
        self.original_arm_tarTor = struct.unpack('>14f', buf.read(56))
        self.original_hand_tarPos = struct.unpack('>12f', buf.read(48))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if ecat_p3_upperbody_cmd_lcmt in parents: return 0
        tmphash = (0x80b297108dc21224) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ecat_p3_upperbody_cmd_lcmt._packed_fingerprint is None:
            ecat_p3_upperbody_cmd_lcmt._packed_fingerprint = struct.pack(">Q", ecat_p3_upperbody_cmd_lcmt._get_hash_recursive([]))
        return ecat_p3_upperbody_cmd_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

