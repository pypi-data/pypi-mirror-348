/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <lcm/lcm_coretypes.h>

#ifndef __ecat_p3_upperbody_data_lcmt_hpp__
#define __ecat_p3_upperbody_data_lcmt_hpp__



class ecat_p3_upperbody_data_lcmt
{
    public:
        int16_t    stat_1to5[10];

        int16_t    curPos1H_1to5[10];

        int16_t    curPos1L_1to5[10];

        int16_t    curPos2H_1to5[10];

        int16_t    curPos2L_1to5[10];

        int16_t    curVel_1to5[10];

        int16_t    curCur_1to5[10];

        int16_t    curTor_1to5[10];

        int16_t    res1_1to5[10];

        int16_t    res2_1to5[10];

        int16_t    res3_1to5[10];

        int16_t    res4_1to5[10];

        int16_t    stat_6to7[2];

        int16_t    curPos1H_6to7[2];

        int16_t    curPos1L_6to7[2];

        int16_t    curPos2H_6to7[2];

        int16_t    curPos2L_6to7[2];

        int16_t    curVel1_6to7[2];

        int16_t    curVel2_6to7[2];

        int16_t    curCur1_6to7[2];

        int16_t    curCur2_6to7[2];

        int16_t    curTor1_6to7[2];

        int16_t    curTor2_6to7[2];

        int16_t    res1_6to7[2];

        int16_t    res2_6to7[2];

        int16_t    res3_6to7[2];

        int16_t    res4_6to7[2];

        int16_t    res5_6to7[2];

        int16_t    res6_6to7[2];

        int16_t    stat_hand[2];

        int16_t    pos1_hand[2];

        int16_t    pos2_hand[2];

        int16_t    pos3_hand[2];

        int16_t    pos4_hand[2];

        int16_t    pos5_hand[2];

        int16_t    pos6_hand[2];

        int16_t    pos7_hand[2];

        int16_t    curTor1_hand[2];

        int16_t    curTor2_hand[2];

        int16_t    curTor3_hand[2];

        int16_t    curTor4_hand[2];

        int16_t    curTor5_hand[2];

        int16_t    curTor6_hand[2];

        int16_t    curTor7_hand[2];

        int16_t    IMU_roll_hand[2];

        int16_t    IMU_pitch_hand[2];

        int16_t    IMU_yaw_hand[2];

        int16_t    IMU_roll_vel_hand[2];

        int16_t    IMU_pitch_vel_hand[2];

        int16_t    IMU_yaw_vel_hand[2];

        int16_t    IMU_roll_acc_hand[2];

        int16_t    IMU_pitch_acc_hand[2];

        int16_t    IMU_yaw_acc_hand[2];

        float      mc_arm_curPos[14];

        float      mc_arm_curVel[14];

        float      mc_arm_curTor[14];

        float      mc_arm_curCur[14];

        float      original_arm_curPos[14];

        float      original_arm_curVel[14];

        float      original_arm_curTor[14];

        float      original_arm_curCur[14];

        float      original_hand_curPos[12];

        float      original_hand_curTor[12];

        double     original_Fx[2];

        double     original_Fy[2];

        double     original_Fz[2];

        double     original_Mx[2];

        double     original_My[2];

        double     original_Mz[2];

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "ecat_p3_upperbody_data_lcmt"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int ecat_p3_upperbody_data_lcmt::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = (int64_t)getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int ecat_p3_upperbody_data_lcmt::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int ecat_p3_upperbody_data_lcmt::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t ecat_p3_upperbody_data_lcmt::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* ecat_p3_upperbody_data_lcmt::getTypeName()
{
    return "ecat_p3_upperbody_data_lcmt";
}

int ecat_p3_upperbody_data_lcmt::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->stat_1to5[0], 10);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->curPos1H_1to5[0], 10);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->curPos1L_1to5[0], 10);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->curPos2H_1to5[0], 10);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->curPos2L_1to5[0], 10);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->curVel_1to5[0], 10);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->curCur_1to5[0], 10);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->curTor_1to5[0], 10);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->res1_1to5[0], 10);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->res2_1to5[0], 10);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->res3_1to5[0], 10);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->res4_1to5[0], 10);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->stat_6to7[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->curPos1H_6to7[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->curPos1L_6to7[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->curPos2H_6to7[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->curPos2L_6to7[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->curVel1_6to7[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->curVel2_6to7[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->curCur1_6to7[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->curCur2_6to7[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->curTor1_6to7[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->curTor2_6to7[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->res1_6to7[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->res2_6to7[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->res3_6to7[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->res4_6to7[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->res5_6to7[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->res6_6to7[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->stat_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->pos1_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->pos2_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->pos3_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->pos4_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->pos5_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->pos6_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->pos7_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->curTor1_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->curTor2_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->curTor3_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->curTor4_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->curTor5_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->curTor6_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->curTor7_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->IMU_roll_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->IMU_pitch_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->IMU_yaw_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->IMU_roll_vel_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->IMU_pitch_vel_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->IMU_yaw_vel_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->IMU_roll_acc_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->IMU_pitch_acc_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->IMU_yaw_acc_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->mc_arm_curPos[0], 14);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->mc_arm_curVel[0], 14);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->mc_arm_curTor[0], 14);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->mc_arm_curCur[0], 14);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->original_arm_curPos[0], 14);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->original_arm_curVel[0], 14);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->original_arm_curTor[0], 14);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->original_arm_curCur[0], 14);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->original_hand_curPos[0], 12);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->original_hand_curTor[0], 12);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->original_Fx[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->original_Fy[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->original_Fz[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->original_Mx[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->original_My[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->original_Mz[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int ecat_p3_upperbody_data_lcmt::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->stat_1to5[0], 10);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->curPos1H_1to5[0], 10);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->curPos1L_1to5[0], 10);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->curPos2H_1to5[0], 10);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->curPos2L_1to5[0], 10);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->curVel_1to5[0], 10);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->curCur_1to5[0], 10);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->curTor_1to5[0], 10);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->res1_1to5[0], 10);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->res2_1to5[0], 10);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->res3_1to5[0], 10);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->res4_1to5[0], 10);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->stat_6to7[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->curPos1H_6to7[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->curPos1L_6to7[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->curPos2H_6to7[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->curPos2L_6to7[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->curVel1_6to7[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->curVel2_6to7[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->curCur1_6to7[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->curCur2_6to7[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->curTor1_6to7[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->curTor2_6to7[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->res1_6to7[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->res2_6to7[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->res3_6to7[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->res4_6to7[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->res5_6to7[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->res6_6to7[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->stat_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->pos1_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->pos2_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->pos3_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->pos4_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->pos5_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->pos6_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->pos7_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->curTor1_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->curTor2_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->curTor3_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->curTor4_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->curTor5_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->curTor6_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->curTor7_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->IMU_roll_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->IMU_pitch_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->IMU_yaw_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->IMU_roll_vel_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->IMU_pitch_vel_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->IMU_yaw_vel_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->IMU_roll_acc_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->IMU_pitch_acc_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->IMU_yaw_acc_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->mc_arm_curPos[0], 14);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->mc_arm_curVel[0], 14);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->mc_arm_curTor[0], 14);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->mc_arm_curCur[0], 14);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->original_arm_curPos[0], 14);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->original_arm_curVel[0], 14);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->original_arm_curTor[0], 14);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->original_arm_curCur[0], 14);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->original_hand_curPos[0], 12);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->original_hand_curTor[0], 12);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->original_Fx[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->original_Fy[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->original_Fz[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->original_Mx[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->original_My[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->original_Mz[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int ecat_p3_upperbody_data_lcmt::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int16_t_encoded_array_size(NULL, 10);
    enc_size += __int16_t_encoded_array_size(NULL, 10);
    enc_size += __int16_t_encoded_array_size(NULL, 10);
    enc_size += __int16_t_encoded_array_size(NULL, 10);
    enc_size += __int16_t_encoded_array_size(NULL, 10);
    enc_size += __int16_t_encoded_array_size(NULL, 10);
    enc_size += __int16_t_encoded_array_size(NULL, 10);
    enc_size += __int16_t_encoded_array_size(NULL, 10);
    enc_size += __int16_t_encoded_array_size(NULL, 10);
    enc_size += __int16_t_encoded_array_size(NULL, 10);
    enc_size += __int16_t_encoded_array_size(NULL, 10);
    enc_size += __int16_t_encoded_array_size(NULL, 10);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __float_encoded_array_size(NULL, 14);
    enc_size += __float_encoded_array_size(NULL, 14);
    enc_size += __float_encoded_array_size(NULL, 14);
    enc_size += __float_encoded_array_size(NULL, 14);
    enc_size += __float_encoded_array_size(NULL, 14);
    enc_size += __float_encoded_array_size(NULL, 14);
    enc_size += __float_encoded_array_size(NULL, 14);
    enc_size += __float_encoded_array_size(NULL, 14);
    enc_size += __float_encoded_array_size(NULL, 12);
    enc_size += __float_encoded_array_size(NULL, 12);
    enc_size += __double_encoded_array_size(NULL, 2);
    enc_size += __double_encoded_array_size(NULL, 2);
    enc_size += __double_encoded_array_size(NULL, 2);
    enc_size += __double_encoded_array_size(NULL, 2);
    enc_size += __double_encoded_array_size(NULL, 2);
    enc_size += __double_encoded_array_size(NULL, 2);
    return enc_size;
}

uint64_t ecat_p3_upperbody_data_lcmt::_computeHash(const __lcm_hash_ptr *)
{
    uint64_t hash = 0xbd02ec69c70f6519LL;
    return (hash<<1) + ((hash>>63)&1);
}

#endif
