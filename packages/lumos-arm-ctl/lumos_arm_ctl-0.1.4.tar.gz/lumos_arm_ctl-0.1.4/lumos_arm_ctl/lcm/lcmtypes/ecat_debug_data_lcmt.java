/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class ecat_debug_data_lcmt implements lcm.lcm.LCMEncodable
{
    public short stat[];
    public short curPos1H[];
    public short curPos1L[];
    public short curPos2H[];
    public short curPos2L[];
    public short curVel[];
    public short curCur[];
    public short curTor[];
    public short res1[];
    public short res2[];
    public float mc_curPos[];
    public float mc_curVel[];
    public float mc_curCur[];
    public float mc_curTor[];
    public float original_curPos[];
    public float original_curVel[];
    public float original_curCur[];
    public float original_curTor[];
    public float curLssPos[];
    public float curLssTorque[];
    public float multi_cycle_num[];
 
    public ecat_debug_data_lcmt()
    {
        stat = new short[12];
        curPos1H = new short[12];
        curPos1L = new short[12];
        curPos2H = new short[12];
        curPos2L = new short[12];
        curVel = new short[12];
        curCur = new short[12];
        curTor = new short[12];
        res1 = new short[12];
        res2 = new short[12];
        mc_curPos = new float[12];
        mc_curVel = new float[12];
        mc_curCur = new float[12];
        mc_curTor = new float[12];
        original_curPos = new float[12];
        original_curVel = new float[12];
        original_curCur = new float[12];
        original_curTor = new float[12];
        curLssPos = new float[12];
        curLssTorque = new float[12];
        multi_cycle_num = new float[12];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x1fb0b4cdae6429eeL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.ecat_debug_data_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.ecat_debug_data_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 12; a++) {
            outs.writeShort(this.stat[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeShort(this.curPos1H[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeShort(this.curPos1L[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeShort(this.curPos2H[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeShort(this.curPos2L[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeShort(this.curVel[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeShort(this.curCur[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeShort(this.curTor[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeShort(this.res1[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeShort(this.res2[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.mc_curPos[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.mc_curVel[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.mc_curCur[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.mc_curTor[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.original_curPos[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.original_curVel[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.original_curCur[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.original_curTor[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.curLssPos[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.curLssTorque[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.multi_cycle_num[a]); 
        }
 
    }
 
    public ecat_debug_data_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public ecat_debug_data_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.ecat_debug_data_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.ecat_debug_data_lcmt o = new lcmtypes.ecat_debug_data_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.stat = new short[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.stat[a] = ins.readShort();
        }
 
        this.curPos1H = new short[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.curPos1H[a] = ins.readShort();
        }
 
        this.curPos1L = new short[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.curPos1L[a] = ins.readShort();
        }
 
        this.curPos2H = new short[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.curPos2H[a] = ins.readShort();
        }
 
        this.curPos2L = new short[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.curPos2L[a] = ins.readShort();
        }
 
        this.curVel = new short[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.curVel[a] = ins.readShort();
        }
 
        this.curCur = new short[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.curCur[a] = ins.readShort();
        }
 
        this.curTor = new short[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.curTor[a] = ins.readShort();
        }
 
        this.res1 = new short[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.res1[a] = ins.readShort();
        }
 
        this.res2 = new short[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.res2[a] = ins.readShort();
        }
 
        this.mc_curPos = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.mc_curPos[a] = ins.readFloat();
        }
 
        this.mc_curVel = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.mc_curVel[a] = ins.readFloat();
        }
 
        this.mc_curCur = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.mc_curCur[a] = ins.readFloat();
        }
 
        this.mc_curTor = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.mc_curTor[a] = ins.readFloat();
        }
 
        this.original_curPos = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.original_curPos[a] = ins.readFloat();
        }
 
        this.original_curVel = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.original_curVel[a] = ins.readFloat();
        }
 
        this.original_curCur = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.original_curCur[a] = ins.readFloat();
        }
 
        this.original_curTor = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.original_curTor[a] = ins.readFloat();
        }
 
        this.curLssPos = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.curLssPos[a] = ins.readFloat();
        }
 
        this.curLssTorque = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.curLssTorque[a] = ins.readFloat();
        }
 
        this.multi_cycle_num = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.multi_cycle_num[a] = ins.readFloat();
        }
 
    }
 
    public lcmtypes.ecat_debug_data_lcmt copy()
    {
        lcmtypes.ecat_debug_data_lcmt outobj = new lcmtypes.ecat_debug_data_lcmt();
        outobj.stat = new short[(int) 12];
        System.arraycopy(this.stat, 0, outobj.stat, 0, 12); 
        outobj.curPos1H = new short[(int) 12];
        System.arraycopy(this.curPos1H, 0, outobj.curPos1H, 0, 12); 
        outobj.curPos1L = new short[(int) 12];
        System.arraycopy(this.curPos1L, 0, outobj.curPos1L, 0, 12); 
        outobj.curPos2H = new short[(int) 12];
        System.arraycopy(this.curPos2H, 0, outobj.curPos2H, 0, 12); 
        outobj.curPos2L = new short[(int) 12];
        System.arraycopy(this.curPos2L, 0, outobj.curPos2L, 0, 12); 
        outobj.curVel = new short[(int) 12];
        System.arraycopy(this.curVel, 0, outobj.curVel, 0, 12); 
        outobj.curCur = new short[(int) 12];
        System.arraycopy(this.curCur, 0, outobj.curCur, 0, 12); 
        outobj.curTor = new short[(int) 12];
        System.arraycopy(this.curTor, 0, outobj.curTor, 0, 12); 
        outobj.res1 = new short[(int) 12];
        System.arraycopy(this.res1, 0, outobj.res1, 0, 12); 
        outobj.res2 = new short[(int) 12];
        System.arraycopy(this.res2, 0, outobj.res2, 0, 12); 
        outobj.mc_curPos = new float[(int) 12];
        System.arraycopy(this.mc_curPos, 0, outobj.mc_curPos, 0, 12); 
        outobj.mc_curVel = new float[(int) 12];
        System.arraycopy(this.mc_curVel, 0, outobj.mc_curVel, 0, 12); 
        outobj.mc_curCur = new float[(int) 12];
        System.arraycopy(this.mc_curCur, 0, outobj.mc_curCur, 0, 12); 
        outobj.mc_curTor = new float[(int) 12];
        System.arraycopy(this.mc_curTor, 0, outobj.mc_curTor, 0, 12); 
        outobj.original_curPos = new float[(int) 12];
        System.arraycopy(this.original_curPos, 0, outobj.original_curPos, 0, 12); 
        outobj.original_curVel = new float[(int) 12];
        System.arraycopy(this.original_curVel, 0, outobj.original_curVel, 0, 12); 
        outobj.original_curCur = new float[(int) 12];
        System.arraycopy(this.original_curCur, 0, outobj.original_curCur, 0, 12); 
        outobj.original_curTor = new float[(int) 12];
        System.arraycopy(this.original_curTor, 0, outobj.original_curTor, 0, 12); 
        outobj.curLssPos = new float[(int) 12];
        System.arraycopy(this.curLssPos, 0, outobj.curLssPos, 0, 12); 
        outobj.curLssTorque = new float[(int) 12];
        System.arraycopy(this.curLssTorque, 0, outobj.curLssTorque, 0, 12); 
        outobj.multi_cycle_num = new float[(int) 12];
        System.arraycopy(this.multi_cycle_num, 0, outobj.multi_cycle_num, 0, 12); 
        return outobj;
    }
 
}

