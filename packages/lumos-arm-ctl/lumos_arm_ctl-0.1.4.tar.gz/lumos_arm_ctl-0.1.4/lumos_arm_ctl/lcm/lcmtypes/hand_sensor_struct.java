/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class hand_sensor_struct implements lcm.lcm.LCMEncodable
{
    public int isUsed[];
    public byte curStatusVec[];
    public byte curErrCodeVec[];
    public float curJointPosVec[];
    public float curJointSpeedVec[];
    public float curForceVec[];
    public int current_status;
    public int current_err_code;
 
    public hand_sensor_struct()
    {
        isUsed = new int[12];
        curStatusVec = new byte[12];
        curErrCodeVec = new byte[12];
        curJointPosVec = new float[12];
        curJointSpeedVec = new float[12];
        curForceVec = new float[12];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x85b29e9ff4c1b70fL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.hand_sensor_struct.class))
            return 0L;
 
        classes.add(lcmtypes.hand_sensor_struct.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 12; a++) {
            outs.writeInt(this.isUsed[a]); 
        }
 
        outs.write(this.curStatusVec, 0, 12);
 
        outs.write(this.curErrCodeVec, 0, 12);
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.curJointPosVec[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.curJointSpeedVec[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.curForceVec[a]); 
        }
 
        outs.writeInt(this.current_status); 
 
        outs.writeInt(this.current_err_code); 
 
    }
 
    public hand_sensor_struct(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public hand_sensor_struct(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.hand_sensor_struct _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.hand_sensor_struct o = new lcmtypes.hand_sensor_struct();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.isUsed = new int[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.isUsed[a] = ins.readInt();
        }
 
        this.curStatusVec = new byte[(int) 12];
        ins.readFully(this.curStatusVec, 0, 12); 
        this.curErrCodeVec = new byte[(int) 12];
        ins.readFully(this.curErrCodeVec, 0, 12); 
        this.curJointPosVec = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.curJointPosVec[a] = ins.readFloat();
        }
 
        this.curJointSpeedVec = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.curJointSpeedVec[a] = ins.readFloat();
        }
 
        this.curForceVec = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.curForceVec[a] = ins.readFloat();
        }
 
        this.current_status = ins.readInt();
 
        this.current_err_code = ins.readInt();
 
    }
 
    public lcmtypes.hand_sensor_struct copy()
    {
        lcmtypes.hand_sensor_struct outobj = new lcmtypes.hand_sensor_struct();
        outobj.isUsed = new int[(int) 12];
        System.arraycopy(this.isUsed, 0, outobj.isUsed, 0, 12); 
        outobj.curStatusVec = new byte[(int) 12];
        System.arraycopy(this.curStatusVec, 0, outobj.curStatusVec, 0, 12); 
        outobj.curErrCodeVec = new byte[(int) 12];
        System.arraycopy(this.curErrCodeVec, 0, outobj.curErrCodeVec, 0, 12); 
        outobj.curJointPosVec = new float[(int) 12];
        System.arraycopy(this.curJointPosVec, 0, outobj.curJointPosVec, 0, 12); 
        outobj.curJointSpeedVec = new float[(int) 12];
        System.arraycopy(this.curJointSpeedVec, 0, outobj.curJointSpeedVec, 0, 12); 
        outobj.curForceVec = new float[(int) 12];
        System.arraycopy(this.curForceVec, 0, outobj.curForceVec, 0, 12); 
        outobj.current_status = this.current_status;
 
        outobj.current_err_code = this.current_err_code;
 
        return outobj;
    }
 
}

