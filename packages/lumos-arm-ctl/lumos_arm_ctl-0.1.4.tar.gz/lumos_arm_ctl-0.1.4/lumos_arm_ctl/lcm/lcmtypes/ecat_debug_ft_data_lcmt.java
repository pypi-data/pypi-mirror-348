/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class ecat_debug_ft_data_lcmt implements lcm.lcm.LCMEncodable
{
    public short stat[];
    public int fx[];
    public int fy[];
    public int fz[];
    public int mx[];
    public int my[];
    public int mz[];
    public short res1[];
    public short res2[];
    public short res3[];
    public short res4[];
    public short res5[];
    public double original_Fx[];
    public double original_Fy[];
    public double original_Fz[];
    public double original_Mx[];
    public double original_My[];
    public double original_Mz[];
 
    public ecat_debug_ft_data_lcmt()
    {
        stat = new short[2];
        fx = new int[2];
        fy = new int[2];
        fz = new int[2];
        mx = new int[2];
        my = new int[2];
        mz = new int[2];
        res1 = new short[2];
        res2 = new short[2];
        res3 = new short[2];
        res4 = new short[2];
        res5 = new short[2];
        original_Fx = new double[2];
        original_Fy = new double[2];
        original_Fz = new double[2];
        original_Mx = new double[2];
        original_My = new double[2];
        original_Mz = new double[2];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xc84355c93a9e7fc8L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.ecat_debug_ft_data_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.ecat_debug_ft_data_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 2; a++) {
            outs.writeShort(this.stat[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeInt(this.fx[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeInt(this.fy[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeInt(this.fz[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeInt(this.mx[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeInt(this.my[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeInt(this.mz[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeShort(this.res1[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeShort(this.res2[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeShort(this.res3[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeShort(this.res4[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeShort(this.res5[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeDouble(this.original_Fx[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeDouble(this.original_Fy[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeDouble(this.original_Fz[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeDouble(this.original_Mx[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeDouble(this.original_My[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeDouble(this.original_Mz[a]); 
        }
 
    }
 
    public ecat_debug_ft_data_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public ecat_debug_ft_data_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.ecat_debug_ft_data_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.ecat_debug_ft_data_lcmt o = new lcmtypes.ecat_debug_ft_data_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.stat = new short[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.stat[a] = ins.readShort();
        }
 
        this.fx = new int[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.fx[a] = ins.readInt();
        }
 
        this.fy = new int[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.fy[a] = ins.readInt();
        }
 
        this.fz = new int[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.fz[a] = ins.readInt();
        }
 
        this.mx = new int[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.mx[a] = ins.readInt();
        }
 
        this.my = new int[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.my[a] = ins.readInt();
        }
 
        this.mz = new int[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.mz[a] = ins.readInt();
        }
 
        this.res1 = new short[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.res1[a] = ins.readShort();
        }
 
        this.res2 = new short[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.res2[a] = ins.readShort();
        }
 
        this.res3 = new short[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.res3[a] = ins.readShort();
        }
 
        this.res4 = new short[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.res4[a] = ins.readShort();
        }
 
        this.res5 = new short[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.res5[a] = ins.readShort();
        }
 
        this.original_Fx = new double[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.original_Fx[a] = ins.readDouble();
        }
 
        this.original_Fy = new double[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.original_Fy[a] = ins.readDouble();
        }
 
        this.original_Fz = new double[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.original_Fz[a] = ins.readDouble();
        }
 
        this.original_Mx = new double[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.original_Mx[a] = ins.readDouble();
        }
 
        this.original_My = new double[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.original_My[a] = ins.readDouble();
        }
 
        this.original_Mz = new double[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.original_Mz[a] = ins.readDouble();
        }
 
    }
 
    public lcmtypes.ecat_debug_ft_data_lcmt copy()
    {
        lcmtypes.ecat_debug_ft_data_lcmt outobj = new lcmtypes.ecat_debug_ft_data_lcmt();
        outobj.stat = new short[(int) 2];
        System.arraycopy(this.stat, 0, outobj.stat, 0, 2); 
        outobj.fx = new int[(int) 2];
        System.arraycopy(this.fx, 0, outobj.fx, 0, 2); 
        outobj.fy = new int[(int) 2];
        System.arraycopy(this.fy, 0, outobj.fy, 0, 2); 
        outobj.fz = new int[(int) 2];
        System.arraycopy(this.fz, 0, outobj.fz, 0, 2); 
        outobj.mx = new int[(int) 2];
        System.arraycopy(this.mx, 0, outobj.mx, 0, 2); 
        outobj.my = new int[(int) 2];
        System.arraycopy(this.my, 0, outobj.my, 0, 2); 
        outobj.mz = new int[(int) 2];
        System.arraycopy(this.mz, 0, outobj.mz, 0, 2); 
        outobj.res1 = new short[(int) 2];
        System.arraycopy(this.res1, 0, outobj.res1, 0, 2); 
        outobj.res2 = new short[(int) 2];
        System.arraycopy(this.res2, 0, outobj.res2, 0, 2); 
        outobj.res3 = new short[(int) 2];
        System.arraycopy(this.res3, 0, outobj.res3, 0, 2); 
        outobj.res4 = new short[(int) 2];
        System.arraycopy(this.res4, 0, outobj.res4, 0, 2); 
        outobj.res5 = new short[(int) 2];
        System.arraycopy(this.res5, 0, outobj.res5, 0, 2); 
        outobj.original_Fx = new double[(int) 2];
        System.arraycopy(this.original_Fx, 0, outobj.original_Fx, 0, 2); 
        outobj.original_Fy = new double[(int) 2];
        System.arraycopy(this.original_Fy, 0, outobj.original_Fy, 0, 2); 
        outobj.original_Fz = new double[(int) 2];
        System.arraycopy(this.original_Fz, 0, outobj.original_Fz, 0, 2); 
        outobj.original_Mx = new double[(int) 2];
        System.arraycopy(this.original_Mx, 0, outobj.original_Mx, 0, 2); 
        outobj.original_My = new double[(int) 2];
        System.arraycopy(this.original_My, 0, outobj.original_My, 0, 2); 
        outobj.original_Mz = new double[(int) 2];
        System.arraycopy(this.original_Mz, 0, outobj.original_Mz, 0, 2); 
        return outobj;
    }
 
}

