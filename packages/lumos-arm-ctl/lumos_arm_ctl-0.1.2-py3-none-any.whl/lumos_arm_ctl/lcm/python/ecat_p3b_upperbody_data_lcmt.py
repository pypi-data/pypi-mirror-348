"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class ecat_p3b_upperbody_data_lcmt(object):
    __slots__ = ["stat", "curPos1H", "curPos1L", "curPos2H", "curPos2L", "curVel", "curCur", "curTor", "res1", "res2", "res3", "res4", "mc_arm_curPos", "mc_arm_curVel", "mc_arm_curTor", "mc_arm_curCur", "mc_arm_curPosH", "mc_arm_curPosL", "original_arm_curPos", "original_arm_curVel", "original_arm_curTor", "original_arm_curCur", "stat_hand", "pos_hand", "curtor_hand"]

    def __init__(self):
        self.stat = [ 0 for dim0 in range(15) ]
        self.curPos1H = [ 0 for dim0 in range(15) ]
        self.curPos1L = [ 0 for dim0 in range(15) ]
        self.curPos2H = [ 0 for dim0 in range(15) ]
        self.curPos2L = [ 0 for dim0 in range(15) ]
        self.curVel = [ 0 for dim0 in range(15) ]
        self.curCur = [ 0 for dim0 in range(15) ]
        self.curTor = [ 0 for dim0 in range(15) ]
        self.res1 = [ 0 for dim0 in range(15) ]
        self.res2 = [ 0 for dim0 in range(15) ]
        self.res3 = [ 0 for dim0 in range(15) ]
        self.res4 = [ 0 for dim0 in range(15) ]
        self.mc_arm_curPos = [ 0.0 for dim0 in range(15) ]
        self.mc_arm_curVel = [ 0.0 for dim0 in range(15) ]
        self.mc_arm_curTor = [ 0.0 for dim0 in range(15) ]
        self.mc_arm_curCur = [ 0.0 for dim0 in range(15) ]
        self.mc_arm_curPosH = [ 0.0 for dim0 in range(15) ]
        self.mc_arm_curPosL = [ 0.0 for dim0 in range(15) ]
        self.original_arm_curPos = [ 0.0 for dim0 in range(15) ]
        self.original_arm_curVel = [ 0.0 for dim0 in range(15) ]
        self.original_arm_curTor = [ 0.0 for dim0 in range(15) ]
        self.original_arm_curCur = [ 0.0 for dim0 in range(15) ]
        self.stat_hand = [ 0 for dim0 in range(2) ]
        self.pos_hand = [ 0 for dim0 in range(14) ]
        self.curtor_hand = [ 0 for dim0 in range(14) ]

    def encode(self):
        buf = BytesIO()
        buf.write(ecat_p3b_upperbody_data_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>15h', *self.stat[:15]))
        buf.write(struct.pack('>15h', *self.curPos1H[:15]))
        buf.write(struct.pack('>15h', *self.curPos1L[:15]))
        buf.write(struct.pack('>15h', *self.curPos2H[:15]))
        buf.write(struct.pack('>15h', *self.curPos2L[:15]))
        buf.write(struct.pack('>15h', *self.curVel[:15]))
        buf.write(struct.pack('>15h', *self.curCur[:15]))
        buf.write(struct.pack('>15h', *self.curTor[:15]))
        buf.write(struct.pack('>15h', *self.res1[:15]))
        buf.write(struct.pack('>15h', *self.res2[:15]))
        buf.write(struct.pack('>15h', *self.res3[:15]))
        buf.write(struct.pack('>15h', *self.res4[:15]))
        buf.write(struct.pack('>15f', *self.mc_arm_curPos[:15]))
        buf.write(struct.pack('>15f', *self.mc_arm_curVel[:15]))
        buf.write(struct.pack('>15f', *self.mc_arm_curTor[:15]))
        buf.write(struct.pack('>15f', *self.mc_arm_curCur[:15]))
        buf.write(struct.pack('>15f', *self.mc_arm_curPosH[:15]))
        buf.write(struct.pack('>15f', *self.mc_arm_curPosL[:15]))
        buf.write(struct.pack('>15f', *self.original_arm_curPos[:15]))
        buf.write(struct.pack('>15f', *self.original_arm_curVel[:15]))
        buf.write(struct.pack('>15f', *self.original_arm_curTor[:15]))
        buf.write(struct.pack('>15f', *self.original_arm_curCur[:15]))
        buf.write(struct.pack('>2h', *self.stat_hand[:2]))
        buf.write(struct.pack('>14h', *self.pos_hand[:14]))
        buf.write(struct.pack('>14h', *self.curtor_hand[:14]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ecat_p3b_upperbody_data_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ecat_p3b_upperbody_data_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ecat_p3b_upperbody_data_lcmt()
        self.stat = struct.unpack('>15h', buf.read(30))
        self.curPos1H = struct.unpack('>15h', buf.read(30))
        self.curPos1L = struct.unpack('>15h', buf.read(30))
        self.curPos2H = struct.unpack('>15h', buf.read(30))
        self.curPos2L = struct.unpack('>15h', buf.read(30))
        self.curVel = struct.unpack('>15h', buf.read(30))
        self.curCur = struct.unpack('>15h', buf.read(30))
        self.curTor = struct.unpack('>15h', buf.read(30))
        self.res1 = struct.unpack('>15h', buf.read(30))
        self.res2 = struct.unpack('>15h', buf.read(30))
        self.res3 = struct.unpack('>15h', buf.read(30))
        self.res4 = struct.unpack('>15h', buf.read(30))
        self.mc_arm_curPos = struct.unpack('>15f', buf.read(60))
        self.mc_arm_curVel = struct.unpack('>15f', buf.read(60))
        self.mc_arm_curTor = struct.unpack('>15f', buf.read(60))
        self.mc_arm_curCur = struct.unpack('>15f', buf.read(60))
        self.mc_arm_curPosH = struct.unpack('>15f', buf.read(60))
        self.mc_arm_curPosL = struct.unpack('>15f', buf.read(60))
        self.original_arm_curPos = struct.unpack('>15f', buf.read(60))
        self.original_arm_curVel = struct.unpack('>15f', buf.read(60))
        self.original_arm_curTor = struct.unpack('>15f', buf.read(60))
        self.original_arm_curCur = struct.unpack('>15f', buf.read(60))
        self.stat_hand = struct.unpack('>2h', buf.read(4))
        self.pos_hand = struct.unpack('>14h', buf.read(28))
        self.curtor_hand = struct.unpack('>14h', buf.read(28))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if ecat_p3b_upperbody_data_lcmt in parents: return 0
        tmphash = (0xdb8d1a09f75767bd) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ecat_p3b_upperbody_data_lcmt._packed_fingerprint is None:
            ecat_p3b_upperbody_data_lcmt._packed_fingerprint = struct.pack(">Q", ecat_p3b_upperbody_data_lcmt._get_hash_recursive([]))
        return ecat_p3b_upperbody_data_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

