"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class can_debug_data_lcmt(object):
    __slots__ = ["error_code", "raw_actual_position", "raw_actual_velocity", "raw_actual_current", "motor_curPos", "motor_curVel", "motor_curCurrent"]

    def __init__(self):
        self.error_code = [ 0 for dim0 in range(14) ]
        self.raw_actual_position = [ 0 for dim0 in range(14) ]
        self.raw_actual_velocity = [ 0 for dim0 in range(14) ]
        self.raw_actual_current = [ 0 for dim0 in range(14) ]
        self.motor_curPos = [ 0.0 for dim0 in range(14) ]
        self.motor_curVel = [ 0.0 for dim0 in range(14) ]
        self.motor_curCurrent = [ 0.0 for dim0 in range(14) ]

    def encode(self):
        buf = BytesIO()
        buf.write(can_debug_data_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>14i', *self.error_code[:14]))
        buf.write(struct.pack('>14i', *self.raw_actual_position[:14]))
        buf.write(struct.pack('>14h', *self.raw_actual_velocity[:14]))
        buf.write(struct.pack('>14h', *self.raw_actual_current[:14]))
        buf.write(struct.pack('>14f', *self.motor_curPos[:14]))
        buf.write(struct.pack('>14f', *self.motor_curVel[:14]))
        buf.write(struct.pack('>14f', *self.motor_curCurrent[:14]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != can_debug_data_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return can_debug_data_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = can_debug_data_lcmt()
        self.error_code = struct.unpack('>14i', buf.read(56))
        self.raw_actual_position = struct.unpack('>14i', buf.read(56))
        self.raw_actual_velocity = struct.unpack('>14h', buf.read(28))
        self.raw_actual_current = struct.unpack('>14h', buf.read(28))
        self.motor_curPos = struct.unpack('>14f', buf.read(56))
        self.motor_curVel = struct.unpack('>14f', buf.read(56))
        self.motor_curCurrent = struct.unpack('>14f', buf.read(56))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if can_debug_data_lcmt in parents: return 0
        tmphash = (0x8ff92819340decc5) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if can_debug_data_lcmt._packed_fingerprint is None:
            can_debug_data_lcmt._packed_fingerprint = struct.pack(">Q", can_debug_data_lcmt._get_hash_recursive([]))
        return can_debug_data_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

