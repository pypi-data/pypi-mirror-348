"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class arm_sensor_struct(object):
    __slots__ = ["runModeVec", "curCurrentVec", "curSpeedVec", "curJointPosVec", "curErrCodeVec", "isUsed"]

    def __init__(self):
        self.runModeVec = [ 0 for dim0 in range(14) ]
        self.curCurrentVec = [ 0.0 for dim0 in range(14) ]
        self.curSpeedVec = [ 0.0 for dim0 in range(14) ]
        self.curJointPosVec = [ 0.0 for dim0 in range(14) ]
        self.curErrCodeVec = [ 0 for dim0 in range(14) ]
        self.isUsed = [ 0 for dim0 in range(14) ]

    def encode(self):
        buf = BytesIO()
        buf.write(arm_sensor_struct._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>14i', *self.runModeVec[:14]))
        buf.write(struct.pack('>14f', *self.curCurrentVec[:14]))
        buf.write(struct.pack('>14f', *self.curSpeedVec[:14]))
        buf.write(struct.pack('>14f', *self.curJointPosVec[:14]))
        buf.write(struct.pack('>14i', *self.curErrCodeVec[:14]))
        buf.write(struct.pack('>14i', *self.isUsed[:14]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != arm_sensor_struct._get_packed_fingerprint():
            raise ValueError("Decode error")
        return arm_sensor_struct._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = arm_sensor_struct()
        self.runModeVec = struct.unpack('>14i', buf.read(56))
        self.curCurrentVec = struct.unpack('>14f', buf.read(56))
        self.curSpeedVec = struct.unpack('>14f', buf.read(56))
        self.curJointPosVec = struct.unpack('>14f', buf.read(56))
        self.curErrCodeVec = struct.unpack('>14i', buf.read(56))
        self.isUsed = struct.unpack('>14i', buf.read(56))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if arm_sensor_struct in parents: return 0
        tmphash = (0x22d827812d1966fa) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if arm_sensor_struct._packed_fingerprint is None:
            arm_sensor_struct._packed_fingerprint = struct.pack(">Q", arm_sensor_struct._get_hash_recursive([]))
        return arm_sensor_struct._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

