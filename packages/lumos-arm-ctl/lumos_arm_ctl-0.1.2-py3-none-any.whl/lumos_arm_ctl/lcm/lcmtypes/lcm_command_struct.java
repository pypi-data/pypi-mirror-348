/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class lcm_command_struct implements lcm.lcm.LCMEncodable
{
    public byte robot_fsm;
    public float x_vel_des;
    public float y_vel_des;
    public float yaw_vel_des;
    public float stop;
    public float rpy_des[];
 
    public lcm_command_struct()
    {
        rpy_des = new float[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x8113da7dab9845f3L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.lcm_command_struct.class))
            return 0L;
 
        classes.add(lcmtypes.lcm_command_struct.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeByte(this.robot_fsm); 
 
        outs.writeFloat(this.x_vel_des); 
 
        outs.writeFloat(this.y_vel_des); 
 
        outs.writeFloat(this.yaw_vel_des); 
 
        outs.writeFloat(this.stop); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.rpy_des[a]); 
        }
 
    }
 
    public lcm_command_struct(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public lcm_command_struct(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.lcm_command_struct _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.lcm_command_struct o = new lcmtypes.lcm_command_struct();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.robot_fsm = ins.readByte();
 
        this.x_vel_des = ins.readFloat();
 
        this.y_vel_des = ins.readFloat();
 
        this.yaw_vel_des = ins.readFloat();
 
        this.stop = ins.readFloat();
 
        this.rpy_des = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.rpy_des[a] = ins.readFloat();
        }
 
    }
 
    public lcmtypes.lcm_command_struct copy()
    {
        lcmtypes.lcm_command_struct outobj = new lcmtypes.lcm_command_struct();
        outobj.robot_fsm = this.robot_fsm;
 
        outobj.x_vel_des = this.x_vel_des;
 
        outobj.y_vel_des = this.y_vel_des;
 
        outobj.yaw_vel_des = this.yaw_vel_des;
 
        outobj.stop = this.stop;
 
        outobj.rpy_des = new float[(int) 3];
        System.arraycopy(this.rpy_des, 0, outobj.rpy_des, 0, 3); 
        return outobj;
    }
 
}

