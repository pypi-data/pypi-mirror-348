/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class doll_motor_debug_data_struct implements lcm.lcm.LCMEncodable
{
    public int n_dof;
    public float motor_pos_now[];
    public float motor_vel_now[];
    public float motor_current_now[];
    public float joint_pos_now[];
    public float joint_vel_now[];
    public float joint_current_now[];
 
    public doll_motor_debug_data_struct()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x21b8aa3924e89513L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.doll_motor_debug_data_struct.class))
            return 0L;
 
        classes.add(lcmtypes.doll_motor_debug_data_struct.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.n_dof); 
 
        for (int a = 0; a < this.n_dof; a++) {
            outs.writeFloat(this.motor_pos_now[a]); 
        }
 
        for (int a = 0; a < this.n_dof; a++) {
            outs.writeFloat(this.motor_vel_now[a]); 
        }
 
        for (int a = 0; a < this.n_dof; a++) {
            outs.writeFloat(this.motor_current_now[a]); 
        }
 
        for (int a = 0; a < this.n_dof; a++) {
            outs.writeFloat(this.joint_pos_now[a]); 
        }
 
        for (int a = 0; a < this.n_dof; a++) {
            outs.writeFloat(this.joint_vel_now[a]); 
        }
 
        for (int a = 0; a < this.n_dof; a++) {
            outs.writeFloat(this.joint_current_now[a]); 
        }
 
    }
 
    public doll_motor_debug_data_struct(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public doll_motor_debug_data_struct(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.doll_motor_debug_data_struct _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.doll_motor_debug_data_struct o = new lcmtypes.doll_motor_debug_data_struct();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.n_dof = ins.readInt();
 
        this.motor_pos_now = new float[(int) n_dof];
        for (int a = 0; a < this.n_dof; a++) {
            this.motor_pos_now[a] = ins.readFloat();
        }
 
        this.motor_vel_now = new float[(int) n_dof];
        for (int a = 0; a < this.n_dof; a++) {
            this.motor_vel_now[a] = ins.readFloat();
        }
 
        this.motor_current_now = new float[(int) n_dof];
        for (int a = 0; a < this.n_dof; a++) {
            this.motor_current_now[a] = ins.readFloat();
        }
 
        this.joint_pos_now = new float[(int) n_dof];
        for (int a = 0; a < this.n_dof; a++) {
            this.joint_pos_now[a] = ins.readFloat();
        }
 
        this.joint_vel_now = new float[(int) n_dof];
        for (int a = 0; a < this.n_dof; a++) {
            this.joint_vel_now[a] = ins.readFloat();
        }
 
        this.joint_current_now = new float[(int) n_dof];
        for (int a = 0; a < this.n_dof; a++) {
            this.joint_current_now[a] = ins.readFloat();
        }
 
    }
 
    public lcmtypes.doll_motor_debug_data_struct copy()
    {
        lcmtypes.doll_motor_debug_data_struct outobj = new lcmtypes.doll_motor_debug_data_struct();
        outobj.n_dof = this.n_dof;
 
        outobj.motor_pos_now = new float[(int) n_dof];
        if (this.n_dof > 0)
            System.arraycopy(this.motor_pos_now, 0, outobj.motor_pos_now, 0, this.n_dof); 
        outobj.motor_vel_now = new float[(int) n_dof];
        if (this.n_dof > 0)
            System.arraycopy(this.motor_vel_now, 0, outobj.motor_vel_now, 0, this.n_dof); 
        outobj.motor_current_now = new float[(int) n_dof];
        if (this.n_dof > 0)
            System.arraycopy(this.motor_current_now, 0, outobj.motor_current_now, 0, this.n_dof); 
        outobj.joint_pos_now = new float[(int) n_dof];
        if (this.n_dof > 0)
            System.arraycopy(this.joint_pos_now, 0, outobj.joint_pos_now, 0, this.n_dof); 
        outobj.joint_vel_now = new float[(int) n_dof];
        if (this.n_dof > 0)
            System.arraycopy(this.joint_vel_now, 0, outobj.joint_vel_now, 0, this.n_dof); 
        outobj.joint_current_now = new float[(int) n_dof];
        if (this.n_dof > 0)
            System.arraycopy(this.joint_current_now, 0, outobj.joint_current_now, 0, this.n_dof); 
        return outobj;
    }
 
}

