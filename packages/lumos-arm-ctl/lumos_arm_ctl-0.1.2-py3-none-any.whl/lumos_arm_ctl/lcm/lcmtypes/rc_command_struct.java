/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class rc_command_struct implements lcm.lcm.LCMEncodable
{
    public short SWA;
    public short SWB;
    public short SWC;
    public short SWD;
    public short SWE;
    public short SWF;
    public short SWG;
    public float left_stick_x;
    public float left_stick_y;
    public float right_stick_x;
    public float right_stick_y;
    public float varB;
 
    public rc_command_struct()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xbbd622bb13e6c801L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.rc_command_struct.class))
            return 0L;
 
        classes.add(lcmtypes.rc_command_struct.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeShort(this.SWA); 
 
        outs.writeShort(this.SWB); 
 
        outs.writeShort(this.SWC); 
 
        outs.writeShort(this.SWD); 
 
        outs.writeShort(this.SWE); 
 
        outs.writeShort(this.SWF); 
 
        outs.writeShort(this.SWG); 
 
        outs.writeFloat(this.left_stick_x); 
 
        outs.writeFloat(this.left_stick_y); 
 
        outs.writeFloat(this.right_stick_x); 
 
        outs.writeFloat(this.right_stick_y); 
 
        outs.writeFloat(this.varB); 
 
    }
 
    public rc_command_struct(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public rc_command_struct(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.rc_command_struct _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.rc_command_struct o = new lcmtypes.rc_command_struct();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.SWA = ins.readShort();
 
        this.SWB = ins.readShort();
 
        this.SWC = ins.readShort();
 
        this.SWD = ins.readShort();
 
        this.SWE = ins.readShort();
 
        this.SWF = ins.readShort();
 
        this.SWG = ins.readShort();
 
        this.left_stick_x = ins.readFloat();
 
        this.left_stick_y = ins.readFloat();
 
        this.right_stick_x = ins.readFloat();
 
        this.right_stick_y = ins.readFloat();
 
        this.varB = ins.readFloat();
 
    }
 
    public lcmtypes.rc_command_struct copy()
    {
        lcmtypes.rc_command_struct outobj = new lcmtypes.rc_command_struct();
        outobj.SWA = this.SWA;
 
        outobj.SWB = this.SWB;
 
        outobj.SWC = this.SWC;
 
        outobj.SWD = this.SWD;
 
        outobj.SWE = this.SWE;
 
        outobj.SWF = this.SWF;
 
        outobj.SWG = this.SWG;
 
        outobj.left_stick_x = this.left_stick_x;
 
        outobj.left_stick_y = this.left_stick_y;
 
        outobj.right_stick_x = this.right_stick_x;
 
        outobj.right_stick_y = this.right_stick_y;
 
        outobj.varB = this.varB;
 
        return outobj;
    }
 
}

