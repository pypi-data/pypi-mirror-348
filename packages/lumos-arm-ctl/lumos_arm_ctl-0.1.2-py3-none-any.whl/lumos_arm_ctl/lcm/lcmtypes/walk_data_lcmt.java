/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class walk_data_lcmt implements lcm.lcm.LCMEncodable
{
    public float v[];
    public float swing_state[];
    public float mpc_swing_v_gain[];
    public float pf_rel[];
    public float planed_v[];
    public float other_swing_leg_compensation_v_sum;
    public float other_swing_leg_compensation_r_sum;
 
    public walk_data_lcmt()
    {
        v = new float[2];
        swing_state = new float[2];
        mpc_swing_v_gain = new float[2];
        pf_rel = new float[2];
        planed_v = new float[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x3292e3ee3b1ea653L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.walk_data_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.walk_data_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 2; a++) {
            outs.writeFloat(this.v[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeFloat(this.swing_state[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeFloat(this.mpc_swing_v_gain[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeFloat(this.pf_rel[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.planed_v[a]); 
        }
 
        outs.writeFloat(this.other_swing_leg_compensation_v_sum); 
 
        outs.writeFloat(this.other_swing_leg_compensation_r_sum); 
 
    }
 
    public walk_data_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public walk_data_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.walk_data_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.walk_data_lcmt o = new lcmtypes.walk_data_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.v = new float[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.v[a] = ins.readFloat();
        }
 
        this.swing_state = new float[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.swing_state[a] = ins.readFloat();
        }
 
        this.mpc_swing_v_gain = new float[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.mpc_swing_v_gain[a] = ins.readFloat();
        }
 
        this.pf_rel = new float[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.pf_rel[a] = ins.readFloat();
        }
 
        this.planed_v = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.planed_v[a] = ins.readFloat();
        }
 
        this.other_swing_leg_compensation_v_sum = ins.readFloat();
 
        this.other_swing_leg_compensation_r_sum = ins.readFloat();
 
    }
 
    public lcmtypes.walk_data_lcmt copy()
    {
        lcmtypes.walk_data_lcmt outobj = new lcmtypes.walk_data_lcmt();
        outobj.v = new float[(int) 2];
        System.arraycopy(this.v, 0, outobj.v, 0, 2); 
        outobj.swing_state = new float[(int) 2];
        System.arraycopy(this.swing_state, 0, outobj.swing_state, 0, 2); 
        outobj.mpc_swing_v_gain = new float[(int) 2];
        System.arraycopy(this.mpc_swing_v_gain, 0, outobj.mpc_swing_v_gain, 0, 2); 
        outobj.pf_rel = new float[(int) 2];
        System.arraycopy(this.pf_rel, 0, outobj.pf_rel, 0, 2); 
        outobj.planed_v = new float[(int) 3];
        System.arraycopy(this.planed_v, 0, outobj.planed_v, 0, 3); 
        outobj.other_swing_leg_compensation_v_sum = this.other_swing_leg_compensation_v_sum;
 
        outobj.other_swing_leg_compensation_r_sum = this.other_swing_leg_compensation_r_sum;
 
        return outobj;
    }
 
}

