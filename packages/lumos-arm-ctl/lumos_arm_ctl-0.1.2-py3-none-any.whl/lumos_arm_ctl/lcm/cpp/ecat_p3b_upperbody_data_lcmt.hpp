/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <lcm/lcm_coretypes.h>

#ifndef __ecat_p3b_upperbody_data_lcmt_hpp__
#define __ecat_p3b_upperbody_data_lcmt_hpp__



class ecat_p3b_upperbody_data_lcmt
{
    public:
        int16_t    stat[15];

        int16_t    curPos1H[15];

        int16_t    curPos1L[15];

        int16_t    curPos2H[15];

        int16_t    curPos2L[15];

        int16_t    curVel[15];

        int16_t    curCur[15];

        int16_t    curTor[15];

        int16_t    res1[15];

        int16_t    res2[15];

        int16_t    res3[15];

        int16_t    res4[15];

        float      mc_arm_curPos[15];

        float      mc_arm_curVel[15];

        float      mc_arm_curTor[15];

        float      mc_arm_curCur[15];

        float      mc_arm_curPosH[15];

        float      mc_arm_curPosL[15];

        float      original_arm_curPos[15];

        float      original_arm_curVel[15];

        float      original_arm_curTor[15];

        float      original_arm_curCur[15];

        int16_t    stat_hand[2];

        int16_t    pos_hand[14];

        int16_t    curtor_hand[14];

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "ecat_p3b_upperbody_data_lcmt"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int ecat_p3b_upperbody_data_lcmt::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = (int64_t)getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int ecat_p3b_upperbody_data_lcmt::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int ecat_p3b_upperbody_data_lcmt::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t ecat_p3b_upperbody_data_lcmt::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* ecat_p3b_upperbody_data_lcmt::getTypeName()
{
    return "ecat_p3b_upperbody_data_lcmt";
}

int ecat_p3b_upperbody_data_lcmt::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->stat[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->curPos1H[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->curPos1L[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->curPos2H[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->curPos2L[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->curVel[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->curCur[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->curTor[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->res1[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->res2[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->res3[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->res4[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->mc_arm_curPos[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->mc_arm_curVel[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->mc_arm_curTor[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->mc_arm_curCur[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->mc_arm_curPosH[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->mc_arm_curPosL[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->original_arm_curPos[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->original_arm_curVel[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->original_arm_curTor[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->original_arm_curCur[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->stat_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->pos_hand[0], 14);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->curtor_hand[0], 14);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int ecat_p3b_upperbody_data_lcmt::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->stat[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->curPos1H[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->curPos1L[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->curPos2H[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->curPos2L[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->curVel[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->curCur[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->curTor[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->res1[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->res2[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->res3[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->res4[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->mc_arm_curPos[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->mc_arm_curVel[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->mc_arm_curTor[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->mc_arm_curCur[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->mc_arm_curPosH[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->mc_arm_curPosL[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->original_arm_curPos[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->original_arm_curVel[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->original_arm_curTor[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->original_arm_curCur[0], 15);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->stat_hand[0], 2);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->pos_hand[0], 14);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->curtor_hand[0], 14);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int ecat_p3b_upperbody_data_lcmt::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int16_t_encoded_array_size(NULL, 15);
    enc_size += __int16_t_encoded_array_size(NULL, 15);
    enc_size += __int16_t_encoded_array_size(NULL, 15);
    enc_size += __int16_t_encoded_array_size(NULL, 15);
    enc_size += __int16_t_encoded_array_size(NULL, 15);
    enc_size += __int16_t_encoded_array_size(NULL, 15);
    enc_size += __int16_t_encoded_array_size(NULL, 15);
    enc_size += __int16_t_encoded_array_size(NULL, 15);
    enc_size += __int16_t_encoded_array_size(NULL, 15);
    enc_size += __int16_t_encoded_array_size(NULL, 15);
    enc_size += __int16_t_encoded_array_size(NULL, 15);
    enc_size += __int16_t_encoded_array_size(NULL, 15);
    enc_size += __float_encoded_array_size(NULL, 15);
    enc_size += __float_encoded_array_size(NULL, 15);
    enc_size += __float_encoded_array_size(NULL, 15);
    enc_size += __float_encoded_array_size(NULL, 15);
    enc_size += __float_encoded_array_size(NULL, 15);
    enc_size += __float_encoded_array_size(NULL, 15);
    enc_size += __float_encoded_array_size(NULL, 15);
    enc_size += __float_encoded_array_size(NULL, 15);
    enc_size += __float_encoded_array_size(NULL, 15);
    enc_size += __float_encoded_array_size(NULL, 15);
    enc_size += __int16_t_encoded_array_size(NULL, 2);
    enc_size += __int16_t_encoded_array_size(NULL, 14);
    enc_size += __int16_t_encoded_array_size(NULL, 14);
    return enc_size;
}

uint64_t ecat_p3b_upperbody_data_lcmt::_computeHash(const __lcm_hash_ptr *)
{
    uint64_t hash = 0xdb8d1a09f75767bdLL;
    return (hash<<1) + ((hash>>63)&1);
}

#endif
