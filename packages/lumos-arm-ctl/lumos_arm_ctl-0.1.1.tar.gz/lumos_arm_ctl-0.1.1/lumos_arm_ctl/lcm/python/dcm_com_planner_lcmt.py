"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class dcm_com_planner_lcmt(object):
    __slots__ = ["xi_ref", "xi_dot_ref", "x_ref", "xdot_ref", "r_vrp_traj", "r_vrp_ref"]

    def __init__(self):
        self.xi_ref = [ 0.0 for dim0 in range(3) ]
        self.xi_dot_ref = [ 0.0 for dim0 in range(3) ]
        self.x_ref = [ 0.0 for dim0 in range(3) ]
        self.xdot_ref = [ 0.0 for dim0 in range(3) ]
        self.r_vrp_traj = [ 0.0 for dim0 in range(3) ]
        self.r_vrp_ref = [ 0.0 for dim0 in range(3) ]

    def encode(self):
        buf = BytesIO()
        buf.write(dcm_com_planner_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>3f', *self.xi_ref[:3]))
        buf.write(struct.pack('>3f', *self.xi_dot_ref[:3]))
        buf.write(struct.pack('>3f', *self.x_ref[:3]))
        buf.write(struct.pack('>3f', *self.xdot_ref[:3]))
        buf.write(struct.pack('>3f', *self.r_vrp_traj[:3]))
        buf.write(struct.pack('>3f', *self.r_vrp_ref[:3]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != dcm_com_planner_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return dcm_com_planner_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = dcm_com_planner_lcmt()
        self.xi_ref = struct.unpack('>3f', buf.read(12))
        self.xi_dot_ref = struct.unpack('>3f', buf.read(12))
        self.x_ref = struct.unpack('>3f', buf.read(12))
        self.xdot_ref = struct.unpack('>3f', buf.read(12))
        self.r_vrp_traj = struct.unpack('>3f', buf.read(12))
        self.r_vrp_ref = struct.unpack('>3f', buf.read(12))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if dcm_com_planner_lcmt in parents: return 0
        tmphash = (0x8deab7fb3acfc68) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if dcm_com_planner_lcmt._packed_fingerprint is None:
            dcm_com_planner_lcmt._packed_fingerprint = struct.pack(">Q", dcm_com_planner_lcmt._get_hash_recursive([]))
        return dcm_com_planner_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

