"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class ecat_debug_data_lcmt(object):
    __slots__ = ["stat", "curPos1H", "curPos1L", "curPos2H", "curPos2L", "curVel", "curCur", "curTor", "res1", "res2", "mc_curPos", "mc_curVel", "mc_curCur", "mc_curTor", "original_curPos", "original_curVel", "original_curCur", "original_curTor", "curLssPos", "curLssTorque", "multi_cycle_num"]

    def __init__(self):
        self.stat = [ 0 for dim0 in range(12) ]
        self.curPos1H = [ 0 for dim0 in range(12) ]
        self.curPos1L = [ 0 for dim0 in range(12) ]
        self.curPos2H = [ 0 for dim0 in range(12) ]
        self.curPos2L = [ 0 for dim0 in range(12) ]
        self.curVel = [ 0 for dim0 in range(12) ]
        self.curCur = [ 0 for dim0 in range(12) ]
        self.curTor = [ 0 for dim0 in range(12) ]
        self.res1 = [ 0 for dim0 in range(12) ]
        self.res2 = [ 0 for dim0 in range(12) ]
        self.mc_curPos = [ 0.0 for dim0 in range(12) ]
        self.mc_curVel = [ 0.0 for dim0 in range(12) ]
        self.mc_curCur = [ 0.0 for dim0 in range(12) ]
        self.mc_curTor = [ 0.0 for dim0 in range(12) ]
        self.original_curPos = [ 0.0 for dim0 in range(12) ]
        self.original_curVel = [ 0.0 for dim0 in range(12) ]
        self.original_curCur = [ 0.0 for dim0 in range(12) ]
        self.original_curTor = [ 0.0 for dim0 in range(12) ]
        self.curLssPos = [ 0.0 for dim0 in range(12) ]
        self.curLssTorque = [ 0.0 for dim0 in range(12) ]
        self.multi_cycle_num = [ 0.0 for dim0 in range(12) ]

    def encode(self):
        buf = BytesIO()
        buf.write(ecat_debug_data_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>12h', *self.stat[:12]))
        buf.write(struct.pack('>12h', *self.curPos1H[:12]))
        buf.write(struct.pack('>12h', *self.curPos1L[:12]))
        buf.write(struct.pack('>12h', *self.curPos2H[:12]))
        buf.write(struct.pack('>12h', *self.curPos2L[:12]))
        buf.write(struct.pack('>12h', *self.curVel[:12]))
        buf.write(struct.pack('>12h', *self.curCur[:12]))
        buf.write(struct.pack('>12h', *self.curTor[:12]))
        buf.write(struct.pack('>12h', *self.res1[:12]))
        buf.write(struct.pack('>12h', *self.res2[:12]))
        buf.write(struct.pack('>12f', *self.mc_curPos[:12]))
        buf.write(struct.pack('>12f', *self.mc_curVel[:12]))
        buf.write(struct.pack('>12f', *self.mc_curCur[:12]))
        buf.write(struct.pack('>12f', *self.mc_curTor[:12]))
        buf.write(struct.pack('>12f', *self.original_curPos[:12]))
        buf.write(struct.pack('>12f', *self.original_curVel[:12]))
        buf.write(struct.pack('>12f', *self.original_curCur[:12]))
        buf.write(struct.pack('>12f', *self.original_curTor[:12]))
        buf.write(struct.pack('>12f', *self.curLssPos[:12]))
        buf.write(struct.pack('>12f', *self.curLssTorque[:12]))
        buf.write(struct.pack('>12f', *self.multi_cycle_num[:12]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ecat_debug_data_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ecat_debug_data_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ecat_debug_data_lcmt()
        self.stat = struct.unpack('>12h', buf.read(24))
        self.curPos1H = struct.unpack('>12h', buf.read(24))
        self.curPos1L = struct.unpack('>12h', buf.read(24))
        self.curPos2H = struct.unpack('>12h', buf.read(24))
        self.curPos2L = struct.unpack('>12h', buf.read(24))
        self.curVel = struct.unpack('>12h', buf.read(24))
        self.curCur = struct.unpack('>12h', buf.read(24))
        self.curTor = struct.unpack('>12h', buf.read(24))
        self.res1 = struct.unpack('>12h', buf.read(24))
        self.res2 = struct.unpack('>12h', buf.read(24))
        self.mc_curPos = struct.unpack('>12f', buf.read(48))
        self.mc_curVel = struct.unpack('>12f', buf.read(48))
        self.mc_curCur = struct.unpack('>12f', buf.read(48))
        self.mc_curTor = struct.unpack('>12f', buf.read(48))
        self.original_curPos = struct.unpack('>12f', buf.read(48))
        self.original_curVel = struct.unpack('>12f', buf.read(48))
        self.original_curCur = struct.unpack('>12f', buf.read(48))
        self.original_curTor = struct.unpack('>12f', buf.read(48))
        self.curLssPos = struct.unpack('>12f', buf.read(48))
        self.curLssTorque = struct.unpack('>12f', buf.read(48))
        self.multi_cycle_num = struct.unpack('>12f', buf.read(48))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if ecat_debug_data_lcmt in parents: return 0
        tmphash = (0x1fb0b4cdae6429ee) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ecat_debug_data_lcmt._packed_fingerprint is None:
            ecat_debug_data_lcmt._packed_fingerprint = struct.pack(">Q", ecat_debug_data_lcmt._get_hash_recursive([]))
        return ecat_debug_data_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

