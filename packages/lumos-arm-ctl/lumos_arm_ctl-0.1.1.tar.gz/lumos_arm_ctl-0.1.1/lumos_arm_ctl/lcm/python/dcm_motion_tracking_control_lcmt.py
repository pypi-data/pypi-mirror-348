"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class dcm_motion_tracking_control_lcmt(object):
    __slots__ = ["xi_act", "r_vrp_control", "F_grf", "F_WLeftFoot", "F_WRightFoot", "tau_WLeftFoot", "tau_WRightFoot", "calculate_stance_leg", "wbic_q", "wbic_qd", "wbic_tau", "wbic_f", "com_dynamics_x", "com_dynamics_xdot"]

    def __init__(self):
        self.xi_act = [ 0.0 for dim0 in range(3) ]
        self.r_vrp_control = [ 0.0 for dim0 in range(3) ]
        self.F_grf = [ 0.0 for dim0 in range(3) ]
        self.F_WLeftFoot = [ 0.0 for dim0 in range(3) ]
        self.F_WRightFoot = [ 0.0 for dim0 in range(3) ]
        self.tau_WLeftFoot = [ 0.0 for dim0 in range(3) ]
        self.tau_WRightFoot = [ 0.0 for dim0 in range(3) ]
        self.calculate_stance_leg = 0.0
        self.wbic_q = [ 0.0 for dim0 in range(12) ]
        self.wbic_qd = [ 0.0 for dim0 in range(12) ]
        self.wbic_tau = [ 0.0 for dim0 in range(12) ]
        self.wbic_f = [ 0.0 for dim0 in range(12) ]
        self.com_dynamics_x = [ 0.0 for dim0 in range(3) ]
        self.com_dynamics_xdot = [ 0.0 for dim0 in range(3) ]

    def encode(self):
        buf = BytesIO()
        buf.write(dcm_motion_tracking_control_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>3f', *self.xi_act[:3]))
        buf.write(struct.pack('>3f', *self.r_vrp_control[:3]))
        buf.write(struct.pack('>3f', *self.F_grf[:3]))
        buf.write(struct.pack('>3f', *self.F_WLeftFoot[:3]))
        buf.write(struct.pack('>3f', *self.F_WRightFoot[:3]))
        buf.write(struct.pack('>3f', *self.tau_WLeftFoot[:3]))
        buf.write(struct.pack('>3f', *self.tau_WRightFoot[:3]))
        buf.write(struct.pack(">f", self.calculate_stance_leg))
        buf.write(struct.pack('>12f', *self.wbic_q[:12]))
        buf.write(struct.pack('>12f', *self.wbic_qd[:12]))
        buf.write(struct.pack('>12f', *self.wbic_tau[:12]))
        buf.write(struct.pack('>12f', *self.wbic_f[:12]))
        buf.write(struct.pack('>3f', *self.com_dynamics_x[:3]))
        buf.write(struct.pack('>3f', *self.com_dynamics_xdot[:3]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != dcm_motion_tracking_control_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return dcm_motion_tracking_control_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = dcm_motion_tracking_control_lcmt()
        self.xi_act = struct.unpack('>3f', buf.read(12))
        self.r_vrp_control = struct.unpack('>3f', buf.read(12))
        self.F_grf = struct.unpack('>3f', buf.read(12))
        self.F_WLeftFoot = struct.unpack('>3f', buf.read(12))
        self.F_WRightFoot = struct.unpack('>3f', buf.read(12))
        self.tau_WLeftFoot = struct.unpack('>3f', buf.read(12))
        self.tau_WRightFoot = struct.unpack('>3f', buf.read(12))
        self.calculate_stance_leg = struct.unpack(">f", buf.read(4))[0]
        self.wbic_q = struct.unpack('>12f', buf.read(48))
        self.wbic_qd = struct.unpack('>12f', buf.read(48))
        self.wbic_tau = struct.unpack('>12f', buf.read(48))
        self.wbic_f = struct.unpack('>12f', buf.read(48))
        self.com_dynamics_x = struct.unpack('>3f', buf.read(12))
        self.com_dynamics_xdot = struct.unpack('>3f', buf.read(12))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if dcm_motion_tracking_control_lcmt in parents: return 0
        tmphash = (0xa0eaf4f73c3eb0f4) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if dcm_motion_tracking_control_lcmt._packed_fingerprint is None:
            dcm_motion_tracking_control_lcmt._packed_fingerprint = struct.pack(">Q", dcm_motion_tracking_control_lcmt._get_hash_recursive([]))
        return dcm_motion_tracking_control_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

