"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class arm_control_cmd_lcmt(object):
    __slots__ = ["isUsed", "joint_tarPos", "duration"]

    def __init__(self):
        self.isUsed = [ 0 for dim0 in range(14) ]
        self.joint_tarPos = [ 0.0 for dim0 in range(14) ]
        self.duration = [ 0.0 for dim0 in range(14) ]

    def encode(self):
        buf = BytesIO()
        buf.write(arm_control_cmd_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>14i', *self.isUsed[:14]))
        buf.write(struct.pack('>14f', *self.joint_tarPos[:14]))
        buf.write(struct.pack('>14f', *self.duration[:14]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != arm_control_cmd_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return arm_control_cmd_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = arm_control_cmd_lcmt()
        self.isUsed = struct.unpack('>14i', buf.read(56))
        self.joint_tarPos = struct.unpack('>14f', buf.read(56))
        self.duration = struct.unpack('>14f', buf.read(56))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if arm_control_cmd_lcmt in parents: return 0
        tmphash = (0xee56491953be12ba) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if arm_control_cmd_lcmt._packed_fingerprint is None:
            arm_control_cmd_lcmt._packed_fingerprint = struct.pack(">Q", arm_control_cmd_lcmt._get_hash_recursive([]))
        return arm_control_cmd_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

