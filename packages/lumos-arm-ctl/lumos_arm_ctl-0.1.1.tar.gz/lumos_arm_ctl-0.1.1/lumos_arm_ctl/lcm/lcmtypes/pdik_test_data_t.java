/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class pdik_test_data_t implements lcm.lcm.LCMEncodable
{
    public int contact_est[];
    public float body_ori_cmd[];
    public float body_pos_cmd[];
    public float body_vel_cmd[];
    public float body_ang_vel_cmd[];
    public float body_pos[];
    public float body_vel[];
    public float body_ori[];
    public float body_ang_vel[];
    public float foot_pos_cmd[];
    public float foot_vel_cmd[];
    public float foot_acc_cmd[];
    public float foot_acc_numeric[];
    public float foot_pos[];
    public float foot_vel[];
    public float foot_local_pos[];
    public float foot_local_vel[];
    public float jpos_cmd[];
    public float jvel_cmd[];
    public float jacc_cmd[];
    public float jpos[];
    public float jvel[];
    public float L_stance_foot[];
    public float single_L_x[];
    public float single_L_y[];
    public float single_L_G_x[];
    public float single_L_G_y[];
    public float hr_h0[];
    public float det_q[];
    public float l;
    public float pseudo_com_vx;
    public float dx0_next;
    public float dxf_next_goal;
    public float one_step_max_vel_gain;
 
    public pdik_test_data_t()
    {
        contact_est = new int[4];
        body_ori_cmd = new float[4];
        body_pos_cmd = new float[3];
        body_vel_cmd = new float[3];
        body_ang_vel_cmd = new float[3];
        body_pos = new float[3];
        body_vel = new float[3];
        body_ori = new float[4];
        body_ang_vel = new float[3];
        foot_pos_cmd = new float[12];
        foot_vel_cmd = new float[12];
        foot_acc_cmd = new float[12];
        foot_acc_numeric = new float[12];
        foot_pos = new float[12];
        foot_vel = new float[12];
        foot_local_pos = new float[12];
        foot_local_vel = new float[12];
        jpos_cmd = new float[12];
        jvel_cmd = new float[12];
        jacc_cmd = new float[12];
        jpos = new float[12];
        jvel = new float[12];
        L_stance_foot = new float[3];
        single_L_x = new float[12];
        single_L_y = new float[12];
        single_L_G_x = new float[12];
        single_L_G_y = new float[12];
        hr_h0 = new float[10];
        det_q = new float[12];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xfe65c67b9e67b193L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.pdik_test_data_t.class))
            return 0L;
 
        classes.add(lcmtypes.pdik_test_data_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 4; a++) {
            outs.writeInt(this.contact_est[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.body_ori_cmd[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.body_pos_cmd[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.body_vel_cmd[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.body_ang_vel_cmd[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.body_pos[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.body_vel[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.body_ori[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.body_ang_vel[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.foot_pos_cmd[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.foot_vel_cmd[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.foot_acc_cmd[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.foot_acc_numeric[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.foot_pos[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.foot_vel[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.foot_local_pos[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.foot_local_vel[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.jpos_cmd[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.jvel_cmd[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.jacc_cmd[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.jpos[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.jvel[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.L_stance_foot[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.single_L_x[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.single_L_y[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.single_L_G_x[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.single_L_G_y[a]); 
        }
 
        for (int a = 0; a < 10; a++) {
            outs.writeFloat(this.hr_h0[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.det_q[a]); 
        }
 
        outs.writeFloat(this.l); 
 
        outs.writeFloat(this.pseudo_com_vx); 
 
        outs.writeFloat(this.dx0_next); 
 
        outs.writeFloat(this.dxf_next_goal); 
 
        outs.writeFloat(this.one_step_max_vel_gain); 
 
    }
 
    public pdik_test_data_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public pdik_test_data_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.pdik_test_data_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.pdik_test_data_t o = new lcmtypes.pdik_test_data_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.contact_est = new int[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.contact_est[a] = ins.readInt();
        }
 
        this.body_ori_cmd = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.body_ori_cmd[a] = ins.readFloat();
        }
 
        this.body_pos_cmd = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.body_pos_cmd[a] = ins.readFloat();
        }
 
        this.body_vel_cmd = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.body_vel_cmd[a] = ins.readFloat();
        }
 
        this.body_ang_vel_cmd = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.body_ang_vel_cmd[a] = ins.readFloat();
        }
 
        this.body_pos = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.body_pos[a] = ins.readFloat();
        }
 
        this.body_vel = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.body_vel[a] = ins.readFloat();
        }
 
        this.body_ori = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.body_ori[a] = ins.readFloat();
        }
 
        this.body_ang_vel = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.body_ang_vel[a] = ins.readFloat();
        }
 
        this.foot_pos_cmd = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.foot_pos_cmd[a] = ins.readFloat();
        }
 
        this.foot_vel_cmd = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.foot_vel_cmd[a] = ins.readFloat();
        }
 
        this.foot_acc_cmd = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.foot_acc_cmd[a] = ins.readFloat();
        }
 
        this.foot_acc_numeric = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.foot_acc_numeric[a] = ins.readFloat();
        }
 
        this.foot_pos = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.foot_pos[a] = ins.readFloat();
        }
 
        this.foot_vel = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.foot_vel[a] = ins.readFloat();
        }
 
        this.foot_local_pos = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.foot_local_pos[a] = ins.readFloat();
        }
 
        this.foot_local_vel = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.foot_local_vel[a] = ins.readFloat();
        }
 
        this.jpos_cmd = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.jpos_cmd[a] = ins.readFloat();
        }
 
        this.jvel_cmd = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.jvel_cmd[a] = ins.readFloat();
        }
 
        this.jacc_cmd = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.jacc_cmd[a] = ins.readFloat();
        }
 
        this.jpos = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.jpos[a] = ins.readFloat();
        }
 
        this.jvel = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.jvel[a] = ins.readFloat();
        }
 
        this.L_stance_foot = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.L_stance_foot[a] = ins.readFloat();
        }
 
        this.single_L_x = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.single_L_x[a] = ins.readFloat();
        }
 
        this.single_L_y = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.single_L_y[a] = ins.readFloat();
        }
 
        this.single_L_G_x = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.single_L_G_x[a] = ins.readFloat();
        }
 
        this.single_L_G_y = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.single_L_G_y[a] = ins.readFloat();
        }
 
        this.hr_h0 = new float[(int) 10];
        for (int a = 0; a < 10; a++) {
            this.hr_h0[a] = ins.readFloat();
        }
 
        this.det_q = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.det_q[a] = ins.readFloat();
        }
 
        this.l = ins.readFloat();
 
        this.pseudo_com_vx = ins.readFloat();
 
        this.dx0_next = ins.readFloat();
 
        this.dxf_next_goal = ins.readFloat();
 
        this.one_step_max_vel_gain = ins.readFloat();
 
    }
 
    public lcmtypes.pdik_test_data_t copy()
    {
        lcmtypes.pdik_test_data_t outobj = new lcmtypes.pdik_test_data_t();
        outobj.contact_est = new int[(int) 4];
        System.arraycopy(this.contact_est, 0, outobj.contact_est, 0, 4); 
        outobj.body_ori_cmd = new float[(int) 4];
        System.arraycopy(this.body_ori_cmd, 0, outobj.body_ori_cmd, 0, 4); 
        outobj.body_pos_cmd = new float[(int) 3];
        System.arraycopy(this.body_pos_cmd, 0, outobj.body_pos_cmd, 0, 3); 
        outobj.body_vel_cmd = new float[(int) 3];
        System.arraycopy(this.body_vel_cmd, 0, outobj.body_vel_cmd, 0, 3); 
        outobj.body_ang_vel_cmd = new float[(int) 3];
        System.arraycopy(this.body_ang_vel_cmd, 0, outobj.body_ang_vel_cmd, 0, 3); 
        outobj.body_pos = new float[(int) 3];
        System.arraycopy(this.body_pos, 0, outobj.body_pos, 0, 3); 
        outobj.body_vel = new float[(int) 3];
        System.arraycopy(this.body_vel, 0, outobj.body_vel, 0, 3); 
        outobj.body_ori = new float[(int) 4];
        System.arraycopy(this.body_ori, 0, outobj.body_ori, 0, 4); 
        outobj.body_ang_vel = new float[(int) 3];
        System.arraycopy(this.body_ang_vel, 0, outobj.body_ang_vel, 0, 3); 
        outobj.foot_pos_cmd = new float[(int) 12];
        System.arraycopy(this.foot_pos_cmd, 0, outobj.foot_pos_cmd, 0, 12); 
        outobj.foot_vel_cmd = new float[(int) 12];
        System.arraycopy(this.foot_vel_cmd, 0, outobj.foot_vel_cmd, 0, 12); 
        outobj.foot_acc_cmd = new float[(int) 12];
        System.arraycopy(this.foot_acc_cmd, 0, outobj.foot_acc_cmd, 0, 12); 
        outobj.foot_acc_numeric = new float[(int) 12];
        System.arraycopy(this.foot_acc_numeric, 0, outobj.foot_acc_numeric, 0, 12); 
        outobj.foot_pos = new float[(int) 12];
        System.arraycopy(this.foot_pos, 0, outobj.foot_pos, 0, 12); 
        outobj.foot_vel = new float[(int) 12];
        System.arraycopy(this.foot_vel, 0, outobj.foot_vel, 0, 12); 
        outobj.foot_local_pos = new float[(int) 12];
        System.arraycopy(this.foot_local_pos, 0, outobj.foot_local_pos, 0, 12); 
        outobj.foot_local_vel = new float[(int) 12];
        System.arraycopy(this.foot_local_vel, 0, outobj.foot_local_vel, 0, 12); 
        outobj.jpos_cmd = new float[(int) 12];
        System.arraycopy(this.jpos_cmd, 0, outobj.jpos_cmd, 0, 12); 
        outobj.jvel_cmd = new float[(int) 12];
        System.arraycopy(this.jvel_cmd, 0, outobj.jvel_cmd, 0, 12); 
        outobj.jacc_cmd = new float[(int) 12];
        System.arraycopy(this.jacc_cmd, 0, outobj.jacc_cmd, 0, 12); 
        outobj.jpos = new float[(int) 12];
        System.arraycopy(this.jpos, 0, outobj.jpos, 0, 12); 
        outobj.jvel = new float[(int) 12];
        System.arraycopy(this.jvel, 0, outobj.jvel, 0, 12); 
        outobj.L_stance_foot = new float[(int) 3];
        System.arraycopy(this.L_stance_foot, 0, outobj.L_stance_foot, 0, 3); 
        outobj.single_L_x = new float[(int) 12];
        System.arraycopy(this.single_L_x, 0, outobj.single_L_x, 0, 12); 
        outobj.single_L_y = new float[(int) 12];
        System.arraycopy(this.single_L_y, 0, outobj.single_L_y, 0, 12); 
        outobj.single_L_G_x = new float[(int) 12];
        System.arraycopy(this.single_L_G_x, 0, outobj.single_L_G_x, 0, 12); 
        outobj.single_L_G_y = new float[(int) 12];
        System.arraycopy(this.single_L_G_y, 0, outobj.single_L_G_y, 0, 12); 
        outobj.hr_h0 = new float[(int) 10];
        System.arraycopy(this.hr_h0, 0, outobj.hr_h0, 0, 10); 
        outobj.det_q = new float[(int) 12];
        System.arraycopy(this.det_q, 0, outobj.det_q, 0, 12); 
        outobj.l = this.l;
 
        outobj.pseudo_com_vx = this.pseudo_com_vx;
 
        outobj.dx0_next = this.dx0_next;
 
        outobj.dxf_next_goal = this.dxf_next_goal;
 
        outobj.one_step_max_vel_gain = this.one_step_max_vel_gain;
 
        return outobj;
    }
 
}

