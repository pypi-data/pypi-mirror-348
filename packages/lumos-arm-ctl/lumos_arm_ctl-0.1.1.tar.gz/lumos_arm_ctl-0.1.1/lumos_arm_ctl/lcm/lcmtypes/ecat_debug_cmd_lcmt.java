/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class ecat_debug_cmd_lcmt implements lcm.lcm.LCMEncodable
{
    public short ctrlWord[];
    public short tarPosH[];
    public short tarPosL[];
    public short tarVel[];
    public short tarCur[];
    public short tarTor[];
    public short res1[];
    public short res2[];
    public short ecat_state[];
    public float mc_kp[];
    public float mc_kd[];
    public float mc_tarPos[];
    public float mc_tarVel[];
    public float mc_tarCur[];
    public float mc_tarTor[];
    public float original_kp_joint[];
    public float original_kd_joint[];
    public float original_kp_motor[];
    public float original_kd_motor[];
    public float original_tarPos[];
    public float original_tarVel[];
    public float original_tarCur[];
    public float original_tarTor[];
 
    public ecat_debug_cmd_lcmt()
    {
        ctrlWord = new short[12];
        tarPosH = new short[12];
        tarPosL = new short[12];
        tarVel = new short[12];
        tarCur = new short[12];
        tarTor = new short[12];
        res1 = new short[12];
        res2 = new short[12];
        ecat_state = new short[17];
        mc_kp = new float[12];
        mc_kd = new float[12];
        mc_tarPos = new float[12];
        mc_tarVel = new float[12];
        mc_tarCur = new float[12];
        mc_tarTor = new float[12];
        original_kp_joint = new float[12];
        original_kd_joint = new float[12];
        original_kp_motor = new float[12];
        original_kd_motor = new float[12];
        original_tarPos = new float[12];
        original_tarVel = new float[12];
        original_tarCur = new float[12];
        original_tarTor = new float[12];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x5070596f902b25f2L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.ecat_debug_cmd_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.ecat_debug_cmd_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 12; a++) {
            outs.writeShort(this.ctrlWord[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeShort(this.tarPosH[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeShort(this.tarPosL[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeShort(this.tarVel[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeShort(this.tarCur[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeShort(this.tarTor[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeShort(this.res1[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeShort(this.res2[a]); 
        }
 
        for (int a = 0; a < 17; a++) {
            outs.writeShort(this.ecat_state[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.mc_kp[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.mc_kd[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.mc_tarPos[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.mc_tarVel[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.mc_tarCur[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.mc_tarTor[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.original_kp_joint[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.original_kd_joint[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.original_kp_motor[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.original_kd_motor[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.original_tarPos[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.original_tarVel[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.original_tarCur[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.original_tarTor[a]); 
        }
 
    }
 
    public ecat_debug_cmd_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public ecat_debug_cmd_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.ecat_debug_cmd_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.ecat_debug_cmd_lcmt o = new lcmtypes.ecat_debug_cmd_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.ctrlWord = new short[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.ctrlWord[a] = ins.readShort();
        }
 
        this.tarPosH = new short[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.tarPosH[a] = ins.readShort();
        }
 
        this.tarPosL = new short[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.tarPosL[a] = ins.readShort();
        }
 
        this.tarVel = new short[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.tarVel[a] = ins.readShort();
        }
 
        this.tarCur = new short[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.tarCur[a] = ins.readShort();
        }
 
        this.tarTor = new short[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.tarTor[a] = ins.readShort();
        }
 
        this.res1 = new short[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.res1[a] = ins.readShort();
        }
 
        this.res2 = new short[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.res2[a] = ins.readShort();
        }
 
        this.ecat_state = new short[(int) 17];
        for (int a = 0; a < 17; a++) {
            this.ecat_state[a] = ins.readShort();
        }
 
        this.mc_kp = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.mc_kp[a] = ins.readFloat();
        }
 
        this.mc_kd = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.mc_kd[a] = ins.readFloat();
        }
 
        this.mc_tarPos = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.mc_tarPos[a] = ins.readFloat();
        }
 
        this.mc_tarVel = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.mc_tarVel[a] = ins.readFloat();
        }
 
        this.mc_tarCur = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.mc_tarCur[a] = ins.readFloat();
        }
 
        this.mc_tarTor = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.mc_tarTor[a] = ins.readFloat();
        }
 
        this.original_kp_joint = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.original_kp_joint[a] = ins.readFloat();
        }
 
        this.original_kd_joint = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.original_kd_joint[a] = ins.readFloat();
        }
 
        this.original_kp_motor = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.original_kp_motor[a] = ins.readFloat();
        }
 
        this.original_kd_motor = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.original_kd_motor[a] = ins.readFloat();
        }
 
        this.original_tarPos = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.original_tarPos[a] = ins.readFloat();
        }
 
        this.original_tarVel = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.original_tarVel[a] = ins.readFloat();
        }
 
        this.original_tarCur = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.original_tarCur[a] = ins.readFloat();
        }
 
        this.original_tarTor = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.original_tarTor[a] = ins.readFloat();
        }
 
    }
 
    public lcmtypes.ecat_debug_cmd_lcmt copy()
    {
        lcmtypes.ecat_debug_cmd_lcmt outobj = new lcmtypes.ecat_debug_cmd_lcmt();
        outobj.ctrlWord = new short[(int) 12];
        System.arraycopy(this.ctrlWord, 0, outobj.ctrlWord, 0, 12); 
        outobj.tarPosH = new short[(int) 12];
        System.arraycopy(this.tarPosH, 0, outobj.tarPosH, 0, 12); 
        outobj.tarPosL = new short[(int) 12];
        System.arraycopy(this.tarPosL, 0, outobj.tarPosL, 0, 12); 
        outobj.tarVel = new short[(int) 12];
        System.arraycopy(this.tarVel, 0, outobj.tarVel, 0, 12); 
        outobj.tarCur = new short[(int) 12];
        System.arraycopy(this.tarCur, 0, outobj.tarCur, 0, 12); 
        outobj.tarTor = new short[(int) 12];
        System.arraycopy(this.tarTor, 0, outobj.tarTor, 0, 12); 
        outobj.res1 = new short[(int) 12];
        System.arraycopy(this.res1, 0, outobj.res1, 0, 12); 
        outobj.res2 = new short[(int) 12];
        System.arraycopy(this.res2, 0, outobj.res2, 0, 12); 
        outobj.ecat_state = new short[(int) 17];
        System.arraycopy(this.ecat_state, 0, outobj.ecat_state, 0, 17); 
        outobj.mc_kp = new float[(int) 12];
        System.arraycopy(this.mc_kp, 0, outobj.mc_kp, 0, 12); 
        outobj.mc_kd = new float[(int) 12];
        System.arraycopy(this.mc_kd, 0, outobj.mc_kd, 0, 12); 
        outobj.mc_tarPos = new float[(int) 12];
        System.arraycopy(this.mc_tarPos, 0, outobj.mc_tarPos, 0, 12); 
        outobj.mc_tarVel = new float[(int) 12];
        System.arraycopy(this.mc_tarVel, 0, outobj.mc_tarVel, 0, 12); 
        outobj.mc_tarCur = new float[(int) 12];
        System.arraycopy(this.mc_tarCur, 0, outobj.mc_tarCur, 0, 12); 
        outobj.mc_tarTor = new float[(int) 12];
        System.arraycopy(this.mc_tarTor, 0, outobj.mc_tarTor, 0, 12); 
        outobj.original_kp_joint = new float[(int) 12];
        System.arraycopy(this.original_kp_joint, 0, outobj.original_kp_joint, 0, 12); 
        outobj.original_kd_joint = new float[(int) 12];
        System.arraycopy(this.original_kd_joint, 0, outobj.original_kd_joint, 0, 12); 
        outobj.original_kp_motor = new float[(int) 12];
        System.arraycopy(this.original_kp_motor, 0, outobj.original_kp_motor, 0, 12); 
        outobj.original_kd_motor = new float[(int) 12];
        System.arraycopy(this.original_kd_motor, 0, outobj.original_kd_motor, 0, 12); 
        outobj.original_tarPos = new float[(int) 12];
        System.arraycopy(this.original_tarPos, 0, outobj.original_tarPos, 0, 12); 
        outobj.original_tarVel = new float[(int) 12];
        System.arraycopy(this.original_tarVel, 0, outobj.original_tarVel, 0, 12); 
        outobj.original_tarCur = new float[(int) 12];
        System.arraycopy(this.original_tarCur, 0, outobj.original_tarCur, 0, 12); 
        outobj.original_tarTor = new float[(int) 12];
        System.arraycopy(this.original_tarTor, 0, outobj.original_tarTor, 0, 12); 
        return outobj;
    }
 
}

