/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class arm_cmd_struct implements lcm.lcm.LCMEncodable
{
    public int isUsed[];
    public int control_mode[];
    public int trajectoryLength;
    public int motionType;
    public float jointPosVec[][];
    public float jointSpeedVec[][];
    public float jointCurrentVec[][];
 
    public arm_cmd_struct()
    {
        isUsed = new int[14];
        control_mode = new int[14];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xa0c88537500170a3L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.arm_cmd_struct.class))
            return 0L;
 
        classes.add(lcmtypes.arm_cmd_struct.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 14; a++) {
            outs.writeInt(this.isUsed[a]); 
        }
 
        for (int a = 0; a < 14; a++) {
            outs.writeInt(this.control_mode[a]); 
        }
 
        outs.writeInt(this.trajectoryLength); 
 
        outs.writeInt(this.motionType); 
 
        for (int a = 0; a < this.trajectoryLength; a++) {
            for (int b = 0; b < 14; b++) {
                outs.writeFloat(this.jointPosVec[a][b]); 
            }
        }
 
        for (int a = 0; a < this.trajectoryLength; a++) {
            for (int b = 0; b < 14; b++) {
                outs.writeFloat(this.jointSpeedVec[a][b]); 
            }
        }
 
        for (int a = 0; a < this.trajectoryLength; a++) {
            for (int b = 0; b < 14; b++) {
                outs.writeFloat(this.jointCurrentVec[a][b]); 
            }
        }
 
    }
 
    public arm_cmd_struct(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public arm_cmd_struct(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.arm_cmd_struct _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.arm_cmd_struct o = new lcmtypes.arm_cmd_struct();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.isUsed = new int[(int) 14];
        for (int a = 0; a < 14; a++) {
            this.isUsed[a] = ins.readInt();
        }
 
        this.control_mode = new int[(int) 14];
        for (int a = 0; a < 14; a++) {
            this.control_mode[a] = ins.readInt();
        }
 
        this.trajectoryLength = ins.readInt();
 
        this.motionType = ins.readInt();
 
        this.jointPosVec = new float[(int) trajectoryLength][(int) 14];
        for (int a = 0; a < this.trajectoryLength; a++) {
            for (int b = 0; b < 14; b++) {
                this.jointPosVec[a][b] = ins.readFloat();
            }
        }
 
        this.jointSpeedVec = new float[(int) trajectoryLength][(int) 14];
        for (int a = 0; a < this.trajectoryLength; a++) {
            for (int b = 0; b < 14; b++) {
                this.jointSpeedVec[a][b] = ins.readFloat();
            }
        }
 
        this.jointCurrentVec = new float[(int) trajectoryLength][(int) 14];
        for (int a = 0; a < this.trajectoryLength; a++) {
            for (int b = 0; b < 14; b++) {
                this.jointCurrentVec[a][b] = ins.readFloat();
            }
        }
 
    }
 
    public lcmtypes.arm_cmd_struct copy()
    {
        lcmtypes.arm_cmd_struct outobj = new lcmtypes.arm_cmd_struct();
        outobj.isUsed = new int[(int) 14];
        System.arraycopy(this.isUsed, 0, outobj.isUsed, 0, 14); 
        outobj.control_mode = new int[(int) 14];
        System.arraycopy(this.control_mode, 0, outobj.control_mode, 0, 14); 
        outobj.trajectoryLength = this.trajectoryLength;
 
        outobj.motionType = this.motionType;
 
        outobj.jointPosVec = new float[(int) trajectoryLength][(int) 14];
        for (int a = 0; a < this.trajectoryLength; a++) {
            System.arraycopy(this.jointPosVec[a], 0, outobj.jointPosVec[a], 0, 14);        }
 
        outobj.jointSpeedVec = new float[(int) trajectoryLength][(int) 14];
        for (int a = 0; a < this.trajectoryLength; a++) {
            System.arraycopy(this.jointSpeedVec[a], 0, outobj.jointSpeedVec[a], 0, 14);        }
 
        outobj.jointCurrentVec = new float[(int) trajectoryLength][(int) 14];
        for (int a = 0; a < this.trajectoryLength; a++) {
            System.arraycopy(this.jointCurrentVec[a], 0, outobj.jointCurrentVec[a], 0, 14);        }
 
        return outobj;
    }
 
}

