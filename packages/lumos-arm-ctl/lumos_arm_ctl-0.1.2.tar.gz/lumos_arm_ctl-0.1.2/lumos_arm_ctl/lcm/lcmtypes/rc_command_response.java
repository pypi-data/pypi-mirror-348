/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class rc_command_response implements lcm.lcm.LCMEncodable
{
    public byte robot_fsm_cmd;
    public byte stop_flag;
    public byte arm_motion_cmd;
 
    public rc_command_response()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x9f188db454925737L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.rc_command_response.class))
            return 0L;
 
        classes.add(lcmtypes.rc_command_response.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeByte(this.robot_fsm_cmd); 
 
        outs.writeByte(this.stop_flag); 
 
        outs.writeByte(this.arm_motion_cmd); 
 
    }
 
    public rc_command_response(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public rc_command_response(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.rc_command_response _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.rc_command_response o = new lcmtypes.rc_command_response();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.robot_fsm_cmd = ins.readByte();
 
        this.stop_flag = ins.readByte();
 
        this.arm_motion_cmd = ins.readByte();
 
    }
 
    public lcmtypes.rc_command_response copy()
    {
        lcmtypes.rc_command_response outobj = new lcmtypes.rc_command_response();
        outobj.robot_fsm_cmd = this.robot_fsm_cmd;
 
        outobj.stop_flag = this.stop_flag;
 
        outobj.arm_motion_cmd = this.arm_motion_cmd;
 
        return outobj;
    }
 
}

