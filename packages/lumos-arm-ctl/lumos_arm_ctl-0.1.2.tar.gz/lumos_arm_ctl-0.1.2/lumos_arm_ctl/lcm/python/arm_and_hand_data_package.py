"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class arm_and_hand_data_package(object):
    __slots__ = ["isUsed", "curStatusVec", "curErrCodeVec", "curJointPosVec", "curSpeedVec", "curCurrentVec", "endEffectorXYZRPY"]

    def __init__(self):
        self.isUsed = 0
        self.curStatusVec = [ 0 for dim0 in range(26) ]
        self.curErrCodeVec = [ 0 for dim0 in range(26) ]
        self.curJointPosVec = [ 0.0 for dim0 in range(26) ]
        self.curSpeedVec = [ 0.0 for dim0 in range(26) ]
        self.curCurrentVec = [ 0.0 for dim0 in range(26) ]
        self.endEffectorXYZRPY = [ 0.0 for dim0 in range(24) ]

    def encode(self):
        buf = BytesIO()
        buf.write(arm_and_hand_data_package._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.isUsed))
        buf.write(struct.pack('>26i', *self.curStatusVec[:26]))
        buf.write(struct.pack('>26i', *self.curErrCodeVec[:26]))
        buf.write(struct.pack('>26f', *self.curJointPosVec[:26]))
        buf.write(struct.pack('>26f', *self.curSpeedVec[:26]))
        buf.write(struct.pack('>26f', *self.curCurrentVec[:26]))
        buf.write(struct.pack('>24f', *self.endEffectorXYZRPY[:24]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != arm_and_hand_data_package._get_packed_fingerprint():
            raise ValueError("Decode error")
        return arm_and_hand_data_package._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = arm_and_hand_data_package()
        self.isUsed = struct.unpack(">i", buf.read(4))[0]
        self.curStatusVec = struct.unpack('>26i', buf.read(104))
        self.curErrCodeVec = struct.unpack('>26i', buf.read(104))
        self.curJointPosVec = struct.unpack('>26f', buf.read(104))
        self.curSpeedVec = struct.unpack('>26f', buf.read(104))
        self.curCurrentVec = struct.unpack('>26f', buf.read(104))
        self.endEffectorXYZRPY = struct.unpack('>24f', buf.read(96))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if arm_and_hand_data_package in parents: return 0
        tmphash = (0x2328c31bc5967e62) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if arm_and_hand_data_package._packed_fingerprint is None:
            arm_and_hand_data_package._packed_fingerprint = struct.pack(">Q", arm_and_hand_data_package._get_hash_recursive([]))
        return arm_and_hand_data_package._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

