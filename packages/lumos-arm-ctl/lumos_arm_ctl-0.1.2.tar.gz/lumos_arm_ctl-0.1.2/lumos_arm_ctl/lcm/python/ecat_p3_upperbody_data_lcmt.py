"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class ecat_p3_upperbody_data_lcmt(object):
    __slots__ = ["stat_1to5", "curPos1H_1to5", "curPos1L_1to5", "curPos2H_1to5", "curPos2L_1to5", "curVel_1to5", "curCur_1to5", "curTor_1to5", "res1_1to5", "res2_1to5", "res3_1to5", "res4_1to5", "stat_6to7", "curPos1H_6to7", "curPos1L_6to7", "curPos2H_6to7", "curPos2L_6to7", "curVel1_6to7", "curVel2_6to7", "curCur1_6to7", "curCur2_6to7", "curTor1_6to7", "curTor2_6to7", "res1_6to7", "res2_6to7", "res3_6to7", "res4_6to7", "res5_6to7", "res6_6to7", "stat_hand", "pos1_hand", "pos2_hand", "pos3_hand", "pos4_hand", "pos5_hand", "pos6_hand", "pos7_hand", "curTor1_hand", "curTor2_hand", "curTor3_hand", "curTor4_hand", "curTor5_hand", "curTor6_hand", "curTor7_hand", "IMU_roll_hand", "IMU_pitch_hand", "IMU_yaw_hand", "IMU_roll_vel_hand", "IMU_pitch_vel_hand", "IMU_yaw_vel_hand", "IMU_roll_acc_hand", "IMU_pitch_acc_hand", "IMU_yaw_acc_hand", "mc_arm_curPos", "mc_arm_curVel", "mc_arm_curTor", "mc_arm_curCur", "original_arm_curPos", "original_arm_curVel", "original_arm_curTor", "original_arm_curCur", "original_hand_curPos", "original_hand_curTor", "original_Fx", "original_Fy", "original_Fz", "original_Mx", "original_My", "original_Mz"]

    def __init__(self):
        self.stat_1to5 = [ 0 for dim0 in range(10) ]
        self.curPos1H_1to5 = [ 0 for dim0 in range(10) ]
        self.curPos1L_1to5 = [ 0 for dim0 in range(10) ]
        self.curPos2H_1to5 = [ 0 for dim0 in range(10) ]
        self.curPos2L_1to5 = [ 0 for dim0 in range(10) ]
        self.curVel_1to5 = [ 0 for dim0 in range(10) ]
        self.curCur_1to5 = [ 0 for dim0 in range(10) ]
        self.curTor_1to5 = [ 0 for dim0 in range(10) ]
        self.res1_1to5 = [ 0 for dim0 in range(10) ]
        self.res2_1to5 = [ 0 for dim0 in range(10) ]
        self.res3_1to5 = [ 0 for dim0 in range(10) ]
        self.res4_1to5 = [ 0 for dim0 in range(10) ]
        self.stat_6to7 = [ 0 for dim0 in range(2) ]
        self.curPos1H_6to7 = [ 0 for dim0 in range(2) ]
        self.curPos1L_6to7 = [ 0 for dim0 in range(2) ]
        self.curPos2H_6to7 = [ 0 for dim0 in range(2) ]
        self.curPos2L_6to7 = [ 0 for dim0 in range(2) ]
        self.curVel1_6to7 = [ 0 for dim0 in range(2) ]
        self.curVel2_6to7 = [ 0 for dim0 in range(2) ]
        self.curCur1_6to7 = [ 0 for dim0 in range(2) ]
        self.curCur2_6to7 = [ 0 for dim0 in range(2) ]
        self.curTor1_6to7 = [ 0 for dim0 in range(2) ]
        self.curTor2_6to7 = [ 0 for dim0 in range(2) ]
        self.res1_6to7 = [ 0 for dim0 in range(2) ]
        self.res2_6to7 = [ 0 for dim0 in range(2) ]
        self.res3_6to7 = [ 0 for dim0 in range(2) ]
        self.res4_6to7 = [ 0 for dim0 in range(2) ]
        self.res5_6to7 = [ 0 for dim0 in range(2) ]
        self.res6_6to7 = [ 0 for dim0 in range(2) ]
        self.stat_hand = [ 0 for dim0 in range(2) ]
        self.pos1_hand = [ 0 for dim0 in range(2) ]
        self.pos2_hand = [ 0 for dim0 in range(2) ]
        self.pos3_hand = [ 0 for dim0 in range(2) ]
        self.pos4_hand = [ 0 for dim0 in range(2) ]
        self.pos5_hand = [ 0 for dim0 in range(2) ]
        self.pos6_hand = [ 0 for dim0 in range(2) ]
        self.pos7_hand = [ 0 for dim0 in range(2) ]
        self.curTor1_hand = [ 0 for dim0 in range(2) ]
        self.curTor2_hand = [ 0 for dim0 in range(2) ]
        self.curTor3_hand = [ 0 for dim0 in range(2) ]
        self.curTor4_hand = [ 0 for dim0 in range(2) ]
        self.curTor5_hand = [ 0 for dim0 in range(2) ]
        self.curTor6_hand = [ 0 for dim0 in range(2) ]
        self.curTor7_hand = [ 0 for dim0 in range(2) ]
        self.IMU_roll_hand = [ 0 for dim0 in range(2) ]
        self.IMU_pitch_hand = [ 0 for dim0 in range(2) ]
        self.IMU_yaw_hand = [ 0 for dim0 in range(2) ]
        self.IMU_roll_vel_hand = [ 0 for dim0 in range(2) ]
        self.IMU_pitch_vel_hand = [ 0 for dim0 in range(2) ]
        self.IMU_yaw_vel_hand = [ 0 for dim0 in range(2) ]
        self.IMU_roll_acc_hand = [ 0 for dim0 in range(2) ]
        self.IMU_pitch_acc_hand = [ 0 for dim0 in range(2) ]
        self.IMU_yaw_acc_hand = [ 0 for dim0 in range(2) ]
        self.mc_arm_curPos = [ 0.0 for dim0 in range(14) ]
        self.mc_arm_curVel = [ 0.0 for dim0 in range(14) ]
        self.mc_arm_curTor = [ 0.0 for dim0 in range(14) ]
        self.mc_arm_curCur = [ 0.0 for dim0 in range(14) ]
        self.original_arm_curPos = [ 0.0 for dim0 in range(14) ]
        self.original_arm_curVel = [ 0.0 for dim0 in range(14) ]
        self.original_arm_curTor = [ 0.0 for dim0 in range(14) ]
        self.original_arm_curCur = [ 0.0 for dim0 in range(14) ]
        self.original_hand_curPos = [ 0.0 for dim0 in range(12) ]
        self.original_hand_curTor = [ 0.0 for dim0 in range(12) ]
        self.original_Fx = [ 0.0 for dim0 in range(2) ]
        self.original_Fy = [ 0.0 for dim0 in range(2) ]
        self.original_Fz = [ 0.0 for dim0 in range(2) ]
        self.original_Mx = [ 0.0 for dim0 in range(2) ]
        self.original_My = [ 0.0 for dim0 in range(2) ]
        self.original_Mz = [ 0.0 for dim0 in range(2) ]

    def encode(self):
        buf = BytesIO()
        buf.write(ecat_p3_upperbody_data_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>10h', *self.stat_1to5[:10]))
        buf.write(struct.pack('>10h', *self.curPos1H_1to5[:10]))
        buf.write(struct.pack('>10h', *self.curPos1L_1to5[:10]))
        buf.write(struct.pack('>10h', *self.curPos2H_1to5[:10]))
        buf.write(struct.pack('>10h', *self.curPos2L_1to5[:10]))
        buf.write(struct.pack('>10h', *self.curVel_1to5[:10]))
        buf.write(struct.pack('>10h', *self.curCur_1to5[:10]))
        buf.write(struct.pack('>10h', *self.curTor_1to5[:10]))
        buf.write(struct.pack('>10h', *self.res1_1to5[:10]))
        buf.write(struct.pack('>10h', *self.res2_1to5[:10]))
        buf.write(struct.pack('>10h', *self.res3_1to5[:10]))
        buf.write(struct.pack('>10h', *self.res4_1to5[:10]))
        buf.write(struct.pack('>2h', *self.stat_6to7[:2]))
        buf.write(struct.pack('>2h', *self.curPos1H_6to7[:2]))
        buf.write(struct.pack('>2h', *self.curPos1L_6to7[:2]))
        buf.write(struct.pack('>2h', *self.curPos2H_6to7[:2]))
        buf.write(struct.pack('>2h', *self.curPos2L_6to7[:2]))
        buf.write(struct.pack('>2h', *self.curVel1_6to7[:2]))
        buf.write(struct.pack('>2h', *self.curVel2_6to7[:2]))
        buf.write(struct.pack('>2h', *self.curCur1_6to7[:2]))
        buf.write(struct.pack('>2h', *self.curCur2_6to7[:2]))
        buf.write(struct.pack('>2h', *self.curTor1_6to7[:2]))
        buf.write(struct.pack('>2h', *self.curTor2_6to7[:2]))
        buf.write(struct.pack('>2h', *self.res1_6to7[:2]))
        buf.write(struct.pack('>2h', *self.res2_6to7[:2]))
        buf.write(struct.pack('>2h', *self.res3_6to7[:2]))
        buf.write(struct.pack('>2h', *self.res4_6to7[:2]))
        buf.write(struct.pack('>2h', *self.res5_6to7[:2]))
        buf.write(struct.pack('>2h', *self.res6_6to7[:2]))
        buf.write(struct.pack('>2h', *self.stat_hand[:2]))
        buf.write(struct.pack('>2h', *self.pos1_hand[:2]))
        buf.write(struct.pack('>2h', *self.pos2_hand[:2]))
        buf.write(struct.pack('>2h', *self.pos3_hand[:2]))
        buf.write(struct.pack('>2h', *self.pos4_hand[:2]))
        buf.write(struct.pack('>2h', *self.pos5_hand[:2]))
        buf.write(struct.pack('>2h', *self.pos6_hand[:2]))
        buf.write(struct.pack('>2h', *self.pos7_hand[:2]))
        buf.write(struct.pack('>2h', *self.curTor1_hand[:2]))
        buf.write(struct.pack('>2h', *self.curTor2_hand[:2]))
        buf.write(struct.pack('>2h', *self.curTor3_hand[:2]))
        buf.write(struct.pack('>2h', *self.curTor4_hand[:2]))
        buf.write(struct.pack('>2h', *self.curTor5_hand[:2]))
        buf.write(struct.pack('>2h', *self.curTor6_hand[:2]))
        buf.write(struct.pack('>2h', *self.curTor7_hand[:2]))
        buf.write(struct.pack('>2h', *self.IMU_roll_hand[:2]))
        buf.write(struct.pack('>2h', *self.IMU_pitch_hand[:2]))
        buf.write(struct.pack('>2h', *self.IMU_yaw_hand[:2]))
        buf.write(struct.pack('>2h', *self.IMU_roll_vel_hand[:2]))
        buf.write(struct.pack('>2h', *self.IMU_pitch_vel_hand[:2]))
        buf.write(struct.pack('>2h', *self.IMU_yaw_vel_hand[:2]))
        buf.write(struct.pack('>2h', *self.IMU_roll_acc_hand[:2]))
        buf.write(struct.pack('>2h', *self.IMU_pitch_acc_hand[:2]))
        buf.write(struct.pack('>2h', *self.IMU_yaw_acc_hand[:2]))
        buf.write(struct.pack('>14f', *self.mc_arm_curPos[:14]))
        buf.write(struct.pack('>14f', *self.mc_arm_curVel[:14]))
        buf.write(struct.pack('>14f', *self.mc_arm_curTor[:14]))
        buf.write(struct.pack('>14f', *self.mc_arm_curCur[:14]))
        buf.write(struct.pack('>14f', *self.original_arm_curPos[:14]))
        buf.write(struct.pack('>14f', *self.original_arm_curVel[:14]))
        buf.write(struct.pack('>14f', *self.original_arm_curTor[:14]))
        buf.write(struct.pack('>14f', *self.original_arm_curCur[:14]))
        buf.write(struct.pack('>12f', *self.original_hand_curPos[:12]))
        buf.write(struct.pack('>12f', *self.original_hand_curTor[:12]))
        buf.write(struct.pack('>2d', *self.original_Fx[:2]))
        buf.write(struct.pack('>2d', *self.original_Fy[:2]))
        buf.write(struct.pack('>2d', *self.original_Fz[:2]))
        buf.write(struct.pack('>2d', *self.original_Mx[:2]))
        buf.write(struct.pack('>2d', *self.original_My[:2]))
        buf.write(struct.pack('>2d', *self.original_Mz[:2]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ecat_p3_upperbody_data_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ecat_p3_upperbody_data_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ecat_p3_upperbody_data_lcmt()
        self.stat_1to5 = struct.unpack('>10h', buf.read(20))
        self.curPos1H_1to5 = struct.unpack('>10h', buf.read(20))
        self.curPos1L_1to5 = struct.unpack('>10h', buf.read(20))
        self.curPos2H_1to5 = struct.unpack('>10h', buf.read(20))
        self.curPos2L_1to5 = struct.unpack('>10h', buf.read(20))
        self.curVel_1to5 = struct.unpack('>10h', buf.read(20))
        self.curCur_1to5 = struct.unpack('>10h', buf.read(20))
        self.curTor_1to5 = struct.unpack('>10h', buf.read(20))
        self.res1_1to5 = struct.unpack('>10h', buf.read(20))
        self.res2_1to5 = struct.unpack('>10h', buf.read(20))
        self.res3_1to5 = struct.unpack('>10h', buf.read(20))
        self.res4_1to5 = struct.unpack('>10h', buf.read(20))
        self.stat_6to7 = struct.unpack('>2h', buf.read(4))
        self.curPos1H_6to7 = struct.unpack('>2h', buf.read(4))
        self.curPos1L_6to7 = struct.unpack('>2h', buf.read(4))
        self.curPos2H_6to7 = struct.unpack('>2h', buf.read(4))
        self.curPos2L_6to7 = struct.unpack('>2h', buf.read(4))
        self.curVel1_6to7 = struct.unpack('>2h', buf.read(4))
        self.curVel2_6to7 = struct.unpack('>2h', buf.read(4))
        self.curCur1_6to7 = struct.unpack('>2h', buf.read(4))
        self.curCur2_6to7 = struct.unpack('>2h', buf.read(4))
        self.curTor1_6to7 = struct.unpack('>2h', buf.read(4))
        self.curTor2_6to7 = struct.unpack('>2h', buf.read(4))
        self.res1_6to7 = struct.unpack('>2h', buf.read(4))
        self.res2_6to7 = struct.unpack('>2h', buf.read(4))
        self.res3_6to7 = struct.unpack('>2h', buf.read(4))
        self.res4_6to7 = struct.unpack('>2h', buf.read(4))
        self.res5_6to7 = struct.unpack('>2h', buf.read(4))
        self.res6_6to7 = struct.unpack('>2h', buf.read(4))
        self.stat_hand = struct.unpack('>2h', buf.read(4))
        self.pos1_hand = struct.unpack('>2h', buf.read(4))
        self.pos2_hand = struct.unpack('>2h', buf.read(4))
        self.pos3_hand = struct.unpack('>2h', buf.read(4))
        self.pos4_hand = struct.unpack('>2h', buf.read(4))
        self.pos5_hand = struct.unpack('>2h', buf.read(4))
        self.pos6_hand = struct.unpack('>2h', buf.read(4))
        self.pos7_hand = struct.unpack('>2h', buf.read(4))
        self.curTor1_hand = struct.unpack('>2h', buf.read(4))
        self.curTor2_hand = struct.unpack('>2h', buf.read(4))
        self.curTor3_hand = struct.unpack('>2h', buf.read(4))
        self.curTor4_hand = struct.unpack('>2h', buf.read(4))
        self.curTor5_hand = struct.unpack('>2h', buf.read(4))
        self.curTor6_hand = struct.unpack('>2h', buf.read(4))
        self.curTor7_hand = struct.unpack('>2h', buf.read(4))
        self.IMU_roll_hand = struct.unpack('>2h', buf.read(4))
        self.IMU_pitch_hand = struct.unpack('>2h', buf.read(4))
        self.IMU_yaw_hand = struct.unpack('>2h', buf.read(4))
        self.IMU_roll_vel_hand = struct.unpack('>2h', buf.read(4))
        self.IMU_pitch_vel_hand = struct.unpack('>2h', buf.read(4))
        self.IMU_yaw_vel_hand = struct.unpack('>2h', buf.read(4))
        self.IMU_roll_acc_hand = struct.unpack('>2h', buf.read(4))
        self.IMU_pitch_acc_hand = struct.unpack('>2h', buf.read(4))
        self.IMU_yaw_acc_hand = struct.unpack('>2h', buf.read(4))
        self.mc_arm_curPos = struct.unpack('>14f', buf.read(56))
        self.mc_arm_curVel = struct.unpack('>14f', buf.read(56))
        self.mc_arm_curTor = struct.unpack('>14f', buf.read(56))
        self.mc_arm_curCur = struct.unpack('>14f', buf.read(56))
        self.original_arm_curPos = struct.unpack('>14f', buf.read(56))
        self.original_arm_curVel = struct.unpack('>14f', buf.read(56))
        self.original_arm_curTor = struct.unpack('>14f', buf.read(56))
        self.original_arm_curCur = struct.unpack('>14f', buf.read(56))
        self.original_hand_curPos = struct.unpack('>12f', buf.read(48))
        self.original_hand_curTor = struct.unpack('>12f', buf.read(48))
        self.original_Fx = struct.unpack('>2d', buf.read(16))
        self.original_Fy = struct.unpack('>2d', buf.read(16))
        self.original_Fz = struct.unpack('>2d', buf.read(16))
        self.original_Mx = struct.unpack('>2d', buf.read(16))
        self.original_My = struct.unpack('>2d', buf.read(16))
        self.original_Mz = struct.unpack('>2d', buf.read(16))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if ecat_p3_upperbody_data_lcmt in parents: return 0
        tmphash = (0xbd02ec69c70f6519) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ecat_p3_upperbody_data_lcmt._packed_fingerprint is None:
            ecat_p3_upperbody_data_lcmt._packed_fingerprint = struct.pack(">Q", ecat_p3_upperbody_data_lcmt._get_hash_recursive([]))
        return ecat_p3_upperbody_data_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

