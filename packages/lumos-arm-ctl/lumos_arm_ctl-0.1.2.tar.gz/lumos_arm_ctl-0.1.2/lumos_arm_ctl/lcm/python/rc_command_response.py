"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class rc_command_response(object):
    __slots__ = ["robot_fsm_cmd", "stop_flag", "arm_motion_cmd"]

    def __init__(self):
        self.robot_fsm_cmd = 0
        self.stop_flag = 0
        self.arm_motion_cmd = 0

    def encode(self):
        buf = BytesIO()
        buf.write(rc_command_response._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bbb", self.robot_fsm_cmd, self.stop_flag, self.arm_motion_cmd))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != rc_command_response._get_packed_fingerprint():
            raise ValueError("Decode error")
        return rc_command_response._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = rc_command_response()
        self.robot_fsm_cmd, self.stop_flag, self.arm_motion_cmd = struct.unpack(">bbb", buf.read(3))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if rc_command_response in parents: return 0
        tmphash = (0x9f188db454925737) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if rc_command_response._packed_fingerprint is None:
            rc_command_response._packed_fingerprint = struct.pack(">Q", rc_command_response._get_hash_recursive([]))
        return rc_command_response._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

