"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class ecat_debug_cmd_lcmt(object):
    __slots__ = ["ctrlWord", "tarPosH", "tarPosL", "tarVel", "tarCur", "tarTor", "res1", "res2", "ecat_state", "mc_kp", "mc_kd", "mc_tarPos", "mc_tarVel", "mc_tarCur", "mc_tarTor", "original_kp_joint", "original_kd_joint", "original_kp_motor", "original_kd_motor", "original_tarPos", "original_tarVel", "original_tarCur", "original_tarTor"]

    def __init__(self):
        self.ctrlWord = [ 0 for dim0 in range(12) ]
        self.tarPosH = [ 0 for dim0 in range(12) ]
        self.tarPosL = [ 0 for dim0 in range(12) ]
        self.tarVel = [ 0 for dim0 in range(12) ]
        self.tarCur = [ 0 for dim0 in range(12) ]
        self.tarTor = [ 0 for dim0 in range(12) ]
        self.res1 = [ 0 for dim0 in range(12) ]
        self.res2 = [ 0 for dim0 in range(12) ]
        self.ecat_state = [ 0 for dim0 in range(17) ]
        self.mc_kp = [ 0.0 for dim0 in range(12) ]
        self.mc_kd = [ 0.0 for dim0 in range(12) ]
        self.mc_tarPos = [ 0.0 for dim0 in range(12) ]
        self.mc_tarVel = [ 0.0 for dim0 in range(12) ]
        self.mc_tarCur = [ 0.0 for dim0 in range(12) ]
        self.mc_tarTor = [ 0.0 for dim0 in range(12) ]
        self.original_kp_joint = [ 0.0 for dim0 in range(12) ]
        self.original_kd_joint = [ 0.0 for dim0 in range(12) ]
        self.original_kp_motor = [ 0.0 for dim0 in range(12) ]
        self.original_kd_motor = [ 0.0 for dim0 in range(12) ]
        self.original_tarPos = [ 0.0 for dim0 in range(12) ]
        self.original_tarVel = [ 0.0 for dim0 in range(12) ]
        self.original_tarCur = [ 0.0 for dim0 in range(12) ]
        self.original_tarTor = [ 0.0 for dim0 in range(12) ]

    def encode(self):
        buf = BytesIO()
        buf.write(ecat_debug_cmd_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>12h', *self.ctrlWord[:12]))
        buf.write(struct.pack('>12h', *self.tarPosH[:12]))
        buf.write(struct.pack('>12h', *self.tarPosL[:12]))
        buf.write(struct.pack('>12h', *self.tarVel[:12]))
        buf.write(struct.pack('>12h', *self.tarCur[:12]))
        buf.write(struct.pack('>12h', *self.tarTor[:12]))
        buf.write(struct.pack('>12h', *self.res1[:12]))
        buf.write(struct.pack('>12h', *self.res2[:12]))
        buf.write(struct.pack('>17h', *self.ecat_state[:17]))
        buf.write(struct.pack('>12f', *self.mc_kp[:12]))
        buf.write(struct.pack('>12f', *self.mc_kd[:12]))
        buf.write(struct.pack('>12f', *self.mc_tarPos[:12]))
        buf.write(struct.pack('>12f', *self.mc_tarVel[:12]))
        buf.write(struct.pack('>12f', *self.mc_tarCur[:12]))
        buf.write(struct.pack('>12f', *self.mc_tarTor[:12]))
        buf.write(struct.pack('>12f', *self.original_kp_joint[:12]))
        buf.write(struct.pack('>12f', *self.original_kd_joint[:12]))
        buf.write(struct.pack('>12f', *self.original_kp_motor[:12]))
        buf.write(struct.pack('>12f', *self.original_kd_motor[:12]))
        buf.write(struct.pack('>12f', *self.original_tarPos[:12]))
        buf.write(struct.pack('>12f', *self.original_tarVel[:12]))
        buf.write(struct.pack('>12f', *self.original_tarCur[:12]))
        buf.write(struct.pack('>12f', *self.original_tarTor[:12]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ecat_debug_cmd_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ecat_debug_cmd_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ecat_debug_cmd_lcmt()
        self.ctrlWord = struct.unpack('>12h', buf.read(24))
        self.tarPosH = struct.unpack('>12h', buf.read(24))
        self.tarPosL = struct.unpack('>12h', buf.read(24))
        self.tarVel = struct.unpack('>12h', buf.read(24))
        self.tarCur = struct.unpack('>12h', buf.read(24))
        self.tarTor = struct.unpack('>12h', buf.read(24))
        self.res1 = struct.unpack('>12h', buf.read(24))
        self.res2 = struct.unpack('>12h', buf.read(24))
        self.ecat_state = struct.unpack('>17h', buf.read(34))
        self.mc_kp = struct.unpack('>12f', buf.read(48))
        self.mc_kd = struct.unpack('>12f', buf.read(48))
        self.mc_tarPos = struct.unpack('>12f', buf.read(48))
        self.mc_tarVel = struct.unpack('>12f', buf.read(48))
        self.mc_tarCur = struct.unpack('>12f', buf.read(48))
        self.mc_tarTor = struct.unpack('>12f', buf.read(48))
        self.original_kp_joint = struct.unpack('>12f', buf.read(48))
        self.original_kd_joint = struct.unpack('>12f', buf.read(48))
        self.original_kp_motor = struct.unpack('>12f', buf.read(48))
        self.original_kd_motor = struct.unpack('>12f', buf.read(48))
        self.original_tarPos = struct.unpack('>12f', buf.read(48))
        self.original_tarVel = struct.unpack('>12f', buf.read(48))
        self.original_tarCur = struct.unpack('>12f', buf.read(48))
        self.original_tarTor = struct.unpack('>12f', buf.read(48))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if ecat_debug_cmd_lcmt in parents: return 0
        tmphash = (0x5070596f902b25f2) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ecat_debug_cmd_lcmt._packed_fingerprint is None:
            ecat_debug_cmd_lcmt._packed_fingerprint = struct.pack(">Q", ecat_debug_cmd_lcmt._get_hash_recursive([]))
        return ecat_debug_cmd_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

