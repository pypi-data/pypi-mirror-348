/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class can_debug_cmd_lcmt implements lcm.lcm.LCMEncodable
{
    public int raw_target_position[];
    public int raw_target_vel[];
    public int raw_target_current[];
    public int adrc_x1[];
    public int cmd_id[];
    public float motor_tarPos[];
    public float joint_tarPos[];
 
    public can_debug_cmd_lcmt()
    {
        raw_target_position = new int[14];
        raw_target_vel = new int[14];
        raw_target_current = new int[14];
        adrc_x1 = new int[14];
        cmd_id = new int[14];
        motor_tarPos = new float[14];
        joint_tarPos = new float[14];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xcaf4c86f831494a4L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.can_debug_cmd_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.can_debug_cmd_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 14; a++) {
            outs.writeInt(this.raw_target_position[a]); 
        }
 
        for (int a = 0; a < 14; a++) {
            outs.writeInt(this.raw_target_vel[a]); 
        }
 
        for (int a = 0; a < 14; a++) {
            outs.writeInt(this.raw_target_current[a]); 
        }
 
        for (int a = 0; a < 14; a++) {
            outs.writeInt(this.adrc_x1[a]); 
        }
 
        for (int a = 0; a < 14; a++) {
            outs.writeInt(this.cmd_id[a]); 
        }
 
        for (int a = 0; a < 14; a++) {
            outs.writeFloat(this.motor_tarPos[a]); 
        }
 
        for (int a = 0; a < 14; a++) {
            outs.writeFloat(this.joint_tarPos[a]); 
        }
 
    }
 
    public can_debug_cmd_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public can_debug_cmd_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.can_debug_cmd_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.can_debug_cmd_lcmt o = new lcmtypes.can_debug_cmd_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.raw_target_position = new int[(int) 14];
        for (int a = 0; a < 14; a++) {
            this.raw_target_position[a] = ins.readInt();
        }
 
        this.raw_target_vel = new int[(int) 14];
        for (int a = 0; a < 14; a++) {
            this.raw_target_vel[a] = ins.readInt();
        }
 
        this.raw_target_current = new int[(int) 14];
        for (int a = 0; a < 14; a++) {
            this.raw_target_current[a] = ins.readInt();
        }
 
        this.adrc_x1 = new int[(int) 14];
        for (int a = 0; a < 14; a++) {
            this.adrc_x1[a] = ins.readInt();
        }
 
        this.cmd_id = new int[(int) 14];
        for (int a = 0; a < 14; a++) {
            this.cmd_id[a] = ins.readInt();
        }
 
        this.motor_tarPos = new float[(int) 14];
        for (int a = 0; a < 14; a++) {
            this.motor_tarPos[a] = ins.readFloat();
        }
 
        this.joint_tarPos = new float[(int) 14];
        for (int a = 0; a < 14; a++) {
            this.joint_tarPos[a] = ins.readFloat();
        }
 
    }
 
    public lcmtypes.can_debug_cmd_lcmt copy()
    {
        lcmtypes.can_debug_cmd_lcmt outobj = new lcmtypes.can_debug_cmd_lcmt();
        outobj.raw_target_position = new int[(int) 14];
        System.arraycopy(this.raw_target_position, 0, outobj.raw_target_position, 0, 14); 
        outobj.raw_target_vel = new int[(int) 14];
        System.arraycopy(this.raw_target_vel, 0, outobj.raw_target_vel, 0, 14); 
        outobj.raw_target_current = new int[(int) 14];
        System.arraycopy(this.raw_target_current, 0, outobj.raw_target_current, 0, 14); 
        outobj.adrc_x1 = new int[(int) 14];
        System.arraycopy(this.adrc_x1, 0, outobj.adrc_x1, 0, 14); 
        outobj.cmd_id = new int[(int) 14];
        System.arraycopy(this.cmd_id, 0, outobj.cmd_id, 0, 14); 
        outobj.motor_tarPos = new float[(int) 14];
        System.arraycopy(this.motor_tarPos, 0, outobj.motor_tarPos, 0, 14); 
        outobj.joint_tarPos = new float[(int) 14];
        System.arraycopy(this.joint_tarPos, 0, outobj.joint_tarPos, 0, 14); 
        return outobj;
    }
 
}

