/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class arm_and_hand_data_package implements lcm.lcm.LCMEncodable
{
    public int isUsed;
    public int curStatusVec[];
    public int curErrCodeVec[];
    public float curJointPosVec[];
    public float curSpeedVec[];
    public float curCurrentVec[];
    public float endEffectorXYZRPY[];
 
    public arm_and_hand_data_package()
    {
        curStatusVec = new int[26];
        curErrCodeVec = new int[26];
        curJointPosVec = new float[26];
        curSpeedVec = new float[26];
        curCurrentVec = new float[26];
        endEffectorXYZRPY = new float[24];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x2328c31bc5967e62L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.arm_and_hand_data_package.class))
            return 0L;
 
        classes.add(lcmtypes.arm_and_hand_data_package.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.isUsed); 
 
        for (int a = 0; a < 26; a++) {
            outs.writeInt(this.curStatusVec[a]); 
        }
 
        for (int a = 0; a < 26; a++) {
            outs.writeInt(this.curErrCodeVec[a]); 
        }
 
        for (int a = 0; a < 26; a++) {
            outs.writeFloat(this.curJointPosVec[a]); 
        }
 
        for (int a = 0; a < 26; a++) {
            outs.writeFloat(this.curSpeedVec[a]); 
        }
 
        for (int a = 0; a < 26; a++) {
            outs.writeFloat(this.curCurrentVec[a]); 
        }
 
        for (int a = 0; a < 24; a++) {
            outs.writeFloat(this.endEffectorXYZRPY[a]); 
        }
 
    }
 
    public arm_and_hand_data_package(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public arm_and_hand_data_package(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.arm_and_hand_data_package _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.arm_and_hand_data_package o = new lcmtypes.arm_and_hand_data_package();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.isUsed = ins.readInt();
 
        this.curStatusVec = new int[(int) 26];
        for (int a = 0; a < 26; a++) {
            this.curStatusVec[a] = ins.readInt();
        }
 
        this.curErrCodeVec = new int[(int) 26];
        for (int a = 0; a < 26; a++) {
            this.curErrCodeVec[a] = ins.readInt();
        }
 
        this.curJointPosVec = new float[(int) 26];
        for (int a = 0; a < 26; a++) {
            this.curJointPosVec[a] = ins.readFloat();
        }
 
        this.curSpeedVec = new float[(int) 26];
        for (int a = 0; a < 26; a++) {
            this.curSpeedVec[a] = ins.readFloat();
        }
 
        this.curCurrentVec = new float[(int) 26];
        for (int a = 0; a < 26; a++) {
            this.curCurrentVec[a] = ins.readFloat();
        }
 
        this.endEffectorXYZRPY = new float[(int) 24];
        for (int a = 0; a < 24; a++) {
            this.endEffectorXYZRPY[a] = ins.readFloat();
        }
 
    }
 
    public lcmtypes.arm_and_hand_data_package copy()
    {
        lcmtypes.arm_and_hand_data_package outobj = new lcmtypes.arm_and_hand_data_package();
        outobj.isUsed = this.isUsed;
 
        outobj.curStatusVec = new int[(int) 26];
        System.arraycopy(this.curStatusVec, 0, outobj.curStatusVec, 0, 26); 
        outobj.curErrCodeVec = new int[(int) 26];
        System.arraycopy(this.curErrCodeVec, 0, outobj.curErrCodeVec, 0, 26); 
        outobj.curJointPosVec = new float[(int) 26];
        System.arraycopy(this.curJointPosVec, 0, outobj.curJointPosVec, 0, 26); 
        outobj.curSpeedVec = new float[(int) 26];
        System.arraycopy(this.curSpeedVec, 0, outobj.curSpeedVec, 0, 26); 
        outobj.curCurrentVec = new float[(int) 26];
        System.arraycopy(this.curCurrentVec, 0, outobj.curCurrentVec, 0, 26); 
        outobj.endEffectorXYZRPY = new float[(int) 24];
        System.arraycopy(this.endEffectorXYZRPY, 0, outobj.endEffectorXYZRPY, 0, 24); 
        return outobj;
    }
 
}

