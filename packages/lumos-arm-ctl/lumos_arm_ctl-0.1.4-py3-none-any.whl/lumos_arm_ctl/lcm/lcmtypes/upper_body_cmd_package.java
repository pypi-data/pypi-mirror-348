/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class upper_body_cmd_package implements lcm.lcm.LCMEncodable
{
    public int isUsed;
    public int control_mode[];
    public float jointPosVec[];
    public float jointSpeedVec[];
    public float jointCurrentVec[];
    public float body_yaw;
 
    public upper_body_cmd_package()
    {
        control_mode = new int[28];
        jointPosVec = new float[28];
        jointSpeedVec = new float[28];
        jointCurrentVec = new float[28];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x986309b48c31913aL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.upper_body_cmd_package.class))
            return 0L;
 
        classes.add(lcmtypes.upper_body_cmd_package.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.isUsed); 
 
        for (int a = 0; a < 28; a++) {
            outs.writeInt(this.control_mode[a]); 
        }
 
        for (int a = 0; a < 28; a++) {
            outs.writeFloat(this.jointPosVec[a]); 
        }
 
        for (int a = 0; a < 28; a++) {
            outs.writeFloat(this.jointSpeedVec[a]); 
        }
 
        for (int a = 0; a < 28; a++) {
            outs.writeFloat(this.jointCurrentVec[a]); 
        }
 
        outs.writeFloat(this.body_yaw); 
 
    }
 
    public upper_body_cmd_package(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public upper_body_cmd_package(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.upper_body_cmd_package _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.upper_body_cmd_package o = new lcmtypes.upper_body_cmd_package();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.isUsed = ins.readInt();
 
        this.control_mode = new int[(int) 28];
        for (int a = 0; a < 28; a++) {
            this.control_mode[a] = ins.readInt();
        }
 
        this.jointPosVec = new float[(int) 28];
        for (int a = 0; a < 28; a++) {
            this.jointPosVec[a] = ins.readFloat();
        }
 
        this.jointSpeedVec = new float[(int) 28];
        for (int a = 0; a < 28; a++) {
            this.jointSpeedVec[a] = ins.readFloat();
        }
 
        this.jointCurrentVec = new float[(int) 28];
        for (int a = 0; a < 28; a++) {
            this.jointCurrentVec[a] = ins.readFloat();
        }
 
        this.body_yaw = ins.readFloat();
 
    }
 
    public lcmtypes.upper_body_cmd_package copy()
    {
        lcmtypes.upper_body_cmd_package outobj = new lcmtypes.upper_body_cmd_package();
        outobj.isUsed = this.isUsed;
 
        outobj.control_mode = new int[(int) 28];
        System.arraycopy(this.control_mode, 0, outobj.control_mode, 0, 28); 
        outobj.jointPosVec = new float[(int) 28];
        System.arraycopy(this.jointPosVec, 0, outobj.jointPosVec, 0, 28); 
        outobj.jointSpeedVec = new float[(int) 28];
        System.arraycopy(this.jointSpeedVec, 0, outobj.jointSpeedVec, 0, 28); 
        outobj.jointCurrentVec = new float[(int) 28];
        System.arraycopy(this.jointCurrentVec, 0, outobj.jointCurrentVec, 0, 28); 
        outobj.body_yaw = this.body_yaw;
 
        return outobj;
    }
 
}

