"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class ecat_p3b_upperbody_cmd_lcmt(object):
    __slots__ = ["ctrlWord", "tarPosH", "tarPosL", "tarVel", "tarCur", "tarTor", "res1", "res2", "res3", "res4", "mc_arm_tarPos", "mc_arm_tarVel", "mc_arm_tarTor", "original_arm_tarPos", "original_arm_tarVel", "original_arm_tarTor", "ctrlword_hand", "pos_hand"]

    def __init__(self):
        self.ctrlWord = [ 0 for dim0 in range(15) ]
        self.tarPosH = [ 0 for dim0 in range(15) ]
        self.tarPosL = [ 0 for dim0 in range(15) ]
        self.tarVel = [ 0 for dim0 in range(15) ]
        self.tarCur = [ 0 for dim0 in range(15) ]
        self.tarTor = [ 0 for dim0 in range(15) ]
        self.res1 = [ 0 for dim0 in range(15) ]
        self.res2 = [ 0 for dim0 in range(15) ]
        self.res3 = [ 0 for dim0 in range(15) ]
        self.res4 = [ 0 for dim0 in range(15) ]
        self.mc_arm_tarPos = [ 0.0 for dim0 in range(15) ]
        self.mc_arm_tarVel = [ 0.0 for dim0 in range(15) ]
        self.mc_arm_tarTor = [ 0.0 for dim0 in range(15) ]
        self.original_arm_tarPos = [ 0.0 for dim0 in range(15) ]
        self.original_arm_tarVel = [ 0.0 for dim0 in range(15) ]
        self.original_arm_tarTor = [ 0.0 for dim0 in range(15) ]
        self.ctrlword_hand = [ 0 for dim0 in range(2) ]
        self.pos_hand = [ 0 for dim0 in range(14) ]

    def encode(self):
        buf = BytesIO()
        buf.write(ecat_p3b_upperbody_cmd_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>15h', *self.ctrlWord[:15]))
        buf.write(struct.pack('>15h', *self.tarPosH[:15]))
        buf.write(struct.pack('>15h', *self.tarPosL[:15]))
        buf.write(struct.pack('>15h', *self.tarVel[:15]))
        buf.write(struct.pack('>15h', *self.tarCur[:15]))
        buf.write(struct.pack('>15h', *self.tarTor[:15]))
        buf.write(struct.pack('>15h', *self.res1[:15]))
        buf.write(struct.pack('>15h', *self.res2[:15]))
        buf.write(struct.pack('>15h', *self.res3[:15]))
        buf.write(struct.pack('>15h', *self.res4[:15]))
        buf.write(struct.pack('>15f', *self.mc_arm_tarPos[:15]))
        buf.write(struct.pack('>15f', *self.mc_arm_tarVel[:15]))
        buf.write(struct.pack('>15f', *self.mc_arm_tarTor[:15]))
        buf.write(struct.pack('>15f', *self.original_arm_tarPos[:15]))
        buf.write(struct.pack('>15f', *self.original_arm_tarVel[:15]))
        buf.write(struct.pack('>15f', *self.original_arm_tarTor[:15]))
        buf.write(struct.pack('>2h', *self.ctrlword_hand[:2]))
        buf.write(struct.pack('>14h', *self.pos_hand[:14]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ecat_p3b_upperbody_cmd_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ecat_p3b_upperbody_cmd_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ecat_p3b_upperbody_cmd_lcmt()
        self.ctrlWord = struct.unpack('>15h', buf.read(30))
        self.tarPosH = struct.unpack('>15h', buf.read(30))
        self.tarPosL = struct.unpack('>15h', buf.read(30))
        self.tarVel = struct.unpack('>15h', buf.read(30))
        self.tarCur = struct.unpack('>15h', buf.read(30))
        self.tarTor = struct.unpack('>15h', buf.read(30))
        self.res1 = struct.unpack('>15h', buf.read(30))
        self.res2 = struct.unpack('>15h', buf.read(30))
        self.res3 = struct.unpack('>15h', buf.read(30))
        self.res4 = struct.unpack('>15h', buf.read(30))
        self.mc_arm_tarPos = struct.unpack('>15f', buf.read(60))
        self.mc_arm_tarVel = struct.unpack('>15f', buf.read(60))
        self.mc_arm_tarTor = struct.unpack('>15f', buf.read(60))
        self.original_arm_tarPos = struct.unpack('>15f', buf.read(60))
        self.original_arm_tarVel = struct.unpack('>15f', buf.read(60))
        self.original_arm_tarTor = struct.unpack('>15f', buf.read(60))
        self.ctrlword_hand = struct.unpack('>2h', buf.read(4))
        self.pos_hand = struct.unpack('>14h', buf.read(28))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if ecat_p3b_upperbody_cmd_lcmt in parents: return 0
        tmphash = (0x3749731d10987d8e) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ecat_p3b_upperbody_cmd_lcmt._packed_fingerprint is None:
            ecat_p3b_upperbody_cmd_lcmt._packed_fingerprint = struct.pack(">Q", ecat_p3b_upperbody_cmd_lcmt._get_hash_recursive([]))
        return ecat_p3b_upperbody_cmd_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

