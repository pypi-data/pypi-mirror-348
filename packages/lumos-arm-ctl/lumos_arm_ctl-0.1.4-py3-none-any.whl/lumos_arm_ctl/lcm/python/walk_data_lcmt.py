"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class walk_data_lcmt(object):
    __slots__ = ["v", "swing_state", "mpc_swing_v_gain", "pf_rel", "planed_v", "other_swing_leg_compensation_v_sum", "other_swing_leg_compensation_r_sum"]

    def __init__(self):
        self.v = [ 0.0 for dim0 in range(2) ]
        self.swing_state = [ 0.0 for dim0 in range(2) ]
        self.mpc_swing_v_gain = [ 0.0 for dim0 in range(2) ]
        self.pf_rel = [ 0.0 for dim0 in range(2) ]
        self.planed_v = [ 0.0 for dim0 in range(3) ]
        self.other_swing_leg_compensation_v_sum = 0.0
        self.other_swing_leg_compensation_r_sum = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(walk_data_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>2f', *self.v[:2]))
        buf.write(struct.pack('>2f', *self.swing_state[:2]))
        buf.write(struct.pack('>2f', *self.mpc_swing_v_gain[:2]))
        buf.write(struct.pack('>2f', *self.pf_rel[:2]))
        buf.write(struct.pack('>3f', *self.planed_v[:3]))
        buf.write(struct.pack(">ff", self.other_swing_leg_compensation_v_sum, self.other_swing_leg_compensation_r_sum))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != walk_data_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return walk_data_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = walk_data_lcmt()
        self.v = struct.unpack('>2f', buf.read(8))
        self.swing_state = struct.unpack('>2f', buf.read(8))
        self.mpc_swing_v_gain = struct.unpack('>2f', buf.read(8))
        self.pf_rel = struct.unpack('>2f', buf.read(8))
        self.planed_v = struct.unpack('>3f', buf.read(12))
        self.other_swing_leg_compensation_v_sum, self.other_swing_leg_compensation_r_sum = struct.unpack(">ff", buf.read(8))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if walk_data_lcmt in parents: return 0
        tmphash = (0x3292e3ee3b1ea653) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if walk_data_lcmt._packed_fingerprint is None:
            walk_data_lcmt._packed_fingerprint = struct.pack(">Q", walk_data_lcmt._get_hash_recursive([]))
        return walk_data_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

