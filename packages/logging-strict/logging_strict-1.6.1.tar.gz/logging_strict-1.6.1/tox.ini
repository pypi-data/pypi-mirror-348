# rm -rf build/lib; cd .tox && tox -r --root=.. -c ../tox.ini -e docs --workdir=. -vvv; cd - &>/dev/null
[tox]
isolated_build=True
env_list =
    docs, lint, mypy, pre-commit, twine, pkg_meta
toxworkdir = {env:TOXWORKDIR:.tox}

[gh]
# `PYVERSIONS <https://pypi.org/project/tox-gh/>`_
# `Example with pypy3.10 <https://github.com/celery/kombu/blob/main/tox.ini>`_
python =
    3.9: py39
    3.10: py310
    3.11: py311
    3.12: py312
    3.13: py313
    pypy3: pypy3

[testenv]
usedevelop = False
download = True
extras =
    toml

basepython =
    docs: python3.13
    lint, mypy, pre-commit, twine, pkg_meta: python3.9

deps =
    -r requirements/pip.lock

# Windows can't update the pip version with pip running, so use Python
# to install things.
install_command = python -m pip install -I {opts} {packages}

passenv = *
setenv =
    #PYTHONWARNINGS=ignore:removed in Python 3.14; use ast.Constant:DeprecationWarning
    # Disable CPython's color output
    PYTHON_COLORS=0
    TOXINIDIR = {toxinidir}

# igor.py creates _version.py and builds wheel
# ignores the wheel
commands =
    python -c 'import build; print(build.__path__)'
    python igor.py build_next "current"
    python -m pip install --disable-pip-version-check -q .

[testenv:pkg_meta]
description = check wheel
skip_install = true
setenv =
    SETUPTOOLS_SCM_DEBUG=true
deps =
    build
    check-wheel-contents>=0.6.2
    twine>=6.1.0
    check-manifest
commands =
    python -m build -o {env_tmp_dir}{/}
    -check-manifest
    twine check {env_tmp_dir}{/}*
    check-wheel-contents --no-config {env_tmp_dir}

[testenv:docs]
description = sphinx docs
# One of the PYVERSIONS, that's currently supported by Sphinx. Make sure it
# matches the `python:version:` in the .readthedocs.yml file, and the
# python-version in the `doc` job in the .github/workflows/quality.yml workflow.

# Build the docs so we know if they are successful.  We build twice: once with
# -q to get all warnings, and once with -QW to get a success/fail status
# return.
deps =
    -r docs/requirements.lock
allowlist_externals =
    make
commands =
    sphinx-build -b html -aEnqW docs docs/_build/html
    rst2html --strict README.rst docs/_build/trash.html
    sphinx-build -b html -b linkcheck -aEnq docs docs/_build/html
    sphinx-build -b html -b linkcheck -aEnQW docs docs/_build/html
    - sphinx-build -b doctest docs docs/_build/html

[testenv:lint]
description = pre-commit and build
deps =
    -r requirements/dev.lock

setenv =
    {[testenv]setenv}

commands =
    validate-pyproject pyproject.toml
    python -m isort --profile="black" --multi-line=3 --force-grid-wrap=2 --use-parentheses --trailing-comma --ensure-newline-before-comments --line-length=88 --supported-extension="py,pyi" src/
    python -m isort --profile="black" --multi-line=3 --force-grid-wrap=2 --use-parentheses --trailing-comma --ensure-newline-before-comments --line-length=88 --supported-extension="py,pyi" tests/
    python -m flake8 --max-line-length=88 --extend-ignore="E203,W503,W605,W293,W291,E501" src/
    python -m flake8 --max-line-length=88 --extend-ignore="E203,W503,W605,W293,W291,E501" tests/
    python -m black --quiet --include='\.pyi?$' src/
    python -m black --quiet --include='\.pyi?$' tests/
    # Within a runner, have no access to dist/ folder nor contents. Skip, `twine check`

[testenv:mypy]
description = static type checking
deps =
    -r requirements/mypy.lock

setenv =
    {[testenv]setenv}

commands =
    mypy --python-version=3.9 -p logging_strict

[testenv:pre-commit]
description = Run pre-commit
skip_install = True
deps =
    -r requirements/manage.lock
setenv =
    {[testenv]setenv}

commands =
    pre-commit run --all-files --show-diff-on-failure

[testenv:twine]
description = Run twine readme check
skip_install = True
deps =
    twine
setenv =
    {[testenv]setenv}
commands =
    python -m twine check dist/*
