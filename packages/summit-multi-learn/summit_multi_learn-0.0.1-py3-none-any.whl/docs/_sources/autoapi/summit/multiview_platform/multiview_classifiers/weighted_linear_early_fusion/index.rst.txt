:mod:`summit.multiview_platform.multiview_classifiers.weighted_linear_early_fusion`
===================================================================================

.. py:module:: summit.multiview_platform.multiview_classifiers.weighted_linear_early_fusion


weighted_linear_early_fusion
----------------------------


.. py:data:: classifier_class_name
   :annotation: = WeightedLinearEarlyFusion

   

.. py:class:: WeightedLinearEarlyFusion(random_state=None, view_weights=None, monoview_classifier_name='decision_tree', monoview_classifier_config={})



   Builds a monoview dataset by concatenating the views (with a weight if
   needed) and learns a monoview classifier on the concatenation

   .. py:method:: set_params(self, monoview_classifier_name='decision_tree', monoview_classifier_config={}, **params)

      Set the parameters of this estimator.

      The method works on simple estimators as well as on nested objects
      (such as :class:`~sklearn.pipeline.Pipeline`). The latter have
      parameters of the form ``<component>__<parameter>`` so that it's
      possible to update each component of a nested object.

      :param \*\*params: Estimator parameters.
      :type \*\*params: dict

      :returns: **self** -- Estimator instance.
      :rtype: estimator instance


   .. py:method:: get_params(self, deep=True)

      Get parameters for this estimator.

      :param deep: If True, will return the parameters for this estimator and
                   contained subobjects that are estimators.
      :type deep: bool, default=True

      :returns: **params** -- Parameter names mapped to their values.
      :rtype: dict


   .. py:method:: fit(self, X, y, train_indices=None, view_indices=None)


   .. py:method:: predict(self, X, sample_indices=None, view_indices=None)


   .. py:method:: transform_data_to_monoview(self, dataset, sample_indices, view_indices)

      Here, we extract the data from the HDF5 dataset file and store all
      the concatenated views in one variable


   .. py:method:: hdf5_to_monoview(self, dataset, samples)

      Here, we concatenate the views for the asked samples



