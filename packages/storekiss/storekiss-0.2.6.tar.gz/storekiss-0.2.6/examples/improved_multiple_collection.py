#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
ÊîπËâØÁâàÔºöË§áÊï∞„ÅÆÁâπÊÆäÊñáÂ≠ó„ÇíÂê´„ÇÄ„Ç≥„É¨„ÇØ„Ç∑„Éß„É≥Âêç„ÅÆ„ÉÜ„Çπ„Éà

„Åì„ÅÆ„Çπ„ÇØ„É™„Éó„Éà„ÅØ„ÄÅÁâπÊÆäÊñáÂ≠ó„ÇÑ‰ΩøÁî®„Åß„Åç„Å™„ÅÑÊñáÂ≠ó„ÇíÂê´„ÇÄË§áÊï∞„ÅÆ„Ç≥„É¨„ÇØ„Ç∑„Éß„É≥Âêç„Åå
„Éá„Éº„Çø„Éô„Éº„Çπ„ÉÜ„Éº„Éñ„É´„Å®„Åó„Å¶Ê≠£„Åó„ÅèÂàÜÈõ¢„Åï„Çå„ÄÅ‰∫í„ÅÑ„Å´Âπ≤Ê∏â„Åó„Å™„ÅÑ„Åì„Å®„Çí„ÉÜ„Çπ„Éà„Åó„Åæ„Åô„ÄÇ

ÂâçÂõû„ÅÆ„ÉÜ„Çπ„Éà„ÅßÁô∫Ë¶ã„Åï„Çå„ÅüÂïèÈ°åÔºö
- Áï∞„Å™„Çã„É¶„Éã„Ç≥„Éº„ÉâÊñáÂ≠óÂàóÔºà„ÄåÈÉΩÈÅìÂ∫úÁúå„Äç„Å®„Äå‰∏≠ÊñáÈõÜÂêà„ÄçÔºâ„ÅåÂêå„Åò„ÉÜ„Éº„Éñ„É´Âêç„Äå____„Äç„Å´Â§âÊèõ„Åï„Çå„Çã
- „Åì„Çå„Å´„Çà„Çä„ÄÅ„Éá„Éº„Çø„ÅåÊ∑∑Âú®„Åó„ÄÅ„ÉÜ„Éº„Éñ„É´Èñì„ÅßÂπ≤Ê∏â„ÅåÁô∫Áîü„Åô„Çã

ÊîπËâØÁÇπÔºö
- „Éè„ÉÉ„Ç∑„É•„Éô„Éº„Çπ„ÅÆ„ÉÜ„Éº„Éñ„É´Âêç„Éû„É≥„Ç∞„É™„É≥„Ç∞Èñ¢Êï∞„ÇíÂÆüË£Ö
- „É¶„Éã„Ç≥„Éº„ÉâÊñáÂ≠óÂàó„ÅÆ„Éè„ÉÉ„Ç∑„É•ÂÄ§„Çí‰ΩøÁî®„Åó„Å¶‰∏ÄÊÑè„ÅÆ„ÉÜ„Éº„Éñ„É´Âêç„ÇíÁîüÊàê
- Ë°ùÁ™Å„ÅÆÂèØËÉΩÊÄß„ÇíÂ§ßÂπÖ„Å´‰ΩéÊ∏õ
"""

import os
import sys
import tempfile
import logging
import shutil
from storekiss import litestore
from storekiss.validation import Schema, StringField, NumberField, BooleanField
import sqlite3
import hashlib  # „Éè„ÉÉ„Ç∑„É•Ë®àÁÆó„Å´‰ΩøÁî®

# „É≠„ÇÆ„É≥„Ç∞„ÅÆË®≠ÂÆö
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)

# Ë¶™„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí„Éë„Çπ„Å´ËøΩÂä†„Åó„Å¶„ÄÅstorekiss„É¢„Ç∏„É•„Éº„É´„Çí„Ç§„É≥„Éù„Éº„Éà„Åß„Åç„Çã„Çà„ÅÜ„Å´„Åô„Çã
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


def improved_mangle_table_name(name):
    """
    ÊîπËâØÁâàÔºöPostgreSQL„Å®SQLite3„ÅÆ‰∏°Êñπ„ÅßÂêàÊ≥ï„Å™„ÉÜ„Éº„Éñ„É´Âêç„Å´Â§âÊèõ„Åó„Åæ„Åô„ÄÇ

    „É¶„Éã„Ç≥„Éº„ÉâÊñáÂ≠óÂàó„ÅÆ„Éè„ÉÉ„Ç∑„É•ÂÄ§„Çí‰ΩøÁî®„Åó„Å¶‰∏ÄÊÑè„ÅÆ„ÉÜ„Éº„Éñ„É´Âêç„ÇíÁîüÊàê„Åó„ÄÅ
    Áï∞„Å™„ÇãÊñáÂ≠óÂàó„ÅåÂêå„Åò„ÉÜ„Éº„Éñ„É´Âêç„Å´Â§âÊèõ„Åï„Çå„ÇãÂïèÈ°å„ÇíËß£Ê±∫„Åó„Åæ„Åô„ÄÇ
    """
    import re

    if not name:
        return "collection_default"

    # ÂêçÂâç„ÅÆ„Éè„ÉÉ„Ç∑„É•ÂÄ§„ÇíË®àÁÆóÔºàMD5„Çí‰ΩøÁî®Ôºâ
    name_hash = hashlib.md5(name.encode("utf-8")).hexdigest()[:8]

    # Ëã±Êï∞Â≠ó„ÅÆ„Åø„ÇíÊäΩÂá∫ÔºàÊúÄÂ§ß10ÊñáÂ≠óÔºâ
    alpha_part = re.sub(r"[^a-zA-Z0-9]", "", name)[:10]
    if not alpha_part:
        # Ëã±Êï∞Â≠ó„Åå‰∏Ä„Å§„ÇÇ„Å™„ÅÑÂ†¥Âêà„ÅØ„ÄÅÂÖàÈ†≠„Å´t„Çí„Å§„Åë„Çã
        alpha_part = "t"

    # Êï∞Â≠ó„ÅßÂßã„Åæ„ÇãÂ†¥Âêà„ÅØÂÖàÈ†≠„Å´'t_'„ÇíËøΩÂä†
    if alpha_part and alpha_part[0].isdigit():
        alpha_part = "t_" + alpha_part

    # ÊúÄÁµÇÁöÑ„Å™„ÉÜ„Éº„Éñ„É´Âêç„ÇíÁîüÊàêÔºàËã±Êï∞Â≠óÈÉ®ÂàÜ + „Ç¢„É≥„ÉÄ„Éº„Çπ„Ç≥„Ç¢ + „Éè„ÉÉ„Ç∑„É•ÂÄ§Ôºâ
    safe_name = f"{alpha_part}_{name_hash}"

    # 63„Éê„Ç§„Éà‰ª•‰∏ã„Å´Âà∂ÈôêÔºàPostgreSQL„ÅÆÂà∂ÈôêÔºâ
    if len(safe_name.encode("utf-8")) > 63:
        safe_name = safe_name[: 63 - len(name_hash) - 1] + "_" + name_hash

    return safe_name


def test_multiple_collections():
    """Ë§áÊï∞„ÅÆÁâπÊÆäÊñáÂ≠ó„ÇíÂê´„ÇÄ„Ç≥„É¨„ÇØ„Ç∑„Éß„É≥Âêç„ÅÆ„ÉÜ„Çπ„Éà"""
    logging.info("Ë§áÊï∞„ÅÆÁâπÊÆäÊñáÂ≠ó„ÇíÂê´„ÇÄ„Ç≥„É¨„ÇØ„Ç∑„Éß„É≥Âêç„ÅÆ„ÉÜ„Çπ„Éà„ÇíÈñãÂßã„Åó„Åæ„Åô")

    # „ÉÜ„Çπ„ÉàÁî®„ÅÆ„Çπ„Ç≠„Éº„Éû„ÇíÂÆöÁæ©
    schema = Schema(
        {
            "name": StringField(required=True),
            "value": NumberField(required=True),
            "active": BooleanField(required=False),  # required=False„Åß„Ç™„Éó„Ç∑„Éß„Éä„É´„Å´Ë®≠ÂÆö
        }
    )

    # ‰∏ÄÊôÇ„Éï„Ç°„Ç§„É´„Çí‰ΩøÁî®„Åó„Å¶„Éá„Éº„Çø„Éô„Éº„Çπ„Çí‰ΩúÊàê
    temp_db = tempfile.NamedTemporaryFile(delete=False, suffix=".db")
    temp_db.close()
    db_path = temp_db.name

    try:
        # Firestore„ÇØ„É©„Ç§„Ç¢„É≥„Éà„Çí‰ΩúÊàê
        db = litestore.client(db_path=db_path, schema=schema)

        # „ÉÜ„Çπ„ÉàÁî®„ÅÆÁâπÊÆäÊñáÂ≠ó„ÇíÂê´„ÇÄ„Ç≥„É¨„ÇØ„Ç∑„Éß„É≥Âêç„ÅÆ„É™„Çπ„Éà
        collection_names = [
            "ÈÉΩÈÅìÂ∫úÁúå",  # Êó•Êú¨Ë™û
            "123Êï∞Â≠ó„Åã„ÇâÂßã„Åæ„Çã",  # Êï∞Â≠ó„Åã„ÇâÂßã„Åæ„ÇãÊó•Êú¨Ë™û
            "!@#$%^&*()ÁâπÊÆäË®òÂè∑",  # ÁâπÊÆäË®òÂè∑„ÇíÂê´„ÇÄ
            "spaces with spaces",  # „Çπ„Éö„Éº„Çπ„ÇíÂê´„ÇÄ
            "veryLongCollectionNameThatExceedsSixtyThreeBytesProbablyAndNeedsToBeHashed",  # Èï∑„ÅÑÂêçÂâç
            "SQL-Keywords.SELECT.FROM.WHERE",  # SQL„Ç≠„Éº„ÉØ„Éº„Éâ„Å®„Éâ„ÉÉ„Éà
            "emojiüòäüåüüéâcollection",  # ÁµµÊñáÂ≠ó„ÇíÂê´„ÇÄ
            "„Å´„Åª„Çì„Åî-english-mixed",  # Êó•Êú¨Ë™û„Å®Ëã±Ë™û„ÅÆÊ∑∑Âêà
            "–†—É—Å—Å–∫–∏–π-—Ç–µ–∫—Å—Ç",  # „Ç≠„É™„É´ÊñáÂ≠ó
            "‰∏≠ÊñáÈõÜÂêà",  # ‰∏≠ÂõΩË™û
        ]

        # ÂêÑ„Ç≥„É¨„ÇØ„Ç∑„Éß„É≥„Å´„Éá„Éº„Çø„ÇíËøΩÂä†
        for i, collection_name in enumerate(collection_names):
            logging.info("„Ç≥„É¨„ÇØ„Ç∑„Éß„É≥ '%s' „Å´„Éá„Éº„Çø„ÇíËøΩÂä†„Åó„Åæ„Åô", collection_name)

            # „Ç≥„É¨„ÇØ„Ç∑„Éß„É≥„ÅÆÂèñÂæó
            collection = db.collection(collection_name)

            # „ÉÜ„Éº„Éñ„É´Âêç„ÅÆÂ§âÊèõ„ÇíÁ¢∫Ë™çÔºà„Ç™„É™„Ç∏„Éä„É´„ÅÆÈñ¢Êï∞Ôºâ
            original_table_name = mangle_table_name(collection_name)

            # ÊîπËâØÁâà„ÉÜ„Éº„Éñ„É´Âêç„ÅÆÂ§âÊèõ„ÇíÁ¢∫Ë™ç
            improved_table_name = improved_mangle_table_name(collection_name)

            logging.info("„Ç≥„É¨„ÇØ„Ç∑„Éß„É≥Âêç '%s' „ÅÆÂ§âÊèõÁµêÊûú:", collection_name)
            logging.info("  „Ç™„É™„Ç∏„Éä„É´: '%s'", original_table_name)
            logging.info("  ÊîπËâØÁâà: '%s'", improved_table_name)

            # ÂêÑ„Ç≥„É¨„ÇØ„Ç∑„Éß„É≥„Å´3„Å§„ÅÆ„Éâ„Ç≠„É•„É°„É≥„Éà„ÇíËøΩÂä†
            for j in range(1, 4):
                doc_id = f"doc_{i}_{j}"
                collection.document(doc_id).set(
                    {"name": f"Item {i}-{j}", "value": i * 10 + j, "active": j % 2 == 0}
                )
                logging.info("  „Éâ„Ç≠„É•„É°„É≥„Éà %s „ÇíËøΩÂä†„Åó„Åæ„Åó„Åü", doc_id)

        # „Éá„Éº„Çø„Éô„Éº„ÇπÂÜÖ„ÅÆ„ÉÜ„Éº„Éñ„É´„ÇíÁ¢∫Ë™ç
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        logging.info("„Éá„Éº„Çø„Éô„Éº„ÇπÂÜÖ„ÅÆ„ÉÜ„Éº„Éñ„É´: %s", tables)

        # „ÉÜ„Éº„Éñ„É´Âêç„ÅÆË°ùÁ™Å„ÇíÁ¢∫Ë™ç
        table_names = [table[0] for table in tables]
        if len(table_names) != len(set(table_names)):
            logging.error("„ÉÜ„Éº„Éñ„É´Âêç„ÅÆË°ùÁ™Å„ÅåÁô∫Áîü„Åó„Å¶„ÅÑ„Åæ„ÅôÔºÅ")

            # Ë°ùÁ™Å„Åó„Å¶„ÅÑ„Çã„ÉÜ„Éº„Éñ„É´Âêç„ÇíÁâπÂÆö
            name_count = {}
            for name in table_names:
                if name in name_count:
                    name_count[name] += 1
                else:
                    name_count[name] = 1

            for name, count in name_count.items():
                if count > 1:
                    logging.error("  „ÉÜ„Éº„Éñ„É´Âêç '%s' „Åå %d Âõû‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„Åæ„Åô", name, count)

                    # „Åì„ÅÆ„ÉÜ„Éº„Éñ„É´Âêç„Å´ÂØæÂøú„Åô„Çã„Ç≥„É¨„ÇØ„Ç∑„Éß„É≥Âêç„ÇíÁâπÂÆö
                    for collection_name in collection_names:
                        if mangle_table_name(collection_name) == name:
                            logging.error("    „Ç≥„É¨„ÇØ„Ç∑„Éß„É≥Âêç: '%s'", collection_name)
        else:
            logging.info("„ÉÜ„Éº„Éñ„É´Âêç„ÅÆË°ùÁ™Å„ÅØ„ÅÇ„Çä„Åæ„Åõ„ÇìÔºàÂÖ®„Å¶‰∏ÄÊÑè„Åß„ÅôÔºâ")

        # ÊîπËâØÁâàÈñ¢Êï∞„Åß„ÉÜ„Éº„Éñ„É´Âêç„ÅÆË°ùÁ™Å„Åå„Å™„ÅÑ„ÅãÁ¢∫Ë™ç
        improved_table_names = [
            improved_mangle_table_name(name) for name in collection_names
        ]
        if len(improved_table_names) != len(set(improved_table_names)):
            logging.error("ÊîπËâØÁâàÈñ¢Êï∞„Åß„ÇÇ„ÉÜ„Éº„Éñ„É´Âêç„ÅÆË°ùÁ™Å„ÅåÁô∫Áîü„Åó„Å¶„ÅÑ„Åæ„ÅôÔºÅ")

            # Ë°ùÁ™Å„Åó„Å¶„ÅÑ„Çã„ÉÜ„Éº„Éñ„É´Âêç„ÇíÁâπÂÆö
            name_count = {}
            for name in improved_table_names:
                if name in name_count:
                    name_count[name] += 1
                else:
                    name_count[name] = 1

            for name, count in name_count.items():
                if count > 1:
                    logging.error("  „ÉÜ„Éº„Éñ„É´Âêç '%s' „Åå %d Âõû‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„Åæ„Åô", name, count)

                    # „Åì„ÅÆ„ÉÜ„Éº„Éñ„É´Âêç„Å´ÂØæÂøú„Åô„Çã„Ç≥„É¨„ÇØ„Ç∑„Éß„É≥Âêç„ÇíÁâπÂÆö
                    for collection_name in collection_names:
                        if improved_mangle_table_name(collection_name) == name:
                            logging.error("    „Ç≥„É¨„ÇØ„Ç∑„Éß„É≥Âêç: '%s'", collection_name)
        else:
            logging.info("ÊîπËâØÁâàÈñ¢Êï∞„Åß„ÅØ„ÉÜ„Éº„Éñ„É´Âêç„ÅÆË°ùÁ™Å„ÅØ„ÅÇ„Çä„Åæ„Åõ„ÇìÔºàÂÖ®„Å¶‰∏ÄÊÑè„Åß„ÅôÔºâ")

        # ÂêÑ„Ç≥„É¨„ÇØ„Ç∑„Éß„É≥„ÅÆ„Éá„Éº„Çø„ÇíÂèñÂæó„Åó„Å¶Ê§úË®º
        for i, collection_name in enumerate(collection_names):
            logging.info("„Ç≥„É¨„ÇØ„Ç∑„Éß„É≥ '%s' „ÅÆ„Éá„Éº„Çø„ÇíÊ§úË®º„Åó„Åæ„Åô", collection_name)

            # „Ç≥„É¨„ÇØ„Ç∑„Éß„É≥„ÅÆÂèñÂæó
            collection = db.collection(collection_name)

            # „Åô„Åπ„Å¶„ÅÆ„Éâ„Ç≠„É•„É°„É≥„Éà„ÇíÂèñÂæó
            docs = collection.get()

            # „Éâ„Ç≠„É•„É°„É≥„ÉàÊï∞„ÇíÁ¢∫Ë™ç
            if len(docs) != 3:
                logging.error(
                    "  „Ç®„É©„Éº: „Ç≥„É¨„ÇØ„Ç∑„Éß„É≥ '%s' „ÅÆ„Éâ„Ç≠„É•„É°„É≥„ÉàÊï∞„Åå‰∫àÊÉ≥„Å®‰∏ÄËá¥„Åó„Åæ„Åõ„Çì„ÄÇÊúüÂæÖÂÄ§: 3, ÂÆüÈöõ: %d",
                    collection_name,
                    len(docs),
                )

                # ‰ªñ„ÅÆ„Ç≥„É¨„ÇØ„Ç∑„Éß„É≥„ÅÆ„Éá„Éº„Çø„ÅåÊ∑∑ÂÖ•„Åó„Å¶„ÅÑ„Å™„ÅÑ„ÅãÁ¢∫Ë™ç
                for doc in docs:
                    doc_id_parts = doc.get("id", "").split("_")
                    if len(doc_id_parts) >= 2 and doc_id_parts[0] == "doc":
                        try:
                            doc_collection_index = int(doc_id_parts[1])
                            if doc_collection_index != i:
                                logging.error(
                                    "    ‰ªñ„ÅÆ„Ç≥„É¨„ÇØ„Ç∑„Éß„É≥„ÅÆ„Éá„Éº„Çø„ÅåÊ∑∑ÂÖ•„Åó„Å¶„ÅÑ„Åæ„Åô: %s („Ç≥„É¨„ÇØ„Ç∑„Éß„É≥„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ %d)",
                                    doc.get("id"),
                                    doc_collection_index,
                                )
                        except (ValueError, IndexError):
                            pass
            else:
                logging.info(
                    "  „Ç≥„É¨„ÇØ„Ç∑„Éß„É≥ '%s' „ÅÆ„Éâ„Ç≠„É•„É°„É≥„ÉàÊï∞: %d (OK)", collection_name, len(docs)
                )

            # ÂêÑ„Éâ„Ç≠„É•„É°„É≥„Éà„ÅÆÂÜÖÂÆπ„ÇíË°®Á§∫
            for doc in docs:
                if doc.get("id", "").startswith(f"doc_{i}_"):
                    logging.info(
                        "    ID: %s, ÂêçÂâç: %s, ÂÄ§: %d, „Ç¢„ÇØ„ÉÜ„Ç£„Éñ: %s",
                        doc.get("id"),
                        doc.get("name"),
                        doc.get("value"),
                        doc.get("active"),
                    )
                else:
                    logging.warning(
                        "    ‰ªñ„ÅÆ„Ç≥„É¨„ÇØ„Ç∑„Éß„É≥„ÅÆ„Éá„Éº„Çø: ID: %s, ÂêçÂâç: %s",
                        doc.get("id"),
                        doc.get("name"),
                    )

        logging.info("Ë§áÊï∞„ÅÆÁâπÊÆäÊñáÂ≠ó„ÇíÂê´„ÇÄ„Ç≥„É¨„ÇØ„Ç∑„Éß„É≥Âêç„ÅÆ„ÉÜ„Çπ„Éà„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü")

        # ÊîπËâØÁâàÈñ¢Êï∞„ÅÆÊúâÂäπÊÄß„ÇíÁ§∫„Åô„Åü„ÇÅ„ÅÆ„Çµ„Éû„É™„Éº
        logging.info("\n=== „ÉÜ„Éº„Éñ„É´ÂêçÂ§âÊèõÈñ¢Êï∞„ÅÆÊØîËºÉ ===")
        logging.info("„Ç™„É™„Ç∏„Éä„É´Èñ¢Êï∞„Å®ÊîπËâØÁâàÈñ¢Êï∞„ÅÆÂ§âÊèõÁµêÊûú„ÇíÊØîËºÉ„Åó„Åæ„Åô")

        for collection_name in collection_names:
            original = mangle_table_name(collection_name)
            improved = improved_mangle_table_name(collection_name)
            logging.info("„Ç≥„É¨„ÇØ„Ç∑„Éß„É≥Âêç: %s", collection_name)
            logging.info("  „Ç™„É™„Ç∏„Éä„É´: '%s'", original)
            logging.info("  ÊîπËâØÁâà: '%s'", improved)

    except sqlite3.Error as e:
        logging.error("SQLite„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: %s", e)
    except (KeyError, ValueError) as e:
        logging.error("„Éá„Éº„ÇøÂá¶ÁêÜ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: %s", e)
    except Exception as e:
        logging.error("‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: %s", e)

    finally:
        # ‰∏ÄÊôÇ„Éï„Ç°„Ç§„É´„ÇíÂâäÈô§
        try:
            os.unlink(db_path)
            logging.info("‰∏ÄÊôÇ„Éá„Éº„Çø„Éô„Éº„Çπ„Éï„Ç°„Ç§„É´ %s „ÇíÂâäÈô§„Åó„Åæ„Åó„Åü", db_path)
        except (OSError, IOError) as e:
            logging.warning("‰∏ÄÊôÇ„Éï„Ç°„Ç§„É´„ÅÆÂâäÈô§‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: %s", e)


def mangle_table_name(name):
    """
    „Ç™„É™„Ç∏„Éä„É´„ÅÆ„ÉÜ„Éº„Éñ„É´ÂêçÂ§âÊèõÈñ¢Êï∞ÔºàÊØîËºÉÁî®Ôºâ
    PostgreSQL„Å®SQLite3„ÅÆ‰∏°Êñπ„ÅßÂêàÊ≥ï„Å™„ÉÜ„Éº„Éñ„É´Âêç„Å´Â§âÊèõ„Åó„Åæ„Åô„ÄÇ
    """
    import re

    if not name:
        return "collection_default"

    # Ëã±Êï∞Â≠ó„ÄÅ„Ç¢„É≥„ÉÄ„Éº„Çπ„Ç≥„Ç¢„ÄÅ„Éâ„É´Ë®òÂè∑‰ª•Â§ñ„ÅÆÊñáÂ≠ó„Çí„Ç¢„É≥„ÉÄ„Éº„Çπ„Ç≥„Ç¢„Å´ÁΩÆÊèõ
    safe_name = re.sub(r"[^a-zA-Z0-9_$]", "_", name)

    # Êï∞Â≠ó„ÅßÂßã„Åæ„ÇãÂ†¥Âêà„ÅØÂÖàÈ†≠„Å´'t_'„ÇíËøΩÂä†
    if safe_name and safe_name[0].isdigit():
        safe_name = "t_" + safe_name

    # 63„Éê„Ç§„Éà‰ª•‰∏ã„Å´Âà∂ÈôêÔºàPostgreSQL„ÅÆÂà∂ÈôêÔºâ
    if len(safe_name.encode("utf-8")) > 63:
        hash_suffix = str(hash(name) % 10000).zfill(4)
        prefix_length = 63 - len(hash_suffix) - 1  # 1„ÅØ„Ç¢„É≥„ÉÄ„Éº„Çπ„Ç≥„Ç¢„ÅÆÂàÜ
        safe_name = safe_name[:prefix_length] + "_" + hash_suffix

    return safe_name


if __name__ == "__main__":
    test_multiple_collections()
