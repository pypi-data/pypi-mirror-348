# -*- coding: utf-8 -*-
#
# This file is part of Python-ASN1. Python-ASN1 is free software that is
# made available under the MIT license. Consult the file "LICENSE" that
# is distributed together with this file for the exact licensing terms.
#
# Python-ASN1 is copyright (c) 2007-2025 by the Python-ASN1 authors. See the
# file "AUTHORS" for a complete overview.

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

from io import open  # For Python 2 and 3 compatibility

import asn1


def test_example1():
    """Encoding an object identifier."""
    encoder = asn1.Encoder()
    encoder.start()
    encoder.write('1.2.3', asn1.Numbers.ObjectIdentifier)
    assert encoder.output() == b'\x06\x02\x2a\x03'


def test_example2(tmp_path):
    """Encoding an object identifier directly to a file."""
    with open(str(tmp_path / 'example2.der'), 'wb') as f:
        encoder = asn1.Encoder()
        encoder.start(f, asn1.Encoding.DER)  # CER is the default when using a stream
        encoder.write('1.2.3', asn1.Numbers.ObjectIdentifier)
        encoder.output()  # Do nt forget to call output() to flush the buffer

    with open(str(tmp_path / 'example2.der'), 'rb') as f:
        data = f.read()
        assert data == b'\x06\x02\x2a\x03'


def test_example3(tmp_path):
    """Encoding of complex data."""
    with open(str(tmp_path / 'example3.der'), 'wb') as f:
        encoder = asn1.Encoder()
        encoder.start(f, asn1.Encoding.DER)  # CER is the default when using a stream
        encoder.write(['test1', 'test2', [
            1,
            0.125,
            b'\x01\x02\x03'
        ]])
        encoder.output()

    with open(str(tmp_path / 'example3.der'), 'rb') as f:
        data = f.read()
        assert data == b'\x30\x1d\x13\x05test1\x13\x05test20\x0D\x02\x01\x01\t\x03\x80\xfd\x01\x04\x03\x01\x02\x03'


def test_example4(tmp_path):
    """Decoding from a file."""
    with open(str(tmp_path / 'example4.der'), 'wb') as f:
        encoder = asn1.Encoder()
        encoder.start(f, asn1.Encoding.DER)
        encoder.write(['test1', 'test2', [
            1,
            0.125,
            b'\x01\x02\x03'
        ]])
        encoder.output()

    with open(str(tmp_path / 'example4.der'), 'rb') as f:
        decoder = asn1.Decoder()
        decoder.start(f)
        tag, value = decoder.read()
        assert tag == (asn1.Numbers.Sequence, asn1.Types.Constructed, asn1.Classes.Universal)
        assert value == ['test1', 'test2', [1, 0.125, b'\x01\x02\x03']]


def test_example5():
    """Decoding of a bit string with unused bits."""
    encoded = b'\x23\x0C\x03\x02\x00\x0B\x03\x02\x00\x0B\x03\x02\x04\x0F'
    decoder = asn1.Decoder()
    decoder.start(encoded)
    tag, (val, unused) = decoder.read(asn1.ReadFlags.WithUnused)
    assert tag == (asn1.Numbers.BitString, asn1.Types.Constructed, asn1.Classes.Universal)
    assert val == b'\x00\xb0\xb0'
    assert unused == 4


def test_example6():
    """Encoding of sequences."""
    encoder = asn1.Encoder()
    encoder.start()
    encoder.enter(asn1.Numbers.Sequence)
    encoder.write('test1', asn1.Numbers.PrintableString)
    encoder.write('test2', asn1.Numbers.PrintableString)
    encoder.enter(asn1.Numbers.Sequence)
    encoder.write(1, asn1.Numbers.Integer)
    encoder.write(0.125, asn1.Numbers.Real)
    encoder.write(b'\x01\x02\x03', asn1.Numbers.OctetString)
    encoder.leave()
    encoder.leave()
    assert encoder.output() == b'\x30\x1d\x13\x05test1\x13\x05test20\r\x02\x01\x01\t\x03\x80\xfd\x01\x04\x03\x01\x02\x03'


def test_example7():
    """Decoding of sequences."""
    encoded = b'\x30\x80\x13\x05\x74\x65\x73\x74\x31\x13\x05\x74\x65\x73\x74\x32\x30\x80\x02\x01\x01\x09\x03\x80\xFD\x01\x04\x03\x01\x02\x03\x00\x00\x00\x00'
    decoder = asn1.Decoder()
    decoder.start(encoded)
    tag, value = decoder.read()
    assert tag == (asn1.Numbers.Sequence, asn1.Types.Constructed, asn1.Classes.Universal)
    assert value == ['test1', 'test2', [1, 0.125, b'\x01\x02\x03']]


def test_example8():
    """Decoding of a complex data."""
    encoded = (b'\x30\x82\x04\x0e\x30\x82\x03\x77\xa0\x03\x02\x01\x02\x02\x02\x15'
               b'\x30\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x05\x05\x00'
               b'\x30\x81\xbb\x31\x0b\x30\x09\x06\x03\x55\x04\x06\x13\x02\x2d\x2d'
               b'\x31\x12\x30\x10\x06\x03\x55\x04\x08\x13\x09\x53\x6f\x6d\x65\x53'
               b'\x74\x61\x74\x65\x31\x11\x30\x0f\x06\x03\x55\x04\x07\x13\x08\x53'
               b'\x6f\x6d\x65\x43\x69\x74\x79\x31\x19\x30\x17\x06\x03\x55\x04\x0a'
               b'\x13\x10\x53\x6f\x6d\x65\x4f\x72\x67\x61\x6e\x69\x7a\x61\x74\x69'
               b'\x6f\x6e\x31\x1f\x30\x1d\x06\x03\x55\x04\x0b\x13\x16\x53\x6f\x6d'
               b'\x65\x4f\x72\x67\x61\x6e\x69\x7a\x61\x74\x69\x6f\x6e\x61\x6c\x55'
               b'\x6e\x69\x74\x31\x1e\x30\x1c\x06\x03\x55\x04\x03\x13\x15\x6c\x6f'
               b'\x63\x61\x6c\x68\x6f\x73\x74\x2e\x6c\x6f\x63\x61\x6c\x64\x6f\x6d'
               b'\x61\x69\x6e\x31\x29\x30\x27\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01'
               b'\x09\x01\x16\x1a\x72\x6f\x6f\x74\x40\x6c\x6f\x63\x61\x6c\x68\x6f'
               b'\x73\x74\x2e\x6c\x6f\x63\x61\x6c\x64\x6f\x6d\x61\x69\x6e\x30\x1e'
               b'\x17\x0d\x30\x38\x30\x32\x30\x35\x30\x39\x32\x33\x33\x31\x5a\x17'
               b'\x0d\x30\x39\x30\x32\x30\x34\x30\x39\x32\x33\x33\x31\x5a\x30\x81'
               b'\xbb\x31\x0b\x30\x09\x06\x03\x55\x04\x06\x13\x02\x2d\x2d\x31\x12'
               b'\x30\x10\x06\x03\x55\x04\x08\x13\x09\x53\x6f\x6d\x65\x53\x74\x61'
               b'\x74\x65\x31\x11\x30\x0f\x06\x03\x55\x04\x07\x13\x08\x53\x6f\x6d'
               b'\x65\x43\x69\x74\x79\x31\x19\x30\x17\x06\x03\x55\x04\x0a\x13\x10'
               b'\x53\x6f\x6d\x65\x4f\x72\x67\x61\x6e\x69\x7a\x61\x74\x69\x6f\x6e'
               b'\x31\x1f\x30\x1d\x06\x03\x55\x04\x0b\x13\x16\x53\x6f\x6d\x65\x4f'
               b'\x72\x67\x61\x6e\x69\x7a\x61\x74\x69\x6f\x6e\x61\x6c\x55\x6e\x69'
               b'\x74\x31\x1e\x30\x1c\x06\x03\x55\x04\x03\x13\x15\x6c\x6f\x63\x61'
               b'\x6c\x68\x6f\x73\x74\x2e\x6c\x6f\x63\x61\x6c\x64\x6f\x6d\x61\x69'
               b'\x6e\x31\x29\x30\x27\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x09\x01'
               b'\x16\x1a\x72\x6f\x6f\x74\x40\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74'
               b'\x2e\x6c\x6f\x63\x61\x6c\x64\x6f\x6d\x61\x69\x6e\x30\x81\x9f\x30'
               b'\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x01\x05\x00\x03\x81'
               b'\x8d\x00\x30\x81\x89\x02\x81\x81\x00\xd5\x18\xcd\x40\x91\x90\x27'
               b'\x5a\x77\x37\x22\xca\xba\x05\xdf\x13\x31\xe8\x74\x43\x4f\x7e\x08'
               b'\xa3\xa5\x76\xcd\x7b\xdd\x37\xd0\x7f\x12\x9e\x81\x73\x87\x55\x66'
               b'\x0d\xda\x68\xee\x38\xeb\x34\xe2\xf4\xeb\x95\xd5\xe0\xde\xef\x08'
               b'\x57\xf9\x03\x14\x69\xa8\x6f\x7c\xa4\xfa\x64\x51\x39\x36\xd5\x09'
               b'\x37\x61\x83\x13\x8c\x41\x25\xba\x60\x91\x20\x86\x5b\x60\xb5\xe2'
               b'\x83\x65\x66\xad\x06\xb3\x45\x71\x83\x67\xd2\xe5\x5f\x40\x42\x4b'
               b'\x37\xf8\x87\xd0\x09\x49\xb8\xad\x34\x76\xa3\x1b\xbf\xc1\x0f\xb7'
               b'\xfb\x43\xbe\x62\x33\x02\x02\x10\x61\x02\x03\x01\x00\x01\xa3\x82'
               b'\x01\x1d\x30\x82\x01\x19\x30\x1d\x06\x03\x55\x1d\x0e\x04\x16\x04'
               b'\x14\x0a\x4b\xfa\x87\x54\x17\x7e\x30\xb4\x21\x71\x56\x51\x0f\xd2'
               b'\x91\xc3\x30\x02\x36\x30\x81\xe9\x06\x03\x55\x1d\x23\x04\x81\xe1'
               b'\x30\x81\xde\x80\x14\x0a\x4b\xfa\x87\x54\x17\x7e\x30\xb4\x21\x71'
               b'\x56\x51\x0f\xd2\x91\xc3\x30\x02\x36\xa1\x81\xc1\xa4\x81\xbe\x30'
               b'\x81\xbb\x31\x0b\x30\x09\x06\x03\x55\x04\x06\x13\x02\x2d\x2d\x31'
               b'\x12\x30\x10\x06\x03\x55\x04\x08\x13\x09\x53\x6f\x6d\x65\x53\x74'
               b'\x61\x74\x65\x31\x11\x30\x0f\x06\x03\x55\x04\x07\x13\x08\x53\x6f'
               b'\x6d\x65\x43\x69\x74\x79\x31\x19\x30\x17\x06\x03\x55\x04\x0a\x13'
               b'\x10\x53\x6f\x6d\x65\x4f\x72\x67\x61\x6e\x69\x7a\x61\x74\x69\x6f'
               b'\x6e\x31\x1f\x30\x1d\x06\x03\x55\x04\x0b\x13\x16\x53\x6f\x6d\x65'
               b'\x4f\x72\x67\x61\x6e\x69\x7a\x61\x74\x69\x6f\x6e\x61\x6c\x55\x6e'
               b'\x69\x74\x31\x1e\x30\x1c\x06\x03\x55\x04\x03\x13\x15\x6c\x6f\x63'
               b'\x61\x6c\x68\x6f\x73\x74\x2e\x6c\x6f\x63\x61\x6c\x64\x6f\x6d\x61'
               b'\x69\x6e\x31\x29\x30\x27\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x09'
               b'\x01\x16\x1a\x72\x6f\x6f\x74\x40\x6c\x6f\x63\x61\x6c\x68\x6f\x73'
               b'\x74\x2e\x6c\x6f\x63\x61\x6c\x64\x6f\x6d\x61\x69\x6e\x82\x02\x15'
               b'\x30\x30\x0c\x06\x03\x55\x1d\x13\x04\x05\x30\x03\x01\x01\xff\x30'
               b'\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x05\x05\x00\x03\x81'
               b'\x81\x00\x4e\x12\x46\x58\xa3\x57\xc5\x9a\xab\xfa\x32\xf5\xde\x87'
               b'\xfb\x77\xa8\x79\x38\x1d\x4f\xd3\x7c\x3a\x16\x60\x82\x7d\x92\xa1'
               b'\x58\xd2\x53\x7b\x11\x90\xec\x6d\xb0\xb0\x58\xee\x33\xb4\x7b\x1d'
               b'\xb8\x95\xd8\x98\xc3\x10\x81\x83\x08\x46\xe8\x9a\xb9\x6c\xbf\x8f'
               b'\x9e\x73\xf7\x61\x89\xc4\x6a\x1b\xc1\x98\xc6\xab\xfc\x91\xb6\x59'
               b'\xb8\xa5\x05\x91\x2a\xbb\xc4\x30\x16\x53\xbf\x1a\xfe\x2f\x01\x25'
               b'\xae\xef\xc7\xb9\xfa\xa5\x53\xf8\xd9\xf5\x8f\xae\x91\xea\x57\x28'
               b'\xfa\xdf\x34\x03\x29\xe8\x97\xee\x2e\x9e\x8a\x62\x45\xc7\xfc\x58'
               b'\xb4\x5a')

    decoder = asn1.Decoder()
    decoder.start(encoded)
    tag, value = decoder.read()
    assert tag == (asn1.Numbers.Sequence, asn1.Types.Constructed, asn1.Classes.Universal)
    assert value == [
        [
            [2],
            5424,
            ['1.2.840.113549.1.1.5', None],
            [
                [['2.5.4.6', '--']],
                [['2.5.4.8', 'SomeState']],
                [['2.5.4.7', 'SomeCity']],
                [['2.5.4.10', 'SomeOrganization']],
                [['2.5.4.11', 'SomeOrganizationalUnit']],
                [['2.5.4.3', 'localhost.localdomain']],
                [['1.2.840.113549.1.9.1', 'root@localhost.localdomain']]
            ],
            ['080205092331Z', '090204092331Z'],
            [
                [['2.5.4.6', '--']],
                [['2.5.4.8', 'SomeState']],
                [['2.5.4.7', 'SomeCity']],
                [['2.5.4.10', 'SomeOrganization']],
                [['2.5.4.11', 'SomeOrganizationalUnit']],
                [['2.5.4.3', 'localhost.localdomain']],
                [['1.2.840.113549.1.9.1', 'root@localhost.localdomain']]],
                [['1.2.840.113549.1.1.1', None], b'0\x81\x89\x02\x81\x81\x00\xd5\x18\xcd@\x91\x90\'Zw7"\xca\xba\x05\xdf\x131\xe8tCO~\x08\xa3\xa5v\xcd{\xdd7\xd0\x7f\x12\x9e\x81s\x87Uf\r\xdah\xee8\xeb4\xe2\xf4\xeb\x95\xd5\xe0\xde\xef\x08W\xf9\x03\x14i\xa8o|\xa4\xfadQ96\xd5\t7a\x83\x13\x8cA%\xba`\x91 \x86[`\xb5\xe2\x83ef\xad\x06\xb3Eq\x83g\xd2\xe5_@BK7\xf8\x87\xd0\tI\xb8\xad4v\xa3\x1b\xbf\xc1\x0f\xb7\xfbC\xbeb3\x02\x02\x10a\x02\x03\x01\x00\x01'],
                [
                    [
                        ['2.5.29.14', b'\x04\x14\nK\xfa\x87T\x17~0\xb4!qVQ\x0f\xd2\x91\xc30\x026'],
                        ['2.5.29.35', b"0\x81\xde\x80\x14\nK\xfa\x87T\x17~0\xb4!qVQ\x0f\xd2\x91\xc30\x026\xa1\x81\xc1\xa4\x81\xbe0\x81\xbb1\x0b0\t\x06\x03U\x04\x06\x13\x02--1\x120\x10\x06\x03U\x04\x08\x13\tSomeState1\x110\x0f\x06\x03U\x04\x07\x13\x08SomeCity1\x190\x17\x06\x03U\x04\n\x13\x10SomeOrganization1\x1f0\x1d\x06\x03U\x04\x0b\x13\x16SomeOrganizationalUnit1\x1e0\x1c\x06\x03U\x04\x03\x13\x15localhost.localdomain1)0'\x06\t*\x86H\x86\xf7\r\x01\t\x01\x16\x1aroot@localhost.localdomain\x82\x02\x150"],
                        ['2.5.29.19', b'0\x03\x01\x01\xff']
                    ]
                ]
        ],
        ['1.2.840.113549.1.1.5', None],
        b'N\x12FX\xa3W\xc5\x9a\xab\xfa2\xf5\xde\x87\xfbw\xa8y8\x1dO\xd3|:\x16`\x82}\x92\xa1X\xd2S{\x11\x90\xecm\xb0\xb0X\xee3\xb4{\x1d\xb8\x95\xd8\x98\xc3\x10\x81\x83\x08F\xe8\x9a\xb9l\xbf\x8f\x9es\xf7a\x89\xc4j\x1b\xc1\x98\xc6\xab\xfc\x91\xb6Y\xb8\xa5\x05\x91*\xbb\xc40\x16S\xbf\x1a\xfe/\x01%\xae\xef\xc7\xb9\xfa\xa5S\xf8\xd9\xf5\x8f\xae\x91\xeaW(\xfa\xdf4\x03)\xe8\x97\xee.\x9e\x8abE\xc7\xfcX\xb4Z'
    ]


def test_example9(tmp_path):
    """Using CER encoding with a stream (file)."""
    with open(str(tmp_path / 'exmple9.cer'), 'wb') as f:
        encoder = asn1.Encoder()
        encoder.start(f)


def test_example10(tmp_path):
    """Using DER encoding with a stream (file)."""
    with open(str(tmp_path / 'exmple10.der'), 'wb') as f:
        encoder = asn1.Encoder()
        encoder.start(f, asn1.Encoding.DER)
        encoder.output()
