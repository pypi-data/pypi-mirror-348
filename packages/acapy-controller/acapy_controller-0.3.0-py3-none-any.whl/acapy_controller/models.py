# generated by datamodel-codegen:
#   filename:  openapi.json
#   timestamp: 2024-07-06T22:02:03+00:00

from __future__ import annotations

# BEGIN import check
# This import check was added to the generated models file by generate-models.sh
import importlib

try:
    importlib.import_module("pydantic")
except ImportError:
    raise Exception(
        "Pydantic is required to use models; please install the pydantic extra."
    )
# END import check

from typing import Any, Dict, List, Literal, Optional

from pydantic import AwareDatetime, ConfigDict, Field, RootModel

from acapy_controller.model_base import BaseModel


class AMLRecord(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    aml: Optional[Dict[str, str]] = None
    aml_context: Optional[str] = Field(None, alias="amlContext")
    version: Optional[str] = None


class ActionMenuModulesResult(BaseModel):
    pass
    model_config = ConfigDict(
        populate_by_name=True,
    )


class AdminConfig(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    config: Dict[str, Any] = Field(..., description="Configuration settings")


class AdminMediationDeny(ActionMenuModulesResult):
    pass


class AdminModules(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    result: Optional[List[str]] = Field(None, description="List of admin modules")


class AdminReset(ActionMenuModulesResult):
    pass


class AdminShutdown(ActionMenuModulesResult):
    pass


class AdminStatus(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    conductor: Optional[Dict[str, Any]] = Field(
        None, description="Conductor statistics"
    )
    label: Optional[str] = Field(None, description="Default label")
    timing: Optional[Dict[str, Any]] = Field(None, description="Timing results")
    version: Optional[str] = Field(None, description="Version code")


class AdminStatusLiveliness(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    alive: Optional[bool] = Field(
        None, description="Liveliness status", examples=[True]
    )


class AdminStatusReadiness(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    ready: Optional[bool] = Field(None, description="Readiness status", examples=[True])


class AnonCredsSchema(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    attr_names: Optional[List[str]] = Field(
        None, alias="attrNames", description="Schema attribute names"
    )
    issuer_id: Optional[str] = Field(
        None,
        alias="issuerId",
        description="Issuer Identifier of the credential definition or schema",
        examples=["WgWxqztrNooG92RXvxSTWv"],
    )
    name: Optional[str] = Field(
        None, description="Schema name", examples=["Example schema"]
    )
    version: Optional[str] = Field(None, description="Schema version", examples=["1.0"])


class AttachDecoratorDataJWSHeader(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    kid: str = Field(
        ...,
        description="Key identifier, in W3C did:key or DID URL format",
        examples=["did:sov:LjgpST2rjsoxYegQDRm7EL#keys-4"],
        pattern="^did:(?:key:z[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]+|sov:[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}(;.*)?(\\?.*)?#.+)$",
    )


class AttachmentDef(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[str] = Field(
        None, description="Attachment identifier", examples=["attachment-0"]
    )
    type: Optional[Literal["credential-offer", "present-proof"]] = Field(
        None, description="Attachment type", examples=["present-proof"]
    )


class AttributeMimeTypesResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    results: Optional[Dict[str, str]] = None


class BasicMessageModuleResponse(ActionMenuModulesResult):
    pass


class ClaimFormat(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    jwt: Optional[Dict[str, Any]] = None
    jwt_vc: Optional[Dict[str, Any]] = None
    jwt_vp: Optional[Dict[str, Any]] = None
    ldp: Optional[Dict[str, Any]] = None
    ldp_vc: Optional[Dict[str, Any]] = None
    ldp_vp: Optional[Dict[str, Any]] = None


class PurgeItem(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: str = Field(
        ...,
        description="Credential revocation identifier",
        examples=["12345"],
        pattern="^[1-9][0-9]*$",
    )


class ClearPendingRevocationsRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    purge: Optional[Dict[str, List[PurgeItem]]] = Field(
        None,
        description="Credential revocation ids by revocation registry id: omit for all, specify null or empty list for all pending per revocation registry",
    )


class ConfigurableWriteLedgers(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    write_ledgers: Optional[List[str]] = Field(
        None, description="List of configurable write ledgers identifiers"
    )


class ConnRecord(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    accept: Optional[Literal["manual", "auto"]] = Field(
        None, description="Connection acceptance: manual or auto", examples=["auto"]
    )
    alias: Optional[str] = Field(
        None,
        description="Optional alias to apply to connection for later use",
        examples=["Bob, providing quotes"],
    )
    connection_id: str = Field(
        ...,
        description="Connection identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    connection_protocol: Optional[
        Literal["connections/1.0", "didexchange/1.0", "didexchange/1.1"]
    ] = Field(
        None, description="Connection protocol used", examples=["connections/1.0"]
    )
    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    error_msg: Optional[str] = Field(
        None,
        description="Error message",
        examples=["No DIDDoc provided; cannot connect to public DID"],
    )
    inbound_connection_id: Optional[str] = Field(
        None,
        description="Inbound routing connection id to use",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    invitation_key: Optional[str] = Field(
        None,
        description="Public key for connection",
        examples=["H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"],
        pattern="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
    )
    invitation_mode: Optional[Literal["once", "multi", "static"]] = Field(
        None, description="Invitation mode", examples=["once"]
    )
    invitation_msg_id: Optional[str] = Field(
        None,
        description="ID of out-of-band invitation message",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    my_did: Optional[str] = Field(
        None,
        description="Our DID for connection",
        examples=["did:peer:WgWxqztrNooG92RXvxSTWv"],
        pattern="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$|^did:([a-zA-Z0-9_]+):([a-zA-Z0-9_.%-]+(:[a-zA-Z0-9_.%-]+)*)((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(\\/[^#?]*)?([?][^#]*)?(\\#.*)?$$",
    )
    request_id: Optional[str] = Field(
        None,
        description="Connection request identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    rfc23_state: Optional[str] = Field(
        None, description="State per RFC 23", examples=["invitation-sent"]
    )
    state: Optional[str] = Field(
        None, description="Current record state", examples=["active"]
    )
    their_did: Optional[str] = Field(
        None,
        description="Their DID for connection",
        examples=["did:peer:WgWxqztrNooG92RXvxSTWv"],
        pattern="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$|^did:([a-zA-Z0-9_]+):([a-zA-Z0-9_.%-]+(:[a-zA-Z0-9_.%-]+)*)((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(\\/[^#?]*)?([?][^#]*)?(\\#.*)?$$",
    )
    their_label: Optional[str] = Field(
        None, description="Their label for connection", examples=["Bob"]
    )
    their_public_did: Optional[str] = Field(
        None,
        description="Other agent's public DID for connection",
        examples=["2cpBmR3FqGKWi5EyUbpRY8"],
    )
    their_role: Optional[Literal["invitee", "requester", "inviter", "responder"]] = (
        Field(
            None,
            description="Their role in the connection protocol",
            examples=["requester"],
        )
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )


class RecipientKey(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: str = Field(
        ...,
        description="Recipient public key",
        examples=["H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"],
        pattern="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
    )


class RoutingKey(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: str = Field(
        ...,
        description="Routing key",
        examples=["H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"],
        pattern="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
    )


class ConnectionInvitation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        examples=["https://didcomm.org/my-family/1.0/my-message-type"],
    )
    did: Optional[str] = Field(
        None,
        description="DID for connection invitation",
        examples=["did:peer:WgWxqztrNooG92RXvxSTWv"],
        pattern="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$|^did:([a-zA-Z0-9_]+):([a-zA-Z0-9_.%-]+(:[a-zA-Z0-9_.%-]+)*)((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(\\/[^#?]*)?([?][^#]*)?(\\#.*)?$$",
    )
    image_url: Optional[str] = Field(
        None,
        alias="imageUrl",
        description="Optional image URL for connection invitation",
        examples=["http://192.168.56.101/img/logo.jpg"],
    )
    label: Optional[str] = Field(
        None, description="Optional label for connection invitation", examples=["Bob"]
    )
    recipient_keys: Optional[List[RecipientKey]] = Field(
        None, alias="recipientKeys", description="List of recipient keys"
    )
    routing_keys: Optional[List[RoutingKey]] = Field(
        None, alias="routingKeys", description="List of routing keys"
    )
    service_endpoint: Optional[str] = Field(
        None,
        alias="serviceEndpoint",
        description="Service endpoint at which to reach this agent",
        examples=["http://192.168.56.101:8020"],
    )


class ConnectionList(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    results: List[ConnRecord] = Field(..., description="List of connection records")


class ConnectionMetadata(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    results: Optional[Dict[str, Any]] = Field(
        None, description="Dictionary of metadata associated with connection."
    )


class ConnectionMetadataSetRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    metadata: Dict[str, Any] = Field(
        ..., description="Dictionary of metadata to set for connection."
    )


class ConnectionModuleResponse(ActionMenuModulesResult):
    pass


class ConnectionStaticRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    alias: Optional[str] = Field(None, description="Alias to assign to this connection")
    my_did: Optional[str] = Field(
        None,
        description="Local DID",
        examples=["WgWxqztrNooG92RXvxSTWv"],
        pattern="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    my_seed: Optional[str] = Field(None, description="Seed to use for the local DID")
    their_did: Optional[str] = Field(
        None,
        description="Remote DID",
        examples=["WgWxqztrNooG92RXvxSTWv"],
        pattern="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    their_endpoint: Optional[str] = Field(
        None,
        description="URL endpoint for other party",
        examples=["https://myhost:8021"],
        pattern="^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$",
    )
    their_label: Optional[str] = Field(
        None, description="Other party's label for this connection"
    )
    their_seed: Optional[str] = Field(
        None, description="Seed to use for the remote DID"
    )
    their_verkey: Optional[str] = Field(None, description="Remote verification key")


class ConnectionStaticResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    my_did: str = Field(
        ...,
        description="Local DID",
        examples=["WgWxqztrNooG92RXvxSTWv"],
        pattern="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    my_endpoint: str = Field(
        ...,
        description="My URL endpoint",
        examples=["https://myhost:8021"],
        pattern="^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$",
    )
    my_verkey: str = Field(
        ...,
        description="My verification key",
        examples=["H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"],
        pattern="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
    )
    record: ConnRecord
    their_did: str = Field(
        ...,
        description="Remote DID",
        examples=["WgWxqztrNooG92RXvxSTWv"],
        pattern="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    their_verkey: str = Field(
        ...,
        description="Remote verification key",
        examples=["H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"],
        pattern="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
    )


class CreateInvitationRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    mediation_id: Optional[str] = Field(
        None,
        description="Identifier for active mediation record to be used",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
        pattern="[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description="Optional metadata to attach to the connection created with the invitation",
    )
    my_label: Optional[str] = Field(
        None, description="Optional label for connection invitation", examples=["Bob"]
    )
    recipient_keys: Optional[List[RecipientKey]] = Field(
        None, description="List of recipient keys"
    )
    routing_keys: Optional[List[RoutingKey]] = Field(
        None, description="List of routing keys"
    )
    service_endpoint: Optional[str] = Field(
        None, description="Connection endpoint", examples=["http://192.168.56.102:8020"]
    )


class CreateWalletRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    extra_settings: Optional[Dict[str, Any]] = Field(
        None, description="Agent config key-value pairs"
    )
    image_url: Optional[str] = Field(
        None,
        description="Image url for this wallet. This image url is publicized (self-attested) to other agents as part of forming a connection.",
        examples=["https://aries.ca/images/sample.png"],
    )
    key_management_mode: Optional[Literal["managed"]] = Field(
        None,
        description="Key management method to use for this wallet.",
        examples=["managed"],
    )
    label: Optional[str] = Field(
        None,
        description="Label for this wallet. This label is publicized (self-attested) to other agents as part of forming a connection.",
        examples=["Alice"],
    )
    wallet_dispatch_type: Optional[Literal["default", "both", "base"]] = Field(
        None,
        description="Webhook target dispatch type for this wallet. default: Dispatch only to webhooks associated with this wallet. base: Dispatch only to webhooks associated with the base wallet. both: Dispatch to both webhook targets.",
        examples=["default"],
    )
    wallet_key: Optional[str] = Field(
        None,
        description="Master key used for key derivation.",
        examples=["MySecretKey123"],
    )
    wallet_key_derivation: Optional[Literal["ARGON2I_MOD", "ARGON2I_INT", "RAW"]] = (
        Field(None, description="Key derivation", examples=["RAW"])
    )
    wallet_name: Optional[str] = Field(
        None, description="Wallet name", examples=["MyNewWallet"]
    )
    wallet_type: Optional[Literal["askar", "askar-anoncreds", "in_memory", "indy"]] = (
        Field(
            None,
            description="Type of the wallet to create. Must be same as base wallet.",
            examples=["askar"],
        )
    )
    wallet_webhook_urls: Optional[List[str]] = Field(
        None, description="List of Webhook URLs associated with this subwallet"
    )


class CreateWalletResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    key_management_mode: Literal["managed", "unmanaged"] = Field(
        ..., description="Mode regarding management of wallet key"
    )
    settings: Optional[Dict[str, Any]] = Field(
        None, description="Settings for this wallet."
    )
    state: Optional[str] = Field(
        None, description="Current record state", examples=["active"]
    )
    token: Optional[str] = Field(
        None,
        description="Authorization token to authenticate wallet requests",
        examples=[
            "eyJhbGciOiJFZERTQSJ9.eyJhIjogIjAifQ.dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk"
        ],
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    wallet_id: str = Field(
        ...,
        description="Wallet record ID",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )


class CreateWalletTokenRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    wallet_key: Optional[str] = Field(
        None,
        description="Master key used for key derivation. Only required for unmanaged wallets.",
        examples=["MySecretKey123"],
    )


class CreateWalletTokenResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    token: Optional[str] = Field(
        None,
        description="Authorization token to authenticate wallet requests",
        examples=[
            "eyJhbGciOiJFZERTQSJ9.eyJhIjogIjAifQ.dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk"
        ],
    )


class CredAttrSpec(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    mime_type: Optional[str] = Field(
        None,
        alias="mime-type",
        description="MIME type: omit for (null) default",
        examples=["image/jpeg"],
    )
    name: str = Field(..., description="Attribute name", examples=["favourite_drink"])
    value: str = Field(
        ...,
        description="Attribute value: base64-encode if MIME type is present",
        examples=["martini"],
    )


class CredDefPostOptions(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    create_transaction_for_endorser: Optional[bool] = Field(
        None,
        description="Create transaction for endorser (optional, default false). Use this for agents who don't specify an author role but want to create a transaction for an endorser to sign.",
        examples=[False],
    )
    endorser_connection_id: Optional[str] = Field(
        None,
        description="Connection identifier (optional) (this is an example). You can set this if you know the endorser's connection id you want to use. If not specified then the agent will attempt to find an endorser connection.",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    revocation_registry_size: Optional[int] = Field(
        None,
        description="Maximum number of credential revocations per registry",
        examples=[1000],
    )
    support_revocation: Optional[bool] = Field(
        None, description="Support credential revocation"
    )


class CredDefValuePrimarySchemaAnoncreds(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    n: Optional[str] = Field(None, examples=["0"], pattern="^[0-9]*$")
    r: Optional[Dict[str, Any]] = None
    rctxt: Optional[str] = Field(None, examples=["0"], pattern="^[0-9]*$")
    s: Optional[str] = Field(None, examples=["0"], pattern="^[0-9]*$")
    z: Optional[str] = Field(None, examples=["0"], pattern="^[0-9]*$")


class CredDefValueRevocation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    g: Optional[str] = Field(None, examples=["1 1F14F&ECB578F 2 095E45DDF417D"])
    g_dash: Optional[str] = Field(
        None, examples=["1 1D64716fCDC00C 1 0C781960FA66E3D3 2 095E45DDF417D"]
    )
    h: Optional[str] = Field(None, examples=["1 16675DAE54BFAE8 2 095E45DD417D"])
    h0: Optional[str] = Field(None, examples=["1 21E5EF9476EAF18 2 095E45DDF417D"])
    h1: Optional[str] = Field(None, examples=["1 236D1D99236090 2 095E45DDF417D"])
    h2: Optional[str] = Field(None, examples=["1 1C3AE8D1F1E277 2 095E45DDF417D"])
    h_cap: Optional[str] = Field(
        None, examples=["1 1B2A32CF3167 1 2490FEBF6EE55 1 0000000000000000"]
    )
    htilde: Optional[str] = Field(None, examples=["1 1D8549E8C0F8 2 095E45DDF417D"])
    pk: Optional[str] = Field(
        None, examples=["1 142CD5E5A7DC 1 153885BD903312 2 095E45DDF417D"]
    )
    u: Optional[str] = Field(
        None, examples=["1 0C430AAB2B4710 1 1CB3A0932EE7E 1 0000000000000000"]
    )
    y: Optional[str] = Field(
        None, examples=["1 153558BD903312 2 095E45DDF417D 1 0000000000000000"]
    )


class CredDefValueRevocationSchemaAnoncreds(CredDefValueRevocation):
    pass


class CredDefValueSchemaAnoncreds(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    primary: Optional[CredDefValuePrimarySchemaAnoncreds] = Field(
        None, description="Primary value for credential definition"
    )
    revocation: Optional[CredDefValueRevocationSchemaAnoncreds] = Field(
        None, description="Revocation value for credential definition"
    )


class CredRevIndyRecordsResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    rev_reg_delta: Optional[Dict[str, Any]] = Field(
        None, description="Indy revocation registry delta"
    )


class CredRevIndyRecordsResultSchemaAnoncreds(CredRevIndyRecordsResult):
    pass


class CredRevokedResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    revoked: Optional[bool] = Field(
        None, description="Whether credential is revoked on the ledger"
    )


class CredentialDefinitionSendRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    revocation_registry_size: Optional[int] = Field(
        None, description="Revocation registry size", examples=[1000], ge=4, le=32768
    )
    schema_id: Optional[str] = Field(
        None,
        description="Schema identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"],
        pattern="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
    )
    support_revocation: Optional[bool] = Field(
        None, description="Revocation supported flag"
    )
    tag: Optional[str] = Field(
        None, description="Credential definition identifier tag", examples=["default"]
    )


class CredentialDefinitionSendResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    credential_definition_id: str = Field(
        ...,
        description="Credential definition identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"],
        pattern="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )


class CredentialDefinitionId(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: str = Field(
        ...,
        description="Credential definition identifiers",
        examples=["WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"],
        pattern="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )


class CredentialDefinitionsCreatedResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    credential_definition_ids: Optional[List[CredentialDefinitionId]] = None


class CredentialPreview(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type identifier",
        examples=["issue-credential/1.0/credential-preview"],
    )
    attributes: List[CredAttrSpec]


class CredentialProposal(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        examples=["https://didcomm.org/my-family/1.0/my-message-type"],
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    cred_def_id: Optional[str] = Field(
        None,
        examples=["WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"],
        pattern="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    credential_proposal: Optional[CredentialPreview] = None
    issuer_did: Optional[str] = Field(
        None,
        examples=["WgWxqztrNooG92RXvxSTWv"],
        pattern="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    schema_id: Optional[str] = Field(
        None,
        examples=["WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"],
        pattern="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
    )
    schema_issuer_did: Optional[str] = Field(
        None,
        examples=["WgWxqztrNooG92RXvxSTWv"],
        pattern="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    schema_name: Optional[str] = None
    schema_version: Optional[str] = Field(None, examples=["1.0"], pattern="^[0-9.]+$")


class CredentialStatusOptions(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: str = Field(
        ...,
        description="Credential status method type to use for the credential. Should match status method registered in the Verifiable Credential Extension Registry",
        examples=["CredentialStatusList2017"],
    )


class DID(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    did: str = Field(
        ...,
        description="DID of interest",
        examples=["did:peer:WgWxqztrNooG92RXvxSTWv"],
        pattern="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$|^did:([a-zA-Z0-9_]+):([a-zA-Z0-9_.%-]+(:[a-zA-Z0-9_.%-]+)*)((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(\\/[^#?]*)?([?][^#]*)?(\\#.*)?$$",
    )
    key_type: Literal["ed25519", "bls12381g2"] = Field(
        ..., description="Key type associated with the DID", examples=["ed25519"]
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None, description="Additional metadata associated with the DID"
    )
    method: str = Field(
        ..., description="Did method associated with the DID", examples=["sov"]
    )
    posture: Literal["public", "posted", "wallet_only"] = Field(
        ...,
        description="Whether DID is current public DID, posted to ledger but not current public DID, or local to the wallet",
        examples=["wallet_only"],
    )
    verkey: str = Field(
        ...,
        description="Public verification key",
        examples=["H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"],
        pattern="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
    )


class DIDCreateOptions(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    did: Optional[str] = Field(
        None,
        description="Specify final value of the did (including did:<method>: prefix)if the method supports or requires so.",
        examples=["did:peer:WgWxqztrNooG92RXvxSTWv"],
        pattern="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$|^did:([a-zA-Z0-9_]+):([a-zA-Z0-9_.%-]+(:[a-zA-Z0-9_.%-]+)*)((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(\\/[^#?]*)?([?][^#]*)?(\\#.*)?$$",
    )
    key_type: Literal["ed25519", "bls12381g2"] = Field(
        ...,
        description="Key type to use for the DID keypair. Validated with the chosen DID method's supported key types.",
        examples=["ed25519"],
    )


class DIDEndpoint(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    did: str = Field(
        ...,
        description="DID of interest",
        examples=["WgWxqztrNooG92RXvxSTWv"],
        pattern="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    endpoint: Optional[str] = Field(
        None,
        description="Endpoint to set (omit to delete)",
        examples=["https://myhost:8021"],
        pattern="^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$",
    )


class DIDEndpointWithType(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    did: str = Field(
        ...,
        description="DID of interest",
        examples=["WgWxqztrNooG92RXvxSTWv"],
        pattern="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    endpoint: Optional[str] = Field(
        None,
        description="Endpoint to set (omit to delete)",
        examples=["https://myhost:8021"],
        pattern="^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$",
    )
    endpoint_type: Optional[Literal["Endpoint", "Profile", "LinkedDomains"]] = Field(
        None,
        description="Endpoint type to set (default 'Endpoint'); affects only public or posted DIDs",
        examples=["Endpoint"],
    )


class DIDList(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    results: Optional[List[DID]] = Field(None, description="DID list")


class DIDResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    result: Optional[DID] = None


class DIDRotateRequestJSON(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    to_did: str = Field(
        ...,
        description="The DID the rotating party is rotating to",
        examples=["did:web:example.com"],
    )


class DIDXRejectRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    reason: Optional[str] = Field(
        None,
        description="Reason for rejecting the DID Exchange",
        examples=["Request rejected"],
    )


class FieldIdItem(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: str = Field(
        ...,
        description="FieldID",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
        pattern="[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
    )


class DIFHolder(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    directive: Optional[Literal["required", "preferred"]] = Field(
        None, description="Preference"
    )
    field_id: Optional[List[FieldIdItem]] = None


class DIFOptions(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    challenge: Optional[str] = Field(
        None,
        description="Challenge protect against replay attack",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
        pattern="[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
    )
    domain: Optional[str] = Field(
        None,
        description="Domain protect against replay attack",
        examples=["4jt78h47fh47"],
    )


class Date(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    expires_time: AwareDatetime = Field(
        ..., description="Expiry Date", examples=["2021-03-29T05:22:19Z"]
    )


class Disclosures(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        examples=["https://didcomm.org/my-family/1.0/my-message-type"],
    )
    disclosures: List[Dict[str, Any]] = Field(
        ..., description="List of protocol or goal_code descriptors"
    )


class EndorserInfo(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    endorser_did: str = Field(..., description="Endorser DID")
    endorser_name: Optional[str] = Field(None, description="Endorser Name")


class EndpointsResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    my_endpoint: Optional[str] = Field(
        None,
        description="My endpoint",
        examples=["https://myhost:8021"],
        pattern="^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$",
    )
    their_endpoint: Optional[str] = Field(
        None,
        description="Their endpoint",
        examples=["https://myhost:8021"],
        pattern="^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$",
    )


class Filter(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    const: Optional[Dict[str, Any]] = Field(None, description="Const")
    enum: Optional[List[Dict[str, Any]]] = None
    exclusive_maximum: Optional[Dict[str, Any]] = Field(
        None, alias="exclusiveMaximum", description="ExclusiveMaximum"
    )
    exclusive_minimum: Optional[Dict[str, Any]] = Field(
        None, alias="exclusiveMinimum", description="ExclusiveMinimum"
    )
    format: Optional[str] = Field(None, description="Format")
    max_length: Optional[int] = Field(
        None, alias="maxLength", description="Max Length", examples=[1234]
    )
    maximum: Optional[Dict[str, Any]] = Field(None, description="Maximum")
    min_length: Optional[int] = Field(
        None, alias="minLength", description="Min Length", examples=[1234]
    )
    minimum: Optional[Dict[str, Any]] = Field(None, description="Minimum")
    not_: Optional[bool] = Field(None, alias="not", description="Not", examples=[False])
    pattern: Optional[str] = Field(None, description="Pattern")
    type: Optional[str] = Field(None, description="Type")


class Generated(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    master_secret: Optional[str] = Field(None, examples=["0"], pattern="^[0-9]*$")
    number: Optional[str] = Field(None, examples=["0"], pattern="^[0-9]*$")
    remainder: Optional[str] = Field(None, examples=["0"], pattern="^[0-9]*$")


class GetCredDefsResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    credential_definition_ids: Optional[List[str]] = None


class GetDIDEndpointResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    endpoint: Optional[str] = Field(
        None,
        description="Full verification key",
        examples=["https://myhost:8021"],
        pattern="^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$",
    )


class GetDIDVerkeyResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    verkey: Optional[str] = Field(
        None,
        description="Full verification key",
        examples=["H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"],
        pattern="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
    )


class GetNymRoleResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    role: Optional[
        Literal[
            "STEWARD", "TRUSTEE", "ENDORSER", "NETWORK_MONITOR", "USER", "ROLE_REMOVE"
        ]
    ] = Field(None, description="Ledger role", examples=["ENDORSER"])


class GetSchemaResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resolution_metadata: Optional[Dict[str, Any]] = None
    schema_: Optional[AnonCredsSchema] = Field(None, alias="schema")
    schema_id: Optional[str] = Field(
        None,
        description="Schema identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"],
    )
    schema_metadata: Optional[Dict[str, Any]] = None


class GetSchemasResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    schema_ids: Optional[List[str]] = None


class Hangup(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        examples=["https://didcomm.org/my-family/1.0/my-message-type"],
    )


class HolderModuleResponse(ActionMenuModulesResult):
    pass


class IndyAttrValue(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    encoded: str = Field(
        ...,
        description="Attribute encoded value",
        examples=["-1"],
        pattern="^-?[0-9]*$",
    )
    raw: str = Field(..., description="Attribute raw value")


class IndyCredInfo(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    attrs: Optional[Dict[str, str]] = Field(
        None, description="Attribute names and value"
    )
    cred_def_id: Optional[str] = Field(
        None,
        description="Credential definition identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"],
        pattern="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    cred_rev_id: Optional[str] = Field(
        None,
        description="Credential revocation identifier",
        examples=["12345"],
        pattern="^[1-9][0-9]*$",
    )
    referent: Optional[str] = Field(
        None,
        description="Wallet referent",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    rev_reg_id: Optional[str] = Field(
        None,
        description="Revocation registry identifier",
        examples=[
            "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0"
        ],
        pattern="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)",
    )
    schema_id: Optional[str] = Field(
        None,
        description="Schema identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"],
        pattern="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
    )


class IndyCredRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    blinded_ms: Dict[str, Any] = Field(..., description="Blinded master secret")
    blinded_ms_correctness_proof: Dict[str, Any] = Field(
        ..., description="Blinded master secret correctness proof"
    )
    cred_def_id: str = Field(
        ...,
        description="Credential definition identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"],
        pattern="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    nonce: str = Field(
        ...,
        description="Nonce in credential request",
        examples=["0"],
        pattern="^[0-9]*$",
    )
    prover_did: str = Field(
        ...,
        description="Prover DID/Random String/UUID",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )


class IndyCredential(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cred_def_id: str = Field(
        ...,
        description="Credential definition identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"],
        pattern="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    rev_reg: Optional[Dict[str, Any]] = Field(
        None, description="Revocation registry state"
    )
    rev_reg_id: Optional[str] = Field(
        None,
        description="Revocation registry identifier",
        examples=[
            "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0"
        ],
        pattern="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)",
    )
    schema_id: str = Field(
        ...,
        description="Schema identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"],
        pattern="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
    )
    signature: Dict[str, Any] = Field(..., description="Credential signature")
    signature_correctness_proof: Dict[str, Any] = Field(
        ..., description="Credential signature correctness proof"
    )
    values: Dict[str, IndyAttrValue] = Field(..., description="Credential attributes")
    witness: Optional[Dict[str, Any]] = Field(
        None, description="Witness for revocation proof"
    )


class IndyEQProof(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    a_prime: Optional[str] = Field(None, examples=["0"], pattern="^[0-9]*$")
    e: Optional[str] = Field(None, examples=["0"], pattern="^[0-9]*$")
    m: Optional[Dict[str, str]] = None
    m2: Optional[str] = Field(None, examples=["0"], pattern="^[0-9]*$")
    revealed_attrs: Optional[Dict[str, str]] = None
    v: Optional[str] = Field(None, examples=["0"], pattern="^[0-9]*$")


class IndyGEProofPred(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    attr_name: Optional[str] = Field(
        None, description="Attribute name, indy-canonicalized"
    )
    p_type: Optional[Literal["LT", "LE", "GE", "GT"]] = Field(
        None, description="Predicate type"
    )
    value: Optional[int] = Field(None, description="Predicate threshold value")


class IndyKeyCorrectnessProof(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    c: str = Field(
        ...,
        description="c in key correctness proof",
        examples=["0"],
        pattern="^[0-9]*$",
    )
    xr_cap: List[List[str]] = Field(..., description="xr_cap in key correctness proof")
    xz_cap: str = Field(
        ...,
        description="xz_cap in key correctness proof",
        examples=["0"],
        pattern="^[0-9]*$",
    )


class IndyNonRevocProof(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    c_list: Optional[Dict[str, str]] = None
    x_list: Optional[Dict[str, str]] = None


class IndyNonRevocationInterval(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    from_: Optional[int] = Field(
        None,
        alias="from",
        description="Earliest time of interest in non-revocation interval",
        examples=[1640995199],
        ge=0,
        le=18446744073709551615,
    )
    to: Optional[int] = Field(
        None,
        description="Latest time of interest in non-revocation interval",
        examples=[1640995199],
        ge=0,
        le=18446744073709551615,
    )


class IndyPresAttrSpec(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cred_def_id: Optional[str] = Field(
        None,
        examples=["WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"],
        pattern="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    mime_type: Optional[str] = Field(
        None,
        alias="mime-type",
        description="MIME type (default null)",
        examples=["image/jpeg"],
    )
    name: str = Field(..., description="Attribute name", examples=["favourite_drink"])
    referent: Optional[str] = Field(
        None, description="Credential referent", examples=["0"]
    )
    value: Optional[str] = Field(
        None, description="Attribute value", examples=["martini"]
    )


class IndyPresPredSpec(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cred_def_id: Optional[str] = Field(
        None,
        description="Credential definition identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"],
        pattern="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    name: str = Field(..., description="Attribute name", examples=["high_score"])
    predicate: Literal["<", "<=", ">=", ">"] = Field(
        ..., description="Predicate type ('<', '<=', '>=', or '>')", examples=[">="]
    )
    threshold: int = Field(..., description="Threshold value")


class IndyPresPreview(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type identifier",
        examples=["https://didcomm.org/present-proof/1.0/presentation-preview"],
    )
    attributes: List[IndyPresAttrSpec]
    predicates: List[IndyPresPredSpec]


class IndyProofIdentifier(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cred_def_id: Optional[str] = Field(
        None,
        description="Credential definition identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"],
        pattern="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    rev_reg_id: Optional[str] = Field(
        None,
        description="Revocation registry identifier",
        examples=[
            "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0"
        ],
        pattern="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)",
    )
    schema_id: Optional[str] = Field(
        None,
        description="Schema identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"],
        pattern="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
    )
    timestamp: Optional[int] = Field(
        None,
        description="Timestamp epoch",
        examples=[1640995199],
        ge=0,
        le=18446744073709551615,
    )


class IndyProofProofAggregatedProof(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    c_hash: Optional[str] = Field(None, description="c_hash value")
    c_list: Optional[List[List[int]]] = Field(None, description="c_list value")


class IndyProofReqAttrSpecNonRevoked1(IndyNonRevocationInterval):
    pass


class IndyProofReqPredSpecNonRevoked1(IndyNonRevocationInterval):
    pass


class IndyProofRequestNonRevoked1(IndyNonRevocationInterval):
    pass


class IndyProofRequestedProofPredicate(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    sub_proof_index: Optional[int] = Field(None, description="Sub-proof index")


class IndyProofRequestedProofRevealedAttr(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    encoded: Optional[str] = Field(
        None, description="Encoded value", examples=["-1"], pattern="^-?[0-9]*$"
    )
    raw: Optional[str] = Field(None, description="Raw value")
    sub_proof_index: Optional[int] = Field(None, description="Sub-proof index")


class IndyRequestedCredsRequestedAttr(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cred_id: str = Field(
        ...,
        description="Wallet credential identifier (typically but not necessarily a UUID)",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    revealed: Optional[bool] = Field(
        None, description="Whether to reveal attribute in proof (default true)"
    )


class IndyRequestedCredsRequestedPred(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cred_id: str = Field(
        ...,
        description="Wallet credential identifier (typically but not necessarily a UUID)",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    timestamp: Optional[int] = Field(
        None,
        description="Epoch timestamp of interest for non-revocation proof",
        examples=[1640995199],
        ge=0,
        le=18446744073709551615,
    )


class IndyRevRegDefValuePublicKeysAccumKey(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    z: Optional[str] = Field(
        None,
        description="Value for z",
        examples=["1 120F522F81E6B7 1 09F7A59005C4939854"],
    )


class IndyRevRegEntryValue(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    accum: Optional[str] = Field(
        None,
        description="Accumulator value",
        examples=["21 11792B036AED0AAA12A4 4 298B2571FFC63A737"],
    )
    prev_accum: Optional[str] = Field(
        None,
        alias="prevAccum",
        description="Previous accumulator value",
        examples=["21 137AC810975E4 6 76F0384B6F23"],
    )
    revoked: Optional[List[int]] = Field(
        None, description="Revoked credential revocation identifiers"
    )


class InnerCredDef(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    issuer_id: str = Field(
        ...,
        alias="issuerId",
        description="Issuer Identifier of the credential definition",
        examples=["WgWxqztrNooG92RXvxSTWv"],
    )
    schema_id: str = Field(
        ...,
        alias="schemaId",
        description="Schema identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"],
    )
    tag: str = Field(..., description="Credential definition tag", examples=["default"])


class InnerRevRegDef(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cred_def_id: Optional[str] = Field(
        None,
        alias="credDefId",
        description="Credential definition identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"],
    )
    issuer_id: Optional[str] = Field(
        None,
        alias="issuerId",
        description="Issuer Identifier of the credential definition or schema",
        examples=["WgWxqztrNooG92RXvxSTWv"],
    )
    max_cred_num: Optional[int] = Field(
        None,
        alias="maxCredNum",
        description="Maximum number of credential revocations per registry",
        examples=[777],
    )
    tag: Optional[str] = Field(
        None, description="tag for revocation registry", examples=["default"]
    )


class IntroModuleResponse(ActionMenuModulesResult):
    pass


class InvitationCreateRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    accept: Optional[List[str]] = Field(
        None,
        description="List of mime type in order of preference that should be use in responding to the message",
        examples=[["didcomm/aip1", "didcomm/aip2;env=rfc19"]],
    )
    alias: Optional[str] = Field(
        None, description="Alias for connection", examples=["Barry"]
    )
    attachments: Optional[List[AttachmentDef]] = Field(
        None, description="Optional invitation attachments"
    )
    goal: Optional[str] = Field(
        None,
        description="A self-attested string that the receiver may want to display to the user about the context-specific goal of the out-of-band message",
        examples=["To issue a Faber College Graduate credential"],
    )
    goal_code: Optional[str] = Field(
        None,
        description="A self-attested code the receiver may want to display to the user or use in automatically deciding what to do with the out-of-band message",
        examples=["issue-vc"],
    )
    handshake_protocols: Optional[List[str]] = None
    mediation_id: Optional[str] = Field(
        None,
        description="Identifier for active mediation record to be used",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
        pattern="[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description="Optional metadata to attach to the connection created with the invitation",
    )
    my_label: Optional[str] = Field(
        None,
        description="Label for connection invitation",
        examples=["Invitation to Barry"],
    )
    protocol_version: Optional[str] = Field(
        None, description="OOB protocol version", examples=["1.1"]
    )
    use_did: Optional[str] = Field(
        None, description="DID to use in invitation", examples=["did:example:123"]
    )
    use_did_method: Optional[Literal["did:peer:2", "did:peer:4"]] = Field(
        None, description="DID method to use in invitation", examples=["did:peer:2"]
    )
    use_public_did: Optional[bool] = Field(
        None, description="Whether to use public DID in invitation", examples=[False]
    )


class InvitationRecordResponse(ActionMenuModulesResult):
    pass


class InvitationResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    connection_id: str = Field(
        ...,
        description="Connection identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    invitation: ConnectionInvitation
    invitation_url: str = Field(
        ...,
        description="Invitation URL",
        examples=["http://192.168.56.101:8020/invite?c_i=eyJAdHlwZSI6Li4ufQ=="],
    )


class IssueCredentialModuleResponse(ActionMenuModulesResult):
    pass


class IssuerCredRevRecord(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    cred_def_id: Optional[str] = Field(
        None,
        description="Credential definition identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"],
        pattern="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    cred_ex_id: Optional[str] = Field(
        None,
        description="Credential exchange record identifier at credential issue",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    cred_ex_version: Optional[str] = Field(
        None, description="Credential exchange version"
    )
    cred_rev_id: Optional[str] = Field(
        None,
        description="Credential revocation identifier",
        examples=["12345"],
        pattern="^[1-9][0-9]*$",
    )
    record_id: Optional[str] = Field(
        None,
        description="Issuer credential revocation record identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    rev_reg_id: Optional[str] = Field(
        None,
        description="Revocation registry identifier",
        examples=[
            "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0"
        ],
        pattern="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)",
    )
    state: Optional[str] = Field(
        None,
        description="Issue credential revocation record state",
        examples=["issued"],
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )


class IssuerCredRevRecordSchemaAnoncreds(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    cred_def_id: Optional[str] = Field(
        None, description="Credential definition identifier"
    )
    cred_ex_id: Optional[str] = Field(
        None,
        description="Credential exchange record identifier at credential issue",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    cred_ex_version: Optional[str] = Field(
        None, description="Credential exchange version"
    )
    cred_rev_id: Optional[str] = Field(
        None, description="Credential revocation identifier"
    )
    record_id: Optional[str] = Field(
        None,
        description="Issuer credential revocation record identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    rev_reg_id: Optional[str] = Field(
        None, description="Revocation registry identifier"
    )
    state: Optional[str] = Field(
        None,
        description="Issue credential revocation record state",
        examples=["issued"],
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )


class JWSCreate(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    did: Optional[str] = Field(
        None,
        description="DID of interest",
        examples=["did:peer:WgWxqztrNooG92RXvxSTWv"],
        pattern="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$|^did:([a-zA-Z0-9_]+):([a-zA-Z0-9_.%-]+(:[a-zA-Z0-9_.%-]+)*)((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(\\/[^#?]*)?([?][^#]*)?(\\#.*)?$$",
    )
    headers: Optional[Dict[str, Any]] = None
    payload: Dict[str, Any]
    verification_method: Optional[str] = Field(
        None,
        alias="verificationMethod",
        description="Information used for proof verification",
        examples=[
            "did:key:z6Mkgg342Ycpuk263R9d8Aq6MUaxPn1DDeHyGo38EefXmgDL#z6Mkgg342Ycpuk263R9d8Aq6MUaxPn1DDeHyGo38EefXmgDL"
        ],
        pattern="\\w+:(\\/?\\/?)[^\\s]+",
    )


class JWSVerify(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    jwt: Optional[str] = Field(
        None,
        examples=[
            "eyJhbGciOiJFZERTQSJ9.eyJhIjogIjAifQ.dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk"
        ],
        pattern="^[a-zA-Z0-9_-]+\\.[a-zA-Z0-9_-]*\\.[a-zA-Z0-9_-]+$",
    )


class JWSVerifyResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    error: Optional[str] = Field(None, description="Error text")
    headers: Dict[str, Any] = Field(..., description="Headers from verified JWT.")
    kid: str = Field(..., description="kid of signer")
    payload: Dict[str, Any] = Field(..., description="Payload from verified JWT")
    valid: bool


class KeylistQueryFilterRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    filter: Optional[Dict[str, Any]] = Field(
        None, description="Filter for keylist query"
    )


class KeylistQueryPaginate(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    limit: Optional[int] = Field(
        None, description="Limit for keylist query", examples=[30]
    )
    offset: Optional[int] = Field(
        None, description="Offset value for query", examples=[0]
    )


class KeylistUpdateRule(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    action: Literal["add", "remove"] = Field(
        ..., description="Action for specific key", examples=["add"]
    )
    recipient_key: str = Field(
        ...,
        description="Key to remove or add",
        examples=["did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"],
        pattern="^did:key:z[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]+$|^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
    )


class LDProofVCOptions(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    challenge: Optional[str] = Field(
        None,
        description="A challenge to include in the proof. SHOULD be provided by the requesting party of the credential (=holder)",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    created: Optional[str] = Field(
        None,
        description="The date and time of the proof (with a maximum accuracy in seconds). Defaults to current system time",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    credential_status: Optional[CredentialStatusOptions] = Field(
        None,
        alias="credentialStatus",
        description="The credential status mechanism to use for the credential. Omitting the property indicates the issued credential will not include a credential status",
    )
    domain: Optional[str] = Field(
        None,
        description="The intended domain of validity for the proof",
        examples=["example.com"],
    )
    proof_purpose: Optional[str] = Field(
        None,
        alias="proofPurpose",
        description="The proof purpose used for the proof. Should match proof purposes registered in the Linked Data Proofs Specification",
        examples=["assertionMethod"],
    )
    proof_type: Optional[str] = Field(
        None,
        alias="proofType",
        description="The proof type used for the proof. Should match suites registered in the Linked Data Cryptographic Suite Registry",
        examples=["Ed25519Signature2018"],
    )
    verification_method: Optional[str] = Field(
        None,
        alias="verificationMethod",
        description="The verification method to use for the proof. Should match a verification method in the wallet",
        examples=["did:example:123456#key-1"],
    )


class LedgerConfigInstance(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    genesis_file: Optional[str] = Field(None, description="genesis_file")
    genesis_transactions: Optional[str] = Field(
        None, description="genesis_transactions"
    )
    genesis_url: Optional[str] = Field(None, description="genesis_url")
    id: Optional[str] = Field(None, description="ledger_id")
    is_production: Optional[bool] = Field(None, description="is_production")


class LedgerConfigList(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    ledger_config_list: List[LedgerConfigInstance]


class LedgerModulesResult(ActionMenuModulesResult):
    pass


class LinkedDataProof(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    challenge: Optional[str] = Field(
        None,
        description="Associates a challenge with a proof, for use with a proofPurpose such as authentication",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    created: str = Field(
        ...,
        description="The string value of an ISO8601 combined date and time string generated by the Signature Algorithm",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    domain: Optional[str] = Field(
        None,
        description="A string value specifying the restricted domain of the signature.",
        examples=["https://example.com"],
        pattern="\\w+:(\\/?\\/?)[^\\s]+",
    )
    jws: Optional[str] = Field(
        None,
        description="Associates a Detached Json Web Signature with a proof",
        examples=[
            "eyJhbGciOiAiRWREUc2UsICJjcml0IjogWyJiNjQiXX0..lKJU0Df_keblRKhZAS9Qq6zybm-HqUXNVZ8vgEPNTAjQ1Ch6YBKY7UBAjg6iBX5qBQ"
        ],
    )
    nonce: Optional[str] = Field(
        None,
        description="The nonce",
        examples=[
            "CF69iO3nfvqRsRBNElE8b4wO39SyJHPM7Gg1nExltW5vSfQA1lvDCR/zXX1To0/4NLo=="
        ],
    )
    proof_purpose: str = Field(
        ...,
        alias="proofPurpose",
        description="Proof purpose",
        examples=["assertionMethod"],
    )
    proof_value: Optional[str] = Field(
        None,
        alias="proofValue",
        description="The proof value of a proof",
        examples=[
            "sy1AahqbzJQ63n9RtekmwzqZeVj494VppdAVJBnMYrTwft6cLJJGeTSSxCCJ6HKnRtwE7jjDh6sB2z2AAiZY9BBnCD8wUVgwqH3qchGRCuC2RugA4eQ9fUrR4Yuycac3caiaaay"
        ],
    )
    type: str = Field(
        ...,
        description="Identifies the digital signature suite that was used to create the signature",
        examples=["Ed25519Signature2018"],
    )
    verification_method: str = Field(
        ...,
        alias="verificationMethod",
        description="Information used for proof verification",
        examples=[
            "did:key:z6Mkgg342Ycpuk263R9d8Aq6MUaxPn1DDeHyGo38EefXmgDL#z6Mkgg342Ycpuk263R9d8Aq6MUaxPn1DDeHyGo38EefXmgDL"
        ],
        pattern="\\w+:(\\/?\\/?)[^\\s]+",
    )


class ListCredentialsResponse(ActionMenuModulesResult):
    pass


class MediationCreateRequest(ActionMenuModulesResult):
    pass


class MediationDeny(Hangup):
    pass


class MediationGrant(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        examples=["https://didcomm.org/my-family/1.0/my-message-type"],
    )
    endpoint: Optional[str] = Field(
        None,
        description="endpoint on which messages destined for the recipient are received.",
        examples=["http://192.168.56.102:8020/"],
    )
    routing_keys: Optional[List[str]] = None


class MediationIdMatchInfo(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    mediation_id: str = Field(
        ...,
        description="Mediation record identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )


class RoutingKey2(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: str = Field(
        ...,
        examples=["did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"],
        pattern="^did:key:z[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]+$",
    )


class MediationRecord(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    connection_id: str
    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    endpoint: Optional[str] = None
    mediation_id: Optional[str] = None
    mediator_terms: Optional[List[str]] = None
    recipient_terms: Optional[List[str]] = None
    role: str
    routing_keys: Optional[List[RoutingKey2]] = None
    state: Optional[str] = Field(
        None, description="Current record state", examples=["active"]
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )


class MenuFormParam(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    default: Optional[str] = Field(
        None, description="Default parameter value", examples=["0"]
    )
    description: Optional[str] = Field(
        None,
        description="Additional descriptive text for menu form parameter",
        examples=["Delay in seconds before starting"],
    )
    name: str = Field(..., description="Menu parameter name", examples=["delay"])
    required: Optional[bool] = Field(
        None, description="Whether parameter is required", examples=[False]
    )
    title: str = Field(
        ..., description="Menu parameter title", examples=["Delay in seconds"]
    )
    type: Optional[str] = Field(
        None, description="Menu form parameter input type", examples=["int"]
    )


class MultitenantModuleResponse(ActionMenuModulesResult):
    pass


class PerformRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Optional[str] = Field(
        None, description="Menu option name", examples=["Query"]
    )
    params: Optional[Dict[str, str]] = Field(None, description="Input parameter values")


class PingRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    comment: Optional[str] = Field(None, description="Comment for the ping message")


class PingRequestResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    thread_id: Optional[str] = Field(None, description="Thread ID of the ping message")


class Presentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    context: List[Dict[str, Any]] = Field(
        ...,
        alias="@context",
        description="The JSON-LD context of the presentation",
        examples=[["https://www.w3.org/2018/credentials/v1"]],
    )
    holder: Optional[Dict[str, Any]] = Field(
        None,
        description="The JSON-LD Verifiable Credential Holder. Either string of object with id field.",
        examples=["did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"],
    )
    id: Optional[str] = Field(
        None,
        description="The ID of the presentation",
        examples=["http://example.edu/presentations/1872"],
        pattern="\\w+:(\\/?\\/?)[^\\s]+",
    )
    proof: Optional[LinkedDataProof] = Field(
        None,
        description="The proof of the presentation",
        examples=[
            {
                "created": "2019-12-11T03:50:55",
                "jws": "eyJhbGciOiAiRWREU0EiLCAiYjY0IjogZmFsc2UsICJjcml0JiNjQiXX0..lKJU0Df_keblRKhZAS9Qq6zybm-HqUXNVZ8vgEPNTAjQKBhQDxvXNo7nvtUBb_Eq1Ch6YBKY5qBQ",
                "proofPurpose": "assertionMethod",
                "type": "Ed25519Signature2018",
                "verificationMethod": "did:key:z6Mkgg342Ycpuk263R9d8Aq6MUaxPn1DDeHyGo38EefXmgDL#z6Mkgg342Ycpuk263R9d8Aq6MUaxPn1DDeHyGo38EefXmgDL",
            }
        ],
    )
    type: List[str] = Field(
        ...,
        description="The JSON-LD type of the presentation",
        examples=[["VerifiablePresentation"]],
    )
    verifiable_credential: Optional[List[Dict[str, Any]]] = Field(
        None, alias="verifiableCredential"
    )


class PresentationProposal(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        examples=["https://didcomm.org/my-family/1.0/my-message-type"],
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    presentation_proposal: IndyPresPreview


class ProfileSettings(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    settings: Optional[Dict[str, Any]] = Field(
        None,
        description="Profile settings dict",
        examples=[
            {"debug.invite_public": True, "log.level": "INFO", "public_invites": False}
        ],
    )


class ProtocolDescriptor(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    pid: str
    roles: Optional[List[str]] = Field(None, description="List of roles")


class ProvePresentationRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    options: Optional[LDProofVCOptions] = None
    presentation: Optional[Presentation] = None


class Rrid2cridItem(PurgeItem):
    pass


class PublishRevocations(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    rrid2crid: Optional[Dict[str, List[Rrid2cridItem]]] = Field(
        None, description="Credential revocation ids by revocation registry id"
    )


class PublishRevocationsOptions(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    create_transaction_for_endorser: Optional[bool] = Field(
        None,
        description="Create transaction for endorser (optional, default false). Use this for agents who don't specify an author role but want to create a transaction for an endorser to sign.",
        examples=[False],
    )
    endorser_connection_id: Optional[str] = Field(
        None,
        description="Connection identifier (optional) (this is an example). You can set this if you know the endorser's connection id you want to use. If not specified then the agent will attempt to find an endorser connection.",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )


class PublishRevocationsResultSchemaAnoncreds(PublishRevocations):
    pass


class PublishRevocationsSchemaAnoncreds(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    options: Optional[PublishRevocationsOptions] = None
    rrid2crid: Optional[Dict[str, List[Rrid2cridItem]]] = Field(
        None, description="Credential revocation ids by revocation registry id"
    )


class PurposeResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    controller: Optional[Dict[str, Any]] = None
    error: Optional[str] = None
    valid: Optional[bool] = None


class Query(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        examples=["https://didcomm.org/my-family/1.0/my-message-type"],
    )
    comment: Optional[str] = None
    query: str


class QueryItem(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    feature_type: Literal["protocol", "goal-code"] = Field(
        ..., alias="feature-type", description="feature type"
    )
    match: str = Field(..., description="match")


class RawEncoded(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    encoded: Optional[str] = Field(
        None, description="Encoded value", examples=["-1"], pattern="^-?[0-9]*$"
    )
    raw: Optional[str] = Field(None, description="Raw value")


class RoutingKey3(RoutingKey):
    pass


class ReceiveInvitationRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        examples=["https://didcomm.org/my-family/1.0/my-message-type"],
    )
    did: Optional[str] = Field(
        None,
        description="DID for connection invitation",
        examples=["did:peer:WgWxqztrNooG92RXvxSTWv"],
        pattern="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$|^did:([a-zA-Z0-9_]+):([a-zA-Z0-9_.%-]+(:[a-zA-Z0-9_.%-]+)*)((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(\\/[^#?]*)?([?][^#]*)?(\\#.*)?$$",
    )
    image_url: Optional[str] = Field(
        None,
        alias="imageUrl",
        description="Optional image URL for connection invitation",
        examples=["http://192.168.56.101/img/logo.jpg"],
    )
    label: Optional[str] = Field(
        None, description="Optional label for connection invitation", examples=["Bob"]
    )
    recipient_keys: Optional[List[RecipientKey]] = Field(
        None, alias="recipientKeys", description="List of recipient keys"
    )
    routing_keys: Optional[List[RoutingKey3]] = Field(
        None, alias="routingKeys", description="List of routing keys"
    )
    service_endpoint: Optional[str] = Field(
        None,
        alias="serviceEndpoint",
        description="Service endpoint at which to reach this agent",
        examples=["http://192.168.56.101:8020"],
    )


class RemoveWalletRequest(CreateWalletTokenRequest):
    pass


class ResolutionResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    did_document: Dict[str, Any] = Field(..., description="DID Document")
    metadata: Dict[str, Any] = Field(..., description="Resolution metadata")


class RevList(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    current_accumulator: Optional[str] = Field(
        None,
        alias="currentAccumulator",
        description="The current accumulator value",
        examples=["21 118...1FB"],
    )
    issuer_id: Optional[str] = Field(
        None,
        alias="issuerId",
        description="Issuer Identifier of the credential definition or schema",
        examples=["WgWxqztrNooG92RXvxSTWv"],
    )
    rev_reg_def_id: Optional[str] = Field(
        None,
        alias="revRegDefId",
        description="The ID of the revocation registry definition",
        examples=[
            "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0"
        ],
    )
    revocation_list: Optional[List[int]] = Field(
        None,
        alias="revocationList",
        description="Bit list representing revoked credentials",
        examples=[[0, 1, 1, 0]],
    )
    timestamp: Optional[int] = Field(
        None, description="Timestamp at which revocation list is applicable"
    )


class RevListOptions(PublishRevocationsOptions):
    pass


class RevListState(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    revocation_list: Optional[RevList] = Field(None, description="revocation list")
    state: Optional[Literal["finished", "failed", "action", "wait"]] = None


class RevRegCreateRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    credential_definition_id: Optional[str] = Field(
        None,
        description="Credential definition identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"],
        pattern="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    max_cred_num: Optional[int] = Field(
        None, description="Revocation registry size", examples=[1000], ge=4, le=32768
    )


class RevRegDefOptions(PublishRevocationsOptions):
    pass


class RevRegDefValue(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    max_cred_num: Optional[int] = Field(None, alias="maxCredNum", examples=[777])
    public_keys: Optional[Dict[str, Any]] = Field(
        None,
        alias="publicKeys",
        examples=["H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"],
    )
    tails_hash: Optional[str] = Field(
        None,
        alias="tailsHash",
        examples=["7Qen9RDyemMuV7xGQvp7NjwMSpyHieJyBakycxN7dX7P"],
    )
    tails_location: Optional[str] = Field(
        None,
        alias="tailsLocation",
        examples=[
            "https://tails-server.com/hash/7Qen9RDyemMuV7xGQvp7NjwMSpyHieJyBakycxN7dX7P"
        ],
    )


class RevRegIssuedResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    result: Optional[int] = Field(
        None,
        description="Number of credentials issued against revocation registry",
        examples=[0],
        ge=0,
    )


class RevRegIssuedResultSchemaAnoncreds(RevRegIssuedResult):
    pass


class RevRegUpdateTailsFileUri(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    tails_public_uri: str = Field(
        ...,
        description="Public URI to the tails file",
        examples=[
            "http://192.168.56.133:6543/revocation/registry/WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0/tails-file"
        ],
    )


class RevRegWalletUpdatedResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    accum_calculated: Optional[Dict[str, Any]] = Field(
        None, description="Calculated accumulator for phantom revocations"
    )
    accum_fixed: Optional[Dict[str, Any]] = Field(
        None, description="Applied ledger transaction to fix revocations"
    )
    rev_reg_delta: Optional[Dict[str, Any]] = Field(
        None, description="Indy revocation registry delta"
    )


class RevRegWalletUpdatedResultSchemaAnoncreds(RevRegWalletUpdatedResult):
    pass


class RevRegId(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: str = Field(
        ...,
        description="Revocation registry identifiers",
        examples=[
            "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0"
        ],
        pattern="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)",
    )


class RevRegsCreated(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    rev_reg_ids: Optional[List[RevRegId]] = None


class RevRegsCreatedSchemaAnoncreds(RevRegsCreated):
    pass


class RevocationAnoncredsModuleResponse(ActionMenuModulesResult):
    pass


class RevocationModuleResponse(ActionMenuModulesResult):
    pass


class RevokeRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    comment: Optional[str] = Field(
        None, description="Optional comment to include in revocation notification"
    )
    connection_id: Optional[str] = Field(
        None,
        description="Connection ID to which the revocation notification will be sent; required if notify is true",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
        pattern="[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
    )
    cred_ex_id: Optional[str] = Field(
        None,
        description="Credential exchange identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
        pattern="[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
    )
    cred_rev_id: Optional[str] = Field(
        None,
        description="Credential revocation identifier",
        examples=["12345"],
        pattern="^[1-9][0-9]*$",
    )
    notify: Optional[bool] = Field(
        None, description="Send a notification to the credential recipient"
    )
    notify_version: Optional[Literal["v1_0", "v2_0"]] = Field(
        None,
        description="Specify which version of the revocation notification should be sent",
    )
    publish: Optional[bool] = Field(
        None,
        description="(True) publish revocation to ledger immediately, or (default, False) mark it pending",
    )
    rev_reg_id: Optional[str] = Field(
        None,
        description="Revocation registry identifier",
        examples=[
            "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0"
        ],
        pattern="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)",
    )
    thread_id: Optional[str] = Field(
        None,
        description="Thread ID of the credential exchange message thread resulting in the credential now being revoked; required if notify is true",
    )


class RevokeRequestSchemaAnoncreds(RevokeRequest):
    pass


class Rotate(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        examples=["https://didcomm.org/my-family/1.0/my-message-type"],
    )
    to_did: str = Field(
        ...,
        description="The DID the rotating party is rotating to",
        examples=["did:example:newdid"],
    )


class RouteRecord(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    connection_id: Optional[str] = None
    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    recipient_key: str
    record_id: Optional[str] = None
    role: Optional[str] = None
    state: Optional[str] = Field(
        None, description="Current record state", examples=["active"]
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    wallet_id: Optional[str] = None


class NonSdListItem(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: str = Field(..., examples=[""], pattern="[a-z0-9:\\[\\]_\\.@?\\(\\)]")


class SDJWSCreate(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    did: Optional[str] = Field(
        None,
        description="DID of interest",
        examples=["did:peer:WgWxqztrNooG92RXvxSTWv"],
        pattern="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$|^did:([a-zA-Z0-9_]+):([a-zA-Z0-9_.%-]+(:[a-zA-Z0-9_.%-]+)*)((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(\\/[^#?]*)?([?][^#]*)?(\\#.*)?$$",
    )
    headers: Optional[Dict[str, Any]] = None
    non_sd_list: Optional[List[NonSdListItem]] = None
    payload: Dict[str, Any]
    verification_method: Optional[str] = Field(
        None,
        alias="verificationMethod",
        description="Information used for proof verification",
        examples=[
            "did:key:z6Mkgg342Ycpuk263R9d8Aq6MUaxPn1DDeHyGo38EefXmgDL#z6Mkgg342Ycpuk263R9d8Aq6MUaxPn1DDeHyGo38EefXmgDL"
        ],
        pattern="\\w+:(\\/?\\/?)[^\\s]+",
    )


class SDJWSVerify(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    sd_jwt: Optional[str] = Field(
        None,
        examples=[
            "eyJhbGciOiJFZERTQSJ9.eyJhIjogIjAifQ.dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk~WyJEM3BUSFdCYWNRcFdpREc2TWZKLUZnIiwgIkRFIl0~WyJPMTFySVRjRTdHcXExYW9oRkd0aDh3IiwgIlNBIl0~WyJkVmEzX1JlTGNsWTU0R1FHZm5oWlRnIiwgInVwZGF0ZWRfYXQiLCAxNTcwMDAwMDAwXQ"
        ],
        pattern="^[a-zA-Z0-9_-]+\\.[a-zA-Z0-9_-]*\\.[a-zA-Z0-9_-]+(?:~[a-zA-Z0-9._-]+)*~?$",
    )


class SDJWSVerifyResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    disclosures: Optional[List[List[Dict[str, Any]]]] = Field(
        None,
        description="Disclosure arrays associated with the SD-JWT",
        examples=[
            [
                ["fx1iT_mETjGiC-JzRARnVg", "name", "Alice"],
                [
                    "n4-t3mlh8jSS6yMIT7QHnA",
                    "street_address",
                    {"_sd": ["kLZrLK7enwfqeOzJ9-Ss88YS3mhjOAEk9lr_ix2Heng"]},
                ],
            ]
        ],
    )
    error: Optional[str] = Field(None, description="Error text")
    headers: Dict[str, Any] = Field(..., description="Headers from verified JWT.")
    kid: str = Field(..., description="kid of signer")
    payload: Dict[str, Any] = Field(..., description="Payload from verified JWT")
    valid: bool


class Schema(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    attr_names: Optional[List[str]] = Field(
        None, alias="attrNames", description="Schema attribute names"
    )
    id: Optional[str] = Field(
        None,
        description="Schema identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"],
        pattern="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
    )
    name: Optional[str] = Field(
        None, description="Schema name", examples=["schema_name"]
    )
    seq_no: Optional[int] = Field(
        None, alias="seqNo", description="Schema sequence number", examples=[10], ge=1
    )
    ver: Optional[str] = Field(
        None, description="Node protocol version", examples=["1.0"], pattern="^[0-9.]+$"
    )
    version: Optional[str] = Field(
        None, description="Schema version", examples=["1.0"], pattern="^[0-9.]+$"
    )


class SchemaGetResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    schema_: Optional[Schema] = Field(None, alias="schema")


class SchemaInputDescriptor(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    required: Optional[bool] = Field(None, description="Required")
    uri: Optional[str] = Field(None, description="URI")


class SchemaPostOption(PublishRevocationsOptions):
    pass


class SchemaPostRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    options: Optional[SchemaPostOption] = None
    schema_: Optional[AnonCredsSchema] = Field(None, alias="schema")


class SchemaSendRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    attributes: List[str] = Field(..., description="List of schema attributes")
    schema_name: str = Field(..., description="Schema name", examples=["prefs"])
    schema_version: str = Field(
        ..., description="Schema version", examples=["1.0"], pattern="^[0-9.]+$"
    )


class SchemaSendResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    schema_: Optional[Schema] = Field(
        None, alias="schema", description="Schema definition"
    )
    schema_id: str = Field(
        ...,
        description="Schema identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"],
        pattern="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
    )


class SchemaState(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    schema_: Optional[AnonCredsSchema] = Field(None, alias="schema")
    schema_id: Optional[str] = Field(
        None,
        description="Schema identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"],
    )
    state: Optional[Literal["finished", "failed", "action", "wait"]] = None


class SchemaId(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: str = Field(
        ...,
        description="Schema identifiers",
        examples=["WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"],
        pattern="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
    )


class SchemasCreatedResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    schema_ids: Optional[List[SchemaId]] = None


class SchemasInputDescriptorFilter(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    oneof_filter: Optional[bool] = Field(None, description="oneOf")
    uri_groups: Optional[List[List[SchemaInputDescriptor]]] = None


class SendMessage(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    content: Optional[str] = Field(
        None, description="Message content", examples=["Hello"]
    )


class ServiceDecorator(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    recipient_keys: List[RecipientKey] = Field(
        ..., alias="recipientKeys", description="List of recipient keys"
    )
    routing_keys: Optional[List[RoutingKey3]] = Field(
        None, alias="routingKeys", description="List of routing keys"
    )
    service_endpoint: str = Field(
        ...,
        alias="serviceEndpoint",
        description="Service endpoint at which to reach this agent",
        examples=["http://192.168.56.101:8020"],
    )


class SignResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    error: Optional[str] = Field(None, description="Error text")
    signed_doc: Optional[Dict[str, Any]] = Field(None, description="Signed document")


class SignatureOptions(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    challenge: Optional[str] = None
    domain: Optional[str] = None
    proof_purpose: str = Field(..., alias="proofPurpose")
    type: Optional[str] = None
    verification_method: str = Field(..., alias="verificationMethod")


class SignedDoc(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    proof: SignatureOptions = Field(..., description="Linked data proof")


class SubmissionRequirements(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    count: Optional[int] = Field(None, description="Count Value", examples=[1234])
    from_: Optional[str] = Field(None, alias="from", description="From")
    from_nested: Optional[List[SubmissionRequirements]] = None
    max: Optional[int] = Field(None, description="Max Value", examples=[1234])
    min: Optional[int] = Field(None, description="Min Value", examples=[1234])
    name: Optional[str] = Field(None, description="Name")
    purpose: Optional[str] = Field(None, description="Purpose")
    rule: Optional[Literal["all", "pick"]] = Field(None, description="Selection")


class TAAAccept(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    mechanism: Optional[str] = None
    text: Optional[str] = None
    version: Optional[str] = None


class TAAAcceptance(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    mechanism: Optional[str] = None
    time: Optional[int] = Field(
        None, examples=[1640995199], ge=0, le=18446744073709551615
    )


class TAARecord(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    digest: Optional[str] = None
    text: Optional[str] = None
    version: Optional[str] = None


class TailsDeleteResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    message: Optional[str] = None


class TransactionJobs(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    transaction_my_job: Optional[
        Literal["TRANSACTION_AUTHOR", "TRANSACTION_ENDORSER", "reset"]
    ] = Field(None, description="My transaction related job")
    transaction_their_job: Optional[
        Literal["TRANSACTION_AUTHOR", "TRANSACTION_ENDORSER", "reset"]
    ] = Field(None, description="Their transaction related job")


class TransactionRecord(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Optional[str] = Field(
        None, alias="_type", description="Transaction type", examples=["101"]
    )
    connection_id: Optional[str] = Field(
        None,
        description="The connection identifier for this particular transaction record",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    endorser_write_txn: Optional[bool] = Field(
        None,
        description="Request Endorser to write the ledger transaction, this parameter is deprecated and no longer supported.",
        examples=[False],
    )
    formats: Optional[List[Dict[str, str]]] = None
    messages_attach: Optional[List[Dict[str, Any]]] = None
    meta_data: Optional[Dict[str, Any]] = Field(
        None,
        examples=[
            {
                "context": {"param1": "param1_value", "param2": "param2_value"},
                "post_process": [{"topic": "topic_value", "other": "other_value"}],
            }
        ],
    )
    signature_request: Optional[List[Dict[str, Any]]] = None
    signature_response: Optional[List[Dict[str, Any]]] = None
    state: Optional[str] = Field(
        None, description="Current record state", examples=["active"]
    )
    thread_id: Optional[str] = Field(
        None,
        description="Thread Identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    timing: Optional[Dict[str, Any]] = Field(
        None, examples=[{"expires_time": "2020-12-13T17:29:06+0000"}]
    )
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )
    transaction_id: Optional[str] = Field(
        None,
        description="Transaction identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )


class TxnOrCredentialDefinitionSendResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    sent: Optional[CredentialDefinitionSendResult] = None
    txn: Optional[TransactionRecord] = Field(
        None, description="Credential definition transaction to endorse"
    )


class TxnOrPublishRevocationsResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    sent: Optional[PublishRevocations] = None
    txn: Optional[TransactionRecord] = Field(
        None, description="Revocation registry revocations transaction to endorse"
    )


class TxnOrRegisterLedgerNymResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    success: Optional[bool] = Field(
        None, description="Success of nym registration operation", examples=[True]
    )
    txn: Optional[TransactionRecord] = Field(
        None, description="DID transaction to endorse"
    )


class TxnOrSchemaSendResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    sent: Optional[SchemaSendResult] = Field(None, description="Content sent")
    txn: Optional[TransactionRecord] = Field(
        None, description="Schema transaction to endorse"
    )


class UpdateProfileSettings(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    extra_settings: Optional[Dict[str, Any]] = Field(
        None,
        description="Agent config key-value pairs",
        examples=[
            {"ACAPY_INVITE_PUBLIC": True, "log-level": "INFO", "public-invites": False}
        ],
    )


class UpdateWalletRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    extra_settings: Optional[Dict[str, Any]] = Field(
        None, description="Agent config key-value pairs"
    )
    image_url: Optional[str] = Field(
        None,
        description="Image url for this wallet. This image url is publicized (self-attested) to other agents as part of forming a connection.",
        examples=["https://aries.ca/images/sample.png"],
    )
    label: Optional[str] = Field(
        None,
        description="Label for this wallet. This label is publicized (self-attested) to other agents as part of forming a connection.",
        examples=["Alice"],
    )
    wallet_dispatch_type: Optional[Literal["default", "both", "base"]] = Field(
        None,
        description="Webhook target dispatch type for this wallet. default: Dispatch only to webhooks associated with this wallet. base: Dispatch only to webhooks associated with the base wallet. both: Dispatch to both webhook targets.",
        examples=["default"],
    )
    wallet_webhook_urls: Optional[List[str]] = Field(
        None, description="List of Webhook URLs associated with this subwallet"
    )


class V10CredentialBoundOfferRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    counter_proposal: Optional[CredentialProposal] = Field(
        None, description="Optional counter-proposal"
    )


class V10CredentialConnFreeOfferRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    auto_issue: Optional[bool] = Field(
        None,
        description="Whether to respond automatically to credential requests, creating and issuing requested credentials",
    )
    auto_remove: Optional[bool] = Field(
        None,
        description="Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    cred_def_id: str = Field(
        ...,
        description="Credential definition identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"],
        pattern="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    credential_preview: CredentialPreview
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )


class V10CredentialCreate(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    auto_remove: Optional[bool] = Field(
        None,
        description="Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    cred_def_id: Optional[str] = Field(
        None,
        description="Credential definition identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"],
        pattern="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    credential_proposal: CredentialPreview
    issuer_did: Optional[str] = Field(
        None,
        description="Credential issuer DID",
        examples=["WgWxqztrNooG92RXvxSTWv"],
        pattern="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    schema_id: Optional[str] = Field(
        None,
        description="Schema identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"],
        pattern="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
    )
    schema_issuer_did: Optional[str] = Field(
        None,
        description="Schema issuer DID",
        examples=["WgWxqztrNooG92RXvxSTWv"],
        pattern="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    schema_name: Optional[str] = Field(
        None, description="Schema name", examples=["preferences"]
    )
    schema_version: Optional[str] = Field(
        None, description="Schema version", examples=["1.0"], pattern="^[0-9.]+$"
    )
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )


class V10CredentialExchangeAutoRemoveRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    auto_remove: Optional[bool] = Field(
        None,
        description="Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
    )


class V10CredentialFreeOfferRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    auto_issue: Optional[bool] = Field(
        None,
        description="Whether to respond automatically to credential requests, creating and issuing requested credentials",
    )
    auto_remove: Optional[bool] = Field(
        None,
        description="Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    connection_id: str = Field(
        ...,
        description="Connection identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    cred_def_id: str = Field(
        ...,
        description="Credential definition identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"],
        pattern="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    credential_preview: CredentialPreview
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )


class V10CredentialIssueRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")


class V10CredentialProblemReportRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    description: str


class V10CredentialProposalRequestMand(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    auto_remove: Optional[bool] = Field(
        None,
        description="Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    connection_id: str = Field(
        ...,
        description="Connection identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    cred_def_id: Optional[str] = Field(
        None,
        description="Credential definition identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"],
        pattern="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    credential_proposal: CredentialPreview
    issuer_did: Optional[str] = Field(
        None,
        description="Credential issuer DID",
        examples=["WgWxqztrNooG92RXvxSTWv"],
        pattern="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    schema_id: Optional[str] = Field(
        None,
        description="Schema identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"],
        pattern="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
    )
    schema_issuer_did: Optional[str] = Field(
        None,
        description="Schema issuer DID",
        examples=["WgWxqztrNooG92RXvxSTWv"],
        pattern="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    schema_name: Optional[str] = Field(
        None, description="Schema name", examples=["preferences"]
    )
    schema_version: Optional[str] = Field(
        None, description="Schema version", examples=["1.0"], pattern="^[0-9.]+$"
    )
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )


class V10CredentialProposalRequestOpt(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    auto_remove: Optional[bool] = Field(
        None,
        description="Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    connection_id: str = Field(
        ...,
        description="Connection identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    cred_def_id: Optional[str] = Field(
        None,
        description="Credential definition identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"],
        pattern="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    credential_proposal: Optional[CredentialPreview] = None
    issuer_did: Optional[str] = Field(
        None,
        description="Credential issuer DID",
        examples=["WgWxqztrNooG92RXvxSTWv"],
        pattern="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    schema_id: Optional[str] = Field(
        None,
        description="Schema identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"],
        pattern="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
    )
    schema_issuer_did: Optional[str] = Field(
        None,
        description="Schema issuer DID",
        examples=["WgWxqztrNooG92RXvxSTWv"],
        pattern="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    schema_name: Optional[str] = Field(
        None, description="Schema name", examples=["preferences"]
    )
    schema_version: Optional[str] = Field(
        None, description="Schema version", examples=["1.0"], pattern="^[0-9.]+$"
    )
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )


class V10CredentialStoreRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    credential_id: Optional[str] = None


class V10PresentProofModuleResponse(ActionMenuModulesResult):
    pass


class V10PresentationProblemReportRequest(V10CredentialProblemReportRequest):
    pass


class V10PresentationProposalRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    auto_present: Optional[bool] = Field(
        None,
        description="Whether to respond automatically to presentation requests, building and presenting requested proof",
    )
    auto_remove: Optional[bool] = Field(
        None,
        description="Whether to remove the presentation exchange record on completion (overrides --preserve-exchange-records configuration setting)",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    connection_id: str = Field(
        ...,
        description="Connection identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    presentation_proposal: IndyPresPreview
    trace: Optional[bool] = Field(
        None, description="Whether to trace event (default false)", examples=[False]
    )


class V10PresentationSendRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    auto_remove: Optional[bool] = Field(
        None,
        description="Whether to remove the presentation exchange record on completion (overrides --preserve-exchange-records configuration setting)",
    )
    requested_attributes: Dict[str, IndyRequestedCredsRequestedAttr] = Field(
        ...,
        description="Nested object mapping proof request attribute referents to requested-attribute specifiers",
    )
    requested_predicates: Dict[str, IndyRequestedCredsRequestedPred] = Field(
        ...,
        description="Nested object mapping proof request predicate referents to requested-predicate specifiers",
    )
    self_attested_attributes: Dict[str, str] = Field(
        ..., description="Self-attested attributes to build into proof"
    )
    trace: Optional[bool] = Field(
        None, description="Whether to trace event (default false)", examples=[False]
    )


class V10PresentationSendRequestToProposal(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    auto_remove: Optional[bool] = Field(
        None,
        description="Whether to remove the presentation exchange record on completion (overrides --preserve-exchange-records configuration setting)",
    )
    auto_verify: Optional[bool] = Field(
        None,
        description="Verifier choice to auto-verify proof presentation",
        examples=[False],
    )
    trace: Optional[bool] = Field(
        None, description="Whether to trace event (default false)", examples=[False]
    )


class V20CredAttrSpec(CredAttrSpec):
    pass


class V20CredExRecordByFormat(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cred_issue: Optional[Dict[str, Any]] = None
    cred_offer: Optional[Dict[str, Any]] = None
    cred_proposal: Optional[Dict[str, Any]] = None
    cred_request: Optional[Dict[str, Any]] = None


class V20CredExRecordIndy(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    cred_ex_id: Optional[str] = Field(
        None,
        description="Corresponding v2.0 credential exchange record identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    cred_ex_indy_id: Optional[str] = Field(
        None,
        description="Record identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    cred_id_stored: Optional[str] = Field(
        None,
        description="Credential identifier stored in wallet",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    cred_request_metadata: Optional[Dict[str, Any]] = Field(
        None, description="Credential request metadata for indy holder"
    )
    cred_rev_id: Optional[str] = Field(
        None,
        description="Credential revocation identifier within revocation registry",
        examples=["12345"],
        pattern="^[1-9][0-9]*$",
    )
    rev_reg_id: Optional[str] = Field(
        None,
        description="Revocation registry identifier",
        examples=[
            "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0"
        ],
        pattern="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)",
    )
    state: Optional[str] = Field(
        None, description="Current record state", examples=["active"]
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )


class V20CredExRecordLDProof(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    cred_ex_id: Optional[str] = Field(
        None,
        description="Corresponding v2.0 credential exchange record identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    cred_ex_ld_proof_id: Optional[str] = Field(
        None,
        description="Record identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    cred_id_stored: Optional[str] = Field(
        None,
        description="Credential identifier stored in wallet",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    state: Optional[str] = Field(
        None, description="Current record state", examples=["active"]
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )


class V20CredFilterIndy(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cred_def_id: Optional[str] = Field(
        None,
        description="Credential definition identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"],
        pattern="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    issuer_did: Optional[str] = Field(
        None,
        description="Credential issuer DID",
        examples=["WgWxqztrNooG92RXvxSTWv"],
        pattern="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    schema_id: Optional[str] = Field(
        None,
        description="Schema identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"],
        pattern="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
    )
    schema_issuer_did: Optional[str] = Field(
        None,
        description="Schema issuer DID",
        examples=["WgWxqztrNooG92RXvxSTWv"],
        pattern="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    schema_name: Optional[str] = Field(
        None, description="Schema name", examples=["preferences"]
    )
    schema_version: Optional[str] = Field(
        None, description="Schema version", examples=["1.0"], pattern="^[0-9.]+$"
    )


class V20CredFormat(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    attach_id: str = Field(
        ...,
        description="Attachment identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    format: str = Field(
        ...,
        description="Attachment format specifier",
        examples=["aries/ld-proof-vc-detail@v1.0"],
    )


class V20CredIssueProblemReportRequest(V10CredentialProblemReportRequest):
    pass


class V20CredIssueRequest(V10CredentialIssueRequest):
    pass


class V20CredPreview(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type identifier",
        examples=["issue-credential/2.0/credential-preview"],
    )
    attributes: List[V20CredAttrSpec]


class V20CredRequestRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    auto_remove: Optional[bool] = Field(
        None,
        description="Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
    )
    holder_did: Optional[str] = Field(
        None,
        description="Holder DID to substitute for the credentialSubject.id",
        examples=["did:key:ahsdkjahsdkjhaskjdhakjshdkajhsdkjahs"],
    )


class V20CredStoreRequest(V10CredentialStoreRequest):
    pass


class V20IssueCredentialModuleResponse(ActionMenuModulesResult):
    pass


class V20PresExRecordByFormat(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    pres: Optional[Dict[str, Any]] = None
    pres_proposal: Optional[Dict[str, Any]] = None
    pres_request: Optional[Dict[str, Any]] = None


class V20PresFormat(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    attach_id: str = Field(
        ...,
        description="Attachment identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    format: str = Field(
        ...,
        description="Attachment format specifier",
        examples=["dif/presentation-exchange/submission@v1.0"],
    )


class V20PresProblemReportRequest(V10CredentialProblemReportRequest):
    pass


class V20PresentProofModuleResponse(ActionMenuModulesResult):
    pass


class V20PresentationSendRequestToProposal(V10PresentationSendRequestToProposal):
    pass


class Context(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: str = Field(
        ...,
        description="Context",
        examples=["https://myhost:8021"],
        pattern="^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$",
    )


class VCRecord(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    contexts: Optional[List[Context]] = None
    cred_tags: Optional[Dict[str, str]] = None
    cred_value: Optional[Dict[str, Any]] = Field(
        None, description="(JSON-serializable) credential value"
    )
    expanded_types: Optional[List[str]] = None
    given_id: Optional[str] = Field(
        None,
        description="Credential identifier",
        examples=["http://example.edu/credentials/3732"],
    )
    issuer_id: Optional[str] = Field(
        None,
        description="Issuer identifier",
        examples=["https://example.edu/issuers/14"],
    )
    proof_types: Optional[List[str]] = None
    record_id: Optional[str] = Field(
        None,
        description="Record identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    schema_ids: Optional[List[str]] = None
    subject_ids: Optional[List[str]] = None


class VCRecordList(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    results: Optional[List[VCRecord]] = None


class VerifiableCredential(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    context: List[Dict[str, Any]] = Field(
        ...,
        alias="@context",
        description="The JSON-LD context of the credential",
        examples=[
            [
                "https://www.w3.org/2018/credentials/v1",
                "https://www.w3.org/2018/credentials/examples/v1",
            ]
        ],
    )
    credential_status: Optional[Dict[str, Any]] = Field(
        None, alias="credentialStatus", examples=[""]
    )
    credential_subject: Dict[str, Any] = Field(
        ..., alias="credentialSubject", examples=[""]
    )
    expiration_date: Optional[str] = Field(
        None,
        alias="expirationDate",
        description="The expiration date",
        examples=["2010-01-01T19:23:24Z"],
        pattern="^([0-9]{4})-([0-9]{2})-([0-9]{2})([Tt ]([0-9]{2}):([0-9]{2}):([0-9]{2})(\\.[0-9]+)?)?(([Zz]|([+-])([0-9]{2}):([0-9]{2})))?$",
    )
    id: Optional[str] = Field(
        None,
        description="The ID of the credential",
        examples=["http://example.edu/credentials/1872"],
        pattern="\\w+:(\\/?\\/?)[^\\s]+",
    )
    issuance_date: str = Field(
        ...,
        alias="issuanceDate",
        description="The issuance date",
        examples=["2010-01-01T19:23:24Z"],
        pattern="^([0-9]{4})-([0-9]{2})-([0-9]{2})([Tt ]([0-9]{2}):([0-9]{2}):([0-9]{2})(\\.[0-9]+)?)?(([Zz]|([+-])([0-9]{2}):([0-9]{2})))?$",
    )
    issuer: Dict[str, Any] = Field(
        ...,
        description="The JSON-LD Verifiable Credential Issuer. Either string of object with id field.",
        examples=["did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"],
    )
    proof: LinkedDataProof = Field(
        ...,
        description="The proof of the credential",
        examples=[
            {
                "created": "2019-12-11T03:50:55",
                "jws": "eyJhbGciOiAiRWREU0EiLCAiYjY0IjogZmFsc2UsICJjcml0JiNjQiXX0..lKJU0Df_keblRKhZAS9Qq6zybm-HqUXNVZ8vgEPNTAjQKBhQDxvXNo7nvtUBb_Eq1Ch6YBKY5qBQ",
                "proofPurpose": "assertionMethod",
                "type": "Ed25519Signature2018",
                "verificationMethod": "did:key:z6Mkgg342Ycpuk263R9d8Aq6MUaxPn1DDeHyGo38EefXmgDL#z6Mkgg342Ycpuk263R9d8Aq6MUaxPn1DDeHyGo38EefXmgDL",
            }
        ],
    )
    type: List[str] = Field(
        ...,
        description="The JSON-LD type of the credential",
        examples=[["VerifiableCredential", "AlumniCredential"]],
    )


class VerifiablePresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    context: List[Dict[str, Any]] = Field(
        ...,
        alias="@context",
        description="The JSON-LD context of the presentation",
        examples=[["https://www.w3.org/2018/credentials/v1"]],
    )
    holder: Optional[Dict[str, Any]] = Field(
        None,
        description="The JSON-LD Verifiable Credential Holder. Either string of object with id field.",
        examples=["did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"],
    )
    id: Optional[str] = Field(
        None,
        description="The ID of the presentation",
        examples=["http://example.edu/presentations/1872"],
        pattern="\\w+:(\\/?\\/?)[^\\s]+",
    )
    proof: LinkedDataProof = Field(
        ...,
        description="The proof of the presentation",
        examples=[
            {
                "created": "2019-12-11T03:50:55",
                "jws": "eyJhbGciOiAiRWREU0EiLCAiYjY0IjogZmFsc2UsICJjcml0JiNjQiXX0..lKJU0Df_keblRKhZAS9Qq6zybm-HqUXNVZ8vgEPNTAjQKBhQDxvXNo7nvtUBb_Eq1Ch6YBKY5qBQ",
                "proofPurpose": "assertionMethod",
                "type": "Ed25519Signature2018",
                "verificationMethod": "did:key:z6Mkgg342Ycpuk263R9d8Aq6MUaxPn1DDeHyGo38EefXmgDL#z6Mkgg342Ycpuk263R9d8Aq6MUaxPn1DDeHyGo38EefXmgDL",
            }
        ],
    )
    type: List[str] = Field(
        ...,
        description="The JSON-LD type of the presentation",
        examples=[["VerifiablePresentation"]],
    )
    verifiable_credential: Optional[List[Dict[str, Any]]] = Field(
        None, alias="verifiableCredential"
    )


class VerifyCredentialRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    options: Optional[LDProofVCOptions] = None
    verifiable_credential: Optional[VerifiableCredential] = Field(
        None, alias="verifiableCredential"
    )


class VerifyPresentationRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    options: Optional[LDProofVCOptions] = None
    verifiable_presentation: Optional[VerifiablePresentation] = Field(
        None, alias="verifiablePresentation"
    )


class VerifyRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    doc: SignedDoc = Field(..., description="Signed document")
    verkey: Optional[str] = Field(
        None, description="Verkey to use for doc verification"
    )


class VerifyResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    error: Optional[str] = Field(None, description="Error text")
    valid: bool


class Context1(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: str = Field(
        ...,
        description="Credential context to match",
        examples=["https://myhost:8021"],
        pattern="^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$",
    )


class SchemaId1(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: str = Field(
        ...,
        description="Credential schema identifier",
        examples=["https://myhost:8021"],
        pattern="^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$",
    )


class Type(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: str = Field(
        ...,
        description="Credential type to match",
        examples=["https://myhost:8021"],
        pattern="^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$",
    )


class W3CCredentialsListRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    contexts: Optional[List[Context1]] = None
    given_id: Optional[str] = Field(None, description="Given credential id to match")
    issuer_id: Optional[str] = Field(
        None, description="Credential issuer identifier to match"
    )
    max_results: Optional[int] = Field(
        None, description="Maximum number of results to return"
    )
    proof_types: Optional[List[str]] = None
    schema_ids: Optional[List[SchemaId1]] = Field(
        None, description="Schema identifiers, all of which to match"
    )
    subject_ids: Optional[List[str]] = Field(
        None, description="Subject identifiers, all of which to match"
    )
    tag_query: Optional[Dict[str, str]] = Field(None, description="Tag filter")
    types: Optional[List[Type]] = None


class WalletModuleResponse(ActionMenuModulesResult):
    pass


class WalletRecord(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    key_management_mode: Literal["managed", "unmanaged"] = Field(
        ..., description="Mode regarding management of wallet key"
    )
    settings: Optional[Dict[str, Any]] = Field(
        None, description="Settings for this wallet."
    )
    state: Optional[str] = Field(
        None, description="Current record state", examples=["active"]
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    wallet_id: str = Field(
        ...,
        description="Wallet record ID",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )


class WriteLedger(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    ledger_id: Optional[str] = None


class IndyPrimaryProofEqProof(IndyEQProof):
    """
    Indy equality proof
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )


class IndyProofProofProofsProofNonRevocProof(IndyNonRevocProof):
    """
    Indy non-revocation proof
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )


class IndyProofReqAttrSpecNonRevoked(IndyProofReqAttrSpecNonRevoked1):
    pass
    model_config = ConfigDict(
        populate_by_name=True,
    )


class IndyProofReqPredSpecNonRevoked(IndyProofReqPredSpecNonRevoked1):
    pass
    model_config = ConfigDict(
        populate_by_name=True,
    )


class IndyProofRequestNonRevoked(IndyProofRequestNonRevoked1):
    pass
    model_config = ConfigDict(
        populate_by_name=True,
    )


class AttachDecoratorData1JWS(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    header: AttachDecoratorDataJWSHeader
    protected: Optional[str] = Field(
        None,
        description="protected JWS header",
        examples=["ey4uLn0"],
        pattern="^[-_a-zA-Z0-9]*$",
    )
    signature: str = Field(
        ..., description="signature", examples=["ey4uLn0"], pattern="^[-_a-zA-Z0-9]*$"
    )


class AttachDecoratorDataJWS(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    header: Optional[AttachDecoratorDataJWSHeader] = None
    protected: Optional[str] = Field(
        None,
        description="protected JWS header",
        examples=["ey4uLn0"],
        pattern="^[-_a-zA-Z0-9]*$",
    )
    signature: Optional[str] = Field(
        None, description="signature", examples=["ey4uLn0"], pattern="^[-_a-zA-Z0-9]*$"
    )
    signatures: Optional[List[AttachDecoratorData1JWS]] = Field(
        None, description="List of signatures"
    )


class CredDef(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    issuer_id: Optional[str] = Field(
        None,
        alias="issuerId",
        description="Issuer Identifier of the credential definition or schema",
        examples=["WgWxqztrNooG92RXvxSTWv"],
    )
    schema_id: Optional[str] = Field(
        None,
        alias="schemaId",
        description="Schema identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"],
    )
    tag: Optional[str] = Field(
        None,
        description="The tag value passed in by the Issuer to an AnonCred's Credential Definition create and store implementation.",
        examples=["default"],
    )
    type: Optional[Literal["CL"]] = None
    value: Optional[CredDefValueSchemaAnoncreds] = None


class CredDefPostRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    credential_definition: Optional[InnerCredDef] = None
    options: Optional[CredDefPostOptions] = None


class CredDefState(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    credential_definition: Optional[CredDef] = Field(
        None, description="credential definition"
    )
    credential_definition_id: Optional[str] = Field(
        None,
        description="credential definition id",
        examples=["WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"],
    )
    state: Optional[Literal["finished", "failed", "action", "wait"]] = None


class CredDefValuePrimary(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    n: Optional[str] = Field(None, examples=["0"], pattern="^[0-9]*$")
    r: Optional[Generated] = None
    rctxt: Optional[str] = Field(None, examples=["0"], pattern="^[0-9]*$")
    s: Optional[str] = Field(None, examples=["0"], pattern="^[0-9]*$")
    z: Optional[str] = Field(None, examples=["0"], pattern="^[0-9]*$")


class CredInfoList(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    results: Optional[List[IndyCredInfo]] = None


class CredRevRecordDetailsResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    results: Optional[List[IssuerCredRevRecord]] = None


class CredRevRecordDetailsResultSchemaAnoncreds(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    results: Optional[List[IssuerCredRevRecordSchemaAnoncreds]] = None


class CredRevRecordResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    result: Optional[IssuerCredRevRecord] = None


class CredRevRecordResultSchemaAnoncreds(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    result: Optional[IssuerCredRevRecordSchemaAnoncreds] = None


class Credential(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    context: List[Dict[str, Any]] = Field(
        ...,
        alias="@context",
        description="The JSON-LD context of the credential",
        examples=[
            [
                "https://www.w3.org/2018/credentials/v1",
                "https://www.w3.org/2018/credentials/examples/v1",
            ]
        ],
    )
    credential_status: Optional[Dict[str, Any]] = Field(
        None, alias="credentialStatus", examples=[""]
    )
    credential_subject: Dict[str, Any] = Field(
        ..., alias="credentialSubject", examples=[""]
    )
    expiration_date: Optional[str] = Field(
        None,
        alias="expirationDate",
        description="The expiration date",
        examples=["2010-01-01T19:23:24Z"],
        pattern="^([0-9]{4})-([0-9]{2})-([0-9]{2})([Tt ]([0-9]{2}):([0-9]{2}):([0-9]{2})(\\.[0-9]+)?)?(([Zz]|([+-])([0-9]{2}):([0-9]{2})))?$",
    )
    id: Optional[str] = Field(
        None,
        description="The ID of the credential",
        examples=["http://example.edu/credentials/1872"],
        pattern="\\w+:(\\/?\\/?)[^\\s]+",
    )
    issuance_date: str = Field(
        ...,
        alias="issuanceDate",
        description="The issuance date",
        examples=["2010-01-01T19:23:24Z"],
        pattern="^([0-9]{4})-([0-9]{2})-([0-9]{2})([Tt ]([0-9]{2}):([0-9]{2}):([0-9]{2})(\\.[0-9]+)?)?(([Zz]|([+-])([0-9]{2}):([0-9]{2})))?$",
    )
    issuer: Dict[str, Any] = Field(
        ...,
        description="The JSON-LD Verifiable Credential Issuer. Either string of object with id field.",
        examples=["did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"],
    )
    proof: Optional[LinkedDataProof] = Field(
        None,
        description="The proof of the credential",
        examples=[
            {
                "created": "2019-12-11T03:50:55",
                "jws": "eyJhbGciOiAiRWREU0EiLCAiYjY0IjogZmFsc2UsICJjcml0JiNjQiXX0..lKJU0Df_keblRKhZAS9Qq6zybm-HqUXNVZ8vgEPNTAjQKBhQDxvXNo7nvtUBb_Eq1Ch6YBKY5qBQ",
                "proofPurpose": "assertionMethod",
                "type": "Ed25519Signature2018",
                "verificationMethod": "did:key:z6Mkgg342Ycpuk263R9d8Aq6MUaxPn1DDeHyGo38EefXmgDL#z6Mkgg342Ycpuk263R9d8Aq6MUaxPn1DDeHyGo38EefXmgDL",
            }
        ],
    )
    type: List[str] = Field(
        ...,
        description="The JSON-LD type of the credential",
        examples=[["VerifiableCredential", "AlumniCredential"]],
    )


class DIDCreate(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    method: Optional[str] = Field(
        None,
        description="Method for the requested DID.Supported methods are 'key', 'sov', and any other registered method.",
        examples=["sov"],
    )
    options: Optional[DIDCreateOptions] = Field(
        None,
        description="To define a key type and/or a did depending on chosen DID method.",
    )
    seed: Optional[str] = Field(
        None,
        description="Optional seed to use for DID, Must be enabled in configuration before use.",
        examples=["000000000000000000000000Trustee1"],
    )


class DIFField(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    filter: Optional[Filter] = None
    id: Optional[str] = Field(None, description="ID")
    path: Optional[List[str]] = None
    predicate: Optional[Literal["required", "preferred"]] = Field(
        None, description="Preference"
    )
    purpose: Optional[str] = Field(None, description="Purpose")


class Disclose(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        examples=["https://didcomm.org/my-family/1.0/my-message-type"],
    )
    protocols: List[ProtocolDescriptor] = Field(
        ..., description="List of protocol descriptors"
    )


class Doc(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    credential: Dict[str, Any] = Field(..., description="Credential to sign")
    options: SignatureOptions = Field(..., description="Signature options")


class FetchCredentialResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    results: Optional[VerifiableCredential] = None


class GetCredDefResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    credential_definition: Optional[CredDef] = Field(
        None, description="credential definition"
    )
    credential_definition_id: Optional[str] = Field(
        None,
        description="credential definition id",
        examples=["WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"],
    )
    credential_definitions_metadata: Optional[Dict[str, Any]] = None
    resolution_metadata: Optional[Dict[str, Any]] = None


class IndyCredAbstract(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cred_def_id: str = Field(
        ...,
        description="Credential definition identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"],
        pattern="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    key_correctness_proof: IndyKeyCorrectnessProof = Field(
        ..., description="Key correctness proof"
    )
    nonce: str = Field(
        ...,
        description="Nonce in credential abstract",
        examples=["0"],
        pattern="^[0-9]*$",
    )
    schema_id: str = Field(
        ...,
        description="Schema identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"],
        pattern="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
    )


class IndyCredPrecis(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cred_info: IndyCredInfo = Field(..., description="Credential info")
    interval: Optional[IndyNonRevocationInterval] = Field(
        None, description="Non-revocation interval from presentation request"
    )
    presentation_referents: Optional[List[str]] = None


class IndyGEProof(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    alpha: Optional[str] = Field(None, examples=["0"], pattern="^[0-9]*$")
    mj: Optional[str] = Field(None, examples=["0"], pattern="^[0-9]*$")
    predicate: Optional[IndyGEProofPred] = None
    r: Optional[Dict[str, str]] = None
    t: Optional[Dict[str, str]] = None
    u: Optional[Dict[str, str]] = None


class IndyPresSpec(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    requested_attributes: Dict[str, IndyRequestedCredsRequestedAttr] = Field(
        ...,
        description="Nested object mapping proof request attribute referents to requested-attribute specifiers",
    )
    requested_predicates: Dict[str, IndyRequestedCredsRequestedPred] = Field(
        ...,
        description="Nested object mapping proof request predicate referents to requested-predicate specifiers",
    )
    self_attested_attributes: Dict[str, str] = Field(
        ..., description="Self-attested attributes to build into proof"
    )
    trace: Optional[bool] = Field(
        None, description="Whether to trace event (default false)", examples=[False]
    )


class IndyPrimaryProof(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    eq_proof: Optional[IndyPrimaryProofEqProof] = None
    ge_proofs: Optional[List[IndyGEProof]] = Field(None, description="Indy GE proofs")


class IndyProofProofProofsProof(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    non_revoc_proof: Optional[IndyProofProofProofsProofNonRevocProof] = None
    primary_proof: Optional[IndyPrimaryProof] = Field(
        None, description="Indy primary proof"
    )


class IndyProofReqAttrSpec(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Optional[str] = Field(
        None, description="Attribute name", examples=["favouriteDrink"]
    )
    names: Optional[List[str]] = Field(None, description="Attribute name group")
    non_revoked: Optional[IndyProofReqAttrSpecNonRevoked] = None
    restrictions: Optional[List[Dict[str, str]]] = Field(
        None,
        description="If present, credential must satisfy one of given restrictions: specify schema_id, schema_issuer_did, schema_name, schema_version, issuer_did, cred_def_id, and/or attr::<attribute-name>::value where <attribute-name> represents a credential attribute name",
    )


class IndyProofReqPredSpec(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: str = Field(..., description="Attribute name", examples=["index"])
    non_revoked: Optional[IndyProofReqPredSpecNonRevoked] = None
    p_type: Literal["<", "<=", ">=", ">"] = Field(
        ..., description="Predicate type ('<', '<=', '>=', or '>')", examples=[">="]
    )
    p_value: int = Field(..., description="Threshold value")
    restrictions: Optional[List[Dict[str, str]]] = Field(
        None,
        description="If present, credential must satisfy one of given restrictions: specify schema_id, schema_issuer_did, schema_name, schema_version, issuer_did, cred_def_id, and/or attr::<attribute-name>::value where <attribute-name> represents a credential attribute name",
    )


class IndyProofRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Optional[str] = Field(
        None, description="Proof request name", examples=["Proof request"]
    )
    non_revoked: Optional[IndyProofRequestNonRevoked] = None
    nonce: Optional[str] = Field(
        None, description="Nonce", examples=["1"], pattern="^[1-9][0-9]*$"
    )
    requested_attributes: Dict[str, IndyProofReqAttrSpec] = Field(
        ..., description="Requested attribute specifications of proof request"
    )
    requested_predicates: Dict[str, IndyProofReqPredSpec] = Field(
        ..., description="Requested predicate specifications of proof request"
    )
    version: Optional[str] = Field(
        None, description="Proof request version", examples=["1.0"], pattern="^[0-9.]+$"
    )


class IndyProofRequestedProofRevealedAttrGroup(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    sub_proof_index: Optional[int] = Field(None, description="Sub-proof index")
    values: Optional[Dict[str, RawEncoded]] = Field(
        None, description="Indy proof requested proof revealed attr groups group value"
    )


class IndyRevRegDefValuePublicKeys(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    accum_key: Optional[IndyRevRegDefValuePublicKeysAccumKey] = Field(
        None, alias="accumKey"
    )


class IndyRevRegEntry(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    value: Optional[IndyRevRegEntryValue] = Field(
        None, description="Revocation registry entry value"
    )
    ver: Optional[str] = Field(
        None,
        description="Version of revocation registry entry",
        examples=["1.0"],
        pattern="^[0-9.]+$",
    )


class IssueCredentialRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    credential: Optional[Credential] = None
    options: Optional[LDProofVCOptions] = None


class IssueCredentialResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    verifiable_credential: Optional[VerifiableCredential] = Field(
        None, alias="verifiableCredential"
    )


class Keylist(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    results: Optional[List[RouteRecord]] = Field(
        None, description="List of keylist records"
    )


class KeylistQuery(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        examples=["https://didcomm.org/my-family/1.0/my-message-type"],
    )
    filter: Optional[Dict[str, Any]] = Field(
        None, description="Query dictionary object", examples=[{"filter": {}}]
    )
    paginate: Optional[KeylistQueryPaginate] = Field(
        None, description="Pagination info"
    )


class KeylistUpdate(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        examples=["https://didcomm.org/my-family/1.0/my-message-type"],
    )
    updates: Optional[List[KeylistUpdateRule]] = Field(
        None, description="List of update rules"
    )


class KeylistUpdateRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    updates: Optional[List[KeylistUpdateRule]] = None


class LDProofVCDetail(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    credential: Credential = Field(
        ...,
        description="Detail of the JSON-LD Credential to be issued",
        examples=[
            {
                "@context": [
                    "https://www.w3.org/2018/credentials/v1",
                    "https://w3id.org/citizenship/v1",
                ],
                "credentialSubject": {
                    "familyName": "SMITH",
                    "gender": "Male",
                    "givenName": "JOHN",
                    "type": ["PermanentResident", "Person"],
                },
                "description": "Government of Example Permanent Resident Card.",
                "identifier": "83627465",
                "issuanceDate": "2019-12-03T12:19:52Z",
                "issuer": "did:key:z6MkmjY8GnV5i9YTDtPETC2uUAW6ejw3nk5mXF5yci5ab7th",
                "name": "Permanent Resident Card",
                "type": ["VerifiableCredential", "PermanentResidentCard"],
            }
        ],
    )
    options: LDProofVCOptions = Field(
        ...,
        description="Options for specifying how the linked data proof is created.",
        examples=[{"proofType": "Ed25519Signature2018"}],
    )


class MediationList(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    results: List[MediationRecord] = Field(..., description="List of mediation records")


class MenuForm(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    description: Optional[str] = Field(
        None,
        description="Additional descriptive text for menu form",
        examples=["Window preference settings"],
    )
    params: Optional[List[MenuFormParam]] = Field(
        None, description="List of form parameters"
    )
    submit_label: Optional[str] = Field(
        None,
        alias="submit-label",
        description="Alternative label for form submit button",
        examples=["Send"],
    )
    title: Optional[str] = Field(
        None, description="Menu form title", examples=["Preferences"]
    )


class MenuOption(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    description: Optional[str] = Field(
        None,
        description="Additional descriptive text for menu option",
        examples=["Window display preferences"],
    )
    disabled: Optional[bool] = Field(
        None, description="Whether to show option as disabled", examples=[False]
    )
    form: Optional[MenuForm] = None
    name: str = Field(
        ...,
        description="Menu option name (unique identifier)",
        examples=["window_prefs"],
    )
    title: str = Field(
        ..., description="Menu option title", examples=["Window Preferences"]
    )


class ProofResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    error: Optional[str] = None
    proof: Optional[Dict[str, Any]] = None
    purpose_result: Optional[PurposeResult] = None
    verified: Optional[bool] = None


class ProvePresentationResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    verifiable_presentation: Optional[VerifiablePresentation] = Field(
        None, alias="verifiablePresentation"
    )


class Queries(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        examples=["https://didcomm.org/my-family/1.0/my-message-type"],
    )
    queries: Optional[List[QueryItem]] = None


class RevListCreateRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    options: Optional[RevListOptions] = None
    rev_reg_def_id: Optional[str] = Field(
        None,
        description="Revocation registry definition identifier",
        examples=[
            "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0"
        ],
    )


class RevListResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    job_id: Optional[str] = None
    registration_metadata: Optional[Dict[str, Any]] = None
    revocation_list_metadata: Optional[Dict[str, Any]] = None
    revocation_list_state: Optional[RevListState] = None


class RevRegCreateRequestSchemaAnoncreds(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    options: Optional[RevRegDefOptions] = None
    revocation_registry_definition: Optional[InnerRevRegDef] = None


class RevRegDef(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cred_def_id: Optional[str] = Field(
        None,
        alias="credDefId",
        description="Credential definition identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"],
    )
    issuer_id: Optional[str] = Field(
        None,
        alias="issuerId",
        description="Issuer Identifier of the credential definition or schema",
        examples=["WgWxqztrNooG92RXvxSTWv"],
    )
    revoc_def_type: Optional[str] = Field(None, alias="revocDefType")
    tag: Optional[str] = Field(
        None,
        description="tag for the revocation registry definition",
        examples=["default"],
    )
    value: Optional[RevRegDefValue] = None


class RevRegDefState(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    revocation_registry_definition: Optional[RevRegDef] = Field(
        None, description="revocation registry definition"
    )
    revocation_registry_definition_id: Optional[str] = Field(
        None,
        description="revocation registry definition id",
        examples=[
            "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0"
        ],
    )
    state: Optional[
        Literal["finished", "failed", "action", "wait", "decommissioned", "full"]
    ] = None


class SchemaResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    job_id: Optional[str] = None
    registration_metadata: Optional[Dict[str, Any]] = None
    schema_metadata: Optional[Dict[str, Any]] = None
    schema_state: Optional[SchemaState] = None


class SignRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    doc: Doc
    verkey: str = Field(..., description="Verkey to use for signing")


class TAAInfo(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    aml_record: Optional[AMLRecord] = None
    taa_accepted: Optional[TAAAcceptance] = None
    taa_record: Optional[TAARecord] = None
    taa_required: Optional[bool] = None


class TAAResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    result: Optional[TAAInfo] = None


class TransactionList(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    results: Optional[List[TransactionRecord]] = Field(
        None, description="List of transaction records"
    )


class V10DiscoveryRecord(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    connection_id: Optional[str] = Field(
        None,
        description="Connection identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    disclose: Optional[Disclose] = Field(None, description="Disclose message")
    discovery_exchange_id: Optional[str] = Field(
        None,
        description="Credential exchange identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    query_msg: Optional[Query] = Field(None, description="Query message")
    state: Optional[str] = Field(
        None, description="Current record state", examples=["active"]
    )
    thread_id: Optional[str] = Field(
        None,
        description="Thread identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )


class V10PresentationCreateRequestRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    auto_remove: Optional[bool] = Field(
        None,
        description="Whether to remove the presentation exchange record on completion (overrides --preserve-exchange-records configuration setting)",
    )
    auto_verify: Optional[bool] = Field(
        None,
        description="Verifier choice to auto-verify proof presentation",
        examples=[False],
    )
    comment: Optional[str] = None
    proof_request: IndyProofRequest
    trace: Optional[bool] = Field(
        None, description="Whether to trace event (default false)", examples=[False]
    )


class V10PresentationSendRequestRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    auto_remove: Optional[bool] = Field(
        None,
        description="Whether to remove the presentation exchange record on completion (overrides --preserve-exchange-records configuration setting)",
    )
    auto_verify: Optional[bool] = Field(
        None,
        description="Verifier choice to auto-verify proof presentation",
        examples=[False],
    )
    comment: Optional[str] = None
    connection_id: str = Field(
        ...,
        description="Connection identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    proof_request: IndyProofRequest
    trace: Optional[bool] = Field(
        None, description="Whether to trace event (default false)", examples=[False]
    )


class V20CredFilter(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    indy: Optional[V20CredFilterIndy] = Field(
        None, description="Credential filter for indy"
    )
    ld_proof: Optional[LDProofVCDetail] = Field(
        None, description="Credential filter for linked data proof"
    )


class V20CredFilterLDProof(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    ld_proof: LDProofVCDetail = Field(
        ..., description="Credential filter for linked data proof"
    )


class V20CredOfferConnFreeRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    auto_issue: Optional[bool] = Field(
        None,
        description="Whether to respond automatically to credential requests, creating and issuing requested credentials",
    )
    auto_remove: Optional[bool] = Field(
        None,
        description="Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    credential_preview: Optional[V20CredPreview] = None
    filter: V20CredFilter = Field(
        ..., description="Credential specification criteria by format"
    )
    replacement_id: Optional[str] = Field(
        None,
        description="Optional identifier used to manage credential replacement",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )


class V20CredOfferRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    auto_issue: Optional[bool] = Field(
        None,
        description="Whether to respond automatically to credential requests, creating and issuing requested credentials",
    )
    auto_remove: Optional[bool] = Field(
        None,
        description="Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    connection_id: str = Field(
        ...,
        description="Connection identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    credential_preview: Optional[V20CredPreview] = None
    filter: V20CredFilter = Field(
        ..., description="Credential specification criteria by format"
    )
    replacement_id: Optional[str] = Field(
        None,
        description="Optional identifier used to manage credential replacement",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )


class V20CredRequestFree(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    auto_remove: Optional[bool] = Field(
        None,
        description="Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    connection_id: str = Field(
        ...,
        description="Connection identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    filter: V20CredFilterLDProof = Field(
        ..., description="Credential specification criteria by format"
    )
    holder_did: Optional[str] = Field(
        None,
        description="Holder DID to substitute for the credentialSubject.id",
        examples=["did:key:ahsdkjahsdkjhaskjdhakjshdkajhsdkjahs"],
    )
    trace: Optional[bool] = Field(
        None, description="Whether to trace event (default false)", examples=[False]
    )


class V20DiscoveryRecord(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    connection_id: Optional[str] = Field(
        None,
        description="Connection identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    disclosures: Optional[Disclosures] = Field(None, description="Disclosures message")
    discovery_exchange_id: Optional[str] = Field(
        None,
        description="Credential exchange identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    queries_msg: Optional[Queries] = Field(None, description="Queries message")
    state: Optional[str] = Field(
        None, description="Current record state", examples=["active"]
    )
    thread_id: Optional[str] = Field(
        None,
        description="Thread identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )


class V20IssueCredSchemaCore(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    auto_remove: Optional[bool] = Field(
        None,
        description="Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    credential_preview: Optional[V20CredPreview] = None
    filter: V20CredFilter = Field(
        ..., description="Credential specification criteria by format"
    )
    replacement_id: Optional[str] = Field(
        None,
        description="Optional identifier used to manage credential replacement",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )


class WalletList(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    results: Optional[List[WalletRecord]] = Field(
        None, description="List of wallet records"
    )


class AttachDecoratorData(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    base64: Optional[str] = Field(
        None,
        description="Base64-encoded data",
        examples=["ey4uLn0="],
        pattern="^[a-zA-Z0-9+/]*={0,2}$",
    )
    json_: Optional[Dict[str, Any]] = Field(
        None,
        alias="json",
        description="JSON-serialized data",
        examples=['{"sample": "content"}'],
    )
    jws: Optional[AttachDecoratorDataJWS] = Field(
        None, description="Detached Java Web Signature"
    )
    links: Optional[List[str]] = Field(
        None, description="List of hypertext links to data"
    )
    sha256: Optional[str] = Field(
        None,
        description="SHA256 hash (binhex encoded) of content",
        examples=["617a48c7c8afe0521efdc03e5bb0ad9e655893e6b4b51f0e794d70fba132aacb"],
        pattern="^[a-fA-F0-9+/]{64}$",
    )


class Constraints(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fields: Optional[List[DIFField]] = None
    is_holder: Optional[List[DIFHolder]] = None
    limit_disclosure: Optional[str] = Field(None, description="LimitDisclosure")
    status_active: Optional[Literal["required", "allowed", "disallowed"]] = None
    status_revoked: Optional[Literal["required", "allowed", "disallowed"]] = None
    status_suspended: Optional[Literal["required", "allowed", "disallowed"]] = None
    subject_is_issuer: Optional[Literal["required", "preferred"]] = Field(
        None, description="SubjectIsIssuer"
    )


class CredDefResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    credential_definition_metadata: Optional[Dict[str, Any]] = None
    credential_definition_state: Optional[CredDefState] = None
    job_id: Optional[str] = None
    registration_metadata: Optional[Dict[str, Any]] = None


class CredDefValue(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    primary: Optional[CredDefValuePrimary] = Field(
        None, description="Primary value for credential definition"
    )
    revocation: Optional[CredDefValueRevocation] = Field(
        None, description="Revocation value for credential definition"
    )


class CredentialDefinition(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[str] = Field(
        None,
        description="Credential definition identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"],
        pattern="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    schema_id: Optional[str] = Field(
        None,
        alias="schemaId",
        description="Schema identifier within credential definition identifier",
        examples=["20"],
    )
    tag: Optional[str] = Field(
        None,
        description="Tag within credential definition identifier",
        examples=["tag"],
    )
    type: Optional[Dict[str, Any]] = Field(
        None,
        description="Signature type: CL for Camenisch-Lysyanskaya",
        examples=["CL"],
    )
    value: Optional[CredDefValue] = Field(
        None, description="Credential definition primary and revocation values"
    )
    ver: Optional[str] = Field(
        None, description="Node protocol version", examples=["1.0"], pattern="^[0-9.]+$"
    )


class CredentialDefinitionGetResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    credential_definition: Optional[CredentialDefinition] = None


class DocumentVerificationResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    document: Optional[Dict[str, Any]] = None
    errors: Optional[List[str]] = None
    results: Optional[List[ProofResult]] = None
    verified: bool


class IndyProofProof(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    aggregated_proof: Optional[IndyProofProofAggregatedProof] = Field(
        None, description="Indy proof aggregated proof"
    )
    proofs: Optional[List[IndyProofProofProofsProof]] = Field(
        None, description="Indy proof proofs"
    )


class IndyProofRequestedProof(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    predicates: Optional[Dict[str, IndyProofRequestedProofPredicate]] = Field(
        None, description="Proof requested proof predicates."
    )
    revealed_attr_groups: Optional[
        Dict[str, IndyProofRequestedProofRevealedAttrGroup]
    ] = Field(None, description="Proof requested proof revealed attribute groups")
    revealed_attrs: Optional[Dict[str, IndyProofRequestedProofRevealedAttr]] = Field(
        None, description="Proof requested proof revealed attributes"
    )
    self_attested_attrs: Optional[Dict[str, Any]] = Field(
        None, description="Proof requested proof self-attested attributes"
    )
    unrevealed_attrs: Optional[Dict[str, Any]] = Field(
        None, description="Unrevealed attributes"
    )


class IndyRevRegDefValue(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    issuance_type: Optional[Literal["ISSUANCE_ON_DEMAND", "ISSUANCE_BY_DEFAULT"]] = (
        Field(None, alias="issuanceType", description="Issuance type")
    )
    max_cred_num: Optional[int] = Field(
        None,
        alias="maxCredNum",
        description="Maximum number of credentials; registry size",
        examples=[10],
        ge=1,
    )
    public_keys: Optional[IndyRevRegDefValuePublicKeys] = Field(
        None, alias="publicKeys", description="Public keys"
    )
    tails_hash: Optional[str] = Field(
        None,
        alias="tailsHash",
        description="Tails hash value",
        examples=["H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"],
        pattern="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
    )
    tails_location: Optional[str] = Field(
        None, alias="tailsLocation", description="Tails file location"
    )


class InputDescriptors(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    constraints: Optional[Constraints] = None
    group: Optional[List[str]] = None
    id: Optional[str] = Field(None, description="ID")
    metadata: Optional[Dict[str, Any]] = Field(None, description="Metadata dictionary")
    name: Optional[str] = Field(None, description="Name")
    purpose: Optional[str] = Field(None, description="Purpose")
    schema_: Optional[SchemasInputDescriptorFilter] = Field(
        None,
        alias="schema",
        description="Accepts a list of schema or a dict containing filters like oneof_filter.",
        examples=[
            {
                "oneof_filter": [
                    [
                        {"uri": "https://www.w3.org/Test1#Test1"},
                        {"uri": "https://www.w3.org/Test2#Test2"},
                    ],
                    {
                        "oneof_filter": [
                            [{"uri": "https://www.w3.org/Test1#Test1"}],
                            [{"uri": "https://www.w3.org/Test2#Test2"}],
                        ]
                    },
                ]
            }
        ],
    )


class Menu(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        examples=["https://didcomm.org/my-family/1.0/my-message-type"],
    )
    description: Optional[str] = Field(
        None,
        description="Introductory text for the menu",
        examples=["This menu presents options"],
    )
    errormsg: Optional[str] = Field(
        None,
        description="An optional error message to display in menu header",
        examples=["Error: item not found"],
    )
    options: List[MenuOption] = Field(..., description="List of menu options")
    title: Optional[str] = Field(None, description="Menu title", examples=["My Menu"])


class MenuJson(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    description: Optional[str] = Field(
        None,
        description="Introductory text for the menu",
        examples=["User preferences for window settings"],
    )
    errormsg: Optional[str] = Field(
        None,
        description="Optional error message to display in menu header",
        examples=["Error: item not present"],
    )
    options: List[MenuOption] = Field(..., description="List of menu options")
    title: Optional[str] = Field(None, description="Menu title", examples=["My Menu"])


class PresentationDefinition(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    format: Optional[ClaimFormat] = None
    id: Optional[str] = Field(
        None,
        description="Unique Resource Identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
        pattern="[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
    )
    input_descriptors: Optional[List[InputDescriptors]] = None
    name: Optional[str] = Field(
        None,
        description="Human-friendly name that describes what the presentation definition pertains to",
    )
    purpose: Optional[str] = Field(
        None,
        description="Describes the purpose for which the Presentation Definition's inputs are being requested",
    )
    submission_requirements: Optional[List[SubmissionRequirements]] = None


class PresentationVerificationResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    credential_results: Optional[List[DocumentVerificationResult]] = None
    errors: Optional[List[str]] = None
    presentation_result: Optional[DocumentVerificationResult] = None
    verified: bool


class RevRegDefResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    job_id: Optional[str] = None
    registration_metadata: Optional[Dict[str, Any]] = None
    revocation_registry_definition_metadata: Optional[Dict[str, Any]] = None
    revocation_registry_definition_state: Optional[RevRegDefState] = None


class SendMenu(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    menu: MenuJson = Field(..., description="Menu to send to connection")


class V10DiscoveryExchangeListResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    results: Optional[List[V10DiscoveryRecord]] = None


class V20CredBoundOfferRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    counter_preview: Optional[V20CredPreview] = Field(
        None, description="Optional content for counter-proposal"
    )
    filter: Optional[V20CredFilter] = Field(
        None, description="Credential specification criteria by format"
    )


class V20CredExFree(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    auto_remove: Optional[bool] = Field(
        None,
        description="Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    connection_id: str = Field(
        ...,
        description="Connection identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    credential_preview: Optional[V20CredPreview] = None
    filter: V20CredFilter = Field(
        ..., description="Credential specification criteria by format"
    )
    replacement_id: Optional[str] = Field(
        None,
        description="Optional identifier used to manage credential replacement",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )
    verification_method: Optional[str] = Field(
        None, description="For ld-proofs. Verification method for signing."
    )


class V20DiscoveryExchangeListResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    results: Optional[List[V20DiscoveryRecord]] = None


class V20DiscoveryExchangeResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    results: Optional[V20DiscoveryRecord] = Field(
        None, description="Discover Features v2.0 exchange record"
    )


class VerifyCredentialResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    results: Optional[PresentationVerificationResult] = None


class VerifyPresentationResponse(VerifyCredentialResponse):
    pass


class ActionMenuFetchResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    result: Optional[Menu] = Field(None, description="Action menu")


class AttachDecorator(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Attachment identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    byte_count: Optional[int] = Field(
        None, description="Byte count of data included by reference", examples=[1234]
    )
    data: AttachDecoratorData
    description: Optional[str] = Field(
        None,
        description="Human-readable description of content",
        examples=["view from doorway, facing east, with lights off"],
    )
    filename: Optional[str] = Field(
        None, description="File name", examples=["IMG1092348.png"]
    )
    lastmod_time: Optional[str] = Field(
        None,
        description="Hint regarding last modification datetime, in ISO-8601 format",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    mime_type: Optional[str] = Field(
        None, alias="mime-type", description="MIME type", examples=["image/png"]
    )


class CredentialOffer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        examples=["https://didcomm.org/my-family/1.0/my-message-type"],
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    credential_preview: Optional[CredentialPreview] = None
    offers_attach: List[AttachDecorator] = Field(..., alias="offers~attach")


class DIDXRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        examples=["https://didcomm.org/my-family/1.0/my-message-type"],
    )
    did: Optional[str] = Field(
        None,
        description="DID of exchange",
        examples=["did:peer:WgWxqztrNooG92RXvxSTWv"],
        pattern="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$|^did:([a-zA-Z0-9_]+):([a-zA-Z0-9_.%-]+(:[a-zA-Z0-9_.%-]+)*)((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(\\/[^#?]*)?([?][^#]*)?(\\#.*)?$$",
    )
    did_doc_attach: Optional[AttachDecorator] = Field(
        None,
        alias="did_doc~attach",
        description="As signed attachment, DID Doc associated with DID",
    )
    goal: Optional[str] = Field(
        None,
        description="A self-attested string that the receiver may want to display to the user about the context-specific goal of the out-of-band message",
        examples=["To issue a Faber College Graduate credential"],
    )
    goal_code: Optional[str] = Field(
        None,
        description="A self-attested code the receiver may want to display to the user or use in automatically deciding what to do with the out-of-band message",
        examples=["issue-vc"],
    )
    label: str = Field(
        ...,
        description="Label for DID exchange request",
        examples=["Request to connect with Bob"],
    )


class DIFPresSpec(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    issuer_id: Optional[str] = Field(
        None,
        description="Issuer identifier to sign the presentation, if different from current public DID",
    )
    presentation_definition: Optional[PresentationDefinition] = None
    record_ids: Optional[Dict[str, Any]] = Field(
        None,
        description="Mapping of input_descriptor id to list of stored W3C credential record_id",
        examples=[
            {
                "<input descriptor id_1>": ["<record id_1>", "<record id_2>"],
                "<input descriptor id_2>": ["<record id>"],
            }
        ],
    )
    reveal_doc: Optional[Dict[str, Any]] = Field(
        None,
        description="reveal doc [JSON-LD frame] dict used to derive the credential when selective disclosure is required",
        examples=[
            {
                "@context": [
                    "https://www.w3.org/2018/credentials/v1",
                    "https://w3id.org/security/bbs/v1",
                ],
                "@explicit": True,
                "@requireAll": True,
                "credentialSubject": {
                    "@explicit": True,
                    "@requireAll": True,
                    "Observation": [
                        {
                            "effectiveDateTime": {},
                            "@explicit": True,
                            "@requireAll": True,
                        }
                    ],
                },
                "issuanceDate": {},
                "issuer": {},
                "type": ["VerifiableCredential", "LabReport"],
            }
        ],
    )


class DIFProofProposal(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    input_descriptors: Optional[List[InputDescriptors]] = None
    options: Optional[DIFOptions] = None


class DIFProofRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    options: Optional[DIFOptions] = None
    presentation_definition: PresentationDefinition


class IndyProof(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    identifiers: Optional[List[IndyProofIdentifier]] = Field(
        None, description="Indy proof.identifiers content"
    )
    proof: Optional[IndyProofProof] = Field(
        None, description="Indy proof.proof content"
    )
    requested_proof: Optional[IndyProofRequestedProof] = Field(
        None, description="Indy proof.requested_proof content"
    )


class IndyRevRegDef(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cred_def_id: Optional[str] = Field(
        None,
        alias="credDefId",
        description="Credential definition identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"],
        pattern="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    id: Optional[str] = Field(
        None,
        description="Indy revocation registry identifier",
        examples=[
            "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0"
        ],
        pattern="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)",
    )
    revoc_def_type: Optional[Literal["CL_ACCUM"]] = Field(
        None,
        alias="revocDefType",
        description="Revocation registry type (specify CL_ACCUM)",
        examples=["CL_ACCUM"],
    )
    tag: Optional[str] = Field(None, description="Revocation registry tag")
    value: Optional[IndyRevRegDefValue] = Field(
        None, description="Revocation registry definition value"
    )
    ver: Optional[str] = Field(
        None,
        description="Version of revocation registry definition",
        examples=["1.0"],
        pattern="^[0-9.]+$",
    )


class InvitationMessage(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        examples=["https://didcomm.org/my-family/1.0/my-message-type"],
    )
    accept: Optional[List[str]] = Field(
        None,
        description="List of mime type in order of preference",
        examples=[["didcomm/aip1", "didcomm/aip2;env=rfc19"]],
    )
    goal: Optional[str] = Field(
        None,
        description="A self-attested string that the receiver may want to display to the user about the context-specific goal of the out-of-band message",
        examples=["To issue a Faber College Graduate credential"],
    )
    goal_code: Optional[str] = Field(
        None,
        description="A self-attested code the receiver may want to display to the user or use in automatically deciding what to do with the out-of-band message",
        examples=["issue-vc"],
    )
    handshake_protocols: Optional[List[str]] = None
    image_url: Optional[str] = Field(
        None,
        alias="imageUrl",
        description="Optional image URL for out-of-band invitation",
        examples=["http://192.168.56.101/img/logo.jpg"],
    )
    label: Optional[str] = Field(None, description="Optional label", examples=["Bob"])
    requests_attach: Optional[List[AttachDecorator]] = Field(
        None, alias="requests~attach", description="Optional request attachment"
    )
    services: Optional[List[Dict[str, Any]]] = Field(
        None,
        examples=[
            [
                {
                    "did": "WgWxqztrNooG92RXvxSTWv",
                    "id": "string",
                    "recipientKeys": [
                        "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                    ],
                    "routingKeys": [
                        "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                    ],
                    "serviceEndpoint": "http://192.168.56.101:8020",
                    "type": "string",
                },
                "did:sov:WgWxqztrNooG92RXvxSTWv",
            ]
        ],
    )


class InvitationRecord(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    invi_msg_id: Optional[str] = Field(
        None,
        description="Invitation message identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    invitation: Optional[InvitationMessage] = Field(
        None, description="Out of band invitation message"
    )
    invitation_id: Optional[str] = Field(
        None,
        description="Invitation record identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    invitation_url: Optional[str] = Field(
        None,
        description="Invitation message URL",
        examples=[
            "https://example.com/endpoint?c_i=eyJAdHlwZSI6ICIuLi4iLCAiLi4uIjogIi4uLiJ9XX0="
        ],
    )
    oob_id: Optional[str] = Field(
        None,
        description="Out of band record identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    state: Optional[str] = Field(
        None,
        description="Out of band message exchange state",
        examples=["await_response"],
    )
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )


class IssuerRevRegRecord(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    cred_def_id: Optional[str] = Field(
        None,
        description="Credential definition identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"],
        pattern="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    error_msg: Optional[str] = Field(
        None, description="Error message", examples=["Revocation registry undefined"]
    )
    issuer_did: Optional[str] = Field(
        None,
        description="Issuer DID",
        examples=["WgWxqztrNooG92RXvxSTWv"],
        pattern="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    max_cred_num: Optional[int] = Field(
        None,
        description="Maximum number of credentials for revocation registry",
        examples=[1000],
    )
    pending_pub: Optional[List[str]] = Field(
        None,
        description="Credential revocation identifier for credential revoked and pending publication to ledger",
    )
    record_id: Optional[str] = Field(
        None,
        description="Issuer revocation registry record identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    revoc_def_type: Optional[Literal["CL_ACCUM"]] = Field(
        None,
        description="Revocation registry type (specify CL_ACCUM)",
        examples=["CL_ACCUM"],
    )
    revoc_reg_def: Optional[IndyRevRegDef] = Field(
        None, description="Revocation registry definition"
    )
    revoc_reg_entry: Optional[IndyRevRegEntry] = Field(
        None, description="Revocation registry entry"
    )
    revoc_reg_id: Optional[str] = Field(
        None,
        description="Revocation registry identifier",
        examples=[
            "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0"
        ],
        pattern="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)",
    )
    state: Optional[str] = Field(
        None, description="Issue revocation registry record state", examples=["active"]
    )
    tag: Optional[str] = Field(
        None, description="Tag within issuer revocation registry identifier"
    )
    tails_hash: Optional[str] = Field(
        None,
        description="Tails hash",
        examples=["H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"],
        pattern="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
    )
    tails_local_path: Optional[str] = Field(
        None, description="Local path to tails file"
    )
    tails_public_uri: Optional[str] = Field(
        None, description="Public URI for tails file"
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )


class OobRecord(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    attach_thread_id: Optional[str] = Field(
        None,
        description="Connection record identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    connection_id: Optional[str] = Field(
        None,
        description="Connection record identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    invi_msg_id: str = Field(
        ...,
        description="Invitation message identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    invitation: InvitationMessage = Field(
        ..., description="Out of band invitation message"
    )
    multi_use: Optional[bool] = Field(
        None,
        description="Allow for multiple uses of the oob invitation",
        examples=[True],
    )
    oob_id: str = Field(
        ...,
        description="Oob record identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    our_recipient_key: Optional[str] = Field(
        None,
        description="Recipient key used for oob invitation",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    role: Optional[Literal["sender", "receiver"]] = Field(
        None, description="OOB Role", examples=["receiver"]
    )
    state: Literal[
        "initial",
        "prepare-response",
        "await-response",
        "reuse-not-accepted",
        "reuse-accepted",
        "done",
        "deleted",
    ] = Field(
        ...,
        description="Out of band message exchange state",
        examples=["await-response"],
    )
    their_service: Optional[ServiceDecorator] = None
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )


class PresentationRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        examples=["https://didcomm.org/my-family/1.0/my-message-type"],
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    request_presentations_attach: List[AttachDecorator] = Field(
        ..., alias="request_presentations~attach"
    )


class RevRegResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    result: Optional[IssuerRevRegRecord] = None


class RevRegResultSchemaAnoncreds(RevRegResult):
    pass


class TxnOrRevRegResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    sent: Optional[RevRegResult] = None
    txn: Optional[TransactionRecord] = Field(
        None, description="Revocation registry definition transaction to endorse"
    )


class V10CredentialExchange(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    auto_issue: Optional[bool] = Field(
        None,
        description="Issuer choice to issue to request in this credential exchange",
        examples=[False],
    )
    auto_offer: Optional[bool] = Field(
        None,
        description="Holder choice to accept offer in this credential exchange",
        examples=[False],
    )
    auto_remove: Optional[bool] = Field(
        None,
        description="Issuer choice to remove this credential exchange record when complete",
        examples=[False],
    )
    connection_id: Optional[str] = Field(
        None,
        description="Connection identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    credential: Optional[IndyCredInfo] = Field(None, description="Credential as stored")
    credential_definition_id: Optional[str] = Field(
        None,
        description="Credential definition identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"],
        pattern="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    credential_exchange_id: Optional[str] = Field(
        None,
        description="Credential exchange identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    credential_id: Optional[str] = Field(
        None,
        description="Credential identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    credential_offer: Optional[IndyCredAbstract] = Field(
        None, description="(Indy) credential offer"
    )
    credential_offer_dict: Optional[CredentialOffer] = Field(
        None, description="Credential offer message"
    )
    credential_proposal_dict: Optional[CredentialProposal] = Field(
        None, description="Credential proposal message"
    )
    credential_request: Optional[IndyCredRequest] = Field(
        None, description="(Indy) credential request"
    )
    credential_request_metadata: Optional[Dict[str, Any]] = Field(
        None, description="(Indy) credential request metadata"
    )
    error_msg: Optional[str] = Field(
        None,
        description="Error message",
        examples=["Credential definition identifier is not set in proposal"],
    )
    initiator: Optional[Literal["self", "external"]] = Field(
        None,
        description="Issue-credential exchange initiator: self or external",
        examples=["self"],
    )
    parent_thread_id: Optional[str] = Field(
        None,
        description="Parent thread identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    raw_credential: Optional[IndyCredential] = Field(
        None, description="Credential as received, prior to storage in holder wallet"
    )
    revoc_reg_id: Optional[str] = Field(
        None, description="Revocation registry identifier"
    )
    revocation_id: Optional[str] = Field(
        None, description="Credential identifier within revocation registry"
    )
    role: Optional[Literal["holder", "issuer"]] = Field(
        None,
        description="Issue-credential exchange role: holder or issuer",
        examples=["issuer"],
    )
    schema_id: Optional[str] = Field(
        None,
        description="Schema identifier",
        examples=["WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"],
        pattern="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
    )
    state: Optional[str] = Field(
        None,
        description="Issue-credential exchange state",
        examples=["credential_acked"],
    )
    thread_id: Optional[str] = Field(
        None,
        description="Thread identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )


class V10CredentialExchangeListResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    results: Optional[List[V10CredentialExchange]] = Field(
        None, description="Aries#0036 v1.0 credential exchange records"
    )


class V10PresentationExchange(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    auto_present: Optional[bool] = Field(
        None,
        description="Prover choice to auto-present proof as verifier requests",
        examples=[False],
    )
    auto_remove: Optional[bool] = Field(
        None,
        description="Verifier choice to remove this presentation exchange record when complete",
        examples=[False],
    )
    auto_verify: Optional[bool] = Field(
        None, description="Verifier choice to auto-verify proof presentation"
    )
    connection_id: Optional[str] = Field(
        None,
        description="Connection identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    error_msg: Optional[str] = Field(
        None, description="Error message", examples=["Invalid structure"]
    )
    initiator: Optional[Literal["self", "external"]] = Field(
        None,
        description="Present-proof exchange initiator: self or external",
        examples=["self"],
    )
    presentation: Optional[IndyProof] = Field(
        None, description="(Indy) presentation (also known as proof)"
    )
    presentation_exchange_id: Optional[str] = Field(
        None,
        description="Presentation exchange identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    presentation_proposal_dict: Optional[PresentationProposal] = Field(
        None, description="Presentation proposal message"
    )
    presentation_request: Optional[IndyProofRequest] = Field(
        None, description="(Indy) presentation request (also known as proof request)"
    )
    presentation_request_dict: Optional[PresentationRequest] = Field(
        None, description="Presentation request message"
    )
    role: Optional[Literal["prover", "verifier"]] = Field(
        None,
        description="Present-proof exchange role: prover or verifier",
        examples=["prover"],
    )
    state: Optional[str] = Field(
        None, description="Present-proof exchange state", examples=["verified"]
    )
    thread_id: Optional[str] = Field(
        None,
        description="Thread identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    verified: Optional[Literal["true", "false"]] = Field(
        None,
        description="Whether presentation is verified: true or false",
        examples=["true"],
    )
    verified_msgs: Optional[List[str]] = None


class V10PresentationExchangeList(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    results: Optional[List[V10PresentationExchange]] = Field(
        None, description="Aries RFC 37 v1.0 presentation exchange records"
    )


class V20CredIssue(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        examples=["https://didcomm.org/my-family/1.0/my-message-type"],
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    credentials_attach: List[AttachDecorator] = Field(
        ..., alias="credentials~attach", description="Credential attachments"
    )
    formats: List[V20CredFormat] = Field(
        ..., description="Acceptable attachment formats"
    )
    replacement_id: Optional[str] = Field(
        None,
        description="Issuer-unique identifier to coordinate credential replacement",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )


class V20CredOffer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        examples=["https://didcomm.org/my-family/1.0/my-message-type"],
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    credential_preview: Optional[V20CredPreview] = None
    formats: List[V20CredFormat] = Field(
        ..., description="Acceptable credential formats"
    )
    offers_attach: List[AttachDecorator] = Field(
        ..., alias="offers~attach", description="Offer attachments"
    )
    replacement_id: Optional[str] = Field(
        None,
        description="Issuer-unique identifier to coordinate credential replacement",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )


class V20CredProposal(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        examples=["https://didcomm.org/my-family/1.0/my-message-type"],
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    credential_preview: Optional[V20CredPreview] = Field(
        None, description="Credential preview"
    )
    filters_attach: List[AttachDecorator] = Field(
        ...,
        alias="filters~attach",
        description="Credential filter per acceptable format on corresponding identifier",
    )
    formats: List[V20CredFormat] = Field(..., description="Attachment formats")


class V20CredRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        examples=["https://didcomm.org/my-family/1.0/my-message-type"],
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    formats: List[V20CredFormat] = Field(
        ..., description="Acceptable attachment formats"
    )
    requests_attach: List[AttachDecorator] = Field(
        ..., alias="requests~attach", description="Request attachments"
    )


class V20Pres(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        examples=["https://didcomm.org/my-family/1.0/my-message-type"],
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    formats: List[V20PresFormat] = Field(
        ..., description="Acceptable attachment formats"
    )
    presentations_attach: List[AttachDecorator] = Field(
        ..., alias="presentations~attach"
    )


class V20PresProposal(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        examples=["https://didcomm.org/my-family/1.0/my-message-type"],
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    formats: List[V20PresFormat] = Field(
        ..., description="Acceptable attachment formats"
    )
    proposals_attach: List[AttachDecorator] = Field(
        ...,
        alias="proposals~attach",
        description="Attachment per acceptable format on corresponding identifier",
    )


class V20PresProposalByFormat(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    dif: Optional[DIFProofProposal] = Field(
        None, description="Presentation proposal for DIF"
    )
    indy: Optional[IndyProofRequest] = Field(
        None, description="Presentation proposal for indy"
    )


class V20PresProposalRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    auto_present: Optional[bool] = Field(
        None,
        description="Whether to respond automatically to presentation requests, building and presenting requested proof",
    )
    auto_remove: Optional[bool] = Field(
        None,
        description="Whether to remove the presentation exchange record on completion (overrides --preserve-exchange-records configuration setting)",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    connection_id: str = Field(
        ...,
        description="Connection identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    presentation_proposal: V20PresProposalByFormat
    trace: Optional[bool] = Field(
        None, description="Whether to trace event (default false)", examples=[False]
    )


class V20PresRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        examples=["https://didcomm.org/my-family/1.0/my-message-type"],
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    formats: List[V20PresFormat] = Field(
        ..., description="Acceptable attachment formats"
    )
    request_presentations_attach: List[AttachDecorator] = Field(
        ...,
        alias="request_presentations~attach",
        description="Attachment per acceptable format on corresponding identifier",
    )
    will_confirm: Optional[bool] = Field(
        None, description="Whether verifier will send confirmation ack"
    )


class V20PresRequestByFormat(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    dif: Optional[DIFProofRequest] = Field(
        None, description="Presentation request for DIF"
    )
    indy: Optional[IndyProofRequest] = Field(
        None, description="Presentation request for indy"
    )


class V20PresSendRequestRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    auto_remove: Optional[bool] = Field(
        None,
        description="Whether to remove the presentation exchange record on completion (overrides --preserve-exchange-records configuration setting)",
    )
    auto_verify: Optional[bool] = Field(
        None,
        description="Verifier choice to auto-verify proof presentation",
        examples=[False],
    )
    comment: Optional[str] = None
    connection_id: str = Field(
        ...,
        description="Connection identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    presentation_request: V20PresRequestByFormat
    trace: Optional[bool] = Field(
        None, description="Whether to trace event (default false)", examples=[False]
    )


class V20PresSpecByFormatRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    auto_remove: Optional[bool] = Field(
        None,
        description="Whether to remove the presentation exchange record on completion (overrides --preserve-exchange-records configuration setting)",
    )
    dif: Optional[DIFPresSpec] = Field(
        None,
        description="Optional Presentation specification for DIF, overrides the PresentationExchange record's PresRequest",
    )
    indy: Optional[IndyPresSpec] = Field(
        None, description="Presentation specification for indy"
    )
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )


class V20CredExRecord(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    auto_issue: Optional[bool] = Field(
        None,
        description="Issuer choice to issue to request in this credential exchange",
        examples=[False],
    )
    auto_offer: Optional[bool] = Field(
        None,
        description="Holder choice to accept offer in this credential exchange",
        examples=[False],
    )
    auto_remove: Optional[bool] = Field(
        None,
        description="Issuer choice to remove this credential exchange record when complete",
        examples=[False],
    )
    by_format: Optional[V20CredExRecordByFormat] = Field(
        None,
        description="Attachment content by format for proposal, offer, request, and issue",
    )
    connection_id: Optional[str] = Field(
        None,
        description="Connection identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    cred_ex_id: Optional[str] = Field(
        None,
        description="Credential exchange identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    cred_issue: Optional[V20CredIssue] = Field(
        None, description="Serialized credential issue message"
    )
    cred_offer: Optional[V20CredOffer] = Field(
        None, description="Credential offer message"
    )
    cred_preview: Optional[V20CredPreview] = Field(
        None, description="Credential preview from credential proposal"
    )
    cred_proposal: Optional[V20CredProposal] = Field(
        None, description="Credential proposal message"
    )
    cred_request: Optional[V20CredRequest] = Field(
        None, description="Serialized credential request message"
    )
    error_msg: Optional[str] = Field(
        None, description="Error message", examples=["The front fell off"]
    )
    initiator: Optional[Literal["self", "external"]] = Field(
        None,
        description="Issue-credential exchange initiator: self or external",
        examples=["self"],
    )
    parent_thread_id: Optional[str] = Field(
        None,
        description="Parent thread identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    role: Optional[Literal["issuer", "holder"]] = Field(
        None,
        description="Issue-credential exchange role: holder or issuer",
        examples=["issuer"],
    )
    state: Optional[
        Literal[
            "proposal-sent",
            "proposal-received",
            "offer-sent",
            "offer-received",
            "request-sent",
            "request-received",
            "credential-issued",
            "credential-received",
            "done",
            "credential-revoked",
            "abandoned",
            "deleted",
        ]
    ] = Field(None, description="Issue-credential exchange state", examples=["done"])
    thread_id: Optional[str] = Field(
        None,
        description="Thread identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )


class V20CredExRecordDetail(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cred_ex_record: Optional[V20CredExRecord] = Field(
        None, description="Credential exchange record"
    )
    indy: Optional[V20CredExRecordIndy] = None
    ld_proof: Optional[V20CredExRecordLDProof] = None


class V20CredExRecordListResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    results: Optional[List[V20CredExRecordDetail]] = Field(
        None, description="Credential exchange records and corresponding detail records"
    )


class V20PresCreateRequestRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    auto_remove: Optional[bool] = Field(
        None,
        description="Whether to remove the presentation exchange record on completion (overrides --preserve-exchange-records configuration setting)",
    )
    auto_verify: Optional[bool] = Field(
        None,
        description="Verifier choice to auto-verify proof presentation",
        examples=[False],
    )
    comment: Optional[str] = None
    presentation_request: V20PresRequestByFormat
    trace: Optional[bool] = Field(
        None, description="Whether to trace event (default false)", examples=[False]
    )


class V20PresExRecord(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    auto_present: Optional[bool] = Field(
        None,
        description="Prover choice to auto-present proof as verifier requests",
        examples=[False],
    )
    auto_remove: Optional[bool] = Field(
        None,
        description="Verifier choice to remove this presentation exchange record when complete",
        examples=[False],
    )
    auto_verify: Optional[bool] = Field(
        None, description="Verifier choice to auto-verify proof presentation"
    )
    by_format: Optional[V20PresExRecordByFormat] = Field(
        None,
        description="Attachment content by format for proposal, request, and presentation",
    )
    connection_id: Optional[str] = Field(
        None,
        description="Connection identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    error_msg: Optional[str] = Field(
        None, description="Error message", examples=["Invalid structure"]
    )
    initiator: Optional[Literal["self", "external"]] = Field(
        None,
        description="Present-proof exchange initiator: self or external",
        examples=["self"],
    )
    pres: Optional[V20Pres] = Field(None, description="Presentation message")
    pres_ex_id: Optional[str] = Field(
        None,
        description="Presentation exchange identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    pres_proposal: Optional[V20PresProposal] = Field(
        None, description="Presentation proposal message"
    )
    pres_request: Optional[V20PresRequest] = Field(
        None, description="Presentation request message"
    )
    role: Optional[Literal["prover", "verifier"]] = Field(
        None,
        description="Present-proof exchange role: prover or verifier",
        examples=["prover"],
    )
    state: Optional[
        Literal[
            "proposal-sent",
            "proposal-received",
            "request-sent",
            "request-received",
            "presentation-sent",
            "presentation-received",
            "done",
            "abandoned",
            "deleted",
        ]
    ] = Field(None, description="Present-proof exchange state")
    thread_id: Optional[str] = Field(
        None,
        description="Thread identifier",
        examples=["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
    )
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        examples=["2021-12-31T23:59:59Z"],
        pattern="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    verified: Optional[Literal["true", "false"]] = Field(
        None,
        description="Whether presentation is verified: 'true' or 'false'",
        examples=["true"],
    )
    verified_msgs: Optional[List[str]] = None


class V20PresExRecordList(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    results: Optional[List[V20PresExRecord]] = Field(
        None, description="Presentation exchange records"
    )


SubmissionRequirements.model_rebuild()
