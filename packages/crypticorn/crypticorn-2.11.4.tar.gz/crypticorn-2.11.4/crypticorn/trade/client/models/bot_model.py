# coding: utf-8

"""
Trading API

API for automated trading and exchange interface

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from crypticorn.trade.client.models.bot_status import BotStatus
from typing import Optional, Set
from typing_extensions import Self


class BotModel(BaseModel):
    """
    BotModel
    """  # noqa: E501

    created_at: Optional[StrictInt] = None
    updated_at: Optional[StrictInt] = None
    id: Optional[StrictStr] = None
    name: StrictStr = Field(description="Name of the bot")
    strategy_id: StrictStr = Field(
        description="UID for the trading strategy used by the bot"
    )
    api_key_id: StrictStr = Field(description="UID for the API key")
    allocation: StrictInt = Field(description="Initial allocation for the bot")
    status: BotStatus = Field(description="Status of the bot")
    status_code: Optional[StrictStr] = Field(
        default=None, description="API error identifiers"
    )
    user_id: Optional[StrictStr] = None
    current_allocation: Optional[Union[StrictFloat, StrictInt]] = None
    current_exposure: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = [
        "created_at",
        "updated_at",
        "id",
        "name",
        "strategy_id",
        "api_key_id",
        "allocation",
        "status",
        "status_code",
        "user_id",
        "current_allocation",
        "current_exposure",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BotModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict["created_at"] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict["updated_at"] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict["id"] = None

        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict["user_id"] = None

        # set to None if current_allocation (nullable) is None
        # and model_fields_set contains the field
        if (
            self.current_allocation is None
            and "current_allocation" in self.model_fields_set
        ):
            _dict["current_allocation"] = None

        # set to None if current_exposure (nullable) is None
        # and model_fields_set contains the field
        if (
            self.current_exposure is None
            and "current_exposure" in self.model_fields_set
        ):
            _dict["current_exposure"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BotModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
                "id": obj.get("id"),
                "name": obj.get("name"),
                "strategy_id": obj.get("strategy_id"),
                "api_key_id": obj.get("api_key_id"),
                "allocation": obj.get("allocation"),
                "status": obj.get("status"),
                "status_code": obj.get("status_code"),
                "user_id": obj.get("user_id"),
                "current_allocation": obj.get("current_allocation"),
                "current_exposure": obj.get("current_exposure"),
            }
        )
        return _obj
