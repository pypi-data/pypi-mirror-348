# Generated from src/queryparser/postgresql/PostgreSQLParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,238,1170,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,1,0,1,0,1,1,1,1,1,1,1,1,3,1,207,8,1,1,1,1,1,1,
        1,1,1,3,1,213,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,225,
        8,1,1,1,3,1,228,8,1,1,1,1,1,1,1,1,1,1,1,3,1,235,8,1,1,2,1,2,1,3,
        1,3,1,4,1,4,1,5,3,5,244,8,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,
        1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,3,15,273,8,15,1,16,1,16,1,16,1,16,1,16,
        1,16,3,16,281,8,16,1,17,1,17,3,17,285,8,17,1,17,1,17,1,17,1,17,3,
        17,291,8,17,1,17,3,17,294,8,17,1,17,3,17,297,8,17,1,17,3,17,300,
        8,17,3,17,302,8,17,1,17,3,17,305,8,17,1,17,3,17,308,8,17,1,17,3,
        17,311,8,17,1,17,1,17,3,17,315,8,17,1,17,3,17,318,8,17,1,18,3,18,
        321,8,18,1,18,1,18,1,19,1,19,1,19,3,19,328,8,19,1,20,1,20,1,20,3,
        20,333,8,20,1,20,1,20,3,20,337,8,20,1,20,3,20,340,8,20,1,20,1,20,
        3,20,344,8,20,1,21,1,21,1,21,3,21,349,8,21,1,21,1,21,3,21,353,8,
        21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,4,22,362,8,22,11,22,12,22,
        363,1,23,1,23,1,23,1,23,1,23,1,23,4,23,372,8,23,11,23,12,23,373,
        1,24,1,24,1,24,1,24,5,24,380,8,24,10,24,12,24,383,9,24,1,24,1,24,
        1,25,1,25,1,26,1,26,1,26,3,26,392,8,26,1,26,1,26,1,26,3,26,397,8,
        26,1,26,1,26,3,26,401,8,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,
        27,410,8,27,1,27,1,27,3,27,414,8,27,1,27,3,27,417,8,27,3,27,419,
        8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,429,8,28,1,29,
        1,29,1,29,5,29,434,8,29,10,29,12,29,437,9,29,1,30,3,30,440,8,30,
        1,30,1,30,1,31,1,31,1,31,3,31,447,8,31,1,31,1,31,1,31,1,31,3,31,
        453,8,31,3,31,455,8,31,1,31,3,31,458,8,31,3,31,460,8,31,1,32,1,32,
        1,32,5,32,465,8,32,10,32,12,32,468,9,32,1,33,1,33,1,33,1,33,5,33,
        474,8,33,10,33,12,33,477,9,33,1,33,1,33,1,34,1,34,1,34,3,34,484,
        8,34,1,35,1,35,1,35,3,35,489,8,35,1,36,1,36,1,36,5,36,494,8,36,10,
        36,12,36,497,9,36,1,37,1,37,1,37,5,37,502,8,37,10,37,12,37,505,9,
        37,1,38,3,38,508,8,38,1,38,1,38,3,38,512,8,38,1,38,1,38,3,38,516,
        8,38,1,39,1,39,1,39,1,39,1,39,5,39,523,8,39,10,39,12,39,526,9,39,
        3,39,528,8,39,1,39,3,39,531,8,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
        39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
        39,1,39,1,39,1,39,1,39,1,39,3,39,558,8,39,1,39,1,39,3,39,562,8,39,
        3,39,564,8,39,1,39,1,39,3,39,568,8,39,1,40,1,40,1,40,1,40,1,40,5,
        40,575,8,40,10,40,12,40,578,9,40,1,40,1,40,3,40,582,8,40,1,41,1,
        41,1,41,3,41,587,8,41,1,41,3,41,590,8,41,1,42,1,42,1,42,1,43,1,43,
        1,43,1,43,3,43,599,8,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
        1,43,1,43,1,43,1,43,1,43,1,43,3,43,615,8,43,1,44,1,44,1,44,5,44,
        620,8,44,10,44,12,44,623,9,44,1,45,1,45,1,46,1,46,1,46,5,46,630,
        8,46,10,46,12,46,633,9,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,
        642,8,47,3,47,644,8,47,1,48,1,48,1,48,1,49,1,49,1,49,1,49,3,49,653,
        8,49,1,50,1,50,1,50,1,50,3,50,659,8,50,1,50,1,50,1,50,1,50,1,50,
        3,50,666,8,50,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,54,1,54,1,54,
        1,54,1,54,5,54,680,8,54,10,54,12,54,683,9,54,1,55,1,55,3,55,687,
        8,55,1,55,1,55,3,55,691,8,55,3,55,693,8,55,1,55,1,55,1,55,1,55,3,
        55,699,8,55,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,58,1,58,1,58,5,
        58,711,8,58,10,58,12,58,714,9,58,1,59,3,59,717,8,59,1,59,1,59,1,
        59,3,59,722,8,59,1,59,1,59,1,59,1,59,3,59,728,8,59,1,59,1,59,1,59,
        3,59,733,8,59,1,59,1,59,3,59,737,8,59,1,59,1,59,3,59,741,8,59,1,
        59,1,59,1,59,3,59,746,8,59,1,60,1,60,1,60,1,60,3,60,752,8,60,1,61,
        1,61,3,61,756,8,61,1,61,1,61,3,61,760,8,61,1,62,1,62,1,62,1,63,1,
        63,1,64,1,64,1,64,5,64,770,8,64,10,64,12,64,773,9,64,1,64,1,64,1,
        64,1,64,1,64,5,64,780,8,64,10,64,12,64,783,9,64,3,64,785,8,64,1,
        64,1,64,1,64,1,64,5,64,791,8,64,10,64,12,64,794,9,64,3,64,796,8,
        64,1,65,1,65,1,65,5,65,801,8,65,10,65,12,65,804,9,65,1,66,1,66,1,
        66,3,66,809,8,66,1,66,5,66,812,8,66,10,66,12,66,815,9,66,1,67,1,
        67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,828,8,67,1,
        68,1,68,1,68,1,68,3,68,834,8,68,1,68,4,68,837,8,68,11,68,12,68,838,
        1,69,1,69,1,69,1,69,1,70,1,70,3,70,847,8,70,1,70,3,70,850,8,70,1,
        70,3,70,853,8,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,
        70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,871,8,70,1,71,1,71,1,72,1,
        72,3,72,877,8,72,1,72,1,72,1,72,3,72,882,8,72,5,72,884,8,72,10,72,
        12,72,887,9,72,1,73,1,73,1,73,1,73,1,73,3,73,894,8,73,3,73,896,8,
        73,1,74,1,74,1,74,3,74,901,8,74,1,74,1,74,1,74,1,74,5,74,907,8,74,
        10,74,12,74,910,9,74,1,75,1,75,1,75,1,75,3,75,916,8,75,3,75,918,
        8,75,1,75,1,75,3,75,922,8,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,
        3,76,931,8,76,3,76,933,8,76,1,77,1,77,1,77,5,77,938,8,77,10,77,12,
        77,941,9,77,1,78,1,78,1,78,3,78,946,8,78,1,78,1,78,1,79,1,79,1,79,
        1,79,5,79,954,8,79,10,79,12,79,957,9,79,1,80,1,80,1,80,1,81,1,81,
        1,82,1,82,3,82,966,8,82,1,82,1,82,3,82,970,8,82,1,82,1,82,1,82,1,
        82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,
        82,3,82,989,8,82,1,82,1,82,1,82,3,82,994,8,82,1,82,1,82,1,82,1,82,
        3,82,1000,8,82,1,82,1,82,1,82,1,82,1,82,3,82,1007,8,82,1,82,1,82,
        1,82,1,82,3,82,1013,8,82,1,82,1,82,1,82,1,82,3,82,1019,8,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,3,82,1028,8,82,1,82,3,82,1031,8,82,
        1,82,4,82,1034,8,82,11,82,12,82,1035,3,82,1038,8,82,1,83,1,83,1,
        83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,85,1,
        85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,
        85,1068,8,85,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,
        86,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,88,1,
        88,1,88,1,88,1,88,1,88,1,88,3,88,1099,8,88,1,89,1,89,1,89,1,89,1,
        89,1,89,1,89,3,89,1108,8,89,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,
        90,1,90,1,90,1,90,1,91,1,91,1,91,1,91,1,91,1,92,1,92,1,92,1,92,1,
        92,1,93,1,93,1,93,1,93,1,93,1,94,1,94,1,94,1,94,1,94,1,95,1,95,1,
        95,1,95,1,95,1,96,1,96,1,96,1,96,1,96,1,97,1,97,1,97,1,97,1,97,1,
        98,1,98,1,98,1,98,1,98,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1168,
        8,99,1,99,0,0,100,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
        34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
        78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
        116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
        148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,
        180,182,184,186,188,190,192,194,196,198,0,24,2,0,196,199,217,218,
        2,0,51,51,140,140,1,0,211,212,2,0,230,230,233,233,9,0,15,15,25,28,
        73,74,79,81,110,113,117,118,133,133,155,155,169,169,9,0,10,10,14,
        14,16,16,32,32,82,82,85,85,128,130,134,134,162,164,21,0,1,2,6,6,
        8,9,21,23,30,31,39,39,41,41,49,49,54,54,77,78,86,86,101,101,103,
        104,106,107,115,115,122,122,124,124,126,127,131,131,136,136,141,
        141,2,0,45,45,83,83,6,0,34,35,91,91,119,119,138,139,158,160,168,
        168,3,0,58,58,100,100,142,151,2,0,3,3,42,42,2,0,62,62,75,75,2,0,
        68,68,90,90,1,0,200,201,3,0,190,191,206,206,216,216,3,0,13,13,194,
        195,211,213,3,0,3,3,42,42,206,206,2,0,5,5,40,40,2,0,63,63,71,71,
        2,0,52,52,72,72,1,0,217,218,4,0,33,33,64,64,73,73,113,113,2,0,73,
        73,113,113,3,0,193,194,213,213,219,225,1278,0,200,1,0,0,0,2,234,
        1,0,0,0,4,236,1,0,0,0,6,238,1,0,0,0,8,240,1,0,0,0,10,243,1,0,0,0,
        12,247,1,0,0,0,14,249,1,0,0,0,16,251,1,0,0,0,18,253,1,0,0,0,20,255,
        1,0,0,0,22,257,1,0,0,0,24,259,1,0,0,0,26,261,1,0,0,0,28,263,1,0,
        0,0,30,272,1,0,0,0,32,280,1,0,0,0,34,282,1,0,0,0,36,320,1,0,0,0,
        38,324,1,0,0,0,40,343,1,0,0,0,42,345,1,0,0,0,44,361,1,0,0,0,46,365,
        1,0,0,0,48,375,1,0,0,0,50,386,1,0,0,0,52,396,1,0,0,0,54,418,1,0,
        0,0,56,428,1,0,0,0,58,430,1,0,0,0,60,439,1,0,0,0,62,443,1,0,0,0,
        64,461,1,0,0,0,66,469,1,0,0,0,68,480,1,0,0,0,70,485,1,0,0,0,72,490,
        1,0,0,0,74,498,1,0,0,0,76,507,1,0,0,0,78,567,1,0,0,0,80,569,1,0,
        0,0,82,586,1,0,0,0,84,591,1,0,0,0,86,614,1,0,0,0,88,616,1,0,0,0,
        90,624,1,0,0,0,92,626,1,0,0,0,94,634,1,0,0,0,96,645,1,0,0,0,98,652,
        1,0,0,0,100,665,1,0,0,0,102,667,1,0,0,0,104,669,1,0,0,0,106,672,
        1,0,0,0,108,674,1,0,0,0,110,698,1,0,0,0,112,700,1,0,0,0,114,705,
        1,0,0,0,116,707,1,0,0,0,118,716,1,0,0,0,120,747,1,0,0,0,122,755,
        1,0,0,0,124,761,1,0,0,0,126,764,1,0,0,0,128,795,1,0,0,0,130,797,
        1,0,0,0,132,805,1,0,0,0,134,827,1,0,0,0,136,836,1,0,0,0,138,840,
        1,0,0,0,140,870,1,0,0,0,142,872,1,0,0,0,144,874,1,0,0,0,146,888,
        1,0,0,0,148,897,1,0,0,0,150,911,1,0,0,0,152,932,1,0,0,0,154,934,
        1,0,0,0,156,945,1,0,0,0,158,949,1,0,0,0,160,958,1,0,0,0,162,961,
        1,0,0,0,164,1037,1,0,0,0,166,1039,1,0,0,0,168,1046,1,0,0,0,170,1067,
        1,0,0,0,172,1069,1,0,0,0,174,1080,1,0,0,0,176,1098,1,0,0,0,178,1107,
        1,0,0,0,180,1109,1,0,0,0,182,1120,1,0,0,0,184,1125,1,0,0,0,186,1130,
        1,0,0,0,188,1135,1,0,0,0,190,1140,1,0,0,0,192,1145,1,0,0,0,194,1150,
        1,0,0,0,196,1155,1,0,0,0,198,1167,1,0,0,0,200,201,7,0,0,0,201,1,
        1,0,0,0,202,206,5,13,0,0,203,204,5,208,0,0,204,205,5,230,0,0,205,
        207,5,207,0,0,206,203,1,0,0,0,206,207,1,0,0,0,207,235,1,0,0,0,208,
        212,5,24,0,0,209,210,5,208,0,0,210,211,5,230,0,0,211,213,5,207,0,
        0,212,209,1,0,0,0,212,213,1,0,0,0,213,235,1,0,0,0,214,235,5,35,0,
        0,215,235,5,36,0,0,216,235,5,138,0,0,217,235,5,139,0,0,218,235,5,
        66,0,0,219,227,5,38,0,0,220,221,5,208,0,0,221,224,5,230,0,0,222,
        223,5,205,0,0,223,225,5,230,0,0,224,222,1,0,0,0,224,225,1,0,0,0,
        225,226,1,0,0,0,226,228,5,207,0,0,227,220,1,0,0,0,227,228,1,0,0,
        0,228,235,1,0,0,0,229,235,5,65,0,0,230,235,5,12,0,0,231,235,5,53,
        0,0,232,235,5,108,0,0,233,235,5,43,0,0,234,202,1,0,0,0,234,208,1,
        0,0,0,234,214,1,0,0,0,234,215,1,0,0,0,234,216,1,0,0,0,234,217,1,
        0,0,0,234,218,1,0,0,0,234,219,1,0,0,0,234,229,1,0,0,0,234,230,1,
        0,0,0,234,231,1,0,0,0,234,232,1,0,0,0,234,233,1,0,0,0,235,3,1,0,
        0,0,236,237,5,232,0,0,237,5,1,0,0,0,238,239,7,1,0,0,239,7,1,0,0,
        0,240,241,5,231,0,0,241,9,1,0,0,0,242,244,7,2,0,0,243,242,1,0,0,
        0,243,244,1,0,0,0,244,245,1,0,0,0,245,246,7,3,0,0,246,11,1,0,0,0,
        247,248,5,235,0,0,248,13,1,0,0,0,249,250,7,4,0,0,250,15,1,0,0,0,
        251,252,7,5,0,0,252,17,1,0,0,0,253,254,7,6,0,0,254,19,1,0,0,0,255,
        256,7,7,0,0,256,21,1,0,0,0,257,258,7,8,0,0,258,23,1,0,0,0,259,260,
        5,181,0,0,260,25,1,0,0,0,261,262,7,9,0,0,262,27,1,0,0,0,263,264,
        5,180,0,0,264,29,1,0,0,0,265,273,3,18,9,0,266,273,3,14,7,0,267,273,
        3,22,11,0,268,273,3,20,10,0,269,273,3,28,14,0,270,273,3,24,12,0,
        271,273,3,26,13,0,272,265,1,0,0,0,272,266,1,0,0,0,272,267,1,0,0,
        0,272,268,1,0,0,0,272,269,1,0,0,0,272,270,1,0,0,0,272,271,1,0,0,
        0,273,31,1,0,0,0,274,281,3,12,6,0,275,281,3,10,5,0,276,281,3,8,4,
        0,277,281,3,6,3,0,278,281,3,4,2,0,279,281,5,92,0,0,280,274,1,0,0,
        0,280,275,1,0,0,0,280,276,1,0,0,0,280,277,1,0,0,0,280,278,1,0,0,
        0,280,279,1,0,0,0,281,33,1,0,0,0,282,284,5,120,0,0,283,285,7,10,
        0,0,284,283,1,0,0,0,284,285,1,0,0,0,285,286,1,0,0,0,286,301,3,128,
        64,0,287,288,5,57,0,0,288,290,3,154,77,0,289,291,3,112,56,0,290,
        289,1,0,0,0,290,291,1,0,0,0,291,293,1,0,0,0,292,294,3,160,80,0,293,
        292,1,0,0,0,293,294,1,0,0,0,294,296,1,0,0,0,295,297,3,80,40,0,296,
        295,1,0,0,0,296,297,1,0,0,0,297,299,1,0,0,0,298,300,3,84,42,0,299,
        298,1,0,0,0,299,300,1,0,0,0,300,302,1,0,0,0,301,287,1,0,0,0,301,
        302,1,0,0,0,302,304,1,0,0,0,303,305,3,108,54,0,304,303,1,0,0,0,304,
        305,1,0,0,0,305,307,1,0,0,0,306,308,3,100,50,0,307,306,1,0,0,0,307,
        308,1,0,0,0,308,310,1,0,0,0,309,311,3,104,52,0,310,309,1,0,0,0,310,
        311,1,0,0,0,311,314,1,0,0,0,312,313,5,55,0,0,313,315,5,154,0,0,314,
        312,1,0,0,0,314,315,1,0,0,0,315,317,1,0,0,0,316,318,5,202,0,0,317,
        316,1,0,0,0,317,318,1,0,0,0,318,35,1,0,0,0,319,321,5,7,0,0,320,319,
        1,0,0,0,320,321,1,0,0,0,321,322,1,0,0,0,322,323,5,236,0,0,323,37,
        1,0,0,0,324,327,3,68,34,0,325,326,5,214,0,0,326,328,3,68,34,0,327,
        325,1,0,0,0,327,328,1,0,0,0,328,39,1,0,0,0,329,336,3,122,61,0,330,
        332,3,0,0,0,331,333,5,4,0,0,332,331,1,0,0,0,332,333,1,0,0,0,333,
        334,1,0,0,0,334,335,3,122,61,0,335,337,1,0,0,0,336,330,1,0,0,0,336,
        337,1,0,0,0,337,344,1,0,0,0,338,340,5,89,0,0,339,338,1,0,0,0,339,
        340,1,0,0,0,340,341,1,0,0,0,341,342,5,48,0,0,342,344,3,138,69,0,
        343,329,1,0,0,0,343,339,1,0,0,0,344,41,1,0,0,0,345,348,5,19,0,0,
        346,349,3,44,22,0,347,349,3,46,23,0,348,346,1,0,0,0,348,347,1,0,
        0,0,349,352,1,0,0,0,350,351,5,44,0,0,351,353,3,38,19,0,352,350,1,
        0,0,0,352,353,1,0,0,0,353,354,1,0,0,0,354,355,5,46,0,0,355,43,1,
        0,0,0,356,357,5,165,0,0,357,358,3,64,32,0,358,359,5,137,0,0,359,
        360,3,38,19,0,360,362,1,0,0,0,361,356,1,0,0,0,362,363,1,0,0,0,363,
        361,1,0,0,0,363,364,1,0,0,0,364,45,1,0,0,0,365,371,3,38,19,0,366,
        367,5,165,0,0,367,368,3,38,19,0,368,369,5,137,0,0,369,370,3,38,19,
        0,370,372,1,0,0,0,371,366,1,0,0,0,372,373,1,0,0,0,373,371,1,0,0,
        0,373,374,1,0,0,0,374,47,1,0,0,0,375,376,5,208,0,0,376,381,3,52,
        26,0,377,378,5,205,0,0,378,380,3,52,26,0,379,377,1,0,0,0,380,383,
        1,0,0,0,381,379,1,0,0,0,381,382,1,0,0,0,382,384,1,0,0,0,383,381,
        1,0,0,0,384,385,5,207,0,0,385,49,1,0,0,0,386,387,5,236,0,0,387,51,
        1,0,0,0,388,389,3,126,63,0,389,390,5,204,0,0,390,392,1,0,0,0,391,
        388,1,0,0,0,391,392,1,0,0,0,392,393,1,0,0,0,393,394,3,142,71,0,394,
        395,5,204,0,0,395,397,1,0,0,0,396,391,1,0,0,0,396,397,1,0,0,0,397,
        398,1,0,0,0,398,400,3,50,25,0,399,401,3,136,68,0,400,399,1,0,0,0,
        400,401,1,0,0,0,401,53,1,0,0,0,402,403,3,156,78,0,403,404,5,204,
        0,0,404,405,5,206,0,0,405,419,1,0,0,0,406,410,3,38,19,0,407,410,
        3,164,82,0,408,410,3,56,28,0,409,406,1,0,0,0,409,407,1,0,0,0,409,
        408,1,0,0,0,410,413,1,0,0,0,411,412,7,11,0,0,412,414,5,235,0,0,413,
        411,1,0,0,0,413,414,1,0,0,0,414,416,1,0,0,0,415,417,3,36,18,0,416,
        415,1,0,0,0,416,417,1,0,0,0,417,419,1,0,0,0,418,402,1,0,0,0,418,
        409,1,0,0,0,419,55,1,0,0,0,420,429,3,184,92,0,421,429,3,182,91,0,
        422,429,3,188,94,0,423,429,3,186,93,0,424,429,3,192,96,0,425,429,
        3,190,95,0,426,429,3,196,98,0,427,429,3,194,97,0,428,420,1,0,0,0,
        428,421,1,0,0,0,428,422,1,0,0,0,428,423,1,0,0,0,428,424,1,0,0,0,
        428,425,1,0,0,0,428,426,1,0,0,0,428,427,1,0,0,0,429,57,1,0,0,0,430,
        435,3,60,30,0,431,432,5,193,0,0,432,434,3,60,30,0,433,431,1,0,0,
        0,434,437,1,0,0,0,435,433,1,0,0,0,435,436,1,0,0,0,436,59,1,0,0,0,
        437,435,1,0,0,0,438,440,5,89,0,0,439,438,1,0,0,0,439,440,1,0,0,0,
        440,441,1,0,0,0,441,442,3,62,31,0,442,61,1,0,0,0,443,459,3,40,20,
        0,444,446,5,69,0,0,445,447,5,89,0,0,446,445,1,0,0,0,446,447,1,0,
        0,0,447,452,1,0,0,0,448,453,3,6,3,0,449,453,5,92,0,0,450,451,5,42,
        0,0,451,453,5,57,0,0,452,448,1,0,0,0,452,449,1,0,0,0,452,450,1,0,
        0,0,453,455,1,0,0,0,454,444,1,0,0,0,454,455,1,0,0,0,455,460,1,0,
        0,0,456,458,7,12,0,0,457,456,1,0,0,0,457,458,1,0,0,0,458,460,1,0,
        0,0,459,454,1,0,0,0,459,457,1,0,0,0,460,63,1,0,0,0,461,466,3,58,
        29,0,462,463,5,192,0,0,463,465,3,58,29,0,464,462,1,0,0,0,465,468,
        1,0,0,0,466,464,1,0,0,0,466,467,1,0,0,0,467,65,1,0,0,0,468,466,1,
        0,0,0,469,470,5,208,0,0,470,475,3,64,32,0,471,472,5,205,0,0,472,
        474,3,64,32,0,473,471,1,0,0,0,474,477,1,0,0,0,475,473,1,0,0,0,475,
        476,1,0,0,0,476,478,1,0,0,0,477,475,1,0,0,0,478,479,5,207,0,0,479,
        67,1,0,0,0,480,483,3,70,35,0,481,482,5,215,0,0,482,484,3,70,35,0,
        483,481,1,0,0,0,483,484,1,0,0,0,484,69,1,0,0,0,485,488,3,72,36,0,
        486,487,7,13,0,0,487,489,3,72,36,0,488,486,1,0,0,0,488,489,1,0,0,
        0,489,71,1,0,0,0,490,495,3,74,37,0,491,492,7,2,0,0,492,494,3,74,
        37,0,493,491,1,0,0,0,494,497,1,0,0,0,495,493,1,0,0,0,495,496,1,0,
        0,0,496,73,1,0,0,0,497,495,1,0,0,0,498,503,3,76,38,0,499,500,7,14,
        0,0,500,502,3,76,38,0,501,499,1,0,0,0,502,505,1,0,0,0,503,501,1,
        0,0,0,503,504,1,0,0,0,504,75,1,0,0,0,505,503,1,0,0,0,506,508,7,15,
        0,0,507,506,1,0,0,0,507,508,1,0,0,0,508,509,1,0,0,0,509,511,3,134,
        67,0,510,512,5,89,0,0,511,510,1,0,0,0,511,512,1,0,0,0,512,515,1,
        0,0,0,513,514,7,2,0,0,514,516,3,96,48,0,515,513,1,0,0,0,515,516,
        1,0,0,0,516,77,1,0,0,0,517,530,3,30,15,0,518,527,5,208,0,0,519,524,
        3,64,32,0,520,521,5,205,0,0,521,523,3,64,32,0,522,520,1,0,0,0,523,
        526,1,0,0,0,524,522,1,0,0,0,524,525,1,0,0,0,525,528,1,0,0,0,526,
        524,1,0,0,0,527,519,1,0,0,0,527,528,1,0,0,0,528,529,1,0,0,0,529,
        531,5,207,0,0,530,518,1,0,0,0,530,531,1,0,0,0,531,568,1,0,0,0,532,
        533,5,20,0,0,533,534,5,208,0,0,534,535,3,64,32,0,535,536,5,7,0,0,
        536,537,3,2,1,0,537,538,5,207,0,0,538,568,1,0,0,0,539,540,5,29,0,
        0,540,541,5,208,0,0,541,542,5,235,0,0,542,543,5,205,0,0,543,544,
        5,235,0,0,544,545,5,205,0,0,545,546,5,235,0,0,546,568,5,207,0,0,
        547,548,5,102,0,0,548,549,5,208,0,0,549,550,3,64,32,0,550,551,5,
        67,0,0,551,552,3,64,32,0,552,553,5,207,0,0,553,568,1,0,0,0,554,555,
        3,16,8,0,555,557,5,208,0,0,556,558,7,16,0,0,557,556,1,0,0,0,557,
        558,1,0,0,0,558,563,1,0,0,0,559,562,3,38,19,0,560,562,3,164,82,0,
        561,559,1,0,0,0,561,560,1,0,0,0,562,564,1,0,0,0,563,561,1,0,0,0,
        563,564,1,0,0,0,564,565,1,0,0,0,565,566,5,207,0,0,566,568,1,0,0,
        0,567,517,1,0,0,0,567,532,1,0,0,0,567,539,1,0,0,0,567,547,1,0,0,
        0,567,554,1,0,0,0,568,79,1,0,0,0,569,570,5,59,0,0,570,571,5,18,0,
        0,571,576,3,82,41,0,572,573,5,205,0,0,573,575,3,82,41,0,574,572,
        1,0,0,0,575,578,1,0,0,0,576,574,1,0,0,0,576,577,1,0,0,0,577,581,
        1,0,0,0,578,576,1,0,0,0,579,580,5,167,0,0,580,582,5,114,0,0,581,
        579,1,0,0,0,581,582,1,0,0,0,582,81,1,0,0,0,583,587,3,52,26,0,584,
        587,5,230,0,0,585,587,3,38,19,0,586,583,1,0,0,0,586,584,1,0,0,0,
        586,585,1,0,0,0,587,589,1,0,0,0,588,590,7,17,0,0,589,588,1,0,0,0,
        589,590,1,0,0,0,590,83,1,0,0,0,591,592,5,60,0,0,592,593,3,64,32,
        0,593,85,1,0,0,0,594,595,5,156,0,0,595,596,3,94,47,0,596,598,5,208,
        0,0,597,599,3,92,46,0,598,597,1,0,0,0,598,599,1,0,0,0,599,600,1,
        0,0,0,600,601,5,207,0,0,601,615,1,0,0,0,602,603,5,61,0,0,603,604,
        3,94,47,0,604,605,5,208,0,0,605,606,3,92,46,0,606,607,5,207,0,0,
        607,615,1,0,0,0,608,609,5,56,0,0,609,610,3,94,47,0,610,611,5,208,
        0,0,611,612,3,92,46,0,612,613,5,207,0,0,613,615,1,0,0,0,614,594,
        1,0,0,0,614,602,1,0,0,0,614,608,1,0,0,0,615,87,1,0,0,0,616,621,3,
        86,43,0,617,618,5,205,0,0,618,620,3,86,43,0,619,617,1,0,0,0,620,
        623,1,0,0,0,621,619,1,0,0,0,621,622,1,0,0,0,622,89,1,0,0,0,623,621,
        1,0,0,0,624,625,5,236,0,0,625,91,1,0,0,0,626,631,3,90,45,0,627,628,
        5,205,0,0,628,630,3,90,45,0,629,627,1,0,0,0,630,633,1,0,0,0,631,
        629,1,0,0,0,631,632,1,0,0,0,632,93,1,0,0,0,633,631,1,0,0,0,634,643,
        7,18,0,0,635,641,5,55,0,0,636,642,5,70,0,0,637,638,5,97,0,0,638,
        642,5,18,0,0,639,640,5,59,0,0,640,642,5,18,0,0,641,636,1,0,0,0,641,
        637,1,0,0,0,641,639,1,0,0,0,642,644,1,0,0,0,643,635,1,0,0,0,643,
        644,1,0,0,0,644,95,1,0,0,0,645,646,5,66,0,0,646,647,3,12,6,0,647,
        97,1,0,0,0,648,649,5,96,0,0,649,653,3,64,32,0,650,651,5,157,0,0,
        651,653,3,48,24,0,652,648,1,0,0,0,652,650,1,0,0,0,653,99,1,0,0,0,
        654,655,5,76,0,0,655,658,3,106,53,0,656,657,5,94,0,0,657,659,3,102,
        51,0,658,656,1,0,0,0,658,659,1,0,0,0,659,666,1,0,0,0,660,661,5,94,
        0,0,661,662,3,102,51,0,662,663,5,76,0,0,663,664,3,106,53,0,664,666,
        1,0,0,0,665,654,1,0,0,0,665,660,1,0,0,0,666,101,1,0,0,0,667,668,
        5,230,0,0,668,103,1,0,0,0,669,670,5,94,0,0,670,671,3,102,51,0,671,
        105,1,0,0,0,672,673,5,230,0,0,673,107,1,0,0,0,674,675,5,97,0,0,675,
        676,5,18,0,0,676,681,3,110,55,0,677,678,5,205,0,0,678,680,3,110,
        55,0,679,677,1,0,0,0,680,683,1,0,0,0,681,679,1,0,0,0,681,682,1,0,
        0,0,682,109,1,0,0,0,683,681,1,0,0,0,684,692,3,82,41,0,685,687,7,
        17,0,0,686,685,1,0,0,0,686,687,1,0,0,0,687,693,1,0,0,0,688,689,5,
        93,0,0,689,691,7,19,0,0,690,688,1,0,0,0,690,691,1,0,0,0,691,693,
        1,0,0,0,692,686,1,0,0,0,692,690,1,0,0,0,693,699,1,0,0,0,694,695,
        3,82,41,0,695,696,5,157,0,0,696,697,7,20,0,0,697,699,1,0,0,0,698,
        684,1,0,0,0,698,694,1,0,0,0,699,111,1,0,0,0,700,701,5,99,0,0,701,
        702,5,208,0,0,702,703,3,116,58,0,703,704,5,207,0,0,704,113,1,0,0,
        0,705,706,5,236,0,0,706,115,1,0,0,0,707,712,3,114,57,0,708,709,5,
        205,0,0,709,711,3,114,57,0,710,708,1,0,0,0,711,714,1,0,0,0,712,710,
        1,0,0,0,712,713,1,0,0,0,713,117,1,0,0,0,714,712,1,0,0,0,715,717,
        5,89,0,0,716,715,1,0,0,0,716,717,1,0,0,0,717,745,1,0,0,0,718,721,
        5,67,0,0,719,722,3,138,69,0,720,722,3,66,33,0,721,719,1,0,0,0,721,
        720,1,0,0,0,722,746,1,0,0,0,723,724,7,11,0,0,724,727,3,134,67,0,
        725,726,5,47,0,0,726,728,3,134,67,0,727,725,1,0,0,0,727,728,1,0,
        0,0,728,746,1,0,0,0,729,732,5,109,0,0,730,733,3,38,19,0,731,733,
        3,164,82,0,732,730,1,0,0,0,732,731,1,0,0,0,733,746,1,0,0,0,734,736,
        5,11,0,0,735,737,5,135,0,0,736,735,1,0,0,0,736,737,1,0,0,0,737,740,
        1,0,0,0,738,741,3,38,19,0,739,741,3,164,82,0,740,738,1,0,0,0,740,
        739,1,0,0,0,741,742,1,0,0,0,742,743,5,193,0,0,743,744,3,122,61,0,
        744,746,1,0,0,0,745,718,1,0,0,0,745,723,1,0,0,0,745,729,1,0,0,0,
        745,734,1,0,0,0,746,119,1,0,0,0,747,748,5,125,0,0,748,751,7,11,0,
        0,749,752,3,38,19,0,750,752,3,164,82,0,751,749,1,0,0,0,751,750,1,
        0,0,0,752,121,1,0,0,0,753,756,3,38,19,0,754,756,3,164,82,0,755,753,
        1,0,0,0,755,754,1,0,0,0,756,759,1,0,0,0,757,760,3,118,59,0,758,760,
        3,120,60,0,759,757,1,0,0,0,759,758,1,0,0,0,759,760,1,0,0,0,760,123,
        1,0,0,0,761,762,3,132,66,0,762,763,5,202,0,0,763,125,1,0,0,0,764,
        765,5,236,0,0,765,127,1,0,0,0,766,771,3,54,27,0,767,768,5,205,0,
        0,768,770,3,54,27,0,769,767,1,0,0,0,770,773,1,0,0,0,771,769,1,0,
        0,0,771,772,1,0,0,0,772,796,1,0,0,0,773,771,1,0,0,0,774,784,5,206,
        0,0,775,776,5,205,0,0,776,781,3,54,27,0,777,778,5,205,0,0,778,780,
        3,54,27,0,779,777,1,0,0,0,780,783,1,0,0,0,781,779,1,0,0,0,781,782,
        1,0,0,0,782,785,1,0,0,0,783,781,1,0,0,0,784,775,1,0,0,0,784,785,
        1,0,0,0,785,796,1,0,0,0,786,787,5,96,0,0,787,792,3,130,65,0,788,
        789,5,205,0,0,789,791,3,54,27,0,790,788,1,0,0,0,791,794,1,0,0,0,
        792,790,1,0,0,0,792,793,1,0,0,0,793,796,1,0,0,0,794,792,1,0,0,0,
        795,766,1,0,0,0,795,774,1,0,0,0,795,786,1,0,0,0,796,129,1,0,0,0,
        797,802,3,54,27,0,798,799,5,205,0,0,799,801,3,54,27,0,800,798,1,
        0,0,0,801,804,1,0,0,0,802,800,1,0,0,0,802,803,1,0,0,0,803,131,1,
        0,0,0,804,802,1,0,0,0,805,813,3,34,17,0,806,808,5,152,0,0,807,809,
        5,3,0,0,808,807,1,0,0,0,808,809,1,0,0,0,809,810,1,0,0,0,810,812,
        3,34,17,0,811,806,1,0,0,0,812,815,1,0,0,0,813,811,1,0,0,0,813,814,
        1,0,0,0,814,133,1,0,0,0,815,813,1,0,0,0,816,828,3,32,16,0,817,828,
        3,66,33,0,818,828,3,52,26,0,819,828,3,78,39,0,820,821,5,116,0,0,
        821,828,3,66,33,0,822,828,3,138,69,0,823,824,5,48,0,0,824,828,3,
        138,69,0,825,828,3,96,48,0,826,828,3,42,21,0,827,816,1,0,0,0,827,
        817,1,0,0,0,827,818,1,0,0,0,827,819,1,0,0,0,827,820,1,0,0,0,827,
        822,1,0,0,0,827,823,1,0,0,0,827,825,1,0,0,0,827,826,1,0,0,0,828,
        135,1,0,0,0,829,830,5,210,0,0,830,833,5,230,0,0,831,832,5,203,0,
        0,832,834,5,230,0,0,833,831,1,0,0,0,833,834,1,0,0,0,834,835,1,0,
        0,0,835,837,5,209,0,0,836,829,1,0,0,0,837,838,1,0,0,0,838,836,1,
        0,0,0,838,839,1,0,0,0,839,137,1,0,0,0,840,841,5,208,0,0,841,842,
        3,132,66,0,842,843,5,207,0,0,843,139,1,0,0,0,844,846,3,156,78,0,
        845,847,3,112,56,0,846,845,1,0,0,0,846,847,1,0,0,0,847,849,1,0,0,
        0,848,850,3,36,18,0,849,848,1,0,0,0,849,850,1,0,0,0,850,852,1,0,
        0,0,851,853,3,88,44,0,852,851,1,0,0,0,852,853,1,0,0,0,853,871,1,
        0,0,0,854,855,3,138,69,0,855,856,3,36,18,0,856,871,1,0,0,0,857,858,
        5,208,0,0,858,859,3,154,77,0,859,860,5,207,0,0,860,871,1,0,0,0,861,
        862,5,95,0,0,862,863,3,152,76,0,863,864,5,73,0,0,864,865,5,98,0,
        0,865,866,5,70,0,0,866,867,3,152,76,0,867,868,5,96,0,0,868,869,3,
        64,32,0,869,871,1,0,0,0,870,844,1,0,0,0,870,854,1,0,0,0,870,857,
        1,0,0,0,870,861,1,0,0,0,871,141,1,0,0,0,872,873,5,236,0,0,873,143,
        1,0,0,0,874,885,3,146,73,0,875,877,7,21,0,0,876,875,1,0,0,0,876,
        877,1,0,0,0,877,878,1,0,0,0,878,879,5,70,0,0,879,881,3,140,70,0,
        880,882,3,98,49,0,881,880,1,0,0,0,881,882,1,0,0,0,882,884,1,0,0,
        0,883,876,1,0,0,0,884,887,1,0,0,0,885,883,1,0,0,0,885,886,1,0,0,
        0,886,145,1,0,0,0,887,885,1,0,0,0,888,895,3,148,74,0,889,890,5,132,
        0,0,890,893,3,140,70,0,891,892,5,96,0,0,892,894,3,64,32,0,893,891,
        1,0,0,0,893,894,1,0,0,0,894,896,1,0,0,0,895,889,1,0,0,0,895,896,
        1,0,0,0,896,147,1,0,0,0,897,908,3,150,75,0,898,900,7,22,0,0,899,
        901,5,98,0,0,900,899,1,0,0,0,900,901,1,0,0,0,901,902,1,0,0,0,902,
        903,5,70,0,0,903,904,3,150,75,0,904,905,3,98,49,0,905,907,1,0,0,
        0,906,898,1,0,0,0,907,910,1,0,0,0,908,906,1,0,0,0,908,909,1,0,0,
        0,909,149,1,0,0,0,910,908,1,0,0,0,911,921,3,140,70,0,912,917,5,88,
        0,0,913,915,7,22,0,0,914,916,5,98,0,0,915,914,1,0,0,0,915,916,1,
        0,0,0,916,918,1,0,0,0,917,913,1,0,0,0,917,918,1,0,0,0,918,919,1,
        0,0,0,919,920,5,70,0,0,920,922,3,140,70,0,921,912,1,0,0,0,921,922,
        1,0,0,0,922,151,1,0,0,0,923,933,3,144,72,0,924,925,5,208,0,0,925,
        926,3,158,79,0,926,927,5,207,0,0,927,928,1,0,0,0,928,930,3,36,18,
        0,929,931,3,48,24,0,930,929,1,0,0,0,930,931,1,0,0,0,931,933,1,0,
        0,0,932,923,1,0,0,0,932,924,1,0,0,0,933,153,1,0,0,0,934,939,3,152,
        76,0,935,936,5,205,0,0,936,938,3,152,76,0,937,935,1,0,0,0,938,941,
        1,0,0,0,939,937,1,0,0,0,939,940,1,0,0,0,940,155,1,0,0,0,941,939,
        1,0,0,0,942,943,3,126,63,0,943,944,5,204,0,0,944,946,1,0,0,0,945,
        942,1,0,0,0,945,946,1,0,0,0,946,947,1,0,0,0,947,948,3,142,71,0,948,
        157,1,0,0,0,949,950,5,161,0,0,950,955,3,66,33,0,951,952,5,205,0,
        0,952,954,3,66,33,0,953,951,1,0,0,0,954,957,1,0,0,0,955,953,1,0,
        0,0,955,956,1,0,0,0,956,159,1,0,0,0,957,955,1,0,0,0,958,959,5,166,
        0,0,959,960,3,64,32,0,960,161,1,0,0,0,961,962,7,23,0,0,962,163,1,
        0,0,0,963,966,3,198,99,0,964,966,3,166,83,0,965,963,1,0,0,0,965,
        964,1,0,0,0,966,1038,1,0,0,0,967,970,3,166,83,0,968,970,3,134,67,
        0,969,967,1,0,0,0,969,968,1,0,0,0,970,971,1,0,0,0,971,972,3,162,
        81,0,972,973,3,198,99,0,973,1038,1,0,0,0,974,975,3,198,99,0,975,
        976,5,196,0,0,976,977,3,198,99,0,977,1038,1,0,0,0,978,979,3,198,
        99,0,979,980,3,162,81,0,980,981,3,198,99,0,981,1038,1,0,0,0,982,
        989,3,170,85,0,983,984,3,134,67,0,984,985,5,226,0,0,985,986,3,170,
        85,0,986,989,1,0,0,0,987,989,3,134,67,0,988,982,1,0,0,0,988,983,
        1,0,0,0,988,987,1,0,0,0,989,1038,1,0,0,0,990,994,3,166,83,0,991,
        994,3,168,84,0,992,994,3,134,67,0,993,990,1,0,0,0,993,991,1,0,0,
        0,993,992,1,0,0,0,994,995,1,0,0,0,995,999,5,227,0,0,996,1000,3,166,
        83,0,997,1000,3,168,84,0,998,1000,3,134,67,0,999,996,1,0,0,0,999,
        997,1,0,0,0,999,998,1,0,0,0,1000,1038,1,0,0,0,1001,1006,5,228,0,
        0,1002,1007,3,168,84,0,1003,1007,3,174,87,0,1004,1007,3,176,88,0,
        1005,1007,3,134,67,0,1006,1002,1,0,0,0,1006,1003,1,0,0,0,1006,1004,
        1,0,0,0,1006,1005,1,0,0,0,1007,1038,1,0,0,0,1008,1012,5,229,0,0,
        1009,1013,3,168,84,0,1010,1013,3,172,86,0,1011,1013,3,134,67,0,1012,
        1009,1,0,0,0,1012,1010,1,0,0,0,1012,1011,1,0,0,0,1013,1038,1,0,0,
        0,1014,1018,5,212,0,0,1015,1019,3,170,85,0,1016,1019,3,178,89,0,
        1017,1019,3,134,67,0,1018,1015,1,0,0,0,1018,1016,1,0,0,0,1018,1017,
        1,0,0,0,1019,1038,1,0,0,0,1020,1028,3,166,83,0,1021,1028,3,168,84,
        0,1022,1028,3,170,85,0,1023,1028,3,172,86,0,1024,1028,3,176,88,0,
        1025,1028,3,178,89,0,1026,1028,3,134,67,0,1027,1020,1,0,0,0,1027,
        1021,1,0,0,0,1027,1022,1,0,0,0,1027,1023,1,0,0,0,1027,1024,1,0,0,
        0,1027,1025,1,0,0,0,1027,1026,1,0,0,0,1028,1033,1,0,0,0,1029,1031,
        7,2,0,0,1030,1029,1,0,0,0,1030,1031,1,0,0,0,1031,1032,1,0,0,0,1032,
        1034,3,180,90,0,1033,1030,1,0,0,0,1034,1035,1,0,0,0,1035,1033,1,
        0,0,0,1035,1036,1,0,0,0,1036,1038,1,0,0,0,1037,965,1,0,0,0,1037,
        969,1,0,0,0,1037,974,1,0,0,0,1037,978,1,0,0,0,1037,988,1,0,0,0,1037,
        993,1,0,0,0,1037,1001,1,0,0,0,1037,1008,1,0,0,0,1037,1014,1,0,0,
        0,1037,1027,1,0,0,0,1038,165,1,0,0,0,1039,1040,5,172,0,0,1040,1041,
        5,208,0,0,1041,1042,3,38,19,0,1042,1043,5,205,0,0,1043,1044,3,38,
        19,0,1044,1045,5,207,0,0,1045,167,1,0,0,0,1046,1047,5,173,0,0,1047,
        1048,5,208,0,0,1048,1049,3,166,83,0,1049,1050,5,205,0,0,1050,1051,
        3,38,19,0,1051,1052,5,207,0,0,1052,169,1,0,0,0,1053,1054,5,174,0,
        0,1054,1055,5,208,0,0,1055,1056,3,166,83,0,1056,1057,5,205,0,0,1057,
        1058,3,166,83,0,1058,1059,5,207,0,0,1059,1068,1,0,0,0,1060,1061,
        5,174,0,0,1061,1062,5,208,0,0,1062,1063,3,180,90,0,1063,1064,5,205,
        0,0,1064,1065,3,38,19,0,1065,1066,5,207,0,0,1066,1068,1,0,0,0,1067,
        1053,1,0,0,0,1067,1060,1,0,0,0,1068,171,1,0,0,0,1069,1070,5,175,
        0,0,1070,1071,5,208,0,0,1071,1072,3,166,83,0,1072,1073,5,205,0,0,
        1073,1074,3,38,19,0,1074,1075,5,205,0,0,1075,1076,3,38,19,0,1076,
        1077,5,205,0,0,1077,1078,3,38,19,0,1078,1079,5,207,0,0,1079,173,
        1,0,0,0,1080,1081,5,178,0,0,1081,1082,5,208,0,0,1082,1083,3,166,
        83,0,1083,1084,5,205,0,0,1084,1085,3,166,83,0,1085,1086,5,207,0,
        0,1086,175,1,0,0,0,1087,1088,5,176,0,0,1088,1099,5,235,0,0,1089,
        1090,5,176,0,0,1090,1091,5,208,0,0,1091,1092,3,52,26,0,1092,1093,
        5,207,0,0,1093,1099,1,0,0,0,1094,1095,5,176,0,0,1095,1096,5,208,
        0,0,1096,1097,5,235,0,0,1097,1099,5,207,0,0,1098,1087,1,0,0,0,1098,
        1089,1,0,0,0,1098,1094,1,0,0,0,1099,177,1,0,0,0,1100,1101,5,177,
        0,0,1101,1108,5,235,0,0,1102,1103,5,177,0,0,1103,1104,5,208,0,0,
        1104,1105,3,52,26,0,1105,1106,5,207,0,0,1106,1108,1,0,0,0,1107,1100,
        1,0,0,0,1107,1102,1,0,0,0,1108,179,1,0,0,0,1109,1110,5,179,0,0,1110,
        1111,5,208,0,0,1111,1112,3,38,19,0,1112,1113,5,205,0,0,1113,1114,
        3,38,19,0,1114,1115,5,205,0,0,1115,1116,3,38,19,0,1116,1117,5,205,
        0,0,1117,1118,5,234,0,0,1118,1119,5,207,0,0,1119,181,1,0,0,0,1120,
        1121,5,182,0,0,1121,1122,5,208,0,0,1122,1123,3,166,83,0,1123,1124,
        5,207,0,0,1124,183,1,0,0,0,1125,1126,5,186,0,0,1126,1127,5,208,0,
        0,1127,1128,3,166,83,0,1128,1129,5,207,0,0,1129,185,1,0,0,0,1130,
        1131,5,183,0,0,1131,1132,5,208,0,0,1132,1133,3,174,87,0,1133,1134,
        5,207,0,0,1134,187,1,0,0,0,1135,1136,5,187,0,0,1136,1137,5,208,0,
        0,1137,1138,3,174,87,0,1138,1139,5,207,0,0,1139,189,1,0,0,0,1140,
        1141,5,184,0,0,1141,1142,5,208,0,0,1142,1143,3,168,84,0,1143,1144,
        5,207,0,0,1144,191,1,0,0,0,1145,1146,5,188,0,0,1146,1147,5,208,0,
        0,1147,1148,3,168,84,0,1148,1149,5,207,0,0,1149,193,1,0,0,0,1150,
        1151,5,185,0,0,1151,1152,5,208,0,0,1152,1153,3,176,88,0,1153,1154,
        5,207,0,0,1154,195,1,0,0,0,1155,1156,5,189,0,0,1156,1157,5,208,0,
        0,1157,1158,3,176,88,0,1158,1159,5,207,0,0,1159,197,1,0,0,0,1160,
        1168,3,168,84,0,1161,1168,3,170,85,0,1162,1168,3,172,86,0,1163,1168,
        3,174,87,0,1164,1168,3,176,88,0,1165,1168,3,178,89,0,1166,1168,3,
        134,67,0,1167,1160,1,0,0,0,1167,1161,1,0,0,0,1167,1162,1,0,0,0,1167,
        1163,1,0,0,0,1167,1164,1,0,0,0,1167,1165,1,0,0,0,1167,1166,1,0,0,
        0,1168,199,1,0,0,0,136,206,212,224,227,234,243,272,280,284,290,293,
        296,299,301,304,307,310,314,317,320,327,332,336,339,343,348,352,
        363,373,381,391,396,400,409,413,416,418,428,435,439,446,452,454,
        457,459,466,475,483,488,495,503,507,511,515,524,527,530,557,561,
        563,567,576,581,586,589,598,614,621,631,641,643,652,658,665,681,
        686,690,692,698,712,716,721,727,732,736,740,745,751,755,759,771,
        781,784,792,795,802,808,813,827,833,838,846,849,852,870,876,881,
        885,893,895,900,908,915,917,921,930,932,939,945,955,965,969,988,
        993,999,1006,1012,1018,1027,1030,1035,1037,1067,1098,1107,1167
    ]

class PostgreSQLParser ( Parser ):

    grammarFileName = "PostgreSQLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'@'", "'!!'", "<INVALID>", 
                     "<INVALID>", "'<='", "'>='", "'<<'", "'>>'", "';'", 
                     "':'", "'.'", "','", "'*'", "')'", "'('", "']'", "'['", 
                     "'+'", "'-'", "'~'", "'|'", "'&'", "'^'", "'>'", "'<'", 
                     "'<@'", "'@>'", "'!@'", "'!<@'", "'!~'", "'!@>'", "'!&&'", 
                     "'#'", "'<->'", "'@-@'", "'@@'" ]

    symbolicNames = [ "<INVALID>", "ABS", "ACOS", "ALL", "ANY", "ASC", "ASIN", 
                      "AS_SYM", "ATAN", "ATAN2", "AVG", "BETWEEN", "BIGINT", 
                      "BINARY", "BIT_AND", "BIT_LENGTH", "BIT_OR", "BOOLEAN_SYM", 
                      "BY_SYM", "CASE_SYM", "CAST_SYM", "CBRT", "CEIL", 
                      "CEILING", "CHAR", "CHR", "CHAR_LENGTH", "CONCAT", 
                      "CONCAT_WS", "CONVERT_SYM", "COS", "COT", "COUNT", 
                      "CROSS", "DATE_PART", "DATE_SYM", "DATETIME", "DAY_SYM", 
                      "DECIMAL_SYM", "DEGREES", "DESC", "DIV", "DISTINCT", 
                      "DOUBLE_PRECISION_SYM", "ELSE_SYM", "ENCODE", "END_SYM", 
                      "ESCAPE_SYM", "EXISTS", "EXP", "EXPANSION_SYM", "FALSE_SYM", 
                      "FIRST_SYM", "FLOAT", "FLOOR", "FOR_SYM", "FORCE_SYM", 
                      "FROM", "GAIA_HEALPIX_INDEX", "GROUP_SYM", "HAVING", 
                      "IGNORE_SYM", "ILIKE_SYM", "INDEX_SYM", "INNER_SYM", 
                      "INTEGER_SYM", "INTERVAL_SYM", "IN_SYM", "ISNULL", 
                      "IS_SYM", "JOIN_SYM", "KEY_SYM", "LAST_SYM", "LEFT", 
                      "LENGTH", "LIKE_SYM", "LIMIT", "LN", "LOG", "LOWER", 
                      "LPAD", "LTRIM", "MAX_SYM", "MD5", "MINUTE", "MIN_SYM", 
                      "MOD", "MODE_SYM", "NATURAL", "NOT_SYM", "NOTNULL", 
                      "NOW", "NULL_SYM", "NULLS_SYM", "OFFSET_SYM", "OJ_SYM", 
                      "ON", "ORDER_SYM", "OUTER", "PARTITION_SYM", "PDIST", 
                      "PI", "POSITION_SYM", "POW", "POWER", "QUERY_SYM", 
                      "RADIANS", "RANDOM", "REAL", "REGEXP", "REPEAT", "REPLACE", 
                      "REVERSE", "RIGHT", "ROLLUP_SYM", "ROUND", "ROW_SYM", 
                      "RPAD", "RTRIM", "SECOND", "SELECT", "SHARE_SYM", 
                      "SIGN", "SIGNED_SYM", "SIN", "SOUNDS_SYM", "SQUARE_DEGREES", 
                      "SQRT", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "STERADIANS", 
                      "STRAIGHT_JOIN", "SUBSTRING", "SUM", "SYMMETRIC", 
                      "TAN", "THEN_SYM", "TIME_SYM", "TIMESTAMP", "TRUE_SYM", 
                      "TRUNCATE", "UDF_0", "UDF_1", "UDF_2", "UDF_3", "UDF_4", 
                      "UDF_5", "UDF_6", "UDF_7", "UDF_8", "UDF_9", "UNION_SYM", 
                      "UNSIGNED_SYM", "UPDATE", "UPPER", "USE_SYM", "USING_SYM", 
                      "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", "VALUES", 
                      "VARIANCE", "VAR_POP", "VAR_SAMP", "WHEN_SYM", "WHERE", 
                      "WITH", "YEAR", "ASCII_SYM", "LATIN1", "UTF8", "SPOINT", 
                      "SCIRCLE", "SLINE", "SELLIPSE", "SPOLY", "SPATH", 
                      "SBOX", "STRANS", "AREA", "ARRAY_LENGTH", "SPOINT_TO_ARRAY", 
                      "SBOX_TO_ARRAY", "SCIRCLE_TO_ARRAY", "SPOLY_TO_ARRAY", 
                      "SPOINT_TO_ARRAY_DEG", "SBOX_TO_ARRAY_DEG", "SCIRCLE_TO_ARRAY_DEG", 
                      "SPOLY_TO_ARRAY_DEG", "DIVIDE", "MOD_SYM", "OR_SYM", 
                      "AND_SYM", "ABS_VAL_OR_SCONTAINS", "DFACTORIAL", "EQ", 
                      "NOT_EQ", "LET", "GET", "SHIFT_LEFT", "SHIFT_RIGHT", 
                      "SEMI", "COLON", "DOT", "COMMA", "ASTERISK", "RPAREN", 
                      "LPAREN", "RBRACK", "LBRACK", "PLUS", "MINUS", "NEGATION", 
                      "VERTBAR", "BITAND", "POWER_OP", "GTH", "LTH", "SCONTAINS2", 
                      "SLEFTCONTAINS2", "SNOTCONTAINS", "SNOTCONTAINS2", 
                      "SLEFTNOTCONTAINS", "SLEFTNOTCONTAINS2", "SNOTOVERLAP", 
                      "SCROSS", "SDISTANCE", "SLENGTH", "SCENTER", "INTEGER_NUM", 
                      "HEX_DIGIT", "BIT_NUM", "REAL_NUMBER", "TRANS", "TEXT_STRING", 
                      "ID", "COMMENT", "WS" ]

    RULE_relational_op = 0
    RULE_cast_data_type = 1
    RULE_bit_literal = 2
    RULE_boolean_literal = 3
    RULE_hex_literal = 4
    RULE_number_literal = 5
    RULE_string_literal = 6
    RULE_char_functions = 7
    RULE_group_functions = 8
    RULE_number_functions = 9
    RULE_other_functions = 10
    RULE_time_functions = 11
    RULE_array_functions = 12
    RULE_custom_functions = 13
    RULE_pg_sphere_functions = 14
    RULE_functionList = 15
    RULE_literal_value = 16
    RULE_select_expression = 17
    RULE_alias = 18
    RULE_bit_expr = 19
    RULE_bool_primary = 20
    RULE_case_when_statement = 21
    RULE_case_when_statement1 = 22
    RULE_case_when_statement2 = 23
    RULE_column_list = 24
    RULE_column_name = 25
    RULE_column_spec = 26
    RULE_displayed_column = 27
    RULE_displayed_column_arr = 28
    RULE_exp_factor1 = 29
    RULE_exp_factor2 = 30
    RULE_exp_factor3 = 31
    RULE_expression = 32
    RULE_expression_list = 33
    RULE_factor1 = 34
    RULE_factor2 = 35
    RULE_factor3 = 36
    RULE_factor4 = 37
    RULE_factor5 = 38
    RULE_function_call = 39
    RULE_groupby_clause = 40
    RULE_groupby_item = 41
    RULE_having_clause = 42
    RULE_index_hint = 43
    RULE_index_hint_list = 44
    RULE_index_name = 45
    RULE_index_list = 46
    RULE_index_options = 47
    RULE_interval_expr = 48
    RULE_join_condition = 49
    RULE_limit_clause = 50
    RULE_offset = 51
    RULE_offset_clause = 52
    RULE_row_count = 53
    RULE_orderby_clause = 54
    RULE_orderby_item = 55
    RULE_partition_clause = 56
    RULE_partition_name = 57
    RULE_partition_names = 58
    RULE_bit_fac1 = 59
    RULE_bit_fac2 = 60
    RULE_predicate = 61
    RULE_query = 62
    RULE_schema_name = 63
    RULE_select_list = 64
    RULE_subselect_list = 65
    RULE_select_statement = 66
    RULE_simple_expr = 67
    RULE_slice_spec = 68
    RULE_subquery = 69
    RULE_table_atom = 70
    RULE_table_name = 71
    RULE_table_factor1 = 72
    RULE_table_factor2 = 73
    RULE_table_factor3 = 74
    RULE_table_factor4 = 75
    RULE_table_reference = 76
    RULE_table_references = 77
    RULE_table_spec = 78
    RULE_values_list = 79
    RULE_where_clause = 80
    RULE_pg_sphere_op = 81
    RULE_sbit_expr = 82
    RULE_spoint = 83
    RULE_scircle = 84
    RULE_sline = 85
    RULE_sellipse = 86
    RULE_sbox = 87
    RULE_spoly = 88
    RULE_spath = 89
    RULE_strans = 90
    RULE_spoint_to_array = 91
    RULE_spoint_to_array_deg = 92
    RULE_sbox_to_array = 93
    RULE_sbox_to_array_deg = 94
    RULE_scircle_to_array = 95
    RULE_scircle_to_array_deg = 96
    RULE_spoly_to_array = 97
    RULE_spoly_to_array_deg = 98
    RULE_pg_sphere_object = 99

    ruleNames =  [ "relational_op", "cast_data_type", "bit_literal", "boolean_literal", 
                   "hex_literal", "number_literal", "string_literal", "char_functions", 
                   "group_functions", "number_functions", "other_functions", 
                   "time_functions", "array_functions", "custom_functions", 
                   "pg_sphere_functions", "functionList", "literal_value", 
                   "select_expression", "alias", "bit_expr", "bool_primary", 
                   "case_when_statement", "case_when_statement1", "case_when_statement2", 
                   "column_list", "column_name", "column_spec", "displayed_column", 
                   "displayed_column_arr", "exp_factor1", "exp_factor2", 
                   "exp_factor3", "expression", "expression_list", "factor1", 
                   "factor2", "factor3", "factor4", "factor5", "function_call", 
                   "groupby_clause", "groupby_item", "having_clause", "index_hint", 
                   "index_hint_list", "index_name", "index_list", "index_options", 
                   "interval_expr", "join_condition", "limit_clause", "offset", 
                   "offset_clause", "row_count", "orderby_clause", "orderby_item", 
                   "partition_clause", "partition_name", "partition_names", 
                   "bit_fac1", "bit_fac2", "predicate", "query", "schema_name", 
                   "select_list", "subselect_list", "select_statement", 
                   "simple_expr", "slice_spec", "subquery", "table_atom", 
                   "table_name", "table_factor1", "table_factor2", "table_factor3", 
                   "table_factor4", "table_reference", "table_references", 
                   "table_spec", "values_list", "where_clause", "pg_sphere_op", 
                   "sbit_expr", "spoint", "scircle", "sline", "sellipse", 
                   "sbox", "spoly", "spath", "strans", "spoint_to_array", 
                   "spoint_to_array_deg", "sbox_to_array", "sbox_to_array_deg", 
                   "scircle_to_array", "scircle_to_array_deg", "spoly_to_array", 
                   "spoly_to_array_deg", "pg_sphere_object" ]

    EOF = Token.EOF
    ABS=1
    ACOS=2
    ALL=3
    ANY=4
    ASC=5
    ASIN=6
    AS_SYM=7
    ATAN=8
    ATAN2=9
    AVG=10
    BETWEEN=11
    BIGINT=12
    BINARY=13
    BIT_AND=14
    BIT_LENGTH=15
    BIT_OR=16
    BOOLEAN_SYM=17
    BY_SYM=18
    CASE_SYM=19
    CAST_SYM=20
    CBRT=21
    CEIL=22
    CEILING=23
    CHAR=24
    CHR=25
    CHAR_LENGTH=26
    CONCAT=27
    CONCAT_WS=28
    CONVERT_SYM=29
    COS=30
    COT=31
    COUNT=32
    CROSS=33
    DATE_PART=34
    DATE_SYM=35
    DATETIME=36
    DAY_SYM=37
    DECIMAL_SYM=38
    DEGREES=39
    DESC=40
    DIV=41
    DISTINCT=42
    DOUBLE_PRECISION_SYM=43
    ELSE_SYM=44
    ENCODE=45
    END_SYM=46
    ESCAPE_SYM=47
    EXISTS=48
    EXP=49
    EXPANSION_SYM=50
    FALSE_SYM=51
    FIRST_SYM=52
    FLOAT=53
    FLOOR=54
    FOR_SYM=55
    FORCE_SYM=56
    FROM=57
    GAIA_HEALPIX_INDEX=58
    GROUP_SYM=59
    HAVING=60
    IGNORE_SYM=61
    ILIKE_SYM=62
    INDEX_SYM=63
    INNER_SYM=64
    INTEGER_SYM=65
    INTERVAL_SYM=66
    IN_SYM=67
    ISNULL=68
    IS_SYM=69
    JOIN_SYM=70
    KEY_SYM=71
    LAST_SYM=72
    LEFT=73
    LENGTH=74
    LIKE_SYM=75
    LIMIT=76
    LN=77
    LOG=78
    LOWER=79
    LPAD=80
    LTRIM=81
    MAX_SYM=82
    MD5=83
    MINUTE=84
    MIN_SYM=85
    MOD=86
    MODE_SYM=87
    NATURAL=88
    NOT_SYM=89
    NOTNULL=90
    NOW=91
    NULL_SYM=92
    NULLS_SYM=93
    OFFSET_SYM=94
    OJ_SYM=95
    ON=96
    ORDER_SYM=97
    OUTER=98
    PARTITION_SYM=99
    PDIST=100
    PI=101
    POSITION_SYM=102
    POW=103
    POWER=104
    QUERY_SYM=105
    RADIANS=106
    RANDOM=107
    REAL=108
    REGEXP=109
    REPEAT=110
    REPLACE=111
    REVERSE=112
    RIGHT=113
    ROLLUP_SYM=114
    ROUND=115
    ROW_SYM=116
    RPAD=117
    RTRIM=118
    SECOND=119
    SELECT=120
    SHARE_SYM=121
    SIGN=122
    SIGNED_SYM=123
    SIN=124
    SOUNDS_SYM=125
    SQUARE_DEGREES=126
    SQRT=127
    STDDEV=128
    STDDEV_POP=129
    STDDEV_SAMP=130
    STERADIANS=131
    STRAIGHT_JOIN=132
    SUBSTRING=133
    SUM=134
    SYMMETRIC=135
    TAN=136
    THEN_SYM=137
    TIME_SYM=138
    TIMESTAMP=139
    TRUE_SYM=140
    TRUNCATE=141
    UDF_0=142
    UDF_1=143
    UDF_2=144
    UDF_3=145
    UDF_4=146
    UDF_5=147
    UDF_6=148
    UDF_7=149
    UDF_8=150
    UDF_9=151
    UNION_SYM=152
    UNSIGNED_SYM=153
    UPDATE=154
    UPPER=155
    USE_SYM=156
    USING_SYM=157
    UTC_DATE=158
    UTC_TIME=159
    UTC_TIMESTAMP=160
    VALUES=161
    VARIANCE=162
    VAR_POP=163
    VAR_SAMP=164
    WHEN_SYM=165
    WHERE=166
    WITH=167
    YEAR=168
    ASCII_SYM=169
    LATIN1=170
    UTF8=171
    SPOINT=172
    SCIRCLE=173
    SLINE=174
    SELLIPSE=175
    SPOLY=176
    SPATH=177
    SBOX=178
    STRANS=179
    AREA=180
    ARRAY_LENGTH=181
    SPOINT_TO_ARRAY=182
    SBOX_TO_ARRAY=183
    SCIRCLE_TO_ARRAY=184
    SPOLY_TO_ARRAY=185
    SPOINT_TO_ARRAY_DEG=186
    SBOX_TO_ARRAY_DEG=187
    SCIRCLE_TO_ARRAY_DEG=188
    SPOLY_TO_ARRAY_DEG=189
    DIVIDE=190
    MOD_SYM=191
    OR_SYM=192
    AND_SYM=193
    ABS_VAL_OR_SCONTAINS=194
    DFACTORIAL=195
    EQ=196
    NOT_EQ=197
    LET=198
    GET=199
    SHIFT_LEFT=200
    SHIFT_RIGHT=201
    SEMI=202
    COLON=203
    DOT=204
    COMMA=205
    ASTERISK=206
    RPAREN=207
    LPAREN=208
    RBRACK=209
    LBRACK=210
    PLUS=211
    MINUS=212
    NEGATION=213
    VERTBAR=214
    BITAND=215
    POWER_OP=216
    GTH=217
    LTH=218
    SCONTAINS2=219
    SLEFTCONTAINS2=220
    SNOTCONTAINS=221
    SNOTCONTAINS2=222
    SLEFTNOTCONTAINS=223
    SLEFTNOTCONTAINS2=224
    SNOTOVERLAP=225
    SCROSS=226
    SDISTANCE=227
    SLENGTH=228
    SCENTER=229
    INTEGER_NUM=230
    HEX_DIGIT=231
    BIT_NUM=232
    REAL_NUMBER=233
    TRANS=234
    TEXT_STRING=235
    ID=236
    COMMENT=237
    WS=238

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Relational_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(PostgreSQLParser.EQ, 0)

        def LTH(self):
            return self.getToken(PostgreSQLParser.LTH, 0)

        def GTH(self):
            return self.getToken(PostgreSQLParser.GTH, 0)

        def NOT_EQ(self):
            return self.getToken(PostgreSQLParser.NOT_EQ, 0)

        def LET(self):
            return self.getToken(PostgreSQLParser.LET, 0)

        def GET(self):
            return self.getToken(PostgreSQLParser.GET, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_relational_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_op" ):
                listener.enterRelational_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_op" ):
                listener.exitRelational_op(self)




    def relational_op(self):

        localctx = PostgreSQLParser.Relational_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_relational_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 200
            _la = self._input.LA(1)
            if not(((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & 6291471) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cast_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY(self):
            return self.getToken(PostgreSQLParser.BINARY, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def INTEGER_NUM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.INTEGER_NUM)
            else:
                return self.getToken(PostgreSQLParser.INTEGER_NUM, i)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def CHAR(self):
            return self.getToken(PostgreSQLParser.CHAR, 0)

        def DATE_SYM(self):
            return self.getToken(PostgreSQLParser.DATE_SYM, 0)

        def DATETIME(self):
            return self.getToken(PostgreSQLParser.DATETIME, 0)

        def TIME_SYM(self):
            return self.getToken(PostgreSQLParser.TIME_SYM, 0)

        def TIMESTAMP(self):
            return self.getToken(PostgreSQLParser.TIMESTAMP, 0)

        def INTERVAL_SYM(self):
            return self.getToken(PostgreSQLParser.INTERVAL_SYM, 0)

        def DECIMAL_SYM(self):
            return self.getToken(PostgreSQLParser.DECIMAL_SYM, 0)

        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def INTEGER_SYM(self):
            return self.getToken(PostgreSQLParser.INTEGER_SYM, 0)

        def BIGINT(self):
            return self.getToken(PostgreSQLParser.BIGINT, 0)

        def FLOAT(self):
            return self.getToken(PostgreSQLParser.FLOAT, 0)

        def REAL(self):
            return self.getToken(PostgreSQLParser.REAL, 0)

        def DOUBLE_PRECISION_SYM(self):
            return self.getToken(PostgreSQLParser.DOUBLE_PRECISION_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_cast_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_data_type" ):
                listener.enterCast_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_data_type" ):
                listener.exitCast_data_type(self)




    def cast_data_type(self):

        localctx = PostgreSQLParser.Cast_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_cast_data_type)
        self._la = 0 # Token type
        try:
            self.state = 234
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.enterOuterAlt(localctx, 1)
                self.state = 202
                self.match(PostgreSQLParser.BINARY)
                self.state = 206
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==208:
                    self.state = 203
                    self.match(PostgreSQLParser.LPAREN)
                    self.state = 204
                    self.match(PostgreSQLParser.INTEGER_NUM)
                    self.state = 205
                    self.match(PostgreSQLParser.RPAREN)


                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 2)
                self.state = 208
                self.match(PostgreSQLParser.CHAR)
                self.state = 212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==208:
                    self.state = 209
                    self.match(PostgreSQLParser.LPAREN)
                    self.state = 210
                    self.match(PostgreSQLParser.INTEGER_NUM)
                    self.state = 211
                    self.match(PostgreSQLParser.RPAREN)


                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 3)
                self.state = 214
                self.match(PostgreSQLParser.DATE_SYM)
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 4)
                self.state = 215
                self.match(PostgreSQLParser.DATETIME)
                pass
            elif token in [138]:
                self.enterOuterAlt(localctx, 5)
                self.state = 216
                self.match(PostgreSQLParser.TIME_SYM)
                pass
            elif token in [139]:
                self.enterOuterAlt(localctx, 6)
                self.state = 217
                self.match(PostgreSQLParser.TIMESTAMP)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 7)
                self.state = 218
                self.match(PostgreSQLParser.INTERVAL_SYM)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 8)
                self.state = 219
                self.match(PostgreSQLParser.DECIMAL_SYM)
                self.state = 227
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==208:
                    self.state = 220
                    self.match(PostgreSQLParser.LPAREN)
                    self.state = 221
                    self.match(PostgreSQLParser.INTEGER_NUM)
                    self.state = 224
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==205:
                        self.state = 222
                        self.match(PostgreSQLParser.COMMA)
                        self.state = 223
                        self.match(PostgreSQLParser.INTEGER_NUM)


                    self.state = 226
                    self.match(PostgreSQLParser.RPAREN)


                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 9)
                self.state = 229
                self.match(PostgreSQLParser.INTEGER_SYM)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 10)
                self.state = 230
                self.match(PostgreSQLParser.BIGINT)
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 11)
                self.state = 231
                self.match(PostgreSQLParser.FLOAT)
                pass
            elif token in [108]:
                self.enterOuterAlt(localctx, 12)
                self.state = 232
                self.match(PostgreSQLParser.REAL)
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 13)
                self.state = 233
                self.match(PostgreSQLParser.DOUBLE_PRECISION_SYM)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bit_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BIT_NUM(self):
            return self.getToken(PostgreSQLParser.BIT_NUM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bit_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_literal" ):
                listener.enterBit_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_literal" ):
                listener.exitBit_literal(self)




    def bit_literal(self):

        localctx = PostgreSQLParser.Bit_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_bit_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236
            self.match(PostgreSQLParser.BIT_NUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Boolean_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE_SYM(self):
            return self.getToken(PostgreSQLParser.TRUE_SYM, 0)

        def FALSE_SYM(self):
            return self.getToken(PostgreSQLParser.FALSE_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_boolean_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_literal" ):
                listener.enterBoolean_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_literal" ):
                listener.exitBoolean_literal(self)




    def boolean_literal(self):

        localctx = PostgreSQLParser.Boolean_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_boolean_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 238
            _la = self._input.LA(1)
            if not(_la==51 or _la==140):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hex_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_DIGIT(self):
            return self.getToken(PostgreSQLParser.HEX_DIGIT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_hex_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHex_literal" ):
                listener.enterHex_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHex_literal" ):
                listener.exitHex_literal(self)




    def hex_literal(self):

        localctx = PostgreSQLParser.Hex_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_hex_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 240
            self.match(PostgreSQLParser.HEX_DIGIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_NUM(self):
            return self.getToken(PostgreSQLParser.INTEGER_NUM, 0)

        def REAL_NUMBER(self):
            return self.getToken(PostgreSQLParser.REAL_NUMBER, 0)

        def PLUS(self):
            return self.getToken(PostgreSQLParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(PostgreSQLParser.MINUS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_number_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_literal" ):
                listener.enterNumber_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_literal" ):
                listener.exitNumber_literal(self)




    def number_literal(self):

        localctx = PostgreSQLParser.Number_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_number_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 243
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==211 or _la==212:
                self.state = 242
                _la = self._input.LA(1)
                if not(_la==211 or _la==212):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 245
            _la = self._input.LA(1)
            if not(_la==230 or _la==233):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TEXT_STRING(self):
            return self.getToken(PostgreSQLParser.TEXT_STRING, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_literal" ):
                listener.enterString_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_literal" ):
                listener.exitString_literal(self)




    def string_literal(self):

        localctx = PostgreSQLParser.String_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_string_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 247
            self.match(PostgreSQLParser.TEXT_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Char_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASCII_SYM(self):
            return self.getToken(PostgreSQLParser.ASCII_SYM, 0)

        def BIT_LENGTH(self):
            return self.getToken(PostgreSQLParser.BIT_LENGTH, 0)

        def CHAR_LENGTH(self):
            return self.getToken(PostgreSQLParser.CHAR_LENGTH, 0)

        def CHR(self):
            return self.getToken(PostgreSQLParser.CHR, 0)

        def CONCAT_WS(self):
            return self.getToken(PostgreSQLParser.CONCAT_WS, 0)

        def CONCAT(self):
            return self.getToken(PostgreSQLParser.CONCAT, 0)

        def LEFT(self):
            return self.getToken(PostgreSQLParser.LEFT, 0)

        def LENGTH(self):
            return self.getToken(PostgreSQLParser.LENGTH, 0)

        def LOWER(self):
            return self.getToken(PostgreSQLParser.LOWER, 0)

        def LPAD(self):
            return self.getToken(PostgreSQLParser.LPAD, 0)

        def LTRIM(self):
            return self.getToken(PostgreSQLParser.LTRIM, 0)

        def REPEAT(self):
            return self.getToken(PostgreSQLParser.REPEAT, 0)

        def REPLACE(self):
            return self.getToken(PostgreSQLParser.REPLACE, 0)

        def REVERSE(self):
            return self.getToken(PostgreSQLParser.REVERSE, 0)

        def RIGHT(self):
            return self.getToken(PostgreSQLParser.RIGHT, 0)

        def RPAD(self):
            return self.getToken(PostgreSQLParser.RPAD, 0)

        def RTRIM(self):
            return self.getToken(PostgreSQLParser.RTRIM, 0)

        def SUBSTRING(self):
            return self.getToken(PostgreSQLParser.SUBSTRING, 0)

        def UPPER(self):
            return self.getToken(PostgreSQLParser.UPPER, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_char_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChar_functions" ):
                listener.enterChar_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChar_functions" ):
                listener.exitChar_functions(self)




    def char_functions(self):

        localctx = PostgreSQLParser.Char_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_char_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 249
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 503349248) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 1152976342749282755) != 0) or _la==155 or _la==169):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AVG(self):
            return self.getToken(PostgreSQLParser.AVG, 0)

        def COUNT(self):
            return self.getToken(PostgreSQLParser.COUNT, 0)

        def MAX_SYM(self):
            return self.getToken(PostgreSQLParser.MAX_SYM, 0)

        def MIN_SYM(self):
            return self.getToken(PostgreSQLParser.MIN_SYM, 0)

        def SUM(self):
            return self.getToken(PostgreSQLParser.SUM, 0)

        def BIT_AND(self):
            return self.getToken(PostgreSQLParser.BIT_AND, 0)

        def BIT_OR(self):
            return self.getToken(PostgreSQLParser.BIT_OR, 0)

        def STDDEV(self):
            return self.getToken(PostgreSQLParser.STDDEV, 0)

        def STDDEV_POP(self):
            return self.getToken(PostgreSQLParser.STDDEV_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(PostgreSQLParser.STDDEV_SAMP, 0)

        def VAR_POP(self):
            return self.getToken(PostgreSQLParser.VAR_POP, 0)

        def VAR_SAMP(self):
            return self.getToken(PostgreSQLParser.VAR_SAMP, 0)

        def VARIANCE(self):
            return self.getToken(PostgreSQLParser.VARIANCE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_group_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_functions" ):
                listener.enterGroup_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_functions" ):
                listener.exitGroup_functions(self)




    def group_functions(self):

        localctx = PostgreSQLParser.Group_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_group_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 251
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4295050240) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & 4996180836614153) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABS(self):
            return self.getToken(PostgreSQLParser.ABS, 0)

        def ACOS(self):
            return self.getToken(PostgreSQLParser.ACOS, 0)

        def ASIN(self):
            return self.getToken(PostgreSQLParser.ASIN, 0)

        def ATAN2(self):
            return self.getToken(PostgreSQLParser.ATAN2, 0)

        def ATAN(self):
            return self.getToken(PostgreSQLParser.ATAN, 0)

        def CBRT(self):
            return self.getToken(PostgreSQLParser.CBRT, 0)

        def CEIL(self):
            return self.getToken(PostgreSQLParser.CEIL, 0)

        def CEILING(self):
            return self.getToken(PostgreSQLParser.CEILING, 0)

        def COS(self):
            return self.getToken(PostgreSQLParser.COS, 0)

        def COT(self):
            return self.getToken(PostgreSQLParser.COT, 0)

        def DEGREES(self):
            return self.getToken(PostgreSQLParser.DEGREES, 0)

        def DIV(self):
            return self.getToken(PostgreSQLParser.DIV, 0)

        def EXP(self):
            return self.getToken(PostgreSQLParser.EXP, 0)

        def FLOOR(self):
            return self.getToken(PostgreSQLParser.FLOOR, 0)

        def LN(self):
            return self.getToken(PostgreSQLParser.LN, 0)

        def LOG(self):
            return self.getToken(PostgreSQLParser.LOG, 0)

        def MOD(self):
            return self.getToken(PostgreSQLParser.MOD, 0)

        def PI(self):
            return self.getToken(PostgreSQLParser.PI, 0)

        def POW(self):
            return self.getToken(PostgreSQLParser.POW, 0)

        def POWER(self):
            return self.getToken(PostgreSQLParser.POWER, 0)

        def RADIANS(self):
            return self.getToken(PostgreSQLParser.RADIANS, 0)

        def RANDOM(self):
            return self.getToken(PostgreSQLParser.RANDOM, 0)

        def ROUND(self):
            return self.getToken(PostgreSQLParser.ROUND, 0)

        def SIGN(self):
            return self.getToken(PostgreSQLParser.SIGN, 0)

        def SIN(self):
            return self.getToken(PostgreSQLParser.SIN, 0)

        def SQUARE_DEGREES(self):
            return self.getToken(PostgreSQLParser.SQUARE_DEGREES, 0)

        def SQRT(self):
            return self.getToken(PostgreSQLParser.SQRT, 0)

        def STERADIANS(self):
            return self.getToken(PostgreSQLParser.STERADIANS, 0)

        def TAN(self):
            return self.getToken(PostgreSQLParser.TAN, 0)

        def TRUNCATE(self):
            return self.getToken(PostgreSQLParser.TRUNCATE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_number_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_functions" ):
                listener.enterNumber_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_functions" ):
                listener.exitNumber_functions(self)




    def number_functions(self):

        localctx = PostgreSQLParser.Number_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_number_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 18580100477879110) != 0) or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & 596340199240237571) != 0) or _la==141):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Other_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCODE(self):
            return self.getToken(PostgreSQLParser.ENCODE, 0)

        def MD5(self):
            return self.getToken(PostgreSQLParser.MD5, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_other_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOther_functions" ):
                listener.enterOther_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOther_functions" ):
                listener.exitOther_functions(self)




    def other_functions(self):

        localctx = PostgreSQLParser.Other_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_other_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 255
            _la = self._input.LA(1)
            if not(_la==45 or _la==83):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Time_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_PART(self):
            return self.getToken(PostgreSQLParser.DATE_PART, 0)

        def DATE_SYM(self):
            return self.getToken(PostgreSQLParser.DATE_SYM, 0)

        def NOW(self):
            return self.getToken(PostgreSQLParser.NOW, 0)

        def SECOND(self):
            return self.getToken(PostgreSQLParser.SECOND, 0)

        def TIME_SYM(self):
            return self.getToken(PostgreSQLParser.TIME_SYM, 0)

        def TIMESTAMP(self):
            return self.getToken(PostgreSQLParser.TIMESTAMP, 0)

        def UTC_DATE(self):
            return self.getToken(PostgreSQLParser.UTC_DATE, 0)

        def UTC_TIME(self):
            return self.getToken(PostgreSQLParser.UTC_TIME, 0)

        def UTC_TIMESTAMP(self):
            return self.getToken(PostgreSQLParser.UTC_TIMESTAMP, 0)

        def YEAR(self):
            return self.getToken(PostgreSQLParser.YEAR, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_time_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTime_functions" ):
                listener.enterTime_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTime_functions" ):
                listener.exitTime_functions(self)




    def time_functions(self):

        localctx = PostgreSQLParser.Time_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_time_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 257
            _la = self._input.LA(1)
            if not(((((_la - 34)) & ~0x3f) == 0 and ((1 << (_la - 34)) & 144115188075855875) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 566798245691393) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY_LENGTH(self):
            return self.getToken(PostgreSQLParser.ARRAY_LENGTH, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_array_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_functions" ):
                listener.enterArray_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_functions" ):
                listener.exitArray_functions(self)




    def array_functions(self):

        localctx = PostgreSQLParser.Array_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_array_functions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 259
            self.match(PostgreSQLParser.ARRAY_LENGTH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Custom_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GAIA_HEALPIX_INDEX(self):
            return self.getToken(PostgreSQLParser.GAIA_HEALPIX_INDEX, 0)

        def PDIST(self):
            return self.getToken(PostgreSQLParser.PDIST, 0)

        def UDF_0(self):
            return self.getToken(PostgreSQLParser.UDF_0, 0)

        def UDF_1(self):
            return self.getToken(PostgreSQLParser.UDF_1, 0)

        def UDF_2(self):
            return self.getToken(PostgreSQLParser.UDF_2, 0)

        def UDF_3(self):
            return self.getToken(PostgreSQLParser.UDF_3, 0)

        def UDF_4(self):
            return self.getToken(PostgreSQLParser.UDF_4, 0)

        def UDF_5(self):
            return self.getToken(PostgreSQLParser.UDF_5, 0)

        def UDF_6(self):
            return self.getToken(PostgreSQLParser.UDF_6, 0)

        def UDF_7(self):
            return self.getToken(PostgreSQLParser.UDF_7, 0)

        def UDF_8(self):
            return self.getToken(PostgreSQLParser.UDF_8, 0)

        def UDF_9(self):
            return self.getToken(PostgreSQLParser.UDF_9, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_custom_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCustom_functions" ):
                listener.enterCustom_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCustom_functions" ):
                listener.exitCustom_functions(self)




    def custom_functions(self):

        localctx = PostgreSQLParser.Custom_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_custom_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 261
            _la = self._input.LA(1)
            if not(_la==58 or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & 4499201580859393) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pg_sphere_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AREA(self):
            return self.getToken(PostgreSQLParser.AREA, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_pg_sphere_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPg_sphere_functions" ):
                listener.enterPg_sphere_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPg_sphere_functions" ):
                listener.exitPg_sphere_functions(self)




    def pg_sphere_functions(self):

        localctx = PostgreSQLParser.Pg_sphere_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_pg_sphere_functions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 263
            self.match(PostgreSQLParser.AREA)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Number_functionsContext,0)


        def char_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Char_functionsContext,0)


        def time_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Time_functionsContext,0)


        def other_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Other_functionsContext,0)


        def pg_sphere_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Pg_sphere_functionsContext,0)


        def array_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Array_functionsContext,0)


        def custom_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Custom_functionsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_functionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionList" ):
                listener.enterFunctionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionList" ):
                listener.exitFunctionList(self)




    def functionList(self):

        localctx = PostgreSQLParser.FunctionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_functionList)
        try:
            self.state = 272
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 6, 8, 9, 21, 22, 23, 30, 31, 39, 41, 49, 54, 77, 78, 86, 101, 103, 104, 106, 107, 115, 122, 124, 126, 127, 131, 136, 141]:
                self.enterOuterAlt(localctx, 1)
                self.state = 265
                self.number_functions()
                pass
            elif token in [15, 25, 26, 27, 28, 73, 74, 79, 80, 81, 110, 111, 112, 113, 117, 118, 133, 155, 169]:
                self.enterOuterAlt(localctx, 2)
                self.state = 266
                self.char_functions()
                pass
            elif token in [34, 35, 91, 119, 138, 139, 158, 159, 160, 168]:
                self.enterOuterAlt(localctx, 3)
                self.state = 267
                self.time_functions()
                pass
            elif token in [45, 83]:
                self.enterOuterAlt(localctx, 4)
                self.state = 268
                self.other_functions()
                pass
            elif token in [180]:
                self.enterOuterAlt(localctx, 5)
                self.state = 269
                self.pg_sphere_functions()
                pass
            elif token in [181]:
                self.enterOuterAlt(localctx, 6)
                self.state = 270
                self.array_functions()
                pass
            elif token in [58, 100, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151]:
                self.enterOuterAlt(localctx, 7)
                self.state = 271
                self.custom_functions()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.String_literalContext,0)


        def number_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.Number_literalContext,0)


        def hex_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.Hex_literalContext,0)


        def boolean_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.Boolean_literalContext,0)


        def bit_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_literalContext,0)


        def NULL_SYM(self):
            return self.getToken(PostgreSQLParser.NULL_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_literal_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_value" ):
                listener.enterLiteral_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_value" ):
                listener.exitLiteral_value(self)




    def literal_value(self):

        localctx = PostgreSQLParser.Literal_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_literal_value)
        try:
            self.state = 280
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [235]:
                self.enterOuterAlt(localctx, 1)
                self.state = 274
                self.string_literal()
                pass
            elif token in [211, 212, 230, 233]:
                self.enterOuterAlt(localctx, 2)
                self.state = 275
                self.number_literal()
                pass
            elif token in [231]:
                self.enterOuterAlt(localctx, 3)
                self.state = 276
                self.hex_literal()
                pass
            elif token in [51, 140]:
                self.enterOuterAlt(localctx, 4)
                self.state = 277
                self.boolean_literal()
                pass
            elif token in [232]:
                self.enterOuterAlt(localctx, 5)
                self.state = 278
                self.bit_literal()
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 6)
                self.state = 279
                self.match(PostgreSQLParser.NULL_SYM)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(PostgreSQLParser.SELECT, 0)

        def select_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_listContext,0)


        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def table_references(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_referencesContext,0)


        def orderby_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Orderby_clauseContext,0)


        def limit_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Limit_clauseContext,0)


        def offset_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Offset_clauseContext,0)


        def FOR_SYM(self):
            return self.getToken(PostgreSQLParser.FOR_SYM, 0)

        def UPDATE(self):
            return self.getToken(PostgreSQLParser.UPDATE, 0)

        def SEMI(self):
            return self.getToken(PostgreSQLParser.SEMI, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(PostgreSQLParser.DISTINCT, 0)

        def partition_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Partition_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Where_clauseContext,0)


        def groupby_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Groupby_clauseContext,0)


        def having_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Having_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_select_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_expression" ):
                listener.enterSelect_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_expression" ):
                listener.exitSelect_expression(self)




    def select_expression(self):

        localctx = PostgreSQLParser.Select_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_select_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 282
            self.match(PostgreSQLParser.SELECT)
            self.state = 284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3 or _la==42:
                self.state = 283
                _la = self._input.LA(1)
                if not(_la==3 or _la==42):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 286
            self.select_list()
            self.state = 301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 287
                self.match(PostgreSQLParser.FROM)
                self.state = 288
                self.table_references()
                self.state = 290
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==99:
                    self.state = 289
                    self.partition_clause()


                self.state = 293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==166:
                    self.state = 292
                    self.where_clause()


                self.state = 296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 295
                    self.groupby_clause()


                self.state = 299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60:
                    self.state = 298
                    self.having_clause()




            self.state = 304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 303
                self.orderby_clause()


            self.state = 307
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 306
                self.limit_clause()


            self.state = 310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==94:
                self.state = 309
                self.offset_clause()


            self.state = 314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 312
                self.match(PostgreSQLParser.FOR_SYM)
                self.state = 313
                self.match(PostgreSQLParser.UPDATE)


            self.state = 317
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 316
                self.match(PostgreSQLParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def AS_SYM(self):
            return self.getToken(PostgreSQLParser.AS_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias" ):
                listener.enterAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias" ):
                listener.exitAlias(self)




    def alias(self):

        localctx = PostgreSQLParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 319
                self.match(PostgreSQLParser.AS_SYM)


            self.state = 322
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bit_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor1(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Factor1Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Factor1Context,i)


        def VERTBAR(self):
            return self.getToken(PostgreSQLParser.VERTBAR, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bit_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_expr" ):
                listener.enterBit_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_expr" ):
                listener.exitBit_expr(self)




    def bit_expr(self):

        localctx = PostgreSQLParser.Bit_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_bit_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 324
            self.factor1()
            self.state = 327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==214:
                self.state = 325
                self.match(PostgreSQLParser.VERTBAR)
                self.state = 326
                self.factor1()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bool_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.PredicateContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.PredicateContext,i)


        def relational_op(self):
            return self.getTypedRuleContext(PostgreSQLParser.Relational_opContext,0)


        def ANY(self):
            return self.getToken(PostgreSQLParser.ANY, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def subquery(self):
            return self.getTypedRuleContext(PostgreSQLParser.SubqueryContext,0)


        def NOT_SYM(self):
            return self.getToken(PostgreSQLParser.NOT_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bool_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBool_primary" ):
                listener.enterBool_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBool_primary" ):
                listener.exitBool_primary(self)




    def bool_primary(self):

        localctx = PostgreSQLParser.Bool_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_bool_primary)
        self._la = 0 # Token type
        try:
            self.state = 343
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 329
                self.predicate()
                self.state = 336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & 6291471) != 0):
                    self.state = 330
                    self.relational_op()
                    self.state = 332
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==4:
                        self.state = 331
                        self.match(PostgreSQLParser.ANY)


                    self.state = 334
                    self.predicate()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==89:
                    self.state = 338
                    self.match(PostgreSQLParser.NOT_SYM)


                self.state = 341
                self.match(PostgreSQLParser.EXISTS)
                self.state = 342
                self.subquery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_when_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE_SYM(self):
            return self.getToken(PostgreSQLParser.CASE_SYM, 0)

        def END_SYM(self):
            return self.getToken(PostgreSQLParser.END_SYM, 0)

        def case_when_statement1(self):
            return self.getTypedRuleContext(PostgreSQLParser.Case_when_statement1Context,0)


        def case_when_statement2(self):
            return self.getTypedRuleContext(PostgreSQLParser.Case_when_statement2Context,0)


        def ELSE_SYM(self):
            return self.getToken(PostgreSQLParser.ELSE_SYM, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_case_when_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_when_statement" ):
                listener.enterCase_when_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_when_statement" ):
                listener.exitCase_when_statement(self)




    def case_when_statement(self):

        localctx = PostgreSQLParser.Case_when_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_case_when_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self.match(PostgreSQLParser.CASE_SYM)
            self.state = 348
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [165]:
                self.state = 346
                self.case_when_statement1()
                pass
            elif token in [1, 2, 6, 8, 9, 10, 13, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 41, 45, 48, 49, 51, 54, 58, 66, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 92, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 115, 116, 117, 118, 119, 122, 124, 126, 127, 128, 129, 130, 131, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 158, 159, 160, 162, 163, 164, 168, 169, 180, 181, 194, 195, 208, 211, 212, 213, 230, 231, 232, 233, 235, 236]:
                self.state = 347
                self.case_when_statement2()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44:
                self.state = 350
                self.match(PostgreSQLParser.ELSE_SYM)
                self.state = 351
                self.bit_expr()


            self.state = 354
            self.match(PostgreSQLParser.END_SYM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_when_statement1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.WHEN_SYM)
            else:
                return self.getToken(PostgreSQLParser.WHEN_SYM, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,i)


        def THEN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.THEN_SYM)
            else:
                return self.getToken(PostgreSQLParser.THEN_SYM, i)

        def bit_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_case_when_statement1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_when_statement1" ):
                listener.enterCase_when_statement1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_when_statement1" ):
                listener.exitCase_when_statement1(self)




    def case_when_statement1(self):

        localctx = PostgreSQLParser.Case_when_statement1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_case_when_statement1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 361 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 356
                self.match(PostgreSQLParser.WHEN_SYM)
                self.state = 357
                self.expression()
                self.state = 358
                self.match(PostgreSQLParser.THEN_SYM)
                self.state = 359
                self.bit_expr()
                self.state = 363 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==165):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_when_statement2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bit_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,i)


        def WHEN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.WHEN_SYM)
            else:
                return self.getToken(PostgreSQLParser.WHEN_SYM, i)

        def THEN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.THEN_SYM)
            else:
                return self.getToken(PostgreSQLParser.THEN_SYM, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_case_when_statement2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_when_statement2" ):
                listener.enterCase_when_statement2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_when_statement2" ):
                listener.exitCase_when_statement2(self)




    def case_when_statement2(self):

        localctx = PostgreSQLParser.Case_when_statement2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_case_when_statement2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            self.bit_expr()
            self.state = 371 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 366
                self.match(PostgreSQLParser.WHEN_SYM)
                self.state = 367
                self.bit_expr()
                self.state = 368
                self.match(PostgreSQLParser.THEN_SYM)
                self.state = 369
                self.bit_expr()
                self.state = 373 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==165):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def column_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Column_specContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Column_specContext,i)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_list" ):
                listener.enterColumn_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_list" ):
                listener.exitColumn_list(self)




    def column_list(self):

        localctx = PostgreSQLParser.Column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 375
            self.match(PostgreSQLParser.LPAREN)
            self.state = 376
            self.column_spec()
            self.state = 381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==205:
                self.state = 377
                self.match(PostgreSQLParser.COMMA)
                self.state = 378
                self.column_spec()
                self.state = 383
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 384
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)




    def column_name(self):

        localctx = PostgreSQLParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 386
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_nameContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.DOT)
            else:
                return self.getToken(PostgreSQLParser.DOT, i)

        def slice_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Slice_specContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Schema_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_column_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_spec" ):
                listener.enterColumn_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_spec" ):
                listener.exitColumn_spec(self)




    def column_spec(self):

        localctx = PostgreSQLParser.Column_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_column_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 391
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 388
                    self.schema_name()
                    self.state = 389
                    self.match(PostgreSQLParser.DOT)


                self.state = 393
                self.table_name()
                self.state = 394
                self.match(PostgreSQLParser.DOT)


            self.state = 398
            self.column_name()
            self.state = 400
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==210:
                self.state = 399
                self.slice_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Displayed_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_specContext,0)


        def DOT(self):
            return self.getToken(PostgreSQLParser.DOT, 0)

        def ASTERISK(self):
            return self.getToken(PostgreSQLParser.ASTERISK, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def sbit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sbit_exprContext,0)


        def displayed_column_arr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Displayed_column_arrContext,0)


        def TEXT_STRING(self):
            return self.getToken(PostgreSQLParser.TEXT_STRING, 0)

        def alias(self):
            return self.getTypedRuleContext(PostgreSQLParser.AliasContext,0)


        def LIKE_SYM(self):
            return self.getToken(PostgreSQLParser.LIKE_SYM, 0)

        def ILIKE_SYM(self):
            return self.getToken(PostgreSQLParser.ILIKE_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_displayed_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisplayed_column" ):
                listener.enterDisplayed_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisplayed_column" ):
                listener.exitDisplayed_column(self)




    def displayed_column(self):

        localctx = PostgreSQLParser.Displayed_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_displayed_column)
        self._la = 0 # Token type
        try:
            self.state = 418
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 402
                self.table_spec()
                self.state = 403
                self.match(PostgreSQLParser.DOT)
                self.state = 404
                self.match(PostgreSQLParser.ASTERISK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 409
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                if la_ == 1:
                    self.state = 406
                    self.bit_expr()
                    pass

                elif la_ == 2:
                    self.state = 407
                    self.sbit_expr()
                    pass

                elif la_ == 3:
                    self.state = 408
                    self.displayed_column_arr()
                    pass


                self.state = 413
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==62 or _la==75:
                    self.state = 411
                    _la = self._input.LA(1)
                    if not(_la==62 or _la==75):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 412
                    self.match(PostgreSQLParser.TEXT_STRING)


                self.state = 416
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7 or _la==236:
                    self.state = 415
                    self.alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Displayed_column_arrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def spoint_to_array_deg(self):
            return self.getTypedRuleContext(PostgreSQLParser.Spoint_to_array_degContext,0)


        def spoint_to_array(self):
            return self.getTypedRuleContext(PostgreSQLParser.Spoint_to_arrayContext,0)


        def sbox_to_array_deg(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sbox_to_array_degContext,0)


        def sbox_to_array(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sbox_to_arrayContext,0)


        def scircle_to_array_deg(self):
            return self.getTypedRuleContext(PostgreSQLParser.Scircle_to_array_degContext,0)


        def scircle_to_array(self):
            return self.getTypedRuleContext(PostgreSQLParser.Scircle_to_arrayContext,0)


        def spoly_to_array_deg(self):
            return self.getTypedRuleContext(PostgreSQLParser.Spoly_to_array_degContext,0)


        def spoly_to_array(self):
            return self.getTypedRuleContext(PostgreSQLParser.Spoly_to_arrayContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_displayed_column_arr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisplayed_column_arr" ):
                listener.enterDisplayed_column_arr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisplayed_column_arr" ):
                listener.exitDisplayed_column_arr(self)




    def displayed_column_arr(self):

        localctx = PostgreSQLParser.Displayed_column_arrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_displayed_column_arr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [186]:
                self.state = 420
                self.spoint_to_array_deg()
                pass
            elif token in [182]:
                self.state = 421
                self.spoint_to_array()
                pass
            elif token in [187]:
                self.state = 422
                self.sbox_to_array_deg()
                pass
            elif token in [183]:
                self.state = 423
                self.sbox_to_array()
                pass
            elif token in [188]:
                self.state = 424
                self.scircle_to_array_deg()
                pass
            elif token in [184]:
                self.state = 425
                self.scircle_to_array()
                pass
            elif token in [189]:
                self.state = 426
                self.spoly_to_array_deg()
                pass
            elif token in [185]:
                self.state = 427
                self.spoly_to_array()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exp_factor1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp_factor2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Exp_factor2Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Exp_factor2Context,i)


        def AND_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.AND_SYM)
            else:
                return self.getToken(PostgreSQLParser.AND_SYM, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_exp_factor1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExp_factor1" ):
                listener.enterExp_factor1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExp_factor1" ):
                listener.exitExp_factor1(self)




    def exp_factor1(self):

        localctx = PostgreSQLParser.Exp_factor1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_exp_factor1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430
            self.exp_factor2()
            self.state = 435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==193:
                self.state = 431
                self.match(PostgreSQLParser.AND_SYM)
                self.state = 432
                self.exp_factor2()
                self.state = 437
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exp_factor2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp_factor3(self):
            return self.getTypedRuleContext(PostgreSQLParser.Exp_factor3Context,0)


        def NOT_SYM(self):
            return self.getToken(PostgreSQLParser.NOT_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_exp_factor2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExp_factor2" ):
                listener.enterExp_factor2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExp_factor2" ):
                listener.exitExp_factor2(self)




    def exp_factor2(self):

        localctx = PostgreSQLParser.Exp_factor2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_exp_factor2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 439
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 438
                self.match(PostgreSQLParser.NOT_SYM)


            self.state = 441
            self.exp_factor3()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exp_factor3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bool_primary(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bool_primaryContext,0)


        def IS_SYM(self):
            return self.getToken(PostgreSQLParser.IS_SYM, 0)

        def ISNULL(self):
            return self.getToken(PostgreSQLParser.ISNULL, 0)

        def NOTNULL(self):
            return self.getToken(PostgreSQLParser.NOTNULL, 0)

        def boolean_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.Boolean_literalContext,0)


        def NULL_SYM(self):
            return self.getToken(PostgreSQLParser.NULL_SYM, 0)

        def NOT_SYM(self):
            return self.getToken(PostgreSQLParser.NOT_SYM, 0)

        def DISTINCT(self):
            return self.getToken(PostgreSQLParser.DISTINCT, 0)

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_exp_factor3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExp_factor3" ):
                listener.enterExp_factor3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExp_factor3" ):
                listener.exitExp_factor3(self)




    def exp_factor3(self):

        localctx = PostgreSQLParser.Exp_factor3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_exp_factor3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            self.bool_primary()
            self.state = 459
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 444
                    self.match(PostgreSQLParser.IS_SYM)
                    self.state = 446
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==89:
                        self.state = 445
                        self.match(PostgreSQLParser.NOT_SYM)


                    self.state = 452
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [51, 140]:
                        self.state = 448
                        self.boolean_literal()
                        pass
                    elif token in [92]:
                        self.state = 449
                        self.match(PostgreSQLParser.NULL_SYM)
                        pass
                    elif token in [42]:
                        self.state = 450
                        self.match(PostgreSQLParser.DISTINCT)
                        self.state = 451
                        self.match(PostgreSQLParser.FROM)
                        pass
                    else:
                        raise NoViableAltException(self)



                pass

            elif la_ == 2:
                self.state = 457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68 or _la==90:
                    self.state = 456
                    _la = self._input.LA(1)
                    if not(_la==68 or _la==90):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp_factor1(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Exp_factor1Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Exp_factor1Context,i)


        def OR_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.OR_SYM)
            else:
                return self.getToken(PostgreSQLParser.OR_SYM, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = PostgreSQLParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 461
            self.exp_factor1()
            self.state = 466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==192:
                self.state = 462
                self.match(PostgreSQLParser.OR_SYM)
                self.state = 463
                self.exp_factor1()
                self.state = 468
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,i)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)




    def expression_list(self):

        localctx = PostgreSQLParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            self.match(PostgreSQLParser.LPAREN)
            self.state = 470
            self.expression()
            self.state = 475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==205:
                self.state = 471
                self.match(PostgreSQLParser.COMMA)
                self.state = 472
                self.expression()
                self.state = 477
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 478
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factor1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Factor2Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Factor2Context,i)


        def BITAND(self):
            return self.getToken(PostgreSQLParser.BITAND, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_factor1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor1" ):
                listener.enterFactor1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor1" ):
                listener.exitFactor1(self)




    def factor1(self):

        localctx = PostgreSQLParser.Factor1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_factor1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480
            self.factor2()
            self.state = 483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==215:
                self.state = 481
                self.match(PostgreSQLParser.BITAND)
                self.state = 482
                self.factor2()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factor2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor3(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Factor3Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Factor3Context,i)


        def SHIFT_LEFT(self):
            return self.getToken(PostgreSQLParser.SHIFT_LEFT, 0)

        def SHIFT_RIGHT(self):
            return self.getToken(PostgreSQLParser.SHIFT_RIGHT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_factor2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor2" ):
                listener.enterFactor2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor2" ):
                listener.exitFactor2(self)




    def factor2(self):

        localctx = PostgreSQLParser.Factor2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_factor2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            self.factor3()
            self.state = 488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==200 or _la==201:
                self.state = 486
                _la = self._input.LA(1)
                if not(_la==200 or _la==201):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 487
                self.factor3()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factor3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor4(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Factor4Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Factor4Context,i)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.PLUS)
            else:
                return self.getToken(PostgreSQLParser.PLUS, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.MINUS)
            else:
                return self.getToken(PostgreSQLParser.MINUS, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_factor3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor3" ):
                listener.enterFactor3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor3" ):
                listener.exitFactor3(self)




    def factor3(self):

        localctx = PostgreSQLParser.Factor3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_factor3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self.factor4()
            self.state = 495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==211 or _la==212:
                self.state = 491
                _la = self._input.LA(1)
                if not(_la==211 or _la==212):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 492
                self.factor4()
                self.state = 497
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factor4Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor5(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Factor5Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Factor5Context,i)


        def ASTERISK(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.ASTERISK)
            else:
                return self.getToken(PostgreSQLParser.ASTERISK, i)

        def DIVIDE(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.DIVIDE)
            else:
                return self.getToken(PostgreSQLParser.DIVIDE, i)

        def MOD_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.MOD_SYM)
            else:
                return self.getToken(PostgreSQLParser.MOD_SYM, i)

        def POWER_OP(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.POWER_OP)
            else:
                return self.getToken(PostgreSQLParser.POWER_OP, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_factor4

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor4" ):
                listener.enterFactor4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor4" ):
                listener.exitFactor4(self)




    def factor4(self):

        localctx = PostgreSQLParser.Factor4Context(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_factor4)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498
            self.factor5()
            self.state = 503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 190)) & ~0x3f) == 0 and ((1 << (_la - 190)) & 67174403) != 0):
                self.state = 499
                _la = self._input.LA(1)
                if not(((((_la - 190)) & ~0x3f) == 0 and ((1 << (_la - 190)) & 67174403) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 500
                self.factor5()
                self.state = 505
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factor5Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Simple_exprContext,0)


        def NOT_SYM(self):
            return self.getToken(PostgreSQLParser.NOT_SYM, 0)

        def interval_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Interval_exprContext,0)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.PLUS)
            else:
                return self.getToken(PostgreSQLParser.PLUS, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.MINUS)
            else:
                return self.getToken(PostgreSQLParser.MINUS, i)

        def NEGATION(self):
            return self.getToken(PostgreSQLParser.NEGATION, 0)

        def BINARY(self):
            return self.getToken(PostgreSQLParser.BINARY, 0)

        def ABS_VAL_OR_SCONTAINS(self):
            return self.getToken(PostgreSQLParser.ABS_VAL_OR_SCONTAINS, 0)

        def DFACTORIAL(self):
            return self.getToken(PostgreSQLParser.DFACTORIAL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_factor5

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor5" ):
                listener.enterFactor5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor5" ):
                listener.exitFactor5(self)




    def factor5(self):

        localctx = PostgreSQLParser.Factor5Context(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_factor5)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.state = 506
                _la = self._input.LA(1)
                if not(_la==13 or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & 917507) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 509
            self.simple_expr()
            self.state = 511
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 510
                self.match(PostgreSQLParser.NOT_SYM)


            self.state = 515
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 513
                _la = self._input.LA(1)
                if not(_la==211 or _la==212):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 514
                self.interval_expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionList(self):
            return self.getTypedRuleContext(PostgreSQLParser.FunctionListContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def CAST_SYM(self):
            return self.getToken(PostgreSQLParser.CAST_SYM, 0)

        def AS_SYM(self):
            return self.getToken(PostgreSQLParser.AS_SYM, 0)

        def cast_data_type(self):
            return self.getTypedRuleContext(PostgreSQLParser.Cast_data_typeContext,0)


        def CONVERT_SYM(self):
            return self.getToken(PostgreSQLParser.CONVERT_SYM, 0)

        def TEXT_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.TEXT_STRING)
            else:
                return self.getToken(PostgreSQLParser.TEXT_STRING, i)

        def POSITION_SYM(self):
            return self.getToken(PostgreSQLParser.POSITION_SYM, 0)

        def IN_SYM(self):
            return self.getToken(PostgreSQLParser.IN_SYM, 0)

        def group_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Group_functionsContext,0)


        def ASTERISK(self):
            return self.getToken(PostgreSQLParser.ASTERISK, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(PostgreSQLParser.DISTINCT, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def sbit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sbit_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_function_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call" ):
                listener.enterFunction_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call" ):
                listener.exitFunction_call(self)




    def function_call(self):

        localctx = PostgreSQLParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.state = 567
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 6, 8, 9, 15, 21, 22, 23, 25, 26, 27, 28, 30, 31, 34, 35, 39, 41, 45, 49, 54, 58, 73, 74, 77, 78, 79, 80, 81, 83, 86, 91, 100, 101, 103, 104, 106, 107, 110, 111, 112, 113, 115, 117, 118, 119, 122, 124, 126, 127, 131, 133, 136, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 158, 159, 160, 168, 169, 180, 181]:
                self.enterOuterAlt(localctx, 1)
                self.state = 517
                self.functionList()
                self.state = 530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==208:
                    self.state = 518
                    self.match(PostgreSQLParser.LPAREN)
                    self.state = 527
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 309378992668534598) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -774914371848767103) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 3937108242726747) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & 7679402459139) != 0):
                        self.state = 519
                        self.expression()
                        self.state = 524
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==205:
                            self.state = 520
                            self.match(PostgreSQLParser.COMMA)
                            self.state = 521
                            self.expression()
                            self.state = 526
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 529
                    self.match(PostgreSQLParser.RPAREN)


                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 2)
                self.state = 532
                self.match(PostgreSQLParser.CAST_SYM)
                self.state = 533
                self.match(PostgreSQLParser.LPAREN)
                self.state = 534
                self.expression()
                self.state = 535
                self.match(PostgreSQLParser.AS_SYM)
                self.state = 536
                self.cast_data_type()
                self.state = 537
                self.match(PostgreSQLParser.RPAREN)
                pass
            elif token in [29]:
                self.enterOuterAlt(localctx, 3)
                self.state = 539
                self.match(PostgreSQLParser.CONVERT_SYM)
                self.state = 540
                self.match(PostgreSQLParser.LPAREN)
                self.state = 541
                self.match(PostgreSQLParser.TEXT_STRING)
                self.state = 542
                self.match(PostgreSQLParser.COMMA)
                self.state = 543
                self.match(PostgreSQLParser.TEXT_STRING)
                self.state = 544
                self.match(PostgreSQLParser.COMMA)
                self.state = 545
                self.match(PostgreSQLParser.TEXT_STRING)
                self.state = 546
                self.match(PostgreSQLParser.RPAREN)
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 4)
                self.state = 547
                self.match(PostgreSQLParser.POSITION_SYM)
                self.state = 548
                self.match(PostgreSQLParser.LPAREN)
                self.state = 549
                self.expression()
                self.state = 550
                self.match(PostgreSQLParser.IN_SYM)
                self.state = 551
                self.expression()
                self.state = 552
                self.match(PostgreSQLParser.RPAREN)
                pass
            elif token in [10, 14, 16, 32, 82, 85, 128, 129, 130, 134, 162, 163, 164]:
                self.enterOuterAlt(localctx, 5)
                self.state = 554
                self.group_functions()
                self.state = 555
                self.match(PostgreSQLParser.LPAREN)
                self.state = 557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==42 or _la==206:
                    self.state = 556
                    _la = self._input.LA(1)
                    if not(_la==3 or _la==42 or _la==206):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 309378992668534598) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -774914371857155711) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 3937108242726747) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & 7679402459139) != 0):
                    self.state = 561
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                    if la_ == 1:
                        self.state = 559
                        self.bit_expr()
                        pass

                    elif la_ == 2:
                        self.state = 560
                        self.sbit_expr()
                        pass




                self.state = 565
                self.match(PostgreSQLParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Groupby_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP_SYM(self):
            return self.getToken(PostgreSQLParser.GROUP_SYM, 0)

        def BY_SYM(self):
            return self.getToken(PostgreSQLParser.BY_SYM, 0)

        def groupby_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Groupby_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Groupby_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def ROLLUP_SYM(self):
            return self.getToken(PostgreSQLParser.ROLLUP_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_groupby_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupby_clause" ):
                listener.enterGroupby_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupby_clause" ):
                listener.exitGroupby_clause(self)




    def groupby_clause(self):

        localctx = PostgreSQLParser.Groupby_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_groupby_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            self.match(PostgreSQLParser.GROUP_SYM)
            self.state = 570
            self.match(PostgreSQLParser.BY_SYM)
            self.state = 571
            self.groupby_item()
            self.state = 576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==205:
                self.state = 572
                self.match(PostgreSQLParser.COMMA)
                self.state = 573
                self.groupby_item()
                self.state = 578
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==167:
                self.state = 579
                self.match(PostgreSQLParser.WITH)
                self.state = 580
                self.match(PostgreSQLParser.ROLLUP_SYM)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Groupby_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_specContext,0)


        def INTEGER_NUM(self):
            return self.getToken(PostgreSQLParser.INTEGER_NUM, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def ASC(self):
            return self.getToken(PostgreSQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(PostgreSQLParser.DESC, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_groupby_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupby_item" ):
                listener.enterGroupby_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupby_item" ):
                listener.exitGroupby_item(self)




    def groupby_item(self):

        localctx = PostgreSQLParser.Groupby_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_groupby_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.state = 583
                self.column_spec()
                pass

            elif la_ == 2:
                self.state = 584
                self.match(PostgreSQLParser.INTEGER_NUM)
                pass

            elif la_ == 3:
                self.state = 585
                self.bit_expr()
                pass


            self.state = 589
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 588
                _la = self._input.LA(1)
                if not(_la==5 or _la==40):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Having_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(PostgreSQLParser.HAVING, 0)

        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_having_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHaving_clause" ):
                listener.enterHaving_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHaving_clause" ):
                listener.exitHaving_clause(self)




    def having_clause(self):

        localctx = PostgreSQLParser.Having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_having_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 591
            self.match(PostgreSQLParser.HAVING)
            self.state = 592
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_hintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE_SYM(self):
            return self.getToken(PostgreSQLParser.USE_SYM, 0)

        def index_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Index_optionsContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def index_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Index_listContext,0)


        def IGNORE_SYM(self):
            return self.getToken(PostgreSQLParser.IGNORE_SYM, 0)

        def FORCE_SYM(self):
            return self.getToken(PostgreSQLParser.FORCE_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_hint" ):
                listener.enterIndex_hint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_hint" ):
                listener.exitIndex_hint(self)




    def index_hint(self):

        localctx = PostgreSQLParser.Index_hintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_index_hint)
        self._la = 0 # Token type
        try:
            self.state = 614
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [156]:
                self.enterOuterAlt(localctx, 1)
                self.state = 594
                self.match(PostgreSQLParser.USE_SYM)
                self.state = 595
                self.index_options()
                self.state = 596
                self.match(PostgreSQLParser.LPAREN)
                self.state = 598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==236:
                    self.state = 597
                    self.index_list()


                self.state = 600
                self.match(PostgreSQLParser.RPAREN)
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 2)
                self.state = 602
                self.match(PostgreSQLParser.IGNORE_SYM)
                self.state = 603
                self.index_options()
                self.state = 604
                self.match(PostgreSQLParser.LPAREN)
                self.state = 605
                self.index_list()
                self.state = 606
                self.match(PostgreSQLParser.RPAREN)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 3)
                self.state = 608
                self.match(PostgreSQLParser.FORCE_SYM)
                self.state = 609
                self.index_options()
                self.state = 610
                self.match(PostgreSQLParser.LPAREN)
                self.state = 611
                self.index_list()
                self.state = 612
                self.match(PostgreSQLParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_hint_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Index_hintContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Index_hintContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_hint_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_hint_list" ):
                listener.enterIndex_hint_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_hint_list" ):
                listener.exitIndex_hint_list(self)




    def index_hint_list(self):

        localctx = PostgreSQLParser.Index_hint_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_index_hint_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            self.index_hint()
            self.state = 621
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 617
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 618
                    self.index_hint() 
                self.state = 623
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_name" ):
                listener.enterIndex_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_name" ):
                listener.exitIndex_name(self)




    def index_name(self):

        localctx = PostgreSQLParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 624
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Index_nameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Index_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_list" ):
                listener.enterIndex_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_list" ):
                listener.exitIndex_list(self)




    def index_list(self):

        localctx = PostgreSQLParser.Index_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_index_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 626
            self.index_name()
            self.state = 631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==205:
                self.state = 627
                self.match(PostgreSQLParser.COMMA)
                self.state = 628
                self.index_name()
                self.state = 633
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDEX_SYM(self):
            return self.getToken(PostgreSQLParser.INDEX_SYM, 0)

        def KEY_SYM(self):
            return self.getToken(PostgreSQLParser.KEY_SYM, 0)

        def FOR_SYM(self):
            return self.getToken(PostgreSQLParser.FOR_SYM, 0)

        def JOIN_SYM(self):
            return self.getToken(PostgreSQLParser.JOIN_SYM, 0)

        def ORDER_SYM(self):
            return self.getToken(PostgreSQLParser.ORDER_SYM, 0)

        def BY_SYM(self):
            return self.getToken(PostgreSQLParser.BY_SYM, 0)

        def GROUP_SYM(self):
            return self.getToken(PostgreSQLParser.GROUP_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_options" ):
                listener.enterIndex_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_options" ):
                listener.exitIndex_options(self)




    def index_options(self):

        localctx = PostgreSQLParser.Index_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_index_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 634
            _la = self._input.LA(1)
            if not(_la==63 or _la==71):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 635
                self.match(PostgreSQLParser.FOR_SYM)
                self.state = 641
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [70]:
                    self.state = 636
                    self.match(PostgreSQLParser.JOIN_SYM)
                    pass
                elif token in [97]:
                    self.state = 637
                    self.match(PostgreSQLParser.ORDER_SYM)
                    self.state = 638
                    self.match(PostgreSQLParser.BY_SYM)
                    pass
                elif token in [59]:
                    self.state = 639
                    self.match(PostgreSQLParser.GROUP_SYM)
                    self.state = 640
                    self.match(PostgreSQLParser.BY_SYM)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL_SYM(self):
            return self.getToken(PostgreSQLParser.INTERVAL_SYM, 0)

        def string_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.String_literalContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_interval_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_expr" ):
                listener.enterInterval_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_expr" ):
                listener.exitInterval_expr(self)




    def interval_expr(self):

        localctx = PostgreSQLParser.Interval_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_interval_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 645
            self.match(PostgreSQLParser.INTERVAL_SYM)
            self.state = 646
            self.string_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_conditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def USING_SYM(self):
            return self.getToken(PostgreSQLParser.USING_SYM, 0)

        def column_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_join_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_condition" ):
                listener.enterJoin_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_condition" ):
                listener.exitJoin_condition(self)




    def join_condition(self):

        localctx = PostgreSQLParser.Join_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_join_condition)
        try:
            self.state = 652
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [96]:
                self.enterOuterAlt(localctx, 1)
                self.state = 648
                self.match(PostgreSQLParser.ON)
                self.state = 649
                self.expression()
                pass
            elif token in [157]:
                self.enterOuterAlt(localctx, 2)
                self.state = 650
                self.match(PostgreSQLParser.USING_SYM)
                self.state = 651
                self.column_list()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(PostgreSQLParser.LIMIT, 0)

        def row_count(self):
            return self.getTypedRuleContext(PostgreSQLParser.Row_countContext,0)


        def OFFSET_SYM(self):
            return self.getToken(PostgreSQLParser.OFFSET_SYM, 0)

        def offset(self):
            return self.getTypedRuleContext(PostgreSQLParser.OffsetContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_limit_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_clause" ):
                listener.enterLimit_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_clause" ):
                listener.exitLimit_clause(self)




    def limit_clause(self):

        localctx = PostgreSQLParser.Limit_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_limit_clause)
        try:
            self.state = 665
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [76]:
                self.enterOuterAlt(localctx, 1)
                self.state = 654
                self.match(PostgreSQLParser.LIMIT)
                self.state = 655
                self.row_count()
                self.state = 658
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                if la_ == 1:
                    self.state = 656
                    self.match(PostgreSQLParser.OFFSET_SYM)
                    self.state = 657
                    self.offset()


                pass
            elif token in [94]:
                self.enterOuterAlt(localctx, 2)
                self.state = 660
                self.match(PostgreSQLParser.OFFSET_SYM)
                self.state = 661
                self.offset()
                self.state = 662
                self.match(PostgreSQLParser.LIMIT)
                self.state = 663
                self.row_count()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OffsetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_NUM(self):
            return self.getToken(PostgreSQLParser.INTEGER_NUM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_offset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffset" ):
                listener.enterOffset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffset" ):
                listener.exitOffset(self)




    def offset(self):

        localctx = PostgreSQLParser.OffsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_offset)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self.match(PostgreSQLParser.INTEGER_NUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Offset_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OFFSET_SYM(self):
            return self.getToken(PostgreSQLParser.OFFSET_SYM, 0)

        def offset(self):
            return self.getTypedRuleContext(PostgreSQLParser.OffsetContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_offset_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffset_clause" ):
                listener.enterOffset_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffset_clause" ):
                listener.exitOffset_clause(self)




    def offset_clause(self):

        localctx = PostgreSQLParser.Offset_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_offset_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self.match(PostgreSQLParser.OFFSET_SYM)
            self.state = 670
            self.offset()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_countContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_NUM(self):
            return self.getToken(PostgreSQLParser.INTEGER_NUM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_row_count

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_count" ):
                listener.enterRow_count(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_count" ):
                listener.exitRow_count(self)




    def row_count(self):

        localctx = PostgreSQLParser.Row_countContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_row_count)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self.match(PostgreSQLParser.INTEGER_NUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orderby_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER_SYM(self):
            return self.getToken(PostgreSQLParser.ORDER_SYM, 0)

        def BY_SYM(self):
            return self.getToken(PostgreSQLParser.BY_SYM, 0)

        def orderby_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Orderby_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Orderby_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_orderby_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderby_clause" ):
                listener.enterOrderby_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderby_clause" ):
                listener.exitOrderby_clause(self)




    def orderby_clause(self):

        localctx = PostgreSQLParser.Orderby_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_orderby_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self.match(PostgreSQLParser.ORDER_SYM)
            self.state = 675
            self.match(PostgreSQLParser.BY_SYM)
            self.state = 676
            self.orderby_item()
            self.state = 681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==205:
                self.state = 677
                self.match(PostgreSQLParser.COMMA)
                self.state = 678
                self.orderby_item()
                self.state = 683
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orderby_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupby_item(self):
            return self.getTypedRuleContext(PostgreSQLParser.Groupby_itemContext,0)


        def NULLS_SYM(self):
            return self.getToken(PostgreSQLParser.NULLS_SYM, 0)

        def ASC(self):
            return self.getToken(PostgreSQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(PostgreSQLParser.DESC, 0)

        def FIRST_SYM(self):
            return self.getToken(PostgreSQLParser.FIRST_SYM, 0)

        def LAST_SYM(self):
            return self.getToken(PostgreSQLParser.LAST_SYM, 0)

        def USING_SYM(self):
            return self.getToken(PostgreSQLParser.USING_SYM, 0)

        def GTH(self):
            return self.getToken(PostgreSQLParser.GTH, 0)

        def LTH(self):
            return self.getToken(PostgreSQLParser.LTH, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_orderby_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderby_item" ):
                listener.enterOrderby_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderby_item" ):
                listener.exitOrderby_item(self)




    def orderby_item(self):

        localctx = PostgreSQLParser.Orderby_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_orderby_item)
        self._la = 0 # Token type
        try:
            self.state = 698
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 684
                self.groupby_item()
                self.state = 692
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                if la_ == 1:
                    self.state = 686
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==5 or _la==40:
                        self.state = 685
                        _la = self._input.LA(1)
                        if not(_la==5 or _la==40):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass

                elif la_ == 2:
                    self.state = 690
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==93:
                        self.state = 688
                        self.match(PostgreSQLParser.NULLS_SYM)
                        self.state = 689
                        _la = self._input.LA(1)
                        if not(_la==52 or _la==72):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 694
                self.groupby_item()
                self.state = 695
                self.match(PostgreSQLParser.USING_SYM)
                self.state = 696
                _la = self._input.LA(1)
                if not(_la==217 or _la==218):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION_SYM(self):
            return self.getToken(PostgreSQLParser.PARTITION_SYM, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def partition_names(self):
            return self.getTypedRuleContext(PostgreSQLParser.Partition_namesContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_partition_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_clause" ):
                listener.enterPartition_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_clause" ):
                listener.exitPartition_clause(self)




    def partition_clause(self):

        localctx = PostgreSQLParser.Partition_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_partition_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 700
            self.match(PostgreSQLParser.PARTITION_SYM)
            self.state = 701
            self.match(PostgreSQLParser.LPAREN)
            self.state = 702
            self.partition_names()
            self.state = 703
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_partition_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_name" ):
                listener.enterPartition_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_name" ):
                listener.exitPartition_name(self)




    def partition_name(self):

        localctx = PostgreSQLParser.Partition_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_partition_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 705
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partition_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Partition_nameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Partition_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_partition_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_names" ):
                listener.enterPartition_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_names" ):
                listener.exitPartition_names(self)




    def partition_names(self):

        localctx = PostgreSQLParser.Partition_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_partition_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self.partition_name()
            self.state = 712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==205:
                self.state = 708
                self.match(PostgreSQLParser.COMMA)
                self.state = 709
                self.partition_name()
                self.state = 714
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bit_fac1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT_SYM(self):
            return self.getToken(PostgreSQLParser.NOT_SYM, 0)

        def IN_SYM(self):
            return self.getToken(PostgreSQLParser.IN_SYM, 0)

        def simple_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Simple_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Simple_exprContext,i)


        def REGEXP(self):
            return self.getToken(PostgreSQLParser.REGEXP, 0)

        def BETWEEN(self):
            return self.getToken(PostgreSQLParser.BETWEEN, 0)

        def AND_SYM(self):
            return self.getToken(PostgreSQLParser.AND_SYM, 0)

        def predicate(self):
            return self.getTypedRuleContext(PostgreSQLParser.PredicateContext,0)


        def LIKE_SYM(self):
            return self.getToken(PostgreSQLParser.LIKE_SYM, 0)

        def ILIKE_SYM(self):
            return self.getToken(PostgreSQLParser.ILIKE_SYM, 0)

        def subquery(self):
            return self.getTypedRuleContext(PostgreSQLParser.SubqueryContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expression_listContext,0)


        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def sbit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sbit_exprContext,0)


        def ESCAPE_SYM(self):
            return self.getToken(PostgreSQLParser.ESCAPE_SYM, 0)

        def SYMMETRIC(self):
            return self.getToken(PostgreSQLParser.SYMMETRIC, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bit_fac1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_fac1" ):
                listener.enterBit_fac1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_fac1" ):
                listener.exitBit_fac1(self)




    def bit_fac1(self):

        localctx = PostgreSQLParser.Bit_fac1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_bit_fac1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 715
                self.match(PostgreSQLParser.NOT_SYM)


            self.state = 745
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [67]:
                self.state = 718
                self.match(PostgreSQLParser.IN_SYM)
                self.state = 721
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 719
                    self.subquery()
                    pass

                elif la_ == 2:
                    self.state = 720
                    self.expression_list()
                    pass


                pass
            elif token in [62, 75]:
                self.state = 723
                _la = self._input.LA(1)
                if not(_la==62 or _la==75):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 724
                self.simple_expr()
                self.state = 727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 725
                    self.match(PostgreSQLParser.ESCAPE_SYM)
                    self.state = 726
                    self.simple_expr()


                pass
            elif token in [109]:
                self.state = 729
                self.match(PostgreSQLParser.REGEXP)
                self.state = 732
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                if la_ == 1:
                    self.state = 730
                    self.bit_expr()
                    pass

                elif la_ == 2:
                    self.state = 731
                    self.sbit_expr()
                    pass


                pass
            elif token in [11]:
                self.state = 734
                self.match(PostgreSQLParser.BETWEEN)
                self.state = 736
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 735
                    self.match(PostgreSQLParser.SYMMETRIC)


                self.state = 740
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                if la_ == 1:
                    self.state = 738
                    self.bit_expr()
                    pass

                elif la_ == 2:
                    self.state = 739
                    self.sbit_expr()
                    pass


                self.state = 742
                self.match(PostgreSQLParser.AND_SYM)
                self.state = 743
                self.predicate()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bit_fac2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOUNDS_SYM(self):
            return self.getToken(PostgreSQLParser.SOUNDS_SYM, 0)

        def LIKE_SYM(self):
            return self.getToken(PostgreSQLParser.LIKE_SYM, 0)

        def ILIKE_SYM(self):
            return self.getToken(PostgreSQLParser.ILIKE_SYM, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def sbit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sbit_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bit_fac2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_fac2" ):
                listener.enterBit_fac2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_fac2" ):
                listener.exitBit_fac2(self)




    def bit_fac2(self):

        localctx = PostgreSQLParser.Bit_fac2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_bit_fac2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 747
            self.match(PostgreSQLParser.SOUNDS_SYM)
            self.state = 748
            _la = self._input.LA(1)
            if not(_la==62 or _la==75):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 751
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 749
                self.bit_expr()
                pass

            elif la_ == 2:
                self.state = 750
                self.sbit_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def sbit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sbit_exprContext,0)


        def bit_fac1(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_fac1Context,0)


        def bit_fac2(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_fac2Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)




    def predicate(self):

        localctx = PostgreSQLParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_predicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 753
                self.bit_expr()
                pass

            elif la_ == 2:
                self.state = 754
                self.sbit_expr()
                pass


            self.state = 759
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 757
                self.bit_fac1()

            elif la_ == 2:
                self.state = 758
                self.bit_fac2()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_statement(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_statementContext,0)


        def SEMI(self):
            return self.getToken(PostgreSQLParser.SEMI, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)




    def query(self):

        localctx = PostgreSQLParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_query)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 761
            self.select_statement()
            self.state = 762
            self.match(PostgreSQLParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_schema_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_name" ):
                listener.enterSchema_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_name" ):
                listener.exitSchema_name(self)




    def schema_name(self):

        localctx = PostgreSQLParser.Schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 764
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def displayed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Displayed_columnContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Displayed_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def ASTERISK(self):
            return self.getToken(PostgreSQLParser.ASTERISK, 0)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def subselect_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Subselect_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_select_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list" ):
                listener.enterSelect_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list" ):
                listener.exitSelect_list(self)




    def select_list(self):

        localctx = PostgreSQLParser.Select_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_select_list)
        self._la = 0 # Token type
        try:
            self.state = 795
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 6, 8, 9, 10, 13, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 41, 45, 48, 49, 51, 54, 58, 66, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 92, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 115, 116, 117, 118, 119, 122, 124, 126, 127, 128, 129, 130, 131, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 158, 159, 160, 162, 163, 164, 168, 169, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 194, 195, 208, 211, 212, 213, 228, 229, 230, 231, 232, 233, 235, 236]:
                self.enterOuterAlt(localctx, 1)
                self.state = 766
                self.displayed_column()
                self.state = 771
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==205:
                    self.state = 767
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 768
                    self.displayed_column()
                    self.state = 773
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [206]:
                self.enterOuterAlt(localctx, 2)
                self.state = 774
                self.match(PostgreSQLParser.ASTERISK)
                self.state = 784
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==205:
                    self.state = 775
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 776
                    self.displayed_column()
                    self.state = 781
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==205:
                        self.state = 777
                        self.match(PostgreSQLParser.COMMA)
                        self.state = 778
                        self.displayed_column()
                        self.state = 783
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 3)
                self.state = 786
                self.match(PostgreSQLParser.ON)

                self.state = 787
                self.subselect_list()
                self.state = 792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==205:
                    self.state = 788
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 789
                    self.displayed_column()
                    self.state = 794
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subselect_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def displayed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Displayed_columnContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Displayed_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_subselect_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubselect_list" ):
                listener.enterSubselect_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubselect_list" ):
                listener.exitSubselect_list(self)




    def subselect_list(self):

        localctx = PostgreSQLParser.Subselect_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_subselect_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 797
            self.displayed_column()
            self.state = 802
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 798
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 799
                    self.displayed_column() 
                self.state = 804
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Select_expressionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Select_expressionContext,i)


        def UNION_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.UNION_SYM)
            else:
                return self.getToken(PostgreSQLParser.UNION_SYM, i)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.ALL)
            else:
                return self.getToken(PostgreSQLParser.ALL, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_select_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_statement" ):
                listener.enterSelect_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_statement" ):
                listener.exitSelect_statement(self)




    def select_statement(self):

        localctx = PostgreSQLParser.Select_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_select_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.select_expression()
            self.state = 813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==152:
                self.state = 806
                self.match(PostgreSQLParser.UNION_SYM)
                self.state = 808
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3:
                    self.state = 807
                    self.match(PostgreSQLParser.ALL)


                self.state = 810
                self.select_expression()
                self.state = 815
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(PostgreSQLParser.Literal_valueContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expression_listContext,0)


        def column_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_specContext,0)


        def function_call(self):
            return self.getTypedRuleContext(PostgreSQLParser.Function_callContext,0)


        def ROW_SYM(self):
            return self.getToken(PostgreSQLParser.ROW_SYM, 0)

        def subquery(self):
            return self.getTypedRuleContext(PostgreSQLParser.SubqueryContext,0)


        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def interval_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Interval_exprContext,0)


        def case_when_statement(self):
            return self.getTypedRuleContext(PostgreSQLParser.Case_when_statementContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_simple_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_expr" ):
                listener.enterSimple_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_expr" ):
                listener.exitSimple_expr(self)




    def simple_expr(self):

        localctx = PostgreSQLParser.Simple_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_simple_expr)
        try:
            self.state = 827
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 816
                self.literal_value()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 817
                self.expression_list()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 818
                self.column_spec()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 819
                self.function_call()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 820
                self.match(PostgreSQLParser.ROW_SYM)
                self.state = 821
                self.expression_list()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 822
                self.subquery()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 823
                self.match(PostgreSQLParser.EXISTS)
                self.state = 824
                self.subquery()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 825
                self.interval_expr()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 826
                self.case_when_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Slice_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.LBRACK)
            else:
                return self.getToken(PostgreSQLParser.LBRACK, i)

        def INTEGER_NUM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.INTEGER_NUM)
            else:
                return self.getToken(PostgreSQLParser.INTEGER_NUM, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.RBRACK)
            else:
                return self.getToken(PostgreSQLParser.RBRACK, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COLON)
            else:
                return self.getToken(PostgreSQLParser.COLON, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_slice_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlice_spec" ):
                listener.enterSlice_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlice_spec" ):
                listener.exitSlice_spec(self)




    def slice_spec(self):

        localctx = PostgreSQLParser.Slice_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_slice_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 836 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 829
                self.match(PostgreSQLParser.LBRACK)
                self.state = 830
                self.match(PostgreSQLParser.INTEGER_NUM)
                self.state = 833
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==203:
                    self.state = 831
                    self.match(PostgreSQLParser.COLON)
                    self.state = 832
                    self.match(PostgreSQLParser.INTEGER_NUM)


                self.state = 835
                self.match(PostgreSQLParser.RBRACK)
                self.state = 838 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==210):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def select_statement(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_statementContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)




    def subquery(self):

        localctx = PostgreSQLParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_subquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 840
            self.match(PostgreSQLParser.LPAREN)
            self.state = 841
            self.select_statement()
            self.state = 842
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_atomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_specContext,0)


        def partition_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Partition_clauseContext,0)


        def alias(self):
            return self.getTypedRuleContext(PostgreSQLParser.AliasContext,0)


        def index_hint_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Index_hint_listContext,0)


        def subquery(self):
            return self.getTypedRuleContext(PostgreSQLParser.SubqueryContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def table_references(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_referencesContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def OJ_SYM(self):
            return self.getToken(PostgreSQLParser.OJ_SYM, 0)

        def table_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_referenceContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_referenceContext,i)


        def LEFT(self):
            return self.getToken(PostgreSQLParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(PostgreSQLParser.OUTER, 0)

        def JOIN_SYM(self):
            return self.getToken(PostgreSQLParser.JOIN_SYM, 0)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_atom" ):
                listener.enterTable_atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_atom" ):
                listener.exitTable_atom(self)




    def table_atom(self):

        localctx = PostgreSQLParser.Table_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_table_atom)
        self._la = 0 # Token type
        try:
            self.state = 870
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 844
                self.table_spec()
                self.state = 846
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                if la_ == 1:
                    self.state = 845
                    self.partition_clause()


                self.state = 849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7 or _la==236:
                    self.state = 848
                    self.alias()


                self.state = 852
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56 or _la==61 or _la==156:
                    self.state = 851
                    self.index_hint_list()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 854
                self.subquery()
                self.state = 855
                self.alias()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 857
                self.match(PostgreSQLParser.LPAREN)
                self.state = 858
                self.table_references()
                self.state = 859
                self.match(PostgreSQLParser.RPAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 861
                self.match(PostgreSQLParser.OJ_SYM)
                self.state = 862
                self.table_reference()
                self.state = 863
                self.match(PostgreSQLParser.LEFT)
                self.state = 864
                self.match(PostgreSQLParser.OUTER)
                self.state = 865
                self.match(PostgreSQLParser.JOIN_SYM)
                self.state = 866
                self.table_reference()
                self.state = 867
                self.match(PostgreSQLParser.ON)
                self.state = 868
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)




    def table_name(self):

        localctx = PostgreSQLParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 872
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_factor1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_factor2(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_factor2Context,0)


        def JOIN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.JOIN_SYM)
            else:
                return self.getToken(PostgreSQLParser.JOIN_SYM, i)

        def table_atom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_atomContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_atomContext,i)


        def join_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Join_conditionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Join_conditionContext,i)


        def INNER_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.INNER_SYM)
            else:
                return self.getToken(PostgreSQLParser.INNER_SYM, i)

        def CROSS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.CROSS)
            else:
                return self.getToken(PostgreSQLParser.CROSS, i)

        def LEFT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.LEFT)
            else:
                return self.getToken(PostgreSQLParser.LEFT, i)

        def RIGHT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.RIGHT)
            else:
                return self.getToken(PostgreSQLParser.RIGHT, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_factor1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_factor1" ):
                listener.enterTable_factor1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_factor1" ):
                listener.exitTable_factor1(self)




    def table_factor1(self):

        localctx = PostgreSQLParser.Table_factor1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_table_factor1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self.table_factor2()
            self.state = 885
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 876
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==33 or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 562949953421825) != 0):
                        self.state = 875
                        _la = self._input.LA(1)
                        if not(_la==33 or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 562949953421825) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 878
                    self.match(PostgreSQLParser.JOIN_SYM)
                    self.state = 879
                    self.table_atom()
                    self.state = 881
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                    if la_ == 1:
                        self.state = 880
                        self.join_condition()

             
                self.state = 887
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_factor2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_factor3(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_factor3Context,0)


        def STRAIGHT_JOIN(self):
            return self.getToken(PostgreSQLParser.STRAIGHT_JOIN, 0)

        def table_atom(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_atomContext,0)


        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_factor2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_factor2" ):
                listener.enterTable_factor2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_factor2" ):
                listener.exitTable_factor2(self)




    def table_factor2(self):

        localctx = PostgreSQLParser.Table_factor2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_table_factor2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 888
            self.table_factor3()
            self.state = 895
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 889
                self.match(PostgreSQLParser.STRAIGHT_JOIN)
                self.state = 890
                self.table_atom()
                self.state = 893
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                if la_ == 1:
                    self.state = 891
                    self.match(PostgreSQLParser.ON)
                    self.state = 892
                    self.expression()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_factor3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_factor4(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_factor4Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_factor4Context,i)


        def JOIN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.JOIN_SYM)
            else:
                return self.getToken(PostgreSQLParser.JOIN_SYM, i)

        def join_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Join_conditionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Join_conditionContext,i)


        def LEFT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.LEFT)
            else:
                return self.getToken(PostgreSQLParser.LEFT, i)

        def RIGHT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.RIGHT)
            else:
                return self.getToken(PostgreSQLParser.RIGHT, i)

        def OUTER(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.OUTER)
            else:
                return self.getToken(PostgreSQLParser.OUTER, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_factor3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_factor3" ):
                listener.enterTable_factor3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_factor3" ):
                listener.exitTable_factor3(self)




    def table_factor3(self):

        localctx = PostgreSQLParser.Table_factor3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_table_factor3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.table_factor4()
            self.state = 908
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 898
                    _la = self._input.LA(1)
                    if not(_la==73 or _la==113):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 900
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==98:
                        self.state = 899
                        self.match(PostgreSQLParser.OUTER)


                    self.state = 902
                    self.match(PostgreSQLParser.JOIN_SYM)
                    self.state = 903
                    self.table_factor4()
                    self.state = 904
                    self.join_condition() 
                self.state = 910
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_factor4Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_atom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_atomContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_atomContext,i)


        def NATURAL(self):
            return self.getToken(PostgreSQLParser.NATURAL, 0)

        def JOIN_SYM(self):
            return self.getToken(PostgreSQLParser.JOIN_SYM, 0)

        def LEFT(self):
            return self.getToken(PostgreSQLParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(PostgreSQLParser.RIGHT, 0)

        def OUTER(self):
            return self.getToken(PostgreSQLParser.OUTER, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_factor4

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_factor4" ):
                listener.enterTable_factor4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_factor4" ):
                listener.exitTable_factor4(self)




    def table_factor4(self):

        localctx = PostgreSQLParser.Table_factor4Context(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_table_factor4)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            self.table_atom()
            self.state = 921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==88:
                self.state = 912
                self.match(PostgreSQLParser.NATURAL)
                self.state = 917
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73 or _la==113:
                    self.state = 913
                    _la = self._input.LA(1)
                    if not(_la==73 or _la==113):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 915
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==98:
                        self.state = 914
                        self.match(PostgreSQLParser.OUTER)




                self.state = 919
                self.match(PostgreSQLParser.JOIN_SYM)
                self.state = 920
                self.table_atom()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_factor1(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_factor1Context,0)


        def alias(self):
            return self.getTypedRuleContext(PostgreSQLParser.AliasContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def values_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Values_listContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def column_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_reference" ):
                listener.enterTable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_reference" ):
                listener.exitTable_reference(self)




    def table_reference(self):

        localctx = PostgreSQLParser.Table_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_table_reference)
        self._la = 0 # Token type
        try:
            self.state = 932
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 923
                self.table_factor1()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 924
                self.match(PostgreSQLParser.LPAREN)
                self.state = 925
                self.values_list()
                self.state = 926
                self.match(PostgreSQLParser.RPAREN)
                self.state = 928
                self.alias()
                self.state = 930
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==208:
                    self.state = 929
                    self.column_list()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_referencesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_referenceContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_referenceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_references

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_references" ):
                listener.enterTable_references(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_references" ):
                listener.exitTable_references(self)




    def table_references(self):

        localctx = PostgreSQLParser.Table_referencesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_table_references)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 934
            self.table_reference()
            self.state = 939
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==205:
                self.state = 935
                self.match(PostgreSQLParser.COMMA)
                self.state = 936
                self.table_reference()
                self.state = 941
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(PostgreSQLParser.DOT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_spec" ):
                listener.enterTable_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_spec" ):
                listener.exitTable_spec(self)




    def table_spec(self):

        localctx = PostgreSQLParser.Table_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_table_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 945
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 942
                self.schema_name()
                self.state = 943
                self.match(PostgreSQLParser.DOT)


            self.state = 947
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Values_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(PostgreSQLParser.VALUES, 0)

        def expression_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Expression_listContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Expression_listContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_values_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValues_list" ):
                listener.enterValues_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValues_list" ):
                listener.exitValues_list(self)




    def values_list(self):

        localctx = PostgreSQLParser.Values_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_values_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            self.match(PostgreSQLParser.VALUES)

            self.state = 950
            self.expression_list()
            self.state = 955
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==205:
                self.state = 951
                self.match(PostgreSQLParser.COMMA)
                self.state = 952
                self.expression_list()
                self.state = 957
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(PostgreSQLParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)




    def where_clause(self):

        localctx = PostgreSQLParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 958
            self.match(PostgreSQLParser.WHERE)
            self.state = 959
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pg_sphere_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABS_VAL_OR_SCONTAINS(self):
            return self.getToken(PostgreSQLParser.ABS_VAL_OR_SCONTAINS, 0)

        def SCONTAINS2(self):
            return self.getToken(PostgreSQLParser.SCONTAINS2, 0)

        def NEGATION(self):
            return self.getToken(PostgreSQLParser.NEGATION, 0)

        def SLEFTCONTAINS2(self):
            return self.getToken(PostgreSQLParser.SLEFTCONTAINS2, 0)

        def SNOTCONTAINS(self):
            return self.getToken(PostgreSQLParser.SNOTCONTAINS, 0)

        def SNOTCONTAINS2(self):
            return self.getToken(PostgreSQLParser.SNOTCONTAINS2, 0)

        def SLEFTNOTCONTAINS(self):
            return self.getToken(PostgreSQLParser.SLEFTNOTCONTAINS, 0)

        def SLEFTNOTCONTAINS2(self):
            return self.getToken(PostgreSQLParser.SLEFTNOTCONTAINS2, 0)

        def AND_SYM(self):
            return self.getToken(PostgreSQLParser.AND_SYM, 0)

        def SNOTOVERLAP(self):
            return self.getToken(PostgreSQLParser.SNOTOVERLAP, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_pg_sphere_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPg_sphere_op" ):
                listener.enterPg_sphere_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPg_sphere_op" ):
                listener.exitPg_sphere_op(self)




    def pg_sphere_op(self):

        localctx = PostgreSQLParser.Pg_sphere_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_pg_sphere_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 961
            _la = self._input.LA(1)
            if not(((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 8523874307) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sbit_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pg_sphere_object(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Pg_sphere_objectContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Pg_sphere_objectContext,i)


        def spoint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.SpointContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.SpointContext,i)


        def pg_sphere_op(self):
            return self.getTypedRuleContext(PostgreSQLParser.Pg_sphere_opContext,0)


        def simple_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Simple_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Simple_exprContext,i)


        def EQ(self):
            return self.getToken(PostgreSQLParser.EQ, 0)

        def sline(self):
            return self.getTypedRuleContext(PostgreSQLParser.SlineContext,0)


        def SCROSS(self):
            return self.getToken(PostgreSQLParser.SCROSS, 0)

        def SDISTANCE(self):
            return self.getToken(PostgreSQLParser.SDISTANCE, 0)

        def scircle(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ScircleContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ScircleContext,i)


        def SLENGTH(self):
            return self.getToken(PostgreSQLParser.SLENGTH, 0)

        def sbox(self):
            return self.getTypedRuleContext(PostgreSQLParser.SboxContext,0)


        def spoly(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpolyContext,0)


        def SCENTER(self):
            return self.getToken(PostgreSQLParser.SCENTER, 0)

        def sellipse(self):
            return self.getTypedRuleContext(PostgreSQLParser.SellipseContext,0)


        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.MINUS)
            else:
                return self.getToken(PostgreSQLParser.MINUS, i)

        def spath(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpathContext,0)


        def strans(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.StransContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.StransContext,i)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.PLUS)
            else:
                return self.getToken(PostgreSQLParser.PLUS, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sbit_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSbit_expr" ):
                listener.enterSbit_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSbit_expr" ):
                listener.exitSbit_expr(self)




    def sbit_expr(self):

        localctx = PostgreSQLParser.Sbit_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_sbit_expr)
        self._la = 0 # Token type
        try:
            self.state = 1037
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 965
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 6, 8, 9, 10, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 41, 45, 48, 49, 51, 54, 58, 66, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 92, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 115, 116, 117, 118, 119, 122, 124, 126, 127, 128, 129, 130, 131, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 158, 159, 160, 162, 163, 164, 168, 169, 173, 174, 175, 176, 177, 178, 180, 181, 208, 211, 212, 230, 231, 232, 233, 235, 236]:
                    self.state = 963
                    self.pg_sphere_object()
                    pass
                elif token in [172]:
                    self.state = 964
                    self.spoint()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 969
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [172]:
                    self.state = 967
                    self.spoint()
                    pass
                elif token in [1, 2, 6, 8, 9, 10, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 41, 45, 48, 49, 51, 54, 58, 66, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 92, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 115, 116, 117, 118, 119, 122, 124, 126, 127, 128, 129, 130, 131, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 158, 159, 160, 162, 163, 164, 168, 169, 180, 181, 208, 211, 212, 230, 231, 232, 233, 235, 236]:
                    self.state = 968
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 971
                self.pg_sphere_op()
                self.state = 972
                self.pg_sphere_object()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 974
                self.pg_sphere_object()
                self.state = 975
                self.match(PostgreSQLParser.EQ)
                self.state = 976
                self.pg_sphere_object()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 978
                self.pg_sphere_object()
                self.state = 979
                self.pg_sphere_op()
                self.state = 980
                self.pg_sphere_object()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 988
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
                if la_ == 1:
                    self.state = 982
                    self.sline()
                    pass

                elif la_ == 2:
                    self.state = 983
                    self.simple_expr()
                    self.state = 984
                    self.match(PostgreSQLParser.SCROSS)
                    self.state = 985
                    self.sline()
                    pass

                elif la_ == 3:
                    self.state = 987
                    self.simple_expr()
                    pass


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 993
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [172]:
                    self.state = 990
                    self.spoint()
                    pass
                elif token in [173]:
                    self.state = 991
                    self.scircle()
                    pass
                elif token in [1, 2, 6, 8, 9, 10, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 41, 45, 48, 49, 51, 54, 58, 66, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 92, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 115, 116, 117, 118, 119, 122, 124, 126, 127, 128, 129, 130, 131, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 158, 159, 160, 162, 163, 164, 168, 169, 180, 181, 208, 211, 212, 230, 231, 232, 233, 235, 236]:
                    self.state = 992
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 995
                self.match(PostgreSQLParser.SDISTANCE)
                self.state = 999
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [172]:
                    self.state = 996
                    self.spoint()
                    pass
                elif token in [173]:
                    self.state = 997
                    self.scircle()
                    pass
                elif token in [1, 2, 6, 8, 9, 10, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 41, 45, 48, 49, 51, 54, 58, 66, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 92, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 115, 116, 117, 118, 119, 122, 124, 126, 127, 128, 129, 130, 131, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 158, 159, 160, 162, 163, 164, 168, 169, 180, 181, 208, 211, 212, 230, 231, 232, 233, 235, 236]:
                    self.state = 998
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1001
                self.match(PostgreSQLParser.SLENGTH)
                self.state = 1006
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [173]:
                    self.state = 1002
                    self.scircle()
                    pass
                elif token in [178]:
                    self.state = 1003
                    self.sbox()
                    pass
                elif token in [176]:
                    self.state = 1004
                    self.spoly()
                    pass
                elif token in [1, 2, 6, 8, 9, 10, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 41, 45, 48, 49, 51, 54, 58, 66, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 92, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 115, 116, 117, 118, 119, 122, 124, 126, 127, 128, 129, 130, 131, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 158, 159, 160, 162, 163, 164, 168, 169, 180, 181, 208, 211, 212, 230, 231, 232, 233, 235, 236]:
                    self.state = 1005
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1008
                self.match(PostgreSQLParser.SCENTER)
                self.state = 1012
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [173]:
                    self.state = 1009
                    self.scircle()
                    pass
                elif token in [175]:
                    self.state = 1010
                    self.sellipse()
                    pass
                elif token in [1, 2, 6, 8, 9, 10, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 41, 45, 48, 49, 51, 54, 58, 66, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 92, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 115, 116, 117, 118, 119, 122, 124, 126, 127, 128, 129, 130, 131, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 158, 159, 160, 162, 163, 164, 168, 169, 180, 181, 208, 211, 212, 230, 231, 232, 233, 235, 236]:
                    self.state = 1011
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1014
                self.match(PostgreSQLParser.MINUS)
                self.state = 1018
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [174]:
                    self.state = 1015
                    self.sline()
                    pass
                elif token in [177]:
                    self.state = 1016
                    self.spath()
                    pass
                elif token in [1, 2, 6, 8, 9, 10, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 41, 45, 48, 49, 51, 54, 58, 66, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 92, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 115, 116, 117, 118, 119, 122, 124, 126, 127, 128, 129, 130, 131, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 158, 159, 160, 162, 163, 164, 168, 169, 180, 181, 208, 211, 212, 230, 231, 232, 233, 235, 236]:
                    self.state = 1017
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1027
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [172]:
                    self.state = 1020
                    self.spoint()
                    pass
                elif token in [173]:
                    self.state = 1021
                    self.scircle()
                    pass
                elif token in [174]:
                    self.state = 1022
                    self.sline()
                    pass
                elif token in [175]:
                    self.state = 1023
                    self.sellipse()
                    pass
                elif token in [176]:
                    self.state = 1024
                    self.spoly()
                    pass
                elif token in [177]:
                    self.state = 1025
                    self.spath()
                    pass
                elif token in [1, 2, 6, 8, 9, 10, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 41, 45, 48, 49, 51, 54, 58, 66, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 92, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 115, 116, 117, 118, 119, 122, 124, 126, 127, 128, 129, 130, 131, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 158, 159, 160, 162, 163, 164, 168, 169, 180, 181, 208, 211, 212, 230, 231, 232, 233, 235, 236]:
                    self.state = 1026
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1033 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1030
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==211 or _la==212:
                        self.state = 1029
                        _la = self._input.LA(1)
                        if not(_la==211 or _la==212):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 1032
                    self.strans()
                    self.state = 1035 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 179)) & ~0x3f) == 0 and ((1 << (_la - 179)) & 12884901889) != 0)):
                        break

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpointContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPOINT(self):
            return self.getToken(PostgreSQLParser.SPOINT, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def bit_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,i)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_spoint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpoint" ):
                listener.enterSpoint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpoint" ):
                listener.exitSpoint(self)




    def spoint(self):

        localctx = PostgreSQLParser.SpointContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_spoint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1039
            self.match(PostgreSQLParser.SPOINT)
            self.state = 1040
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1041
            self.bit_expr()
            self.state = 1042
            self.match(PostgreSQLParser.COMMA)
            self.state = 1043
            self.bit_expr()
            self.state = 1044
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScircleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCIRCLE(self):
            return self.getToken(PostgreSQLParser.SCIRCLE, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def spoint(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpointContext,0)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_scircle

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScircle" ):
                listener.enterScircle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScircle" ):
                listener.exitScircle(self)




    def scircle(self):

        localctx = PostgreSQLParser.ScircleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_scircle)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1046
            self.match(PostgreSQLParser.SCIRCLE)
            self.state = 1047
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1048
            self.spoint()
            self.state = 1049
            self.match(PostgreSQLParser.COMMA)
            self.state = 1050
            self.bit_expr()
            self.state = 1051
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SlineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLINE(self):
            return self.getToken(PostgreSQLParser.SLINE, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def spoint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.SpointContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.SpointContext,i)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def strans(self):
            return self.getTypedRuleContext(PostgreSQLParser.StransContext,0)


        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sline

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSline" ):
                listener.enterSline(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSline" ):
                listener.exitSline(self)




    def sline(self):

        localctx = PostgreSQLParser.SlineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_sline)
        try:
            self.state = 1067
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1053
                self.match(PostgreSQLParser.SLINE)
                self.state = 1054
                self.match(PostgreSQLParser.LPAREN)
                self.state = 1055
                self.spoint()
                self.state = 1056
                self.match(PostgreSQLParser.COMMA)
                self.state = 1057
                self.spoint()
                self.state = 1058
                self.match(PostgreSQLParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1060
                self.match(PostgreSQLParser.SLINE)
                self.state = 1061
                self.match(PostgreSQLParser.LPAREN)
                self.state = 1062
                self.strans()
                self.state = 1063
                self.match(PostgreSQLParser.COMMA)
                self.state = 1064
                self.bit_expr()
                self.state = 1065
                self.match(PostgreSQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SellipseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELLIPSE(self):
            return self.getToken(PostgreSQLParser.SELLIPSE, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def spoint(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpointContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def bit_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,i)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sellipse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSellipse" ):
                listener.enterSellipse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSellipse" ):
                listener.exitSellipse(self)




    def sellipse(self):

        localctx = PostgreSQLParser.SellipseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_sellipse)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1069
            self.match(PostgreSQLParser.SELLIPSE)
            self.state = 1070
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1071
            self.spoint()
            self.state = 1072
            self.match(PostgreSQLParser.COMMA)
            self.state = 1073
            self.bit_expr()
            self.state = 1074
            self.match(PostgreSQLParser.COMMA)
            self.state = 1075
            self.bit_expr()
            self.state = 1076
            self.match(PostgreSQLParser.COMMA)
            self.state = 1077
            self.bit_expr()
            self.state = 1078
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SboxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SBOX(self):
            return self.getToken(PostgreSQLParser.SBOX, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def spoint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.SpointContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.SpointContext,i)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sbox

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSbox" ):
                listener.enterSbox(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSbox" ):
                listener.exitSbox(self)




    def sbox(self):

        localctx = PostgreSQLParser.SboxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_sbox)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1080
            self.match(PostgreSQLParser.SBOX)
            self.state = 1081
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1082
            self.spoint()
            self.state = 1083
            self.match(PostgreSQLParser.COMMA)
            self.state = 1084
            self.spoint()
            self.state = 1085
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpolyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPOLY(self):
            return self.getToken(PostgreSQLParser.SPOLY, 0)

        def TEXT_STRING(self):
            return self.getToken(PostgreSQLParser.TEXT_STRING, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def column_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_specContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_spoly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpoly" ):
                listener.enterSpoly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpoly" ):
                listener.exitSpoly(self)




    def spoly(self):

        localctx = PostgreSQLParser.SpolyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_spoly)
        try:
            self.state = 1098
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1087
                self.match(PostgreSQLParser.SPOLY)
                self.state = 1088
                self.match(PostgreSQLParser.TEXT_STRING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1089
                self.match(PostgreSQLParser.SPOLY)
                self.state = 1090
                self.match(PostgreSQLParser.LPAREN)
                self.state = 1091
                self.column_spec()
                self.state = 1092
                self.match(PostgreSQLParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1094
                self.match(PostgreSQLParser.SPOLY)
                self.state = 1095
                self.match(PostgreSQLParser.LPAREN)
                self.state = 1096
                self.match(PostgreSQLParser.TEXT_STRING)
                self.state = 1097
                self.match(PostgreSQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPATH(self):
            return self.getToken(PostgreSQLParser.SPATH, 0)

        def TEXT_STRING(self):
            return self.getToken(PostgreSQLParser.TEXT_STRING, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def column_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_specContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_spath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpath" ):
                listener.enterSpath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpath" ):
                listener.exitSpath(self)




    def spath(self):

        localctx = PostgreSQLParser.SpathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_spath)
        try:
            self.state = 1107
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1100
                self.match(PostgreSQLParser.SPATH)
                self.state = 1101
                self.match(PostgreSQLParser.TEXT_STRING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1102
                self.match(PostgreSQLParser.SPATH)
                self.state = 1103
                self.match(PostgreSQLParser.LPAREN)
                self.state = 1104
                self.column_spec()
                self.state = 1105
                self.match(PostgreSQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StransContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRANS(self):
            return self.getToken(PostgreSQLParser.STRANS, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def bit_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def TRANS(self):
            return self.getToken(PostgreSQLParser.TRANS, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_strans

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrans" ):
                listener.enterStrans(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrans" ):
                listener.exitStrans(self)




    def strans(self):

        localctx = PostgreSQLParser.StransContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_strans)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1109
            self.match(PostgreSQLParser.STRANS)
            self.state = 1110
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1111
            self.bit_expr()
            self.state = 1112
            self.match(PostgreSQLParser.COMMA)
            self.state = 1113
            self.bit_expr()
            self.state = 1114
            self.match(PostgreSQLParser.COMMA)
            self.state = 1115
            self.bit_expr()
            self.state = 1116
            self.match(PostgreSQLParser.COMMA)
            self.state = 1117
            self.match(PostgreSQLParser.TRANS)
            self.state = 1118
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Spoint_to_arrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPOINT_TO_ARRAY(self):
            return self.getToken(PostgreSQLParser.SPOINT_TO_ARRAY, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def spoint(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpointContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_spoint_to_array

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpoint_to_array" ):
                listener.enterSpoint_to_array(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpoint_to_array" ):
                listener.exitSpoint_to_array(self)




    def spoint_to_array(self):

        localctx = PostgreSQLParser.Spoint_to_arrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_spoint_to_array)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1120
            self.match(PostgreSQLParser.SPOINT_TO_ARRAY)
            self.state = 1121
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1122
            self.spoint()
            self.state = 1123
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Spoint_to_array_degContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPOINT_TO_ARRAY_DEG(self):
            return self.getToken(PostgreSQLParser.SPOINT_TO_ARRAY_DEG, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def spoint(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpointContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_spoint_to_array_deg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpoint_to_array_deg" ):
                listener.enterSpoint_to_array_deg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpoint_to_array_deg" ):
                listener.exitSpoint_to_array_deg(self)




    def spoint_to_array_deg(self):

        localctx = PostgreSQLParser.Spoint_to_array_degContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_spoint_to_array_deg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            self.match(PostgreSQLParser.SPOINT_TO_ARRAY_DEG)
            self.state = 1126
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1127
            self.spoint()
            self.state = 1128
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sbox_to_arrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SBOX_TO_ARRAY(self):
            return self.getToken(PostgreSQLParser.SBOX_TO_ARRAY, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def sbox(self):
            return self.getTypedRuleContext(PostgreSQLParser.SboxContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sbox_to_array

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSbox_to_array" ):
                listener.enterSbox_to_array(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSbox_to_array" ):
                listener.exitSbox_to_array(self)




    def sbox_to_array(self):

        localctx = PostgreSQLParser.Sbox_to_arrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_sbox_to_array)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1130
            self.match(PostgreSQLParser.SBOX_TO_ARRAY)
            self.state = 1131
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1132
            self.sbox()
            self.state = 1133
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sbox_to_array_degContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SBOX_TO_ARRAY_DEG(self):
            return self.getToken(PostgreSQLParser.SBOX_TO_ARRAY_DEG, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def sbox(self):
            return self.getTypedRuleContext(PostgreSQLParser.SboxContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sbox_to_array_deg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSbox_to_array_deg" ):
                listener.enterSbox_to_array_deg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSbox_to_array_deg" ):
                listener.exitSbox_to_array_deg(self)




    def sbox_to_array_deg(self):

        localctx = PostgreSQLParser.Sbox_to_array_degContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_sbox_to_array_deg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1135
            self.match(PostgreSQLParser.SBOX_TO_ARRAY_DEG)
            self.state = 1136
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1137
            self.sbox()
            self.state = 1138
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scircle_to_arrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCIRCLE_TO_ARRAY(self):
            return self.getToken(PostgreSQLParser.SCIRCLE_TO_ARRAY, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def scircle(self):
            return self.getTypedRuleContext(PostgreSQLParser.ScircleContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_scircle_to_array

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScircle_to_array" ):
                listener.enterScircle_to_array(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScircle_to_array" ):
                listener.exitScircle_to_array(self)




    def scircle_to_array(self):

        localctx = PostgreSQLParser.Scircle_to_arrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_scircle_to_array)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1140
            self.match(PostgreSQLParser.SCIRCLE_TO_ARRAY)
            self.state = 1141
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1142
            self.scircle()
            self.state = 1143
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scircle_to_array_degContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCIRCLE_TO_ARRAY_DEG(self):
            return self.getToken(PostgreSQLParser.SCIRCLE_TO_ARRAY_DEG, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def scircle(self):
            return self.getTypedRuleContext(PostgreSQLParser.ScircleContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_scircle_to_array_deg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScircle_to_array_deg" ):
                listener.enterScircle_to_array_deg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScircle_to_array_deg" ):
                listener.exitScircle_to_array_deg(self)




    def scircle_to_array_deg(self):

        localctx = PostgreSQLParser.Scircle_to_array_degContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_scircle_to_array_deg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1145
            self.match(PostgreSQLParser.SCIRCLE_TO_ARRAY_DEG)
            self.state = 1146
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1147
            self.scircle()
            self.state = 1148
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Spoly_to_arrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPOLY_TO_ARRAY(self):
            return self.getToken(PostgreSQLParser.SPOLY_TO_ARRAY, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def spoly(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpolyContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_spoly_to_array

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpoly_to_array" ):
                listener.enterSpoly_to_array(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpoly_to_array" ):
                listener.exitSpoly_to_array(self)




    def spoly_to_array(self):

        localctx = PostgreSQLParser.Spoly_to_arrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_spoly_to_array)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1150
            self.match(PostgreSQLParser.SPOLY_TO_ARRAY)
            self.state = 1151
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1152
            self.spoly()
            self.state = 1153
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Spoly_to_array_degContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPOLY_TO_ARRAY_DEG(self):
            return self.getToken(PostgreSQLParser.SPOLY_TO_ARRAY_DEG, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def spoly(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpolyContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_spoly_to_array_deg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpoly_to_array_deg" ):
                listener.enterSpoly_to_array_deg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpoly_to_array_deg" ):
                listener.exitSpoly_to_array_deg(self)




    def spoly_to_array_deg(self):

        localctx = PostgreSQLParser.Spoly_to_array_degContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_spoly_to_array_deg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1155
            self.match(PostgreSQLParser.SPOLY_TO_ARRAY_DEG)
            self.state = 1156
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1157
            self.spoly()
            self.state = 1158
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pg_sphere_objectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scircle(self):
            return self.getTypedRuleContext(PostgreSQLParser.ScircleContext,0)


        def sline(self):
            return self.getTypedRuleContext(PostgreSQLParser.SlineContext,0)


        def sellipse(self):
            return self.getTypedRuleContext(PostgreSQLParser.SellipseContext,0)


        def sbox(self):
            return self.getTypedRuleContext(PostgreSQLParser.SboxContext,0)


        def spoly(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpolyContext,0)


        def spath(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpathContext,0)


        def simple_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Simple_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_pg_sphere_object

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPg_sphere_object" ):
                listener.enterPg_sphere_object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPg_sphere_object" ):
                listener.exitPg_sphere_object(self)




    def pg_sphere_object(self):

        localctx = PostgreSQLParser.Pg_sphere_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_pg_sphere_object)
        try:
            self.state = 1167
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [173]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1160
                self.scircle()
                pass
            elif token in [174]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1161
                self.sline()
                pass
            elif token in [175]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1162
                self.sellipse()
                pass
            elif token in [178]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1163
                self.sbox()
                pass
            elif token in [176]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1164
                self.spoly()
                pass
            elif token in [177]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1165
                self.spath()
                pass
            elif token in [1, 2, 6, 8, 9, 10, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 41, 45, 48, 49, 51, 54, 58, 66, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 92, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 115, 116, 117, 118, 119, 122, 124, 126, 127, 128, 129, 130, 131, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 158, 159, 160, 162, 163, 164, 168, 169, 180, 181, 208, 211, 212, 230, 231, 232, 233, 235, 236]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1166
                self.simple_expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





