.\" Man page generated from reStructuredText.
.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.TH "PYBUILD" "5" "May 16, 2025" "Portmod 2.9.1" "Portmod"
.SH NAME
pybuild \- Portmod Repositories and related files
.sp
Repositories have the following basic file structure:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\&./profiles/repo_name
\&./CATEGORY_NAME/metadata.yaml
\&./CATEGORY_NAME/PACKAGE_NAME/PACKAGE_NAME\-VER.pybuild
\&./CATEGORY_NAME/PACKAGE_NAME/PACKAGE_NAME\-OTHER_VER.pybuild
\&./CATEGORY_NAME/PACKAGE_NAME/Manifest
\&./CATEGORY_NAME/PACKAGE_NAME/metadata.yaml
.ft P
.fi
.UNINDENT
.UNINDENT
.SH CATEGORIES
.sp
Any category must be listed in \fBprofiles/categories\fP and contain a
\fI\%metadata.yaml\fP file.
.SH PACKAGE DIRECTORIES
.SS Package Files
.sp
Package files can be created as either python\-like pybuild files,
or yaml files.
.sp
See the API for more details about available fields and functions.
.sp
Note that this guide is deliberately very simple. Many game engines require custom
installation options to register mods, so portmod package repositories generally
provide custom superclasses for use in packages to ensure that any required configuration
is updated. See the guides on \fI\%The Wiki\fP\&.
.SS Pybuild Packages
.sp
Pybuild files have a syntax which is equivalent to python 3.8 (the minimum version supported), not including restricted
syntax listed on the \fI\%Sandbox\fP page.
.sp
They should generally follow a structure similar to the following example:
.sp
\fBexample\-suite\-0.17.pybuild\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
import os
import shutil
from pybuild import Pybuild2
from pybuild.info import PV


class Package(Pybuild2):
    NAME = \(dqExample Suite\(dq
    DESC = \(dqA demo showing the capabilities of the OpenMW engine\(dq
    HOMEPAGE = \(dqhttps://github.com/OpenMW/example\-suite\(dq
    LICENSE = \(dqCC\-BY\-3.0 CC\-BY\-SA\-3.0 CC\-BY\-4.0\(dq
    RDEPEND = \(dq!!base/morrowind\(dq
    KEYWORDS = \(dq~openmw\(dq
    SRC_URI = f\(dq\(dq\(dq
        https://github.com/OpenMW/example\-suite/releases/download/{PV}/ExampleSuiteVersion{PV}.7z
    \(dq\(dq\(dq
    S = f\(dqExampleSuiteVersion{PV}/openmw\-template\(dq
    # Actually included in the default DOCS, but note that the working directory must be correct
    # for them to recognized since subdirectories won\(aqt be searched.
    DOCS = [\(dqAUTHORS.md\(dq, \(dqCHANGELOG.md\(dq, \(dqREADME.md\(dq]

    def src_install(self):
        os.makedirs(os.path.join(self.D, \(dqpkg\(dq, \(dqbase\(dq))
        shutil.move(\(dqdata\(dq, os.path.join(self.D, \(dqpkg\(dq, \(dqbase\(dq, \(dqexample\-suite\(dq))
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Yaml Packages
.sp
New in version 2.7.

.sp
Yaml packages cannot contain scripts, but can inherit
from \fI\%Common Packages\fP with custom scripts.
.sp
It is not currently possible to install anything other than documentation
in yaml\-based package files without inheriting from a custom class.
.sp
Values in the \fI\%pybuild.info\fP module can be accessed using \fB$\fP\-based
substitutions, as implemented by \fI\%python Template strings\fP)
.sp
\fBexample\-suite\-0.17.yaml\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
NAME: Example Suite
DESC: A demo showing the capabilities of the OpenMW engine
HOMEPAGE: https://github.com/OpenMW/example\-suite
LICENSE: CC\-BY\-3.0 CC\-BY\-SA\-3.0 CC\-BY\-4.0
RDEPEND: \(dq!!base/morrowind\(dq
KEYWORDS: ~openmw
SRC_URI:
   https://github.com/OpenMW/example\-suite/releases/download/${PV}/ExampleSuiteVersion${PV}.7z
S: ExampleSuiteVersion${PV}/openmw\-template
DOCS: [AUTHORS.md, CHANGELOG.md, README.md]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS metadata.yaml
.sp
metadata.yaml files are used to store additional information about mods
and categories. Note that no information stored in metadata.yaml should
be specific to a particular version of a mod.
.TS
center;
|l|l|.
_
T{
Key
T}	T{
Value
T}
_
T{
longdescription
T}	T{
Description of the mod or
category.
T}
_
T{
maintainer
T}	T{
Maintainer, or list of
maintainers for the package in
the form of Person (email is
required, name and desc are
optional) or Group
T}
_
T{
use
T}	T{
Use flags and their descriptions.
Key is the flag name, value is
the description
T}
_
T{
upstream
T}	T{
Description of the mod’s upstream
information. Is a dictionary with
one or more of the entries listed
in the table below
T}
_
T{
tags
T}	T{
A set of tags which describe this
package.
These tags are primarily used by
the search indexer, and may be
used by external software to
categorise packages.
T}
_
.TE
.SS Upstream contents
.TS
center;
|l|l|.
_
T{
Key
T}	T{
Value
T}
_
T{
maintainer
T}	T{
maintainers/authors of the
original mod. Must be either a
Person or a list of Person with a
name attribute and/or an email
attribute.
T}
_
T{
changelog
T}	T{
URL where a changelog for the mod
can be found. Must be version
independent
T}
_
T{
doc
T}	T{
URL where the location of the
upstream documentation can be
found. The link must not point to
any third party documentation and
must be version independent
T}
_
T{
bugs\-to
T}	T{
A place where bugs can be
reported in the form of an URL or
an e\-mail address prefixed with
\fBmailto:\fP
T}
_
.TE
.SS Person
.TS
center;
|l|l|.
_
T{
Key
T}	T{
Value
T}
_
T{
name
T}	T{
Name of maintainer
T}
_
T{
email
T}	T{
email address of maintainer
T}
_
T{
desc
T}	T{
Can be used to note details about
the current maintainership E.g.
Willing to pass this off to
someone else
T}
_
.TE
.sp
E.g.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
name: foo
email: foo@example.org
# If provided with one argument, that argument is the name of the maintainer
# The person tag can be omitted and a string can be provided instead,
# in which case the string is treated as the maintainer\(aqs name,
# with email optionally following in angle brackets.
baz <foo@example.org>
# Note that maps can also be written in a single line using braces:
{ name: foo, email: foo@example.org }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Groups
.TS
center;
|l|l|.
_
T{
Key
T}	T{
Value
T}
_
T{
group
T}	T{
Group identifier (as listed in \fBmetadata/groups.yaml\fP)
T}
_
.TE
.sp
E.g.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
group: foo
# Note that the groups cannot be provided as just a string,
# as strings are treated as person maintainers
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Mod Metadata
.sp
Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
maintainer:
    \- name: foo
      email: foo@example.org
      desc: E.g. Willing to pass this off to someone else
    \- group: Group name, as defined in metadata/groups.yaml
longdescription: \(dqLong mod description. Can be multiple lines long, but
should not contain version\-specific information.
That being said, confine this to a general description only and link to
upstream documentation rather than put extremely large amounts of detail
in this string\(dq
use:
    flag: description of flag
    otherflag: description
upstream:
    maintainer:
        name: foo
        email: foo@example.org
    changelog: http://doc.example.org/changelog
    doc: http://doc.example.org/doc
    bugs\-to: mailto:foo@example.org
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Category Metadata
.sp
Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
longdescription: The patches category contains mods that combine information from other mods to build a patch.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
When categories are created, a metadata.yaml containing a
longdescription is required.
.SS Manifest
.sp
In the tree, every package has a \fBManifest\fP file. The Manifest file contains
various hashes and file size data for every external source that is to
be fetched. This is used primarily to verify the integrity of external files.
.SS Generating the Manifest
.sp
To generate the Manifest, use \fBinquisitor manifest foo.pybuild\fP\&. When
new sources are added or removed, the \fBManifest\fP must be regenerated.
.SS Structure
.sp
Manifest files are plain text files with the following format:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<type> <filename> <size> <hash\-type> <hash> [<hash\-type> <hash> ...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Members
.TS
center;
|l|l|.
_
T{
\fBtype\fP
T}	T{
The type of the file. Supported types are \fBDIST\fP (for remote package sources) and \fBLINK\fP and \fBMISC\fP (used internally for \fBCONTENTS\fP files in the package DB).
T}
_
T{
\fBfilename\fP
T}	T{
The name of the file the manifest entry references.
T}
_
T{
\fBsize\fP
T}	T{
The size of the file as a decimal number, in bytes
T}
_
T{
\fBhash\-type\fP
T}	T{
One of the supported hash types listed below
T}
_
T{
\fBhash\fP
T}	T{
The hash of the file as a hexadecimal number, matching the preceeding hash type.
T}
_
.TE
.SS Supported Hash Types
.sp
The hashes currently supported by portmod are:
.INDENT 0.0
.IP \(bu 2
BLAKE2B
.IP \(bu 2
BLAKE3 (recommended for performance)
.IP \(bu 2
MD5
.IP \(bu 2
SHA256 (SHA\-2)
.IP \(bu 2
SHA512 (SHA\-2)
.UNINDENT
.SS External Resources
.sp
\fI\%https://wiki.gentoo.org/wiki/Repository_format/package/Manifest\fP
.sp
Package directories must be in a subdirectory of a category and their
directory name should be the same as the base name of the package files
(excluding version).
.sp
E.g.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
category/example\-package
├── files
│\ \  └── some\-extra\-file.txt
├── Manifest
├── metadata.yaml
├── example\-package\-1.0.pybuild
└── example\-package\-1.1.yaml
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fI\%Manifest\fP file is optional, but is required to contain a manifest
entry for each source file listed in \fI\%SRC_URI\fP (i.e.\ only optional for
pybuilds without sources).
.sp
\fI\%metadata.yaml\fP is optional.
.sp
One or more package files must be included. These files must begin with the \fI\%package name\fP, followed by a hyphen, then the \fI\%package version\fP, and end in either the \fB\&.yaml\fP or \fB\&.pybuild\fP extension. For details on the content of packages, see \fI\%Package Files\fP\&.
.sp
Optionally, extra files can be distributed with the package in the \fBfiles\fP directory.
These should be small, plaintext files such as patch files, and can be referred to in
installation scripts via the \fI\%FILESDIR\fP attribute.
.SH PROFILES DIRECTORY
.sp
The files in profiles are optional, except for repo_name.
.TS
center;
|l|l|.
_
T{
File
T}	T{
Description
T}
_
T{
arch.list
T}	T{
A newlline\-separated list of architectures. An
architecture may refer to a game\-engine variant
or an operating system, and is used to
distinguish configurations where a package may be
stable when used in the context of one, but
unstable in the context of another.
T}
_
T{
categories
T}	T{
A newline\-separated list of categories. These
determine which directories in the root of the
repository are considered categories containing
packages. Directories not listed in this file
will not be detected as containing packages.
T}
_
T{
license_groups.yaml
T}	T{
A yaml file containing a mapping from license
groups to a whitespace\-separated list of license
names. Each group can be referenced within
ACCEPT_LICENSE by prefixing it with an \fB@\fP, and
they also reference each other using the same
method.
T}
_
T{
package.mask
T}	T{
A \fI\%package.mask\fP
file which applies regardless of profile
T}
_
T{
profiles.yaml
T}	T{
A yaml file containing profile declarations. See
\fI\%Profiles\fP\&.
T}
_
T{
repo_name
T}	T{
A file containing a single line with the name of
this repository
T}
_
T{
use.yaml
T}	T{
A file describing the global use flags,
containing a mapping of use flag names to
descriptions
T}
_
T{
use.alias.yaml
T}	T{
A file describing global use flags which have
their values tied to packages. Contains a mapping
of use flag names to package atoms.
T}
_
T{
desc
T}	T{
A directory containing USE_EXPAND descriptor
files. Each file has the same form as
\fBuse.yaml\fP\&.
T}
_
.TE
.sp
Additionally, there are a number of files related to specific profiles. See \fI\%Profiles\fP\&.
.SS Profiles
.sp
Profiles are used to provide preset configurations for users.
.SS profiles.yaml
.sp
The file \fBprofiles/profiles.yaml\fP describes the available profiles. It
contains a mapping with the architecture as the key at the root,
followed by a mapping of profile paths to profile stability keywords
(either stable or unstable). These paths should refer to a directory
within the profiles directory.
.sp
E.g.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
openmw:
    dev: unstable
    default/openmw/1.0: stable
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Profile Files
.sp
Within each profile directory the following files can be used to
customize the profile.
.INDENT 0.0
.IP \(bu 2
\fI\%packages\fP
.IP \(bu 2
\fI\%package.mask\fP
.IP \(bu 2
\fI\%package.use\fP
.IP \(bu 2
\fI\%use.force\fP
.IP \(bu 2
\fI\%package.use.force\fP
.IP \(bu 2
\fI\%parent\fP
.IP \(bu 2
\fI\%license_groups.yaml\fP
.IP \(bu 2
\fI\%defaults.conf\fP
.UNINDENT
.SS packages
.sp
A list of atoms to be included in the system set and thus installed by
default. Each line to be included in the system set should start with an
asterisk (\fB*\fP), followed by the atom to include. Lines not beginning
in an asterisk will be ignored.
.SS package.mask
.sp
A profile\-specific list of masked packages.
.sp
See \fI\%package.mask\fP
.SS package.use
.sp
Default per\-package use flags. The file can contain comments (starting
with \fB#\fP) and lines containing a qualified atom (i.e.\ containing a
category, can also include versions and operators) followed by a
whitespace\-separated list of flags. Flags can be disabled by prefixing
them with a \fB\-\fP\&.
.sp
See \fI\%package.use\fP
.SS use.force
.sp
Global use flags that are required to always be enabled in this profile.
The format is the same as the contents of the \fBUSE\fP variable in
\fI\%defaults.conf\fP\&.
.SS package.use.force
.sp
Per\-package use flags that are required to always be enabled in this
profile. The format is the same as package.use.
.SS parent
.sp
Defines another directory (via relative path) to be included in the
current profile. This allows profiles to share configuration, and it is
recommended that all profiles include the \fBprofiles/base\fP directory in
their hierarchy.
.SS license_groups.yaml
.sp
A mapping of license group names to the licenses in the group. Licenses should be a whitespace\-separated list.
Licenses listed are merged with the license groups in master repositories.
.sp
The special \fBREDISTRIBUTABLE\fP license group is used to determine if a package can be mirrored (and also if mirrors should be checked when fetching the file).
.sp
E.g.
.sp
profiles/license_groups.yaml
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
REDISTRIBUTABLE: CC\-BY CC\-0 GPL\-3
.ft P
.fi
.UNINDENT
.UNINDENT
.SS defaults.conf
.sp
The format is the same as \fI\%portmod.conf\fP, but additional
variables are available. Also note that unlike the user\-defined
defaults.conf, variables defined in defaults.conf which are not listed
on this page will not be set as environment variables (this is for
security reasons, as there are variables such as PATH which could be
abused).
.sp
As portmod.conf is a python file (albeit a restricted subset of the
language), other variables defined earlier in the same file can be
referenced directly. Additionally, you can reference the final value of
a variable using string templating. I.e. strings containing values of
the form \fB${VAR}\fP will be substituted for the final value of the
referenced variable once all conf files have been parsed.
.sp
Collapsible Variables
.sp
These variables contain whitespace\-delimited sets (as strings), the
entries of which can be disabled (if enabled in a previously loaded conf
file) by prefixing them with a minus/hyphen (\fB\-\fP).
.TS
center;
|l|l|.
_
T{
Variable
T}	T{
Description
T}
_
T{
USE
T}	T{
Enabled use flags. These provide the
profile default enabled use flags.
T}
_
T{
ACCEPT_LICENSE
T}	T{
A list of accepted licenses. License
groups, as specified in
profiles/\fI\%license_groups.yaml\fP,
can be included by prefixing the group
name with an \fB@\fP\&. An asterisk
(\fB*\fP) can be used to accept all
licenses by default, with the ability
to disable specific licenses by
default by prefixing them with \fB\-\fP\&.
Recommended defaults are \fB* \-@EULA\fP
or \fB@FREE\fP\&.
T}
_
T{
ACCEPT_KEYWORDS
T}	T{
The default keywords to accept. Should
usually only contain
T}
_
T{
INFO_VARS
T}	T{
Variables to display when
\fBportmod <prefix> info\fP is run.
T}
_
T{
INFO_PACKAGES
T}	T{
Packages to display when
\fBportmod <prefix> info\fP is run.
T}
_
T{
USE_EXPAND
T}	T{
The names of USE_EXPAND variables. The
values they can take should be
described in the \fBprofiles/desc\fP
directory in a yaml file with a name
equal to the lowercased variable name,
followed by \fB\&.yaml\fP\&.
T}
_
T{
USE_EXPAND_HIDDEN
T}	T{
A subset of USE_EXPAND that should be
hidden to the user and not show up in
searches and transaction lists.
T}
_
T{
PROFILE_ONLY_VARIABLES
T}	T{
This defines which variables cannot be
modified by the user in their
portmod.conf (technically,
portmod.conf can configure everything
that defaults.conf can, with the
exception of the variables listed
here). Note that users can still use
\fI\%profile.user\fP
to create a custom
profile and override these variables.
T}
_
T{
CACHE_FIELDS
T}	T{
A list of fields that should be cached
(e.g.\ fields that may be added by
classes in this repo which it would be
useful to have accessible to external
software).
T}
_
.TE
.sp
Other Variables
.TS
center;
|l|l|.
_
T{
Variable
T}	T{
Description
T}
_
T{
ARCH
T}	T{
The architecture for the profile. See
\fIarch.list\fP\&. This is set automatically
and should not be modified
T}
_
T{
ARCH_VERSION
T}	T{
The architecture\(aqs version.
This is set before the profile is
loaded by a special script.
See \fI\%Architecture Versioning\fP for details.
T}
_
T{
TEXTURE_SIZE
T}	T{
The algorithm for choosing texture
size. See \fI\%portmod.conf\fP
T}
_
T{
PORTMOD_MIRRORS
T}	T{
The list of download mirrors. See
\fI\%portmod.conf\fP
T}
_
T{
CASE_INSENSITIVE_FILES
T}	T{
Whether or not files in the VFS should
be case\-insensitive. When enabled,
portmod will treat files of identical
path other than their case as the same
when installing. Otherwise, such files
may be installed side by side instead
of overriding each other.
T}
_
T{
OMWMERGE_DEFAULT_OPTS
T}	T{
The default options passed to
\fBportmod <prefix> merge\fP\&. See
\fI\%portmod.conf\fP
T}
_
T{
MODULEPATH
T}	T{
The directory (relative to \fBROOT\fP)
which stores \fI\%Modules\fP\&.
T}
_
T{
DOC_DEST
T}	T{
The default installation directory
for documentation when the \fIdodoc\fP
function is called.
T}
_
T{
VARIABLE_DATA
T}	T{
The directory, relative to \fBROOT\fP
should contain generated portmod files
such as the package database.
.sp
This variable should never be changed
since it takes effect immediately.
Instead, it is recommended to create
a new profile with a new value and
a migration tool to update the
filesystem.
T}
_
T{
CFG_PROTECT
T}	T{
A glob\-style patterns (or list of
patterns) indicating files which
should not be overwritten on
installation if they have been
modified since the file was first
installed. Instead, a \fB\&.new\fP file
will be created and users will be able
to run the cfg updater to merge the
modifications.
T}
_
.TE
.SH METADATA DIRECTORY
.SS layout.conf
.sp
Describes the repository metadata.
.sp
E.g.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Comments can be included
masters = \(dqpython openmw\(dq

# 2 is new, so it\(aqs not a bad idea to stick with 1 for now
pybuild_versions_banned = [2]

# Obviously this isn\(aqt helpful if you also include the above statement,
# But eventually you will want to deprecate Pybuild1 since support for
# it will be dropped.
pybuild_versions_deprecated = [1]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fields
.SS masters
.sp
A space\-separated string list of repository masters
.SS pybuild_versions_banned
.sp
A python list of banned pybuild versions. E.g. if this list includes \fB2\fP, \fI\%pybuild.Pybuild2\fP will be considered banned and will not be able to be loaded. \fI\%inquisitor\fP will also produce an error for packages which use banned pybuild versions.
.sp
This is primarily a QA feature, but is also enforced at runtime.
.SS pybuild_versions_deprecated
.sp
A python list of deprecated pybuild versions. E.g. if this list includes \fB2\fP, \fI\%pybuild.Pybuild2\fP will be considered deprecated and \fI\%inquisitor\fP will emit a warning when encountering packages which use it.
.SS Syntax
.sp
Same as \fI\%defaults.conf\fP\&. I.e. a restricted subset of python using only basic primitives and no imports.
.sp
The metadata directory is optional
.TS
center;
|l|l|.
_
T{
File
T}	T{
Description
T}
_
T{
groups.yaml
T}	T{
Defines maintainer groups
T}
_
T{
layout.conf
T}	T{
See \fI\%layout.conf\fP
T}
_
T{
news
T}	T{
See \fI\%GLEP 42\fP, noting
that news files are in yaml format rather than XML. Specification for
the files can be found \fI\%here\fP
(TODO: Rustdoc), and the directory structure follows GLEP 42.
T}
_
.TE
.SH AUTHOR
Benjamin Winger, Roma Tentser, PopeRigby, Hristos N. Triantafillou, lumbo7332, Pope_Rigby, marius david, marius851000, Basile Thullen, Joel, Nords Morrow, Anonymous, Paul Infield-Harm, Qazaaq, Tenchi, Weblate, gbtb, louisabraham, ultramink
.SH COPYRIGHT
2019-2025, Portmod Authors
.\" Generated by docutils manpage writer.
.
