import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib
from saltworks import plottools

plt.rcParams["legend.numpoints"] = 1
plt.rcParams["xtick.major.size"] = 21
plt.rcParams["xtick.minor.size"] = 5
plt.rcParams["ytick.major.size"] = 21
plt.rcParams["ytick.minor.size"] = 5
plt.rcParams["xtick.minor.visible"] = True  # See minor tick
plt.rcParams["text.usetex"] = False  # use Latex
plt.rcParams["axes.linewidth"] = 2  # width axes
plt.rcParams["axes.labelsize"] = 16  #
plt.rcParams["ytick.labelsize"] = 12  # fontsize of tick labels
plt.rcParams["xtick.labelsize"] = 12  # fontsize of tick labels
plt.rcParams["ytick.direction"] = "inout"  ## direction: in, out, or inout
plt.rcParams["xtick.direction"] = "inout"  ## direction: in, out, or inout

plt.rcParams["xtick.major.top"] = True  # draw x axis top major ticks
plt.rcParams["xtick.major.bottom"] = True  # draw x axis bottom major ticks
plt.rcParams["xtick.minor.top"] = True  ## draw x axis top minor ticks
plt.rcParams["xtick.minor.bottom"] = True  # draw x axis bottom minor ticks
plt.rcParams["axes.titlesize"] = 16  # Set title font size
plt.rcParams["axes.titleweight"] = "bold"  # Set title font weight to bold
plt.rcParams["ytick.major.left"] = True  # draw y axis left major ticks
plt.rcParams["ytick.major.right"] = True  # draw y axis right major ticks
plt.rcParams["ytick.minor.left"] = True  ## draw y axis left minor ticks
plt.rcParams["ytick.minor.right"] = True  # draw y axis right minor ticks
plt.rcParams["font.weight"] = "bold"
plt.rcParams["axes.labelweight"] = "heavy"


def compa_hist(sne, output="figs", survey=None, show=True):
    """Make histograms of SN parameters"""
    sne_good = sne[sne["valid"] == 1]
    sne_bad = sne[sne["valid"] == 0]

    if survey is not None:
        sne_good = sne_good[sne_good.survey == survey]
        sne_bad = sne_bad[sne_bad.survey == survey]

    fig, axes = plt.subplots(4, 1, figsize=(8, 16))

    for _j, _pname in enumerate(["z", "tmax", "x1", "c"]):
        bin_edges = np.histogram_bin_edges(
            np.concatenate([sne_good[_pname], sne_bad[_pname]]), bins="auto"
        )
        sns.histplot(
            sne_good[_pname],
            color="red",
            alpha=0.4,
            label="Good",
            kde=True,
            bins=bin_edges,
            ax=axes[_j],
        )
        sns.histplot(
            sne_bad[_pname],
            color="blue",
            label="Cut DR2",
            alpha=0.4,
            kde=True,
            bins=bin_edges,
            ax=axes[_j],
        )
        axes[0].set_title("%s" % survey)
        axes[0].set_ylabel("# SN")
        axes[0].legend(prop={"weight": "bold"})
        axes[0].set_xlabel("")
        axes[0].text(0.15, 0.8, _pname, transform=axes[_j].transAxes)

    for ax in axes:
        for label in ax.get_xticklabels() + ax.get_yticklabels():
            label.set_fontweight("bold")

    plt.subplots_adjust(hspace=0.1)
    plt.tight_layout()
    _suffix = survey if survey is not None else "all"
    if output is not None:
        plt.savefig(
            f"{output}/distribution_comparison_{_suffix}.png",
            dpi=300,
            bbox_inches="tight",
        )
    if show:
        plt.show()
    plt.close()
    return fig, axes


def compa_bin(sne, output="figs", survey=None, show=True):
    """Make binplot of SN parameters"""
    sne_good = sne[sne.valid == 1]
    sne_bad = sne[sne.valid == 0]

    if survey is not None:
        sne_good = sne_good[sne_good.survey == survey]
        sne_bad = sne_bad[sne_bad.survey == survey]

    nbins = 10
    bins = np.linspace(
        sne_good["z"].min(),
        sne_good["z"].max() + abs(sne_good["z"].max() * 1e-7),
        nbins,
    )
    bins_bad = np.linspace(
        sne_bad["z"].min(), sne_bad["z"].max() + abs(sne_bad["z"].max() * 1e-7), nbins
    )

    fig = plt.figure(figsize=(8, 6))
    fig.subplots_adjust(hspace=0.0)

    ax0 = plt.subplot2grid((3, 1), (0, 0), rowspan=1)
    ax1 = plt.subplot2grid((3, 1), (1, 0), rowspan=1, sharex=ax0)
    ax2 = plt.subplot2grid((3, 1), (2, 0), rowspan=1)
    for _pname, _ax in zip(["x0", "x1", "c"], [ax0, ax1, ax2]):

        xbinned_p, yplot_p, yerr_p = plottools.binplot(
            sne_good.z.values, sne_good[_pname].values, nbins=nbins
        )
        xbinned_p_bad, yplot_p_bad, yerr_p_bad = plottools.binplot(
            sne_bad.z.values, sne_bad[_pname].values, nbins=nbins
        )

        xerr_p = np.array([bins, bins]) - np.array([xbinned_p, xbinned_p])
        xerr_p_bad = np.array([bins_bad, bins_bad]) - np.array(
            [xbinned_p_bad, xbinned_p_bad]
        )

        _ax.set_title("%s" % survey)
        _ax.errorbar(
            xbinned_p,
            yplot_p,
            yerr=yerr_p,
            xerr=abs(xerr_p),
            marker="s",
            color="r",
            alpha=0.9,
            ms=6,
            ls="None",
            label="Good",
        )
        _ax.errorbar(
            xbinned_p_bad,
            yplot_p_bad,
            yerr=yerr_p_bad,
            xerr=abs(xerr_p_bad),
            marker="s",
            color="k",
            alpha=0.9,
            ms=6,
            ls="None",
            label="Cut DR2",
        )
        _ax.legend()
        _ax.set_xticklabels([])
        _ax.set_xlabel("zhel")
        _ax.set_ylabel(_pname)

    _suffix = survey if survey is not None else "all"
    if output is not None:
        plt.savefig(
            f"{output}/binned_redshift_{_suffix}.png", dpi=300, bbox_inches="tight"
        )
    if show:
        plt.show()
    plt.close()
    return fig, [ax0, ax1, ax2]
