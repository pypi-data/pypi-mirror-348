name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Lint
        run: ruff check .

      - name: Format
        run: ruff format --diff .

      - name: Run tests
        run: python -m unittest -v

      - name: Run example scripts
        run: |
          scripts=(
            "python examples/benchmark.py"
            # These scripts use ruckig for trajectory generation.
            # Ruckig community version uses a cloud API for intermediate waypoints,
            # which may cause flakes in CI.
            "python examples/ur5_move_to_config.py -s 3 -no-viz"
            "python examples/franka_move_to_pose.py -s 18 -no-viz"
            "python examples/franka_plan_to_multiple_poses.py -s 5 -no-viz"
            "python examples/ur5_cartesian_move.py -s 2 -no-viz"
            "python examples/franka_constrained_move_to_pose.py -s 17 -no-viz"
          )
          # Run all scripts. If any of the scripts fail, report a failure in CI.
          failed=0
          for cmd in "${scripts[@]}"; do
            echo -e "\nRunning: $cmd" # -e to enable interpretation of \n
            eval "$cmd" || failed=1
          done
          exit $failed

  coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Generate coverage
        run: coverage run --source=src -m unittest -v

      - name: "Coveralls"
        run: coveralls
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
