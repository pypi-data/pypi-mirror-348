name: Publish to PyPI

on:
  release:
    types: [created]

permissions:
  contents: read
  id-token: write  # Required for PyPI trusted publishing

jobs:
  build-executables:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Important for setuptools_scm to get git history
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    - name: Validate version matches tag
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        PACKAGE_VERSION=$(python -c "from kusto_mcp import __version__; print(__version__)")
        if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
          echo "Version mismatch: Tag version ($TAG_VERSION) doesn't match package version ($PACKAGE_VERSION)"
          exit 1
        fi
    - name: Build executable
      run: python build_scripts/build_executables.py
    - name: Upload executable
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-executable
        path: kusto_mcp/bin/*

  deploy:
    needs: build-executables
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Important for setuptools_scm to get git history
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    - name: Download all executables
      uses: actions/download-artifact@v3
      with:
        path: temp_bins
    - name: Setup bin directory
      run: |
        mkdir -p kusto_mcp/bin
        mv temp_bins/ubuntu-latest-executable/* kusto_mcp/bin/
        mv temp_bins/windows-latest-executable/* kusto_mcp/bin/
        mv temp_bins/macos-latest-executable/* kusto_mcp/bin/
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    - name: Build distributable package
      run: |
        python -m build
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*
