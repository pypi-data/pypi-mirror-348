# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoyaapisv240.api_helper import APIHelper


class SweepSecurityEntity(object):

    """Implementation of the 'SweepSecurity Entity' model.

    Information about the sweep security specific to the type of security

    Attributes:
        current_balance (float): Balance of funds in account
        available_balance (float): Balance of funds available for use
        balance_as_of (datetime): As-of date of balances
        checks (bool): Whether or not checks can be written on the account

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "current_balance": 'currentBalance',
        "available_balance": 'availableBalance',
        "balance_as_of": 'balanceAsOf',
        "checks": 'checks'
    }

    _optionals = [
        'current_balance',
        'available_balance',
        'balance_as_of',
        'checks',
    ]

    def __init__(self,
                 current_balance=APIHelper.SKIP,
                 available_balance=APIHelper.SKIP,
                 balance_as_of=APIHelper.SKIP,
                 checks=APIHelper.SKIP):
        """Constructor for the SweepSecurityEntity class"""

        # Initialize members of the class
        if current_balance is not APIHelper.SKIP:
            self.current_balance = current_balance 
        if available_balance is not APIHelper.SKIP:
            self.available_balance = available_balance 
        if balance_as_of is not APIHelper.SKIP:
            self.balance_as_of = APIHelper.apply_datetime_converter(balance_as_of, APIHelper.RFC3339DateTime) if balance_as_of else None 
        if checks is not APIHelper.SKIP:
            self.checks = checks 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        current_balance = dictionary.get("currentBalance") if dictionary.get("currentBalance") else APIHelper.SKIP
        available_balance = dictionary.get("availableBalance") if dictionary.get("availableBalance") else APIHelper.SKIP
        balance_as_of = APIHelper.RFC3339DateTime.from_value(dictionary.get("balanceAsOf")).datetime if dictionary.get("balanceAsOf") else APIHelper.SKIP
        checks = dictionary.get("checks") if "checks" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(current_balance,
                   available_balance,
                   balance_as_of,
                   checks)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'current_balance={(self.current_balance if hasattr(self, "current_balance") else None)!r}, '
                f'available_balance={(self.available_balance if hasattr(self, "available_balance") else None)!r}, '
                f'balance_as_of={(self.balance_as_of if hasattr(self, "balance_as_of") else None)!r}, '
                f'checks={(self.checks if hasattr(self, "checks") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'current_balance={(self.current_balance if hasattr(self, "current_balance") else None)!s}, '
                f'available_balance={(self.available_balance if hasattr(self, "available_balance") else None)!s}, '
                f'balance_as_of={(self.balance_as_of if hasattr(self, "balance_as_of") else None)!s}, '
                f'checks={(self.checks if hasattr(self, "checks") else None)!s})')
