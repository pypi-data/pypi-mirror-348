# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoyaapisv240.api_helper import APIHelper
from akoyaapisv240.models.payment_network_supported_by_account import PaymentNetworkSupportedByAccount


class ArrayOfAccountPaymentNetworks(object):

    """Implementation of the 'Array of account payment networks' model.

    Attributes:
        payment_networks (List[PaymentNetworkSupportedByAccount]): Array of
            payment networks

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "payment_networks": 'paymentNetworks'
    }

    _optionals = [
        'payment_networks',
    ]

    def __init__(self,
                 payment_networks=APIHelper.SKIP):
        """Constructor for the ArrayOfAccountPaymentNetworks class"""

        # Initialize members of the class
        if payment_networks is not APIHelper.SKIP:
            self.payment_networks = payment_networks 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        payment_networks = None
        if dictionary.get('paymentNetworks') is not None:
            payment_networks = [PaymentNetworkSupportedByAccount.from_dictionary(x) for x in dictionary.get('paymentNetworks')]
        else:
            payment_networks = APIHelper.SKIP
        # Return an object of this model
        return cls(payment_networks)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'payment_networks={(self.payment_networks if hasattr(self, "payment_networks") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'payment_networks={(self.payment_networks if hasattr(self, "payment_networks") else None)!s})')
