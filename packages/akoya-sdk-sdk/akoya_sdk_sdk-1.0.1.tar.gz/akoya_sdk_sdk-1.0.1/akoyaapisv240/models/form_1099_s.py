# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
import dateutil.parser

from akoyaapisv240.api_helper import APIHelper
from akoyaapisv240.models.error_2 import Error2
from akoyaapisv240.models.hateoas_link import HATEOASLink
from akoyaapisv240.models.tax_form_attribute import TaxFormAttribute
from akoyaapisv240.models.tax_party_1 import TaxParty1
from akoyaapisv240.models.tax_party_8 import TaxParty8


class Form1099S(object):

    """Implementation of the 'Form 1099-S' model.

    Proceeds From Real Estate Transactions, from FILER (1st-2nd boxes as
    issuer) to TRANSFEROR (3rd-4th boxes as recipient)

    Attributes:
        tax_year (int): Year for which taxes are being paid
        corrected (bool): True to indicate this is a corrected tax form
        account_id (str): Long-term persistent identity of the source account.
            Not the account number
        tax_form_id (str): Long-term persistent id for this tax form.
            Depending upon the data provider, this may be the same id as the
            enclosing tax statement id, or this may be a different id, or this
            id may be omitted.
        tax_form_date (date): Date of production or delivery of the tax form
        additional_information (str): Additional explanation text or content
            about this tax form
        tax_form_type (TypeFormType2Enum): Enumerated name of the tax form
            entity e.g. "TaxW2"
        issuer (TaxParty8): Issuer's name, address, phone, and TIN. Issuer
            data need only be transmitted on enclosing TaxStatement, if it is
            the same on all its included tax forms.
        recipient (TaxParty1): Recipient's name, address, phone, and TIN.
            Recipient data need only be transmitted on enclosing TaxStatement,
            if it is the same on all its included tax forms.
        attributes (List[TaxFormAttribute]): Additional attributes for this
            tax form when defined fields are not available. Some specific
            additional attributes already defined by providers: Fields
            required by [IRS
            FIRE](https://www.irs.gov/e-file-providers/filing-information-retur
            ns-electronically-fire): Name Control, Type of Identification
            Number (EIN, SSN, ITIN, ATIN). (ATIN is tax ID number for pending
            adoptions.) Tax form provider field for taxpayer notification:
            Recipient Email Address.
        error (Error2): Present if an error was encountered while retrieving
            this form
        links (List[HATEOASLink]): Links to retrieve this form as data or
            image, or to invoke other APIs
        account_number (str): Account or escrow number
        date_of_closing (date): Box 1, Date of closing
        gross_proceeds (float): Box 2, Gross proceeds
        address_or_legal_description (str): Box 3, Address or legal description
        received_other_consideration (bool): Box 4, Transferor received or
            will receive property or services as part of the consideration (if
            checked)
        foreign_person (bool): Box 5, If checked, transferor is a foreign
            person (nonresident alien, foreign partnership, foreign estate, or
            foreign trust)
        real_estate_tax (float): Box 6, Buyer's part of real estate tax

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "tax_year": 'taxYear',
        "corrected": 'corrected',
        "account_id": 'accountId',
        "tax_form_id": 'taxFormId',
        "tax_form_date": 'taxFormDate',
        "additional_information": 'additionalInformation',
        "tax_form_type": 'taxFormType',
        "issuer": 'issuer',
        "recipient": 'recipient',
        "attributes": 'attributes',
        "error": 'error',
        "links": 'links',
        "account_number": 'accountNumber',
        "date_of_closing": 'dateOfClosing',
        "gross_proceeds": 'grossProceeds',
        "address_or_legal_description": 'addressOrLegalDescription',
        "received_other_consideration": 'receivedOtherConsideration',
        "foreign_person": 'foreignPerson',
        "real_estate_tax": 'realEstateTax'
    }

    _optionals = [
        'tax_year',
        'corrected',
        'account_id',
        'tax_form_id',
        'tax_form_date',
        'additional_information',
        'tax_form_type',
        'issuer',
        'recipient',
        'attributes',
        'error',
        'links',
        'account_number',
        'date_of_closing',
        'gross_proceeds',
        'address_or_legal_description',
        'received_other_consideration',
        'foreign_person',
        'real_estate_tax',
    ]

    def __init__(self,
                 tax_year=APIHelper.SKIP,
                 corrected=APIHelper.SKIP,
                 account_id=APIHelper.SKIP,
                 tax_form_id=APIHelper.SKIP,
                 tax_form_date=APIHelper.SKIP,
                 additional_information=APIHelper.SKIP,
                 tax_form_type=APIHelper.SKIP,
                 issuer=APIHelper.SKIP,
                 recipient=APIHelper.SKIP,
                 attributes=APIHelper.SKIP,
                 error=APIHelper.SKIP,
                 links=APIHelper.SKIP,
                 account_number=APIHelper.SKIP,
                 date_of_closing=APIHelper.SKIP,
                 gross_proceeds=APIHelper.SKIP,
                 address_or_legal_description=APIHelper.SKIP,
                 received_other_consideration=APIHelper.SKIP,
                 foreign_person=APIHelper.SKIP,
                 real_estate_tax=APIHelper.SKIP):
        """Constructor for the Form1099S class"""

        # Initialize members of the class
        if tax_year is not APIHelper.SKIP:
            self.tax_year = tax_year 
        if corrected is not APIHelper.SKIP:
            self.corrected = corrected 
        if account_id is not APIHelper.SKIP:
            self.account_id = account_id 
        if tax_form_id is not APIHelper.SKIP:
            self.tax_form_id = tax_form_id 
        if tax_form_date is not APIHelper.SKIP:
            self.tax_form_date = tax_form_date 
        if additional_information is not APIHelper.SKIP:
            self.additional_information = additional_information 
        if tax_form_type is not APIHelper.SKIP:
            self.tax_form_type = tax_form_type 
        if issuer is not APIHelper.SKIP:
            self.issuer = issuer 
        if recipient is not APIHelper.SKIP:
            self.recipient = recipient 
        if attributes is not APIHelper.SKIP:
            self.attributes = attributes 
        if error is not APIHelper.SKIP:
            self.error = error 
        if links is not APIHelper.SKIP:
            self.links = links 
        if account_number is not APIHelper.SKIP:
            self.account_number = account_number 
        if date_of_closing is not APIHelper.SKIP:
            self.date_of_closing = date_of_closing 
        if gross_proceeds is not APIHelper.SKIP:
            self.gross_proceeds = gross_proceeds 
        if address_or_legal_description is not APIHelper.SKIP:
            self.address_or_legal_description = address_or_legal_description 
        if received_other_consideration is not APIHelper.SKIP:
            self.received_other_consideration = received_other_consideration 
        if foreign_person is not APIHelper.SKIP:
            self.foreign_person = foreign_person 
        if real_estate_tax is not APIHelper.SKIP:
            self.real_estate_tax = real_estate_tax 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        tax_year = dictionary.get("taxYear") if dictionary.get("taxYear") else APIHelper.SKIP
        corrected = dictionary.get("corrected") if "corrected" in dictionary.keys() else APIHelper.SKIP
        account_id = dictionary.get("accountId") if dictionary.get("accountId") else APIHelper.SKIP
        tax_form_id = dictionary.get("taxFormId") if dictionary.get("taxFormId") else APIHelper.SKIP
        tax_form_date = dateutil.parser.parse(dictionary.get('taxFormDate')).date() if dictionary.get('taxFormDate') else APIHelper.SKIP
        additional_information = dictionary.get("additionalInformation") if dictionary.get("additionalInformation") else APIHelper.SKIP
        tax_form_type = dictionary.get("taxFormType") if dictionary.get("taxFormType") else APIHelper.SKIP
        issuer = TaxParty8.from_dictionary(dictionary.get('issuer')) if 'issuer' in dictionary.keys() else APIHelper.SKIP
        recipient = TaxParty1.from_dictionary(dictionary.get('recipient')) if 'recipient' in dictionary.keys() else APIHelper.SKIP
        attributes = None
        if dictionary.get('attributes') is not None:
            attributes = [TaxFormAttribute.from_dictionary(x) for x in dictionary.get('attributes')]
        else:
            attributes = APIHelper.SKIP
        error = Error2.from_dictionary(dictionary.get('error')) if 'error' in dictionary.keys() else APIHelper.SKIP
        links = None
        if dictionary.get('links') is not None:
            links = [HATEOASLink.from_dictionary(x) for x in dictionary.get('links')]
        else:
            links = APIHelper.SKIP
        account_number = dictionary.get("accountNumber") if dictionary.get("accountNumber") else APIHelper.SKIP
        date_of_closing = dateutil.parser.parse(dictionary.get('dateOfClosing')).date() if dictionary.get('dateOfClosing') else APIHelper.SKIP
        gross_proceeds = dictionary.get("grossProceeds") if dictionary.get("grossProceeds") else APIHelper.SKIP
        address_or_legal_description = dictionary.get("addressOrLegalDescription") if dictionary.get("addressOrLegalDescription") else APIHelper.SKIP
        received_other_consideration = dictionary.get("receivedOtherConsideration") if "receivedOtherConsideration" in dictionary.keys() else APIHelper.SKIP
        foreign_person = dictionary.get("foreignPerson") if "foreignPerson" in dictionary.keys() else APIHelper.SKIP
        real_estate_tax = dictionary.get("realEstateTax") if dictionary.get("realEstateTax") else APIHelper.SKIP
        # Return an object of this model
        return cls(tax_year,
                   corrected,
                   account_id,
                   tax_form_id,
                   tax_form_date,
                   additional_information,
                   tax_form_type,
                   issuer,
                   recipient,
                   attributes,
                   error,
                   links,
                   account_number,
                   date_of_closing,
                   gross_proceeds,
                   address_or_legal_description,
                   received_other_consideration,
                   foreign_person,
                   real_estate_tax)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'tax_year={(self.tax_year if hasattr(self, "tax_year") else None)!r}, '
                f'corrected={(self.corrected if hasattr(self, "corrected") else None)!r}, '
                f'account_id={(self.account_id if hasattr(self, "account_id") else None)!r}, '
                f'tax_form_id={(self.tax_form_id if hasattr(self, "tax_form_id") else None)!r}, '
                f'tax_form_date={(self.tax_form_date if hasattr(self, "tax_form_date") else None)!r}, '
                f'additional_information={(self.additional_information if hasattr(self, "additional_information") else None)!r}, '
                f'tax_form_type={(self.tax_form_type if hasattr(self, "tax_form_type") else None)!r}, '
                f'issuer={(self.issuer if hasattr(self, "issuer") else None)!r}, '
                f'recipient={(self.recipient if hasattr(self, "recipient") else None)!r}, '
                f'attributes={(self.attributes if hasattr(self, "attributes") else None)!r}, '
                f'error={(self.error if hasattr(self, "error") else None)!r}, '
                f'links={(self.links if hasattr(self, "links") else None)!r}, '
                f'account_number={(self.account_number if hasattr(self, "account_number") else None)!r}, '
                f'date_of_closing={(self.date_of_closing if hasattr(self, "date_of_closing") else None)!r}, '
                f'gross_proceeds={(self.gross_proceeds if hasattr(self, "gross_proceeds") else None)!r}, '
                f'address_or_legal_description={(self.address_or_legal_description if hasattr(self, "address_or_legal_description") else None)!r}, '
                f'received_other_consideration={(self.received_other_consideration if hasattr(self, "received_other_consideration") else None)!r}, '
                f'foreign_person={(self.foreign_person if hasattr(self, "foreign_person") else None)!r}, '
                f'real_estate_tax={(self.real_estate_tax if hasattr(self, "real_estate_tax") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'tax_year={(self.tax_year if hasattr(self, "tax_year") else None)!s}, '
                f'corrected={(self.corrected if hasattr(self, "corrected") else None)!s}, '
                f'account_id={(self.account_id if hasattr(self, "account_id") else None)!s}, '
                f'tax_form_id={(self.tax_form_id if hasattr(self, "tax_form_id") else None)!s}, '
                f'tax_form_date={(self.tax_form_date if hasattr(self, "tax_form_date") else None)!s}, '
                f'additional_information={(self.additional_information if hasattr(self, "additional_information") else None)!s}, '
                f'tax_form_type={(self.tax_form_type if hasattr(self, "tax_form_type") else None)!s}, '
                f'issuer={(self.issuer if hasattr(self, "issuer") else None)!s}, '
                f'recipient={(self.recipient if hasattr(self, "recipient") else None)!s}, '
                f'attributes={(self.attributes if hasattr(self, "attributes") else None)!s}, '
                f'error={(self.error if hasattr(self, "error") else None)!s}, '
                f'links={(self.links if hasattr(self, "links") else None)!s}, '
                f'account_number={(self.account_number if hasattr(self, "account_number") else None)!s}, '
                f'date_of_closing={(self.date_of_closing if hasattr(self, "date_of_closing") else None)!s}, '
                f'gross_proceeds={(self.gross_proceeds if hasattr(self, "gross_proceeds") else None)!s}, '
                f'address_or_legal_description={(self.address_or_legal_description if hasattr(self, "address_or_legal_description") else None)!s}, '
                f'received_other_consideration={(self.received_other_consideration if hasattr(self, "received_other_consideration") else None)!s}, '
                f'foreign_person={(self.foreign_person if hasattr(self, "foreign_person") else None)!s}, '
                f'real_estate_tax={(self.real_estate_tax if hasattr(self, "real_estate_tax") else None)!s})')
