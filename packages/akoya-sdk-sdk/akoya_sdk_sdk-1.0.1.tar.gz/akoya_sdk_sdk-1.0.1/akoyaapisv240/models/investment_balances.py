# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoyaapisv240.api_helper import APIHelper
from akoyaapisv240.models.currency_entity import CurrencyEntity
from akoyaapisv240.models.fi_attribute_entity import FiAttributeEntity
from akoyaapisv240.models.investment_balance_list import InvestmentBalanceList


class InvestmentBalances(object):

    """Implementation of the 'Investment balances' model.

    Data elements included with balances specific to investment accounts

    Attributes:
        account_id (str): Long-term persistent identity of the account. Not an
            account number. This identity must be unique to the owning
            institution.
        account_type (str): The type of an account. For instance, CHECKING,
            SAVINGS, 401K, etc.
        account_number_display (str): Account display number for the end
            user’s handle at owning institution. This is to be displayed by
            the Interface Provider.
        currency (CurrencyEntity): Indicates the currency code used by the
            account. May also include currency rate.
        description (str): The model property of type str.
        fi_attributes (List[FiAttributeEntity]): The model property of type
            List[FiAttributeEntity].
        nickname (str): Name given by the user. Used in UIs to assist in
            account selection
        product_name (str): Marketed product name for this account.  Used in
            UIs to assist in account selection
        status (StatusEnum): The status of an account.
        line_of_business (str): The line of business, such as consumer,
            consumer joint, small business, corporate, etc.
        balance_type (BalanceTypeEnum): ASSET (positive transaction amount
            increases balance), LIABILITY (positive transaction amount
            decreases balance)
        interest_rate (float): Interest Rate of Account
        interest_rate_type (InterestRateTypeEnum): The type of interest rate.
            FIXED or VARIABLE.
        interest_rate_as_of (datetime): Date of account’s interest rate
        last_activity_date (datetime): Date that last transaction occurred on
            account
        micr_number (str): MICR Number
        parent_account_id (str): Long-term persistent identity of the parent
            account. This is used to group accounts.
        prior_interest_rate (float): Previous Interest Rate of Account
        transfer_in (bool): Account is eligible for incoming transfers
        transfer_out (bool): Account is eligible for outgoing transfers
        allowed_check_writing (bool): Check writing privileges
        allowed_option_trade (bool): Allowed to trade options
        broker_id (str): Unique identifier FI
        calendar_year_for_401_k (str): Date for this calendar year for 401K
            account
        employer_name (str): Name of the employer in investment 401k Plan
        margin (bool): Margin trading is allowed
        plan_id (str): Plan number for Investment 401k plan
        available_cash_balance (float): Cash balance across all sub-accounts.
            Should include sweep funds.
        balance_as_of (datetime): As-of date of balances
        balance_list (List[InvestmentBalanceList]): Balance List. Name value
            pair aggregate.
        current_value (float): Total current value of all investments
        daily_change (float): Daily change
        margin_balance (float): Margin balance
        percentage_change (float): Percentage change
        rollover_amount (float): Rollover amount
        short_balance (float): Short balance

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_id": 'accountId',
        "account_type": 'accountType',
        "account_number_display": 'accountNumberDisplay',
        "currency": 'currency',
        "description": 'description',
        "fi_attributes": 'fiAttributes',
        "nickname": 'nickname',
        "product_name": 'productName',
        "status": 'status',
        "line_of_business": 'lineOfBusiness',
        "balance_type": 'balanceType',
        "interest_rate": 'interestRate',
        "interest_rate_type": 'interestRateType',
        "interest_rate_as_of": 'interestRateAsOf',
        "last_activity_date": 'lastActivityDate',
        "micr_number": 'micrNumber',
        "parent_account_id": 'parentAccountId',
        "prior_interest_rate": 'priorInterestRate',
        "transfer_in": 'transferIn',
        "transfer_out": 'transferOut',
        "allowed_check_writing": 'allowedCheckWriting',
        "allowed_option_trade": 'allowedOptionTrade',
        "broker_id": 'brokerId',
        "calendar_year_for_401_k": 'calendarYearFor401K',
        "employer_name": 'employerName',
        "margin": 'margin',
        "plan_id": 'planId',
        "available_cash_balance": 'availableCashBalance',
        "balance_as_of": 'balanceAsOf',
        "balance_list": 'balanceList',
        "current_value": 'currentValue',
        "daily_change": 'dailyChange',
        "margin_balance": 'marginBalance',
        "percentage_change": 'percentageChange',
        "rollover_amount": 'rolloverAmount',
        "short_balance": 'shortBalance'
    }

    _optionals = [
        'account_id',
        'account_type',
        'account_number_display',
        'currency',
        'description',
        'fi_attributes',
        'nickname',
        'product_name',
        'status',
        'line_of_business',
        'balance_type',
        'interest_rate',
        'interest_rate_type',
        'interest_rate_as_of',
        'last_activity_date',
        'micr_number',
        'parent_account_id',
        'prior_interest_rate',
        'transfer_in',
        'transfer_out',
        'allowed_check_writing',
        'allowed_option_trade',
        'broker_id',
        'calendar_year_for_401_k',
        'employer_name',
        'margin',
        'plan_id',
        'available_cash_balance',
        'balance_as_of',
        'balance_list',
        'current_value',
        'daily_change',
        'margin_balance',
        'percentage_change',
        'rollover_amount',
        'short_balance',
    ]

    def __init__(self,
                 account_id=APIHelper.SKIP,
                 account_type=APIHelper.SKIP,
                 account_number_display=APIHelper.SKIP,
                 currency=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 fi_attributes=APIHelper.SKIP,
                 nickname=APIHelper.SKIP,
                 product_name=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 line_of_business=APIHelper.SKIP,
                 balance_type=APIHelper.SKIP,
                 interest_rate=APIHelper.SKIP,
                 interest_rate_type=APIHelper.SKIP,
                 interest_rate_as_of=APIHelper.SKIP,
                 last_activity_date=APIHelper.SKIP,
                 micr_number=APIHelper.SKIP,
                 parent_account_id=APIHelper.SKIP,
                 prior_interest_rate=APIHelper.SKIP,
                 transfer_in=APIHelper.SKIP,
                 transfer_out=APIHelper.SKIP,
                 allowed_check_writing=APIHelper.SKIP,
                 allowed_option_trade=APIHelper.SKIP,
                 broker_id=APIHelper.SKIP,
                 calendar_year_for_401_k=APIHelper.SKIP,
                 employer_name=APIHelper.SKIP,
                 margin=APIHelper.SKIP,
                 plan_id=APIHelper.SKIP,
                 available_cash_balance=APIHelper.SKIP,
                 balance_as_of=APIHelper.SKIP,
                 balance_list=APIHelper.SKIP,
                 current_value=APIHelper.SKIP,
                 daily_change=APIHelper.SKIP,
                 margin_balance=APIHelper.SKIP,
                 percentage_change=APIHelper.SKIP,
                 rollover_amount=APIHelper.SKIP,
                 short_balance=APIHelper.SKIP):
        """Constructor for the InvestmentBalances class"""

        # Initialize members of the class
        if account_id is not APIHelper.SKIP:
            self.account_id = account_id 
        if account_type is not APIHelper.SKIP:
            self.account_type = account_type 
        if account_number_display is not APIHelper.SKIP:
            self.account_number_display = account_number_display 
        if currency is not APIHelper.SKIP:
            self.currency = currency 
        if description is not APIHelper.SKIP:
            self.description = description 
        if fi_attributes is not APIHelper.SKIP:
            self.fi_attributes = fi_attributes 
        if nickname is not APIHelper.SKIP:
            self.nickname = nickname 
        if product_name is not APIHelper.SKIP:
            self.product_name = product_name 
        if status is not APIHelper.SKIP:
            self.status = status 
        if line_of_business is not APIHelper.SKIP:
            self.line_of_business = line_of_business 
        if balance_type is not APIHelper.SKIP:
            self.balance_type = balance_type 
        if interest_rate is not APIHelper.SKIP:
            self.interest_rate = interest_rate 
        if interest_rate_type is not APIHelper.SKIP:
            self.interest_rate_type = interest_rate_type 
        if interest_rate_as_of is not APIHelper.SKIP:
            self.interest_rate_as_of = APIHelper.apply_datetime_converter(interest_rate_as_of, APIHelper.RFC3339DateTime) if interest_rate_as_of else None 
        if last_activity_date is not APIHelper.SKIP:
            self.last_activity_date = APIHelper.apply_datetime_converter(last_activity_date, APIHelper.RFC3339DateTime) if last_activity_date else None 
        if micr_number is not APIHelper.SKIP:
            self.micr_number = micr_number 
        if parent_account_id is not APIHelper.SKIP:
            self.parent_account_id = parent_account_id 
        if prior_interest_rate is not APIHelper.SKIP:
            self.prior_interest_rate = prior_interest_rate 
        if transfer_in is not APIHelper.SKIP:
            self.transfer_in = transfer_in 
        if transfer_out is not APIHelper.SKIP:
            self.transfer_out = transfer_out 
        if allowed_check_writing is not APIHelper.SKIP:
            self.allowed_check_writing = allowed_check_writing 
        if allowed_option_trade is not APIHelper.SKIP:
            self.allowed_option_trade = allowed_option_trade 
        if broker_id is not APIHelper.SKIP:
            self.broker_id = broker_id 
        if calendar_year_for_401_k is not APIHelper.SKIP:
            self.calendar_year_for_401_k = calendar_year_for_401_k 
        if employer_name is not APIHelper.SKIP:
            self.employer_name = employer_name 
        if margin is not APIHelper.SKIP:
            self.margin = margin 
        if plan_id is not APIHelper.SKIP:
            self.plan_id = plan_id 
        if available_cash_balance is not APIHelper.SKIP:
            self.available_cash_balance = available_cash_balance 
        if balance_as_of is not APIHelper.SKIP:
            self.balance_as_of = APIHelper.apply_datetime_converter(balance_as_of, APIHelper.RFC3339DateTime) if balance_as_of else None 
        if balance_list is not APIHelper.SKIP:
            self.balance_list = balance_list 
        if current_value is not APIHelper.SKIP:
            self.current_value = current_value 
        if daily_change is not APIHelper.SKIP:
            self.daily_change = daily_change 
        if margin_balance is not APIHelper.SKIP:
            self.margin_balance = margin_balance 
        if percentage_change is not APIHelper.SKIP:
            self.percentage_change = percentage_change 
        if rollover_amount is not APIHelper.SKIP:
            self.rollover_amount = rollover_amount 
        if short_balance is not APIHelper.SKIP:
            self.short_balance = short_balance 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_id = dictionary.get("accountId") if dictionary.get("accountId") else APIHelper.SKIP
        account_type = dictionary.get("accountType") if dictionary.get("accountType") else APIHelper.SKIP
        account_number_display = dictionary.get("accountNumberDisplay") if dictionary.get("accountNumberDisplay") else APIHelper.SKIP
        currency = CurrencyEntity.from_dictionary(dictionary.get('currency')) if 'currency' in dictionary.keys() else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        fi_attributes = None
        if dictionary.get('fiAttributes') is not None:
            fi_attributes = [FiAttributeEntity.from_dictionary(x) for x in dictionary.get('fiAttributes')]
        else:
            fi_attributes = APIHelper.SKIP
        nickname = dictionary.get("nickname") if dictionary.get("nickname") else APIHelper.SKIP
        product_name = dictionary.get("productName") if dictionary.get("productName") else APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        line_of_business = dictionary.get("lineOfBusiness") if dictionary.get("lineOfBusiness") else APIHelper.SKIP
        balance_type = dictionary.get("balanceType") if dictionary.get("balanceType") else APIHelper.SKIP
        interest_rate = dictionary.get("interestRate") if dictionary.get("interestRate") else APIHelper.SKIP
        interest_rate_type = dictionary.get("interestRateType") if dictionary.get("interestRateType") else APIHelper.SKIP
        interest_rate_as_of = APIHelper.RFC3339DateTime.from_value(dictionary.get("interestRateAsOf")).datetime if dictionary.get("interestRateAsOf") else APIHelper.SKIP
        last_activity_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("lastActivityDate")).datetime if dictionary.get("lastActivityDate") else APIHelper.SKIP
        micr_number = dictionary.get("micrNumber") if dictionary.get("micrNumber") else APIHelper.SKIP
        parent_account_id = dictionary.get("parentAccountId") if dictionary.get("parentAccountId") else APIHelper.SKIP
        prior_interest_rate = dictionary.get("priorInterestRate") if dictionary.get("priorInterestRate") else APIHelper.SKIP
        transfer_in = dictionary.get("transferIn") if "transferIn" in dictionary.keys() else APIHelper.SKIP
        transfer_out = dictionary.get("transferOut") if "transferOut" in dictionary.keys() else APIHelper.SKIP
        allowed_check_writing = dictionary.get("allowedCheckWriting") if "allowedCheckWriting" in dictionary.keys() else APIHelper.SKIP
        allowed_option_trade = dictionary.get("allowedOptionTrade") if "allowedOptionTrade" in dictionary.keys() else APIHelper.SKIP
        broker_id = dictionary.get("brokerId") if dictionary.get("brokerId") else APIHelper.SKIP
        calendar_year_for_401_k = dictionary.get("calendarYearFor401K") if dictionary.get("calendarYearFor401K") else APIHelper.SKIP
        employer_name = dictionary.get("employerName") if dictionary.get("employerName") else APIHelper.SKIP
        margin = dictionary.get("margin") if "margin" in dictionary.keys() else APIHelper.SKIP
        plan_id = dictionary.get("planId") if dictionary.get("planId") else APIHelper.SKIP
        available_cash_balance = dictionary.get("availableCashBalance") if dictionary.get("availableCashBalance") else APIHelper.SKIP
        balance_as_of = APIHelper.RFC3339DateTime.from_value(dictionary.get("balanceAsOf")).datetime if dictionary.get("balanceAsOf") else APIHelper.SKIP
        balance_list = None
        if dictionary.get('balanceList') is not None:
            balance_list = [InvestmentBalanceList.from_dictionary(x) for x in dictionary.get('balanceList')]
        else:
            balance_list = APIHelper.SKIP
        current_value = dictionary.get("currentValue") if dictionary.get("currentValue") else APIHelper.SKIP
        daily_change = dictionary.get("dailyChange") if dictionary.get("dailyChange") else APIHelper.SKIP
        margin_balance = dictionary.get("marginBalance") if dictionary.get("marginBalance") else APIHelper.SKIP
        percentage_change = dictionary.get("percentageChange") if dictionary.get("percentageChange") else APIHelper.SKIP
        rollover_amount = dictionary.get("rolloverAmount") if dictionary.get("rolloverAmount") else APIHelper.SKIP
        short_balance = dictionary.get("shortBalance") if dictionary.get("shortBalance") else APIHelper.SKIP
        # Return an object of this model
        return cls(account_id,
                   account_type,
                   account_number_display,
                   currency,
                   description,
                   fi_attributes,
                   nickname,
                   product_name,
                   status,
                   line_of_business,
                   balance_type,
                   interest_rate,
                   interest_rate_type,
                   interest_rate_as_of,
                   last_activity_date,
                   micr_number,
                   parent_account_id,
                   prior_interest_rate,
                   transfer_in,
                   transfer_out,
                   allowed_check_writing,
                   allowed_option_trade,
                   broker_id,
                   calendar_year_for_401_k,
                   employer_name,
                   margin,
                   plan_id,
                   available_cash_balance,
                   balance_as_of,
                   balance_list,
                   current_value,
                   daily_change,
                   margin_balance,
                   percentage_change,
                   rollover_amount,
                   short_balance)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_id={(self.account_id if hasattr(self, "account_id") else None)!r}, '
                f'account_type={(self.account_type if hasattr(self, "account_type") else None)!r}, '
                f'account_number_display={(self.account_number_display if hasattr(self, "account_number_display") else None)!r}, '
                f'currency={(self.currency if hasattr(self, "currency") else None)!r}, '
                f'description={(self.description if hasattr(self, "description") else None)!r}, '
                f'fi_attributes={(self.fi_attributes if hasattr(self, "fi_attributes") else None)!r}, '
                f'nickname={(self.nickname if hasattr(self, "nickname") else None)!r}, '
                f'product_name={(self.product_name if hasattr(self, "product_name") else None)!r}, '
                f'status={(self.status if hasattr(self, "status") else None)!r}, '
                f'line_of_business={(self.line_of_business if hasattr(self, "line_of_business") else None)!r}, '
                f'balance_type={(self.balance_type if hasattr(self, "balance_type") else None)!r}, '
                f'interest_rate={(self.interest_rate if hasattr(self, "interest_rate") else None)!r}, '
                f'interest_rate_type={(self.interest_rate_type if hasattr(self, "interest_rate_type") else None)!r}, '
                f'interest_rate_as_of={(self.interest_rate_as_of if hasattr(self, "interest_rate_as_of") else None)!r}, '
                f'last_activity_date={(self.last_activity_date if hasattr(self, "last_activity_date") else None)!r}, '
                f'micr_number={(self.micr_number if hasattr(self, "micr_number") else None)!r}, '
                f'parent_account_id={(self.parent_account_id if hasattr(self, "parent_account_id") else None)!r}, '
                f'prior_interest_rate={(self.prior_interest_rate if hasattr(self, "prior_interest_rate") else None)!r}, '
                f'transfer_in={(self.transfer_in if hasattr(self, "transfer_in") else None)!r}, '
                f'transfer_out={(self.transfer_out if hasattr(self, "transfer_out") else None)!r}, '
                f'allowed_check_writing={(self.allowed_check_writing if hasattr(self, "allowed_check_writing") else None)!r}, '
                f'allowed_option_trade={(self.allowed_option_trade if hasattr(self, "allowed_option_trade") else None)!r}, '
                f'broker_id={(self.broker_id if hasattr(self, "broker_id") else None)!r}, '
                f'calendar_year_for_401_k={(self.calendar_year_for_401_k if hasattr(self, "calendar_year_for_401_k") else None)!r}, '
                f'employer_name={(self.employer_name if hasattr(self, "employer_name") else None)!r}, '
                f'margin={(self.margin if hasattr(self, "margin") else None)!r}, '
                f'plan_id={(self.plan_id if hasattr(self, "plan_id") else None)!r}, '
                f'available_cash_balance={(self.available_cash_balance if hasattr(self, "available_cash_balance") else None)!r}, '
                f'balance_as_of={(self.balance_as_of if hasattr(self, "balance_as_of") else None)!r}, '
                f'balance_list={(self.balance_list if hasattr(self, "balance_list") else None)!r}, '
                f'current_value={(self.current_value if hasattr(self, "current_value") else None)!r}, '
                f'daily_change={(self.daily_change if hasattr(self, "daily_change") else None)!r}, '
                f'margin_balance={(self.margin_balance if hasattr(self, "margin_balance") else None)!r}, '
                f'percentage_change={(self.percentage_change if hasattr(self, "percentage_change") else None)!r}, '
                f'rollover_amount={(self.rollover_amount if hasattr(self, "rollover_amount") else None)!r}, '
                f'short_balance={(self.short_balance if hasattr(self, "short_balance") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_id={(self.account_id if hasattr(self, "account_id") else None)!s}, '
                f'account_type={(self.account_type if hasattr(self, "account_type") else None)!s}, '
                f'account_number_display={(self.account_number_display if hasattr(self, "account_number_display") else None)!s}, '
                f'currency={(self.currency if hasattr(self, "currency") else None)!s}, '
                f'description={(self.description if hasattr(self, "description") else None)!s}, '
                f'fi_attributes={(self.fi_attributes if hasattr(self, "fi_attributes") else None)!s}, '
                f'nickname={(self.nickname if hasattr(self, "nickname") else None)!s}, '
                f'product_name={(self.product_name if hasattr(self, "product_name") else None)!s}, '
                f'status={(self.status if hasattr(self, "status") else None)!s}, '
                f'line_of_business={(self.line_of_business if hasattr(self, "line_of_business") else None)!s}, '
                f'balance_type={(self.balance_type if hasattr(self, "balance_type") else None)!s}, '
                f'interest_rate={(self.interest_rate if hasattr(self, "interest_rate") else None)!s}, '
                f'interest_rate_type={(self.interest_rate_type if hasattr(self, "interest_rate_type") else None)!s}, '
                f'interest_rate_as_of={(self.interest_rate_as_of if hasattr(self, "interest_rate_as_of") else None)!s}, '
                f'last_activity_date={(self.last_activity_date if hasattr(self, "last_activity_date") else None)!s}, '
                f'micr_number={(self.micr_number if hasattr(self, "micr_number") else None)!s}, '
                f'parent_account_id={(self.parent_account_id if hasattr(self, "parent_account_id") else None)!s}, '
                f'prior_interest_rate={(self.prior_interest_rate if hasattr(self, "prior_interest_rate") else None)!s}, '
                f'transfer_in={(self.transfer_in if hasattr(self, "transfer_in") else None)!s}, '
                f'transfer_out={(self.transfer_out if hasattr(self, "transfer_out") else None)!s}, '
                f'allowed_check_writing={(self.allowed_check_writing if hasattr(self, "allowed_check_writing") else None)!s}, '
                f'allowed_option_trade={(self.allowed_option_trade if hasattr(self, "allowed_option_trade") else None)!s}, '
                f'broker_id={(self.broker_id if hasattr(self, "broker_id") else None)!s}, '
                f'calendar_year_for_401_k={(self.calendar_year_for_401_k if hasattr(self, "calendar_year_for_401_k") else None)!s}, '
                f'employer_name={(self.employer_name if hasattr(self, "employer_name") else None)!s}, '
                f'margin={(self.margin if hasattr(self, "margin") else None)!s}, '
                f'plan_id={(self.plan_id if hasattr(self, "plan_id") else None)!s}, '
                f'available_cash_balance={(self.available_cash_balance if hasattr(self, "available_cash_balance") else None)!s}, '
                f'balance_as_of={(self.balance_as_of if hasattr(self, "balance_as_of") else None)!s}, '
                f'balance_list={(self.balance_list if hasattr(self, "balance_list") else None)!s}, '
                f'current_value={(self.current_value if hasattr(self, "current_value") else None)!s}, '
                f'daily_change={(self.daily_change if hasattr(self, "daily_change") else None)!s}, '
                f'margin_balance={(self.margin_balance if hasattr(self, "margin_balance") else None)!s}, '
                f'percentage_change={(self.percentage_change if hasattr(self, "percentage_change") else None)!s}, '
                f'rollover_amount={(self.rollover_amount if hasattr(self, "rollover_amount") else None)!s}, '
                f'short_balance={(self.short_balance if hasattr(self, "short_balance") else None)!s})')
