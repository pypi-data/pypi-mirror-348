# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoyaapisv240.api_helper import APIHelper


class StockSecurityEntity(object):

    """Implementation of the 'StockSecurity Entity' model.

    Information about the stock security specific to the type of security

    Attributes:
        units_street (float): Units in the FI's street name, positive quantity
        units_user (float): Units in user's name directly, positive  quantity
        reinvest_dividends (bool): Reinvest dividends
        stock_type (StockTypeEnum): The model property of type StockTypeEnum.
        myield (float): Current yield
        yield_as_of_date (datetime): Yield as-of date

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "units_street": 'unitsStreet',
        "units_user": 'unitsUser',
        "reinvest_dividends": 'reinvestDividends',
        "stock_type": 'stockType',
        "myield": 'yield',
        "yield_as_of_date": 'yieldAsOfDate'
    }

    _optionals = [
        'units_street',
        'units_user',
        'reinvest_dividends',
        'stock_type',
        'myield',
        'yield_as_of_date',
    ]

    def __init__(self,
                 units_street=APIHelper.SKIP,
                 units_user=APIHelper.SKIP,
                 reinvest_dividends=APIHelper.SKIP,
                 stock_type=APIHelper.SKIP,
                 myield=APIHelper.SKIP,
                 yield_as_of_date=APIHelper.SKIP):
        """Constructor for the StockSecurityEntity class"""

        # Initialize members of the class
        if units_street is not APIHelper.SKIP:
            self.units_street = units_street 
        if units_user is not APIHelper.SKIP:
            self.units_user = units_user 
        if reinvest_dividends is not APIHelper.SKIP:
            self.reinvest_dividends = reinvest_dividends 
        if stock_type is not APIHelper.SKIP:
            self.stock_type = stock_type 
        if myield is not APIHelper.SKIP:
            self.myield = myield 
        if yield_as_of_date is not APIHelper.SKIP:
            self.yield_as_of_date = APIHelper.apply_datetime_converter(yield_as_of_date, APIHelper.RFC3339DateTime) if yield_as_of_date else None 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        units_street = dictionary.get("unitsStreet") if dictionary.get("unitsStreet") else APIHelper.SKIP
        units_user = dictionary.get("unitsUser") if dictionary.get("unitsUser") else APIHelper.SKIP
        reinvest_dividends = dictionary.get("reinvestDividends") if "reinvestDividends" in dictionary.keys() else APIHelper.SKIP
        stock_type = dictionary.get("stockType") if dictionary.get("stockType") else APIHelper.SKIP
        myield = dictionary.get("yield") if dictionary.get("yield") else APIHelper.SKIP
        yield_as_of_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("yieldAsOfDate")).datetime if dictionary.get("yieldAsOfDate") else APIHelper.SKIP
        # Return an object of this model
        return cls(units_street,
                   units_user,
                   reinvest_dividends,
                   stock_type,
                   myield,
                   yield_as_of_date)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'units_street={(self.units_street if hasattr(self, "units_street") else None)!r}, '
                f'units_user={(self.units_user if hasattr(self, "units_user") else None)!r}, '
                f'reinvest_dividends={(self.reinvest_dividends if hasattr(self, "reinvest_dividends") else None)!r}, '
                f'stock_type={(self.stock_type if hasattr(self, "stock_type") else None)!r}, '
                f'myield={(self.myield if hasattr(self, "myield") else None)!r}, '
                f'yield_as_of_date={(self.yield_as_of_date if hasattr(self, "yield_as_of_date") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'units_street={(self.units_street if hasattr(self, "units_street") else None)!s}, '
                f'units_user={(self.units_user if hasattr(self, "units_user") else None)!s}, '
                f'reinvest_dividends={(self.reinvest_dividends if hasattr(self, "reinvest_dividends") else None)!s}, '
                f'stock_type={(self.stock_type if hasattr(self, "stock_type") else None)!s}, '
                f'myield={(self.myield if hasattr(self, "myield") else None)!s}, '
                f'yield_as_of_date={(self.yield_as_of_date if hasattr(self, "yield_as_of_date") else None)!s})')
