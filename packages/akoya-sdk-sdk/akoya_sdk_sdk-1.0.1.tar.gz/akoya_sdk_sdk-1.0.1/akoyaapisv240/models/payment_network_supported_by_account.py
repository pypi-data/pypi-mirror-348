# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoyaapisv240.api_helper import APIHelper


class PaymentNetworkSupportedByAccount(object):

    """Implementation of the 'Payment Network Supported by Account' model.

    This provides details required to execute a transaction against the
    account within the payment network

    Attributes:
        bank_id (str): Bank identifier used by the payment network ie. Routing
            Number
        identifier (str): The number used to identify the account within the
            payment network. If identifierType is ACCOUNT_NUMBER, this is the
            account number.
        identifier_type (str): Type of identifier
        mtype (str): Type of payment network
        transfer_in (bool): Can transfer funds to the account using this
            information
        transfer_out (bool): Can transfer funds from the account using this
            information

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "bank_id": 'bankId',
        "identifier": 'identifier',
        "identifier_type": 'identifierType',
        "mtype": 'type',
        "transfer_in": 'transferIn',
        "transfer_out": 'transferOut'
    }

    _optionals = [
        'bank_id',
        'identifier',
        'identifier_type',
        'mtype',
        'transfer_in',
        'transfer_out',
    ]

    def __init__(self,
                 bank_id=APIHelper.SKIP,
                 identifier=APIHelper.SKIP,
                 identifier_type=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 transfer_in=APIHelper.SKIP,
                 transfer_out=APIHelper.SKIP):
        """Constructor for the PaymentNetworkSupportedByAccount class"""

        # Initialize members of the class
        if bank_id is not APIHelper.SKIP:
            self.bank_id = bank_id 
        if identifier is not APIHelper.SKIP:
            self.identifier = identifier 
        if identifier_type is not APIHelper.SKIP:
            self.identifier_type = identifier_type 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if transfer_in is not APIHelper.SKIP:
            self.transfer_in = transfer_in 
        if transfer_out is not APIHelper.SKIP:
            self.transfer_out = transfer_out 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        bank_id = dictionary.get("bankId") if dictionary.get("bankId") else APIHelper.SKIP
        identifier = dictionary.get("identifier") if dictionary.get("identifier") else APIHelper.SKIP
        identifier_type = dictionary.get("identifierType") if dictionary.get("identifierType") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        transfer_in = dictionary.get("transferIn") if "transferIn" in dictionary.keys() else APIHelper.SKIP
        transfer_out = dictionary.get("transferOut") if "transferOut" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(bank_id,
                   identifier,
                   identifier_type,
                   mtype,
                   transfer_in,
                   transfer_out)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'bank_id={(self.bank_id if hasattr(self, "bank_id") else None)!r}, '
                f'identifier={(self.identifier if hasattr(self, "identifier") else None)!r}, '
                f'identifier_type={(self.identifier_type if hasattr(self, "identifier_type") else None)!r}, '
                f'mtype={(self.mtype if hasattr(self, "mtype") else None)!r}, '
                f'transfer_in={(self.transfer_in if hasattr(self, "transfer_in") else None)!r}, '
                f'transfer_out={(self.transfer_out if hasattr(self, "transfer_out") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'bank_id={(self.bank_id if hasattr(self, "bank_id") else None)!s}, '
                f'identifier={(self.identifier if hasattr(self, "identifier") else None)!s}, '
                f'identifier_type={(self.identifier_type if hasattr(self, "identifier_type") else None)!s}, '
                f'mtype={(self.mtype if hasattr(self, "mtype") else None)!s}, '
                f'transfer_in={(self.transfer_in if hasattr(self, "transfer_in") else None)!s}, '
                f'transfer_out={(self.transfer_out if hasattr(self, "transfer_out") else None)!s})')
