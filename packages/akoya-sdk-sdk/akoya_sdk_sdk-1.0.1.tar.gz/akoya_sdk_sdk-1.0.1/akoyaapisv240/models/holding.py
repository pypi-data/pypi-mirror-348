# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoyaapisv240.api_helper import APIHelper
from akoyaapisv240.models.tax_lot_1 import TaxLot1


class Holding(object):

    """Implementation of the 'Holding' model.

    Attributes:
        holding_id (str): Long term persistent identity of the holding
        security_id (str): Unique identifier of the security.
        security_id_type (SecurityIdTypeEnum): Security identifier type
        tax_lots (List[TaxLot1]): Breakdown by tax lot.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "holding_id": 'holdingId',
        "security_id": 'securityId',
        "security_id_type": 'securityIdType',
        "tax_lots": 'taxLots'
    }

    _optionals = [
        'holding_id',
        'security_id',
        'security_id_type',
        'tax_lots',
    ]

    def __init__(self,
                 holding_id=APIHelper.SKIP,
                 security_id=APIHelper.SKIP,
                 security_id_type=APIHelper.SKIP,
                 tax_lots=APIHelper.SKIP):
        """Constructor for the Holding class"""

        # Initialize members of the class
        if holding_id is not APIHelper.SKIP:
            self.holding_id = holding_id 
        if security_id is not APIHelper.SKIP:
            self.security_id = security_id 
        if security_id_type is not APIHelper.SKIP:
            self.security_id_type = security_id_type 
        if tax_lots is not APIHelper.SKIP:
            self.tax_lots = tax_lots 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        holding_id = dictionary.get("holdingId") if dictionary.get("holdingId") else APIHelper.SKIP
        security_id = dictionary.get("securityId") if dictionary.get("securityId") else APIHelper.SKIP
        security_id_type = dictionary.get("securityIdType") if dictionary.get("securityIdType") else APIHelper.SKIP
        tax_lots = None
        if dictionary.get('taxLots') is not None:
            tax_lots = [TaxLot1.from_dictionary(x) for x in dictionary.get('taxLots')]
        else:
            tax_lots = APIHelper.SKIP
        # Return an object of this model
        return cls(holding_id,
                   security_id,
                   security_id_type,
                   tax_lots)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'holding_id={(self.holding_id if hasattr(self, "holding_id") else None)!r}, '
                f'security_id={(self.security_id if hasattr(self, "security_id") else None)!r}, '
                f'security_id_type={(self.security_id_type if hasattr(self, "security_id_type") else None)!r}, '
                f'tax_lots={(self.tax_lots if hasattr(self, "tax_lots") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'holding_id={(self.holding_id if hasattr(self, "holding_id") else None)!s}, '
                f'security_id={(self.security_id if hasattr(self, "security_id") else None)!s}, '
                f'security_id_type={(self.security_id_type if hasattr(self, "security_id_type") else None)!s}, '
                f'tax_lots={(self.tax_lots if hasattr(self, "tax_lots") else None)!s})')
