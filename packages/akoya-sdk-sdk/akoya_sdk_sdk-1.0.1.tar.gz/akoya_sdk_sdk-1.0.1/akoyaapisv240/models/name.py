# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoyaapisv240.api_helper import APIHelper


class Name(object):

    """Implementation of the 'Name' model.

    The end-user's name

    Attributes:
        first (str): First or given name. This data element may contain first
            & last name if not separated.
        middle (str): The model property of type str.
        last (str): The model property of type str.
        prefix (str): Name prefix, e.g. Mr.
        suffix (str): Generational or academic suffix
        company (str): Company name

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "first": 'first',
        "middle": 'middle',
        "last": 'last',
        "prefix": 'prefix',
        "suffix": 'suffix',
        "company": 'company'
    }

    _optionals = [
        'first',
        'middle',
        'last',
        'prefix',
        'suffix',
        'company',
    ]

    def __init__(self,
                 first=APIHelper.SKIP,
                 middle=APIHelper.SKIP,
                 last=APIHelper.SKIP,
                 prefix=APIHelper.SKIP,
                 suffix=APIHelper.SKIP,
                 company=APIHelper.SKIP):
        """Constructor for the Name class"""

        # Initialize members of the class
        if first is not APIHelper.SKIP:
            self.first = first 
        if middle is not APIHelper.SKIP:
            self.middle = middle 
        if last is not APIHelper.SKIP:
            self.last = last 
        if prefix is not APIHelper.SKIP:
            self.prefix = prefix 
        if suffix is not APIHelper.SKIP:
            self.suffix = suffix 
        if company is not APIHelper.SKIP:
            self.company = company 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        first = dictionary.get("first") if dictionary.get("first") else APIHelper.SKIP
        middle = dictionary.get("middle") if dictionary.get("middle") else APIHelper.SKIP
        last = dictionary.get("last") if dictionary.get("last") else APIHelper.SKIP
        prefix = dictionary.get("prefix") if dictionary.get("prefix") else APIHelper.SKIP
        suffix = dictionary.get("suffix") if dictionary.get("suffix") else APIHelper.SKIP
        company = dictionary.get("company") if dictionary.get("company") else APIHelper.SKIP
        # Return an object of this model
        return cls(first,
                   middle,
                   last,
                   prefix,
                   suffix,
                   company)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'first={(self.first if hasattr(self, "first") else None)!r}, '
                f'middle={(self.middle if hasattr(self, "middle") else None)!r}, '
                f'last={(self.last if hasattr(self, "last") else None)!r}, '
                f'prefix={(self.prefix if hasattr(self, "prefix") else None)!r}, '
                f'suffix={(self.suffix if hasattr(self, "suffix") else None)!r}, '
                f'company={(self.company if hasattr(self, "company") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'first={(self.first if hasattr(self, "first") else None)!s}, '
                f'middle={(self.middle if hasattr(self, "middle") else None)!s}, '
                f'last={(self.last if hasattr(self, "last") else None)!s}, '
                f'prefix={(self.prefix if hasattr(self, "prefix") else None)!s}, '
                f'suffix={(self.suffix if hasattr(self, "suffix") else None)!s}, '
                f'company={(self.company if hasattr(self, "company") else None)!s})')
