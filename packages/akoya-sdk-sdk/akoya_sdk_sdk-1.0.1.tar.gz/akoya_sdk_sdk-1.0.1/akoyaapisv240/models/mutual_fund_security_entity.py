# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoyaapisv240.api_helper import APIHelper


class MutualFundSecurityEntity(object):

    """Implementation of the 'MutualFundSecurity Entity' model.

    Information about the mutual fund security specific to the type of security

    Attributes:
        mutual_fund_type (MutualFundTypeEnum): Mutual fund type
        units_street (float): Units in the FI's street name, positive quantity
        units_user (float): Units in user's name directly, positive  quantity
        reinvest_dividends (bool): Reinvest dividends
        reinvest_capital_gains (bool): Reinvest capital gains
        myield (float): Current yield reported as portion of the fund's assets
        yield_as_of_date (datetime): As-of date for yield value

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mutual_fund_type": 'mutualFundType',
        "units_street": 'unitsStreet',
        "units_user": 'unitsUser',
        "reinvest_dividends": 'reinvestDividends',
        "reinvest_capital_gains": 'reinvestCapitalGains',
        "myield": 'yield',
        "yield_as_of_date": 'yieldAsOfDate'
    }

    _optionals = [
        'mutual_fund_type',
        'units_street',
        'units_user',
        'reinvest_dividends',
        'reinvest_capital_gains',
        'myield',
        'yield_as_of_date',
    ]

    def __init__(self,
                 mutual_fund_type=APIHelper.SKIP,
                 units_street=APIHelper.SKIP,
                 units_user=APIHelper.SKIP,
                 reinvest_dividends=APIHelper.SKIP,
                 reinvest_capital_gains=APIHelper.SKIP,
                 myield=APIHelper.SKIP,
                 yield_as_of_date=APIHelper.SKIP):
        """Constructor for the MutualFundSecurityEntity class"""

        # Initialize members of the class
        if mutual_fund_type is not APIHelper.SKIP:
            self.mutual_fund_type = mutual_fund_type 
        if units_street is not APIHelper.SKIP:
            self.units_street = units_street 
        if units_user is not APIHelper.SKIP:
            self.units_user = units_user 
        if reinvest_dividends is not APIHelper.SKIP:
            self.reinvest_dividends = reinvest_dividends 
        if reinvest_capital_gains is not APIHelper.SKIP:
            self.reinvest_capital_gains = reinvest_capital_gains 
        if myield is not APIHelper.SKIP:
            self.myield = myield 
        if yield_as_of_date is not APIHelper.SKIP:
            self.yield_as_of_date = APIHelper.apply_datetime_converter(yield_as_of_date, APIHelper.RFC3339DateTime) if yield_as_of_date else None 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        mutual_fund_type = dictionary.get("mutualFundType") if dictionary.get("mutualFundType") else APIHelper.SKIP
        units_street = dictionary.get("unitsStreet") if dictionary.get("unitsStreet") else APIHelper.SKIP
        units_user = dictionary.get("unitsUser") if dictionary.get("unitsUser") else APIHelper.SKIP
        reinvest_dividends = dictionary.get("reinvestDividends") if "reinvestDividends" in dictionary.keys() else APIHelper.SKIP
        reinvest_capital_gains = dictionary.get("reinvestCapitalGains") if "reinvestCapitalGains" in dictionary.keys() else APIHelper.SKIP
        myield = dictionary.get("yield") if dictionary.get("yield") else APIHelper.SKIP
        yield_as_of_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("yieldAsOfDate")).datetime if dictionary.get("yieldAsOfDate") else APIHelper.SKIP
        # Return an object of this model
        return cls(mutual_fund_type,
                   units_street,
                   units_user,
                   reinvest_dividends,
                   reinvest_capital_gains,
                   myield,
                   yield_as_of_date)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'mutual_fund_type={(self.mutual_fund_type if hasattr(self, "mutual_fund_type") else None)!r}, '
                f'units_street={(self.units_street if hasattr(self, "units_street") else None)!r}, '
                f'units_user={(self.units_user if hasattr(self, "units_user") else None)!r}, '
                f'reinvest_dividends={(self.reinvest_dividends if hasattr(self, "reinvest_dividends") else None)!r}, '
                f'reinvest_capital_gains={(self.reinvest_capital_gains if hasattr(self, "reinvest_capital_gains") else None)!r}, '
                f'myield={(self.myield if hasattr(self, "myield") else None)!r}, '
                f'yield_as_of_date={(self.yield_as_of_date if hasattr(self, "yield_as_of_date") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'mutual_fund_type={(self.mutual_fund_type if hasattr(self, "mutual_fund_type") else None)!s}, '
                f'units_street={(self.units_street if hasattr(self, "units_street") else None)!s}, '
                f'units_user={(self.units_user if hasattr(self, "units_user") else None)!s}, '
                f'reinvest_dividends={(self.reinvest_dividends if hasattr(self, "reinvest_dividends") else None)!s}, '
                f'reinvest_capital_gains={(self.reinvest_capital_gains if hasattr(self, "reinvest_capital_gains") else None)!s}, '
                f'myield={(self.myield if hasattr(self, "myield") else None)!s}, '
                f'yield_as_of_date={(self.yield_as_of_date if hasattr(self, "yield_as_of_date") else None)!s})')
