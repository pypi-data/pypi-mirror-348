# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoyaapisv240.api_helper import APIHelper


class OptionSecurityEntity(object):

    """Implementation of the 'OptionSecurity Entity' model.

    Information about the option security specific to the type of security

    Attributes:
        secured (SecuredEnum): How the option is secured
        option_type (OptionTypeEnum): The model property of type
            OptionTypeEnum.
        strike_price (float): Strike price / Unit price
        expire_date (datetime): Expiration date of option
        shares_per_contract (float): Shares per contract

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "secured": 'secured',
        "option_type": 'optionType',
        "strike_price": 'strikePrice',
        "expire_date": 'expireDate',
        "shares_per_contract": 'sharesPerContract'
    }

    _optionals = [
        'secured',
        'option_type',
        'strike_price',
        'expire_date',
        'shares_per_contract',
    ]

    def __init__(self,
                 secured=APIHelper.SKIP,
                 option_type=APIHelper.SKIP,
                 strike_price=APIHelper.SKIP,
                 expire_date=APIHelper.SKIP,
                 shares_per_contract=APIHelper.SKIP):
        """Constructor for the OptionSecurityEntity class"""

        # Initialize members of the class
        if secured is not APIHelper.SKIP:
            self.secured = secured 
        if option_type is not APIHelper.SKIP:
            self.option_type = option_type 
        if strike_price is not APIHelper.SKIP:
            self.strike_price = strike_price 
        if expire_date is not APIHelper.SKIP:
            self.expire_date = APIHelper.apply_datetime_converter(expire_date, APIHelper.RFC3339DateTime) if expire_date else None 
        if shares_per_contract is not APIHelper.SKIP:
            self.shares_per_contract = shares_per_contract 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        secured = dictionary.get("secured") if dictionary.get("secured") else APIHelper.SKIP
        option_type = dictionary.get("optionType") if dictionary.get("optionType") else APIHelper.SKIP
        strike_price = dictionary.get("strikePrice") if dictionary.get("strikePrice") else APIHelper.SKIP
        expire_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("expireDate")).datetime if dictionary.get("expireDate") else APIHelper.SKIP
        shares_per_contract = dictionary.get("sharesPerContract") if dictionary.get("sharesPerContract") else APIHelper.SKIP
        # Return an object of this model
        return cls(secured,
                   option_type,
                   strike_price,
                   expire_date,
                   shares_per_contract)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'secured={(self.secured if hasattr(self, "secured") else None)!r}, '
                f'option_type={(self.option_type if hasattr(self, "option_type") else None)!r}, '
                f'strike_price={(self.strike_price if hasattr(self, "strike_price") else None)!r}, '
                f'expire_date={(self.expire_date if hasattr(self, "expire_date") else None)!r}, '
                f'shares_per_contract={(self.shares_per_contract if hasattr(self, "shares_per_contract") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'secured={(self.secured if hasattr(self, "secured") else None)!s}, '
                f'option_type={(self.option_type if hasattr(self, "option_type") else None)!s}, '
                f'strike_price={(self.strike_price if hasattr(self, "strike_price") else None)!s}, '
                f'expire_date={(self.expire_date if hasattr(self, "expire_date") else None)!s}, '
                f'shares_per_contract={(self.shares_per_contract if hasattr(self, "shares_per_contract") else None)!s})')
