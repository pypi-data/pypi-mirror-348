# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoyaapisv240.api_helper import APIHelper


class Vesting(object):

    """Implementation of the 'Vesting' model.

    Attributes:
        vested_quantity (float): Vested quantity (Vested shares total qty of
            vesting tranche)
        vested_value (float): Vested balance at grant (aggregate of all
            vestings)
        vesting_date (datetime): The model property of type datetime.
        vest_expire_date (datetime): The model property of type datetime.
        vested_status (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "vested_quantity": 'vestedQuantity',
        "vested_value": 'vestedValue',
        "vesting_date": 'vestingDate',
        "vest_expire_date": 'vestExpireDate',
        "vested_status": 'vestedStatus'
    }

    _optionals = [
        'vested_quantity',
        'vested_value',
        'vesting_date',
        'vest_expire_date',
        'vested_status',
    ]

    def __init__(self,
                 vested_quantity=APIHelper.SKIP,
                 vested_value=APIHelper.SKIP,
                 vesting_date=APIHelper.SKIP,
                 vest_expire_date=APIHelper.SKIP,
                 vested_status=APIHelper.SKIP):
        """Constructor for the Vesting class"""

        # Initialize members of the class
        if vested_quantity is not APIHelper.SKIP:
            self.vested_quantity = vested_quantity 
        if vested_value is not APIHelper.SKIP:
            self.vested_value = vested_value 
        if vesting_date is not APIHelper.SKIP:
            self.vesting_date = APIHelper.apply_datetime_converter(vesting_date, APIHelper.RFC3339DateTime) if vesting_date else None 
        if vest_expire_date is not APIHelper.SKIP:
            self.vest_expire_date = APIHelper.apply_datetime_converter(vest_expire_date, APIHelper.RFC3339DateTime) if vest_expire_date else None 
        if vested_status is not APIHelper.SKIP:
            self.vested_status = vested_status 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        vested_quantity = dictionary.get("vestedQuantity") if dictionary.get("vestedQuantity") else APIHelper.SKIP
        vested_value = dictionary.get("vestedValue") if dictionary.get("vestedValue") else APIHelper.SKIP
        vesting_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("vestingDate")).datetime if dictionary.get("vestingDate") else APIHelper.SKIP
        vest_expire_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("vestExpireDate")).datetime if dictionary.get("vestExpireDate") else APIHelper.SKIP
        vested_status = dictionary.get("vestedStatus") if dictionary.get("vestedStatus") else APIHelper.SKIP
        # Return an object of this model
        return cls(vested_quantity,
                   vested_value,
                   vesting_date,
                   vest_expire_date,
                   vested_status)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'vested_quantity={(self.vested_quantity if hasattr(self, "vested_quantity") else None)!r}, '
                f'vested_value={(self.vested_value if hasattr(self, "vested_value") else None)!r}, '
                f'vesting_date={(self.vesting_date if hasattr(self, "vesting_date") else None)!r}, '
                f'vest_expire_date={(self.vest_expire_date if hasattr(self, "vest_expire_date") else None)!r}, '
                f'vested_status={(self.vested_status if hasattr(self, "vested_status") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'vested_quantity={(self.vested_quantity if hasattr(self, "vested_quantity") else None)!s}, '
                f'vested_value={(self.vested_value if hasattr(self, "vested_value") else None)!s}, '
                f'vesting_date={(self.vesting_date if hasattr(self, "vesting_date") else None)!s}, '
                f'vest_expire_date={(self.vest_expire_date if hasattr(self, "vest_expire_date") else None)!s}, '
                f'vested_status={(self.vested_status if hasattr(self, "vested_status") else None)!s})')
