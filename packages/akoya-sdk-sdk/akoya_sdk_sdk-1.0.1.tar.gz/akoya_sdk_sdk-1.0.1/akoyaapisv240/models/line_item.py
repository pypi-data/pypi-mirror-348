# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoyaapisv240.api_helper import APIHelper
from akoyaapisv240.models.hateoas_link import HATEOASLink


class LineItem(object):

    """Implementation of the 'LineItem' model.

    Attributes:
        amount (float): The amount of money attributable to this line item
        check_number (float): Check number
        description (str): The description of the line item
        image_ids (List[str]): Array of image identifiers (unique to
            transaction) used to retrieve images of check or transaction
            receipt
        links (List[HATEOASLink]): Links (unique to this Transaction) used to
            retrieve images of checks or transaction receipts, or invoke other
            APIs
        memo (str): Secondary item description
        reference (str): A reference number

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "amount": 'amount',
        "check_number": 'checkNumber',
        "description": 'description',
        "image_ids": 'imageIds',
        "links": 'links',
        "memo": 'memo',
        "reference": 'reference'
    }

    _optionals = [
        'amount',
        'check_number',
        'description',
        'image_ids',
        'links',
        'memo',
        'reference',
    ]

    def __init__(self,
                 amount=APIHelper.SKIP,
                 check_number=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 image_ids=APIHelper.SKIP,
                 links=APIHelper.SKIP,
                 memo=APIHelper.SKIP,
                 reference=APIHelper.SKIP):
        """Constructor for the LineItem class"""

        # Initialize members of the class
        if amount is not APIHelper.SKIP:
            self.amount = amount 
        if check_number is not APIHelper.SKIP:
            self.check_number = check_number 
        if description is not APIHelper.SKIP:
            self.description = description 
        if image_ids is not APIHelper.SKIP:
            self.image_ids = image_ids 
        if links is not APIHelper.SKIP:
            self.links = links 
        if memo is not APIHelper.SKIP:
            self.memo = memo 
        if reference is not APIHelper.SKIP:
            self.reference = reference 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        amount = dictionary.get("amount") if dictionary.get("amount") else APIHelper.SKIP
        check_number = dictionary.get("checkNumber") if dictionary.get("checkNumber") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        image_ids = dictionary.get("imageIds") if dictionary.get("imageIds") else APIHelper.SKIP
        links = None
        if dictionary.get('links') is not None:
            links = [HATEOASLink.from_dictionary(x) for x in dictionary.get('links')]
        else:
            links = APIHelper.SKIP
        memo = dictionary.get("memo") if dictionary.get("memo") else APIHelper.SKIP
        reference = dictionary.get("reference") if dictionary.get("reference") else APIHelper.SKIP
        # Return an object of this model
        return cls(amount,
                   check_number,
                   description,
                   image_ids,
                   links,
                   memo,
                   reference)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'amount={(self.amount if hasattr(self, "amount") else None)!r}, '
                f'check_number={(self.check_number if hasattr(self, "check_number") else None)!r}, '
                f'description={(self.description if hasattr(self, "description") else None)!r}, '
                f'image_ids={(self.image_ids if hasattr(self, "image_ids") else None)!r}, '
                f'links={(self.links if hasattr(self, "links") else None)!r}, '
                f'memo={(self.memo if hasattr(self, "memo") else None)!r}, '
                f'reference={(self.reference if hasattr(self, "reference") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'amount={(self.amount if hasattr(self, "amount") else None)!s}, '
                f'check_number={(self.check_number if hasattr(self, "check_number") else None)!s}, '
                f'description={(self.description if hasattr(self, "description") else None)!s}, '
                f'image_ids={(self.image_ids if hasattr(self, "image_ids") else None)!s}, '
                f'links={(self.links if hasattr(self, "links") else None)!s}, '
                f'memo={(self.memo if hasattr(self, "memo") else None)!s}, '
                f'reference={(self.reference if hasattr(self, "reference") else None)!s})')
