# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from akoyaapisv240.api_helper import APIHelper
from akoyaapisv240.configuration import Server
from akoyaapisv240.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from akoyaapisv240.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from akoyaapisv240.models.transactions_entity import TransactionsEntity
from akoyaapisv240.exceptions.error_exception import ErrorException
from akoyaapisv240.exceptions.api_exception import APIException


class TransactionsController(BaseController):

    """A Controller to access Endpoints in the akoyaapisv240 API."""
    def __init__(self, config):
        super(TransactionsController, self).__init__(config)

    def get_transactions(self,
                         version,
                         provider_id,
                         account_id,
                         start_time=None,
                         end_time=None,
                         offset='0',
                         limit=50,
                         x_akoya_interaction_type=None,
                         mode=None):
        """Does a GET request to /transactions/{version}/{providerId}/{accountId}.

        The transactions API allows you to retrieve transaction history of
        consumer-permissioned accounts.
        > ðŸ›‘
        > 
        > The *id_token* should be used as the bearer token with this call.
        For more information on how to paginate transaction results, please
        see: [Pagination](https://docs.akoya.com/v2/docs/pagination)
        Use the `mode` query param to receive FDX-aligned, standardized data
        values (Beta). For example:
        `https://sandbox-products.ddp.akoya.com/transactions/v2/mikomo?mode=sta
        ndard`
        `mode` is available in both sandbox and production.
        `mode` is supported by a subset of providers. Log into the [Data
        Recipient Hub](https://recipient.ddp.akoya.com/login) and click
        [here](https://recipient.ddp.akoya.com/support/article/kA0Uw00000015GzK
        AI) to view a list of all providers supporting the `mode` parameter.

        Args:
            version (str): Akoya major version number. Do not use minor
                version numbers. For instance, use v2 and not v2.2
            provider_id (str): Id of provider
            account_id (str): Account Identifier
            start_time (datetime, optional): ISO 8601 date format in UTC time
                zone. If blank, the default value (current date - 15 calendar
                days) is used. If a value is specified, endTime is required.
            end_time (datetime, optional): ISO 8601 date format in UTC time
                zone. If blank, the default value (current date) is used. If a
                value is specified, startTime is required.
            offset (str, optional): The number of items to skip before the
                first in the response. The default is 0.
            limit (int, optional): The maximum number of items to be returned
                in the response. The default is 50.
            x_akoya_interaction_type (XAkoyaInteractionTypeEnum, optional):
                Optional but recommended header to include with each data
                request.  Allowed values are `user` or `batch`.  `user`
                indicates a request is prompted by an end-user action. `batch`
                indicates the request is part of a batch process.
            mode (ModeEnum, optional): BETA. Default is raw. Use standard for
                FDX-aligned, standardized data values.

        Returns:
            TransactionsEntity: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transactions/{version}/{providerId}/{accountId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('version')
                            .value(version)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('providerId')
                            .value(provider_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('accountId')
                            .value(account_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('startTime')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, start_time)))
            .query_param(Parameter()
                         .key('endTime')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, end_time)))
            .query_param(Parameter()
                         .key('offset')
                         .value(offset))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .header_param(Parameter()
                          .key('x-akoya-interaction-type')
                          .value(x_akoya_interaction_type))
            .query_param(Parameter()
                         .key('mode')
                         .value(mode))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('acgAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TransactionsEntity.from_dictionary)
            .local_error('400', 'Bad Request', ErrorException)
            .local_error('401', 'Customer not authorized.', ErrorException)
            .local_error('404', '701 - Tax Lots not found. The `holdingId` may be wrong.', ErrorException)
            .local_error('405', 'Method Not Allowed', APIException)
            .local_error('406', 'Content Type not Supported', ErrorException)
            .local_error('408', 'Request timed out (round trip call took >10 seconds).', ErrorException)
            .local_error('429', '1207 - Too many requests', ErrorException)
            .local_error('500', 'Catch-all exception where request was not processed due to an internal outage/issue.', ErrorException)
            .local_error('501', 'FdxVersion in header is not implemented.', ErrorException)
            .local_error('503', 'System is down for maintenance.', ErrorException)
        ).execute()
