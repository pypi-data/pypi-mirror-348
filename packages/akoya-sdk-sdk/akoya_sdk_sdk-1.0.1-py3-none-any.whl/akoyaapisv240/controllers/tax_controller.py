# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from akoyaapisv240.api_helper import APIHelper
from akoyaapisv240.configuration import Server
from akoyaapisv240.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from akoyaapisv240.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from akoyaapisv240.models.tax_statement_list import TaxStatementList
from akoyaapisv240.models.tax_statement_1 import TaxStatement1
from akoyaapisv240.exceptions.error_exception import ErrorException
from akoyaapisv240.exceptions.api_exception import APIException


class TaxController(BaseController):

    """A Controller to access Endpoints in the akoyaapisv240 API."""
    def __init__(self, config):
        super(TaxController, self).__init__(config)

    def tax_forms_search(self,
                         version,
                         provider_id,
                         x_akoya_interaction_id=None,
                         x_akoya_interaction_type='user',
                         accept=None,
                         tax_year=None,
                         tax_forms=None,
                         account_id=None):
        """Does a GET request to /tax-forms/{version}/{providerId}.

        Get the full lists of tax document data and tax form images available
        for a specific year for the current authorized customer.

        Args:
            version (VersionEnum): Endpoint version.
            provider_id (str): Provider to query for Tax data.
            x_akoya_interaction_id (str, optional): Unique identifier to
                associate with this request. No specific format required.
            x_akoya_interaction_type (XAkoyaInteractionTypeEnum, optional):
                Identifies whether the customer is present (USER) or it is a
                BATCH operation. Case-insensitive.
            accept (List[AcceptEnum], optional): Use the [Accept HTTP request
                header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Heade
                rs/Accept) to indicate one or more content types to request
                for the search result response. Use `application/json` to
                request data or `application/pdf to request images in
                comma-separated array format.         Use in combination with
                TaxDataTypeQuery parameter to request `application/json`
                responses in ''JSON'' or ''BASE64_PDF'' format for tax form
                data'
            tax_year (str, optional): Tax year in which to search for tax
                forms.
            tax_forms (List[TypeFormTypeEnum], optional): One or more tax form
                type enums for the specific documents being requested. Comma
                separated
            account_id (str, optional): Unique account identifier (not the
                account number)

        Returns:
            TaxStatementList: Response from the API. Array of all the tax
                document data and tax form images available for the customer
                matching search criteria

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tax-forms/{version}/{providerId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('version')
                            .value(version)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('providerId')
                            .value(provider_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('x-akoya-interaction-id')
                          .value(x_akoya_interaction_id))
            .header_param(Parameter()
                          .key('x-akoya-interaction-type')
                          .value(x_akoya_interaction_type))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .query_param(Parameter()
                         .key('taxYear')
                         .value(tax_year))
            .query_param(Parameter()
                         .key('taxForms')
                         .value(tax_forms))
            .query_param(Parameter()
                         .key('accountId')
                         .value(account_id))
            .auth(Single('acgAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TaxStatementList.from_dictionary)
            .local_error('400', 'Bad Request', ErrorException)
            .local_error('404', 'Not Found', ErrorException)
            .local_error('405', 'Method Not Allowed', APIException)
            .local_error('406', 'Not Acceptable', APIException)
            .local_error('408', 'Request timed out (round trip call took >10 seconds).', ErrorException)
            .local_error('409', 'Conflict', APIException)
            .local_error('500', 'Internal Server Error', ErrorException)
            .local_error('501', 'FDX Version Not Supported or Not Implemented', ErrorException)
            .local_error('503', 'Scheduled Maintenance', ErrorException)
        ).execute()

    def get_tax_form(self,
                     version,
                     provider_id,
                     tax_form_id,
                     x_akoya_interaction_id=None,
                     x_akoya_interaction_type='user',
                     tax_data_type=None,
                     accept=None):
        """Does a GET request to /tax-forms/{version}/{providerId}/{taxFormId}.

        Get the Tax Statement as JSON or PDF for a single tax document for the
        customer. Use [HTTP Accept
        request-header](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html
        ) to specify desired content types. See `AcceptHeader` definition for
        typical values.
        Not all providers support PDF payloads. See [this
        article](https://recipient.ddp.akoya.com/support/article/kA0Uw00000026V
        xKAI) in the Data Recipent Hub for a list of providers that support
        document PDFs.

        Args:
            version (VersionEnum): Endpoint version.
            provider_id (str): Provider to query for Tax data.
            tax_form_id (str): Unique identifier of the tax form to request.
            x_akoya_interaction_id (str, optional): Unique identifier to
                associate with this request. No specific format required.
            x_akoya_interaction_type (XAkoyaInteractionTypeEnum, optional):
                Identifies whether the customer is present (USER) or it is a
                BATCH operation. Case-insensitive.
            tax_data_type (TypeDataTypeEnum, optional): Use taxDataType to
                request `application/json` tax form data response in 'JSON' or
                'BASE64_PDF' format. Omit if either format is acceptable. Used
                in combination with AcceptHeader requesting `application/json`
                response
            accept (List[AcceptEnum], optional): Use the [Accept HTTP request
                header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Heade
                rs/Accept) to indicate one or more content types to request
                for the search result response. Use `application/json` to
                request data or `application/pdf`to request images. In
                comma-separated array format.         Use in combination with
                TaxDataTypeQuery parameter to request `application/json`
                responses in ''JSON'' or ''BASE64_PDF'' format for tax form
                data'

        Returns:
            TaxStatement1: Response from the API. The document image or
                TaxStatement as json for a single tax document for the
                customer. A single document can include multiple IRS tax forms
                and/or other reporting statements as delivered by providers

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tax-forms/{version}/{providerId}/{taxFormId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('version')
                            .value(version)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('providerId')
                            .value(provider_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('taxFormId')
                            .value(tax_form_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('x-akoya-interaction-id')
                          .value(x_akoya_interaction_id))
            .header_param(Parameter()
                          .key('x-akoya-interaction-type')
                          .value(x_akoya_interaction_type))
            .query_param(Parameter()
                         .key('taxDataType')
                         .value(tax_data_type))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('acgAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TaxStatement1.from_dictionary)
            .local_error('400', 'Account ID is required for searching or validating authorization', ErrorException)
            .local_error('404', 'Tax Form for provided Tax Form ID was not found', ErrorException)
            .local_error('405', 'Method Not Allowed', APIException)
            .local_error('406', 'Content Type not Supported', ErrorException)
            .local_error('408', 'Request timed out (round trip call took >10 seconds).', ErrorException)
            .local_error('409', 'Tax forms are not currently available for this account or this year', ErrorException)
            .local_error('500', 'Catch-all exception where request was not processed due to an internal outage/issue.', ErrorException)
            .local_error('501', 'FdxVersion in header is not implemented.', ErrorException)
            .local_error('503', 'System is down for maintenance.', ErrorException)
        ).execute()
