# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
import dateutil.parser

from akoyaapisv240.api_helper import APIHelper
from akoyaapisv240.models.error_2 import Error2
from akoyaapisv240.models.hateoas_link import HATEOASLink
from akoyaapisv240.models.name_and_address_1 import NameAndAddress1
from akoyaapisv240.models.tax_form_attribute import TaxFormAttribute
from akoyaapisv240.models.tax_party_1 import TaxParty1
from akoyaapisv240.models.tax_party_8 import TaxParty8


class Form1099LTC(object):

    """Implementation of the 'Form 1099-LTC' model.

    Long-Term Care and Accelerated Death Benefits, from PAYER (1st-2nd boxes
    as issuer) to POLICY HOLDER (3rd-4th boxes as recipient)

    Attributes:
        tax_year (int): Year for which taxes are being paid
        corrected (bool): True to indicate this is a corrected tax form
        account_id (str): Long-term persistent identity of the source account.
            Not the account number
        tax_form_id (str): Long-term persistent id for this tax form.
            Depending upon the data provider, this may be the same id as the
            enclosing tax statement id, or this may be a different id, or this
            id may be omitted.
        tax_form_date (date): Date of production or delivery of the tax form
        additional_information (str): Additional explanation text or content
            about this tax form
        tax_form_type (TypeFormType2Enum): Enumerated name of the tax form
            entity e.g. "TaxW2"
        issuer (TaxParty8): Issuer's name, address, phone, and TIN. Issuer
            data need only be transmitted on enclosing TaxStatement, if it is
            the same on all its included tax forms.
        recipient (TaxParty1): Recipient's name, address, phone, and TIN.
            Recipient data need only be transmitted on enclosing TaxStatement,
            if it is the same on all its included tax forms.
        attributes (List[TaxFormAttribute]): Additional attributes for this
            tax form when defined fields are not available. Some specific
            additional attributes already defined by providers: Fields
            required by [IRS
            FIRE](https://www.irs.gov/e-file-providers/filing-information-retur
            ns-electronically-fire): Name Control, Type of Identification
            Number (EIN, SSN, ITIN, ATIN). (ATIN is tax ID number for pending
            adoptions.) Tax form provider field for taxpayer notification:
            Recipient Email Address.
        error (Error2): Present if an error was encountered while retrieving
            this form
        links (List[HATEOASLink]): Links to retrieve this form as data or
            image, or to invoke other APIs
        account_number (str): Account number
        ltc_benefits (float): Box 1, Gross long-term care benefits paid
        death_benefits (float): Box 2, Accelerated death benefits paid
        per_diem (bool): Box 3, Per diem
        reimbursed_amount (bool): Box 3, Reimbursed amount
        insured_id (str): INSURED'S taxpayer identification no.
        insured_name_address (NameAndAddress1): Insured name and address
        qualified_contract (bool): Box 4, Qualified contract
        chronically_ill (bool): Box 5, Chronically ill
        terminally_ill (bool): Box 5, Terminally ill
        date_certified (date): Date certified

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "tax_year": 'taxYear',
        "corrected": 'corrected',
        "account_id": 'accountId',
        "tax_form_id": 'taxFormId',
        "tax_form_date": 'taxFormDate',
        "additional_information": 'additionalInformation',
        "tax_form_type": 'taxFormType',
        "issuer": 'issuer',
        "recipient": 'recipient',
        "attributes": 'attributes',
        "error": 'error',
        "links": 'links',
        "account_number": 'accountNumber',
        "ltc_benefits": 'ltcBenefits',
        "death_benefits": 'deathBenefits',
        "per_diem": 'perDiem',
        "reimbursed_amount": 'reimbursedAmount',
        "insured_id": 'insuredId',
        "insured_name_address": 'insuredNameAddress',
        "qualified_contract": 'qualifiedContract',
        "chronically_ill": 'chronicallyIll',
        "terminally_ill": 'terminallyIll',
        "date_certified": 'dateCertified'
    }

    _optionals = [
        'tax_year',
        'corrected',
        'account_id',
        'tax_form_id',
        'tax_form_date',
        'additional_information',
        'tax_form_type',
        'issuer',
        'recipient',
        'attributes',
        'error',
        'links',
        'account_number',
        'ltc_benefits',
        'death_benefits',
        'per_diem',
        'reimbursed_amount',
        'insured_id',
        'insured_name_address',
        'qualified_contract',
        'chronically_ill',
        'terminally_ill',
        'date_certified',
    ]

    def __init__(self,
                 tax_year=APIHelper.SKIP,
                 corrected=APIHelper.SKIP,
                 account_id=APIHelper.SKIP,
                 tax_form_id=APIHelper.SKIP,
                 tax_form_date=APIHelper.SKIP,
                 additional_information=APIHelper.SKIP,
                 tax_form_type=APIHelper.SKIP,
                 issuer=APIHelper.SKIP,
                 recipient=APIHelper.SKIP,
                 attributes=APIHelper.SKIP,
                 error=APIHelper.SKIP,
                 links=APIHelper.SKIP,
                 account_number=APIHelper.SKIP,
                 ltc_benefits=APIHelper.SKIP,
                 death_benefits=APIHelper.SKIP,
                 per_diem=APIHelper.SKIP,
                 reimbursed_amount=APIHelper.SKIP,
                 insured_id=APIHelper.SKIP,
                 insured_name_address=APIHelper.SKIP,
                 qualified_contract=APIHelper.SKIP,
                 chronically_ill=APIHelper.SKIP,
                 terminally_ill=APIHelper.SKIP,
                 date_certified=APIHelper.SKIP):
        """Constructor for the Form1099LTC class"""

        # Initialize members of the class
        if tax_year is not APIHelper.SKIP:
            self.tax_year = tax_year 
        if corrected is not APIHelper.SKIP:
            self.corrected = corrected 
        if account_id is not APIHelper.SKIP:
            self.account_id = account_id 
        if tax_form_id is not APIHelper.SKIP:
            self.tax_form_id = tax_form_id 
        if tax_form_date is not APIHelper.SKIP:
            self.tax_form_date = tax_form_date 
        if additional_information is not APIHelper.SKIP:
            self.additional_information = additional_information 
        if tax_form_type is not APIHelper.SKIP:
            self.tax_form_type = tax_form_type 
        if issuer is not APIHelper.SKIP:
            self.issuer = issuer 
        if recipient is not APIHelper.SKIP:
            self.recipient = recipient 
        if attributes is not APIHelper.SKIP:
            self.attributes = attributes 
        if error is not APIHelper.SKIP:
            self.error = error 
        if links is not APIHelper.SKIP:
            self.links = links 
        if account_number is not APIHelper.SKIP:
            self.account_number = account_number 
        if ltc_benefits is not APIHelper.SKIP:
            self.ltc_benefits = ltc_benefits 
        if death_benefits is not APIHelper.SKIP:
            self.death_benefits = death_benefits 
        if per_diem is not APIHelper.SKIP:
            self.per_diem = per_diem 
        if reimbursed_amount is not APIHelper.SKIP:
            self.reimbursed_amount = reimbursed_amount 
        if insured_id is not APIHelper.SKIP:
            self.insured_id = insured_id 
        if insured_name_address is not APIHelper.SKIP:
            self.insured_name_address = insured_name_address 
        if qualified_contract is not APIHelper.SKIP:
            self.qualified_contract = qualified_contract 
        if chronically_ill is not APIHelper.SKIP:
            self.chronically_ill = chronically_ill 
        if terminally_ill is not APIHelper.SKIP:
            self.terminally_ill = terminally_ill 
        if date_certified is not APIHelper.SKIP:
            self.date_certified = date_certified 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        tax_year = dictionary.get("taxYear") if dictionary.get("taxYear") else APIHelper.SKIP
        corrected = dictionary.get("corrected") if "corrected" in dictionary.keys() else APIHelper.SKIP
        account_id = dictionary.get("accountId") if dictionary.get("accountId") else APIHelper.SKIP
        tax_form_id = dictionary.get("taxFormId") if dictionary.get("taxFormId") else APIHelper.SKIP
        tax_form_date = dateutil.parser.parse(dictionary.get('taxFormDate')).date() if dictionary.get('taxFormDate') else APIHelper.SKIP
        additional_information = dictionary.get("additionalInformation") if dictionary.get("additionalInformation") else APIHelper.SKIP
        tax_form_type = dictionary.get("taxFormType") if dictionary.get("taxFormType") else APIHelper.SKIP
        issuer = TaxParty8.from_dictionary(dictionary.get('issuer')) if 'issuer' in dictionary.keys() else APIHelper.SKIP
        recipient = TaxParty1.from_dictionary(dictionary.get('recipient')) if 'recipient' in dictionary.keys() else APIHelper.SKIP
        attributes = None
        if dictionary.get('attributes') is not None:
            attributes = [TaxFormAttribute.from_dictionary(x) for x in dictionary.get('attributes')]
        else:
            attributes = APIHelper.SKIP
        error = Error2.from_dictionary(dictionary.get('error')) if 'error' in dictionary.keys() else APIHelper.SKIP
        links = None
        if dictionary.get('links') is not None:
            links = [HATEOASLink.from_dictionary(x) for x in dictionary.get('links')]
        else:
            links = APIHelper.SKIP
        account_number = dictionary.get("accountNumber") if dictionary.get("accountNumber") else APIHelper.SKIP
        ltc_benefits = dictionary.get("ltcBenefits") if dictionary.get("ltcBenefits") else APIHelper.SKIP
        death_benefits = dictionary.get("deathBenefits") if dictionary.get("deathBenefits") else APIHelper.SKIP
        per_diem = dictionary.get("perDiem") if "perDiem" in dictionary.keys() else APIHelper.SKIP
        reimbursed_amount = dictionary.get("reimbursedAmount") if "reimbursedAmount" in dictionary.keys() else APIHelper.SKIP
        insured_id = dictionary.get("insuredId") if dictionary.get("insuredId") else APIHelper.SKIP
        insured_name_address = NameAndAddress1.from_dictionary(dictionary.get('insuredNameAddress')) if 'insuredNameAddress' in dictionary.keys() else APIHelper.SKIP
        qualified_contract = dictionary.get("qualifiedContract") if "qualifiedContract" in dictionary.keys() else APIHelper.SKIP
        chronically_ill = dictionary.get("chronicallyIll") if "chronicallyIll" in dictionary.keys() else APIHelper.SKIP
        terminally_ill = dictionary.get("terminallyIll") if "terminallyIll" in dictionary.keys() else APIHelper.SKIP
        date_certified = dateutil.parser.parse(dictionary.get('dateCertified')).date() if dictionary.get('dateCertified') else APIHelper.SKIP
        # Return an object of this model
        return cls(tax_year,
                   corrected,
                   account_id,
                   tax_form_id,
                   tax_form_date,
                   additional_information,
                   tax_form_type,
                   issuer,
                   recipient,
                   attributes,
                   error,
                   links,
                   account_number,
                   ltc_benefits,
                   death_benefits,
                   per_diem,
                   reimbursed_amount,
                   insured_id,
                   insured_name_address,
                   qualified_contract,
                   chronically_ill,
                   terminally_ill,
                   date_certified)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'tax_year={(self.tax_year if hasattr(self, "tax_year") else None)!r}, '
                f'corrected={(self.corrected if hasattr(self, "corrected") else None)!r}, '
                f'account_id={(self.account_id if hasattr(self, "account_id") else None)!r}, '
                f'tax_form_id={(self.tax_form_id if hasattr(self, "tax_form_id") else None)!r}, '
                f'tax_form_date={(self.tax_form_date if hasattr(self, "tax_form_date") else None)!r}, '
                f'additional_information={(self.additional_information if hasattr(self, "additional_information") else None)!r}, '
                f'tax_form_type={(self.tax_form_type if hasattr(self, "tax_form_type") else None)!r}, '
                f'issuer={(self.issuer if hasattr(self, "issuer") else None)!r}, '
                f'recipient={(self.recipient if hasattr(self, "recipient") else None)!r}, '
                f'attributes={(self.attributes if hasattr(self, "attributes") else None)!r}, '
                f'error={(self.error if hasattr(self, "error") else None)!r}, '
                f'links={(self.links if hasattr(self, "links") else None)!r}, '
                f'account_number={(self.account_number if hasattr(self, "account_number") else None)!r}, '
                f'ltc_benefits={(self.ltc_benefits if hasattr(self, "ltc_benefits") else None)!r}, '
                f'death_benefits={(self.death_benefits if hasattr(self, "death_benefits") else None)!r}, '
                f'per_diem={(self.per_diem if hasattr(self, "per_diem") else None)!r}, '
                f'reimbursed_amount={(self.reimbursed_amount if hasattr(self, "reimbursed_amount") else None)!r}, '
                f'insured_id={(self.insured_id if hasattr(self, "insured_id") else None)!r}, '
                f'insured_name_address={(self.insured_name_address if hasattr(self, "insured_name_address") else None)!r}, '
                f'qualified_contract={(self.qualified_contract if hasattr(self, "qualified_contract") else None)!r}, '
                f'chronically_ill={(self.chronically_ill if hasattr(self, "chronically_ill") else None)!r}, '
                f'terminally_ill={(self.terminally_ill if hasattr(self, "terminally_ill") else None)!r}, '
                f'date_certified={(self.date_certified if hasattr(self, "date_certified") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'tax_year={(self.tax_year if hasattr(self, "tax_year") else None)!s}, '
                f'corrected={(self.corrected if hasattr(self, "corrected") else None)!s}, '
                f'account_id={(self.account_id if hasattr(self, "account_id") else None)!s}, '
                f'tax_form_id={(self.tax_form_id if hasattr(self, "tax_form_id") else None)!s}, '
                f'tax_form_date={(self.tax_form_date if hasattr(self, "tax_form_date") else None)!s}, '
                f'additional_information={(self.additional_information if hasattr(self, "additional_information") else None)!s}, '
                f'tax_form_type={(self.tax_form_type if hasattr(self, "tax_form_type") else None)!s}, '
                f'issuer={(self.issuer if hasattr(self, "issuer") else None)!s}, '
                f'recipient={(self.recipient if hasattr(self, "recipient") else None)!s}, '
                f'attributes={(self.attributes if hasattr(self, "attributes") else None)!s}, '
                f'error={(self.error if hasattr(self, "error") else None)!s}, '
                f'links={(self.links if hasattr(self, "links") else None)!s}, '
                f'account_number={(self.account_number if hasattr(self, "account_number") else None)!s}, '
                f'ltc_benefits={(self.ltc_benefits if hasattr(self, "ltc_benefits") else None)!s}, '
                f'death_benefits={(self.death_benefits if hasattr(self, "death_benefits") else None)!s}, '
                f'per_diem={(self.per_diem if hasattr(self, "per_diem") else None)!s}, '
                f'reimbursed_amount={(self.reimbursed_amount if hasattr(self, "reimbursed_amount") else None)!s}, '
                f'insured_id={(self.insured_id if hasattr(self, "insured_id") else None)!s}, '
                f'insured_name_address={(self.insured_name_address if hasattr(self, "insured_name_address") else None)!s}, '
                f'qualified_contract={(self.qualified_contract if hasattr(self, "qualified_contract") else None)!s}, '
                f'chronically_ill={(self.chronically_ill if hasattr(self, "chronically_ill") else None)!s}, '
                f'terminally_ill={(self.terminally_ill if hasattr(self, "terminally_ill") else None)!s}, '
                f'date_certified={(self.date_certified if hasattr(self, "date_certified") else None)!s})')
