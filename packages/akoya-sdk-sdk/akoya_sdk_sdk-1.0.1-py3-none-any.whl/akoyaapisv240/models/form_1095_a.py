# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
import dateutil.parser

from akoyaapisv240.api_helper import APIHelper
from akoyaapisv240.models.error_2 import Error2
from akoyaapisv240.models.hateoas_link import HATEOASLink
from akoyaapisv240.models.health_insurance_coverage import HealthInsuranceCoverage
from akoyaapisv240.models.health_insurance_marketplace_covered_individual import HealthInsuranceMarketplaceCoveredIndividual
from akoyaapisv240.models.tax_form_attribute import TaxFormAttribute
from akoyaapisv240.models.tax_party_1 import TaxParty1
from akoyaapisv240.models.tax_party_8 import TaxParty8


class Form1095A(object):

    """Implementation of the 'Form 1095-A' model.

    Health Insurance Marketplace Statement, to Recipient (boxes 4-5, 12-15)

    Attributes:
        tax_year (int): Year for which taxes are being paid
        corrected (bool): True to indicate this is a corrected tax form
        account_id (str): Long-term persistent identity of the source account.
            Not the account number
        tax_form_id (str): Long-term persistent id for this tax form.
            Depending upon the data provider, this may be the same id as the
            enclosing tax statement id, or this may be a different id, or this
            id may be omitted.
        tax_form_date (date): Date of production or delivery of the tax form
        additional_information (str): Additional explanation text or content
            about this tax form
        tax_form_type (TypeFormType2Enum): Enumerated name of the tax form
            entity e.g. "TaxW2"
        issuer (TaxParty8): Issuer's name, address, phone, and TIN. Issuer
            data need only be transmitted on enclosing TaxStatement, if it is
            the same on all its included tax forms.
        recipient (TaxParty1): Recipient's name, address, phone, and TIN.
            Recipient data need only be transmitted on enclosing TaxStatement,
            if it is the same on all its included tax forms.
        attributes (List[TaxFormAttribute]): Additional attributes for this
            tax form when defined fields are not available. Some specific
            additional attributes already defined by providers: Fields
            required by [IRS
            FIRE](https://www.irs.gov/e-file-providers/filing-information-retur
            ns-electronically-fire): Name Control, Type of Identification
            Number (EIN, SSN, ITIN, ATIN). (ATIN is tax ID number for pending
            adoptions.) Tax form provider field for taxpayer notification:
            Recipient Email Address.
        error (Error2): Present if an error was encountered while retrieving
            this form
        links (List[HATEOASLink]): Links to retrieve this form as data or
            image, or to invoke other APIs
        marketplace_id (str): Box 1, Marketplace identifier
        marketplace_policy_number (str): Box 2, Marketplace-assigned policy
            number
        policy_issuer_name (str): Box 3, Policy issuer's name
        recipient_date_of_birth (date): Box 6, Recipient's date of birth
        spouse_name (str): Box 7, Recipient's spouse's name
        spouse_tin (str): Box 8, Recipient's spouse's SSN
        spouse_date_of_birth (date): Box 9, Recipient's spouse's date of birth
        policy_start_date (date): Box 10, Policy start date
        policy_termination_date (date): Box 11, Policy termination date
        covered_individuals
            (List[HealthInsuranceMarketplaceCoveredIndividual]): Boxes 16+,
            Covered Individuals
        coverages (List[HealthInsuranceCoverage]): Boxes 21-33, Coverage
            Information

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "tax_year": 'taxYear',
        "corrected": 'corrected',
        "account_id": 'accountId',
        "tax_form_id": 'taxFormId',
        "tax_form_date": 'taxFormDate',
        "additional_information": 'additionalInformation',
        "tax_form_type": 'taxFormType',
        "issuer": 'issuer',
        "recipient": 'recipient',
        "attributes": 'attributes',
        "error": 'error',
        "links": 'links',
        "marketplace_id": 'marketplaceId',
        "marketplace_policy_number": 'marketplacePolicyNumber',
        "policy_issuer_name": 'policyIssuerName',
        "recipient_date_of_birth": 'recipientDateOfBirth',
        "spouse_name": 'spouseName',
        "spouse_tin": 'spouseTin',
        "spouse_date_of_birth": 'spouseDateOfBirth',
        "policy_start_date": 'policyStartDate',
        "policy_termination_date": 'policyTerminationDate',
        "covered_individuals": 'coveredIndividuals',
        "coverages": 'coverages'
    }

    _optionals = [
        'tax_year',
        'corrected',
        'account_id',
        'tax_form_id',
        'tax_form_date',
        'additional_information',
        'tax_form_type',
        'issuer',
        'recipient',
        'attributes',
        'error',
        'links',
        'marketplace_id',
        'marketplace_policy_number',
        'policy_issuer_name',
        'recipient_date_of_birth',
        'spouse_name',
        'spouse_tin',
        'spouse_date_of_birth',
        'policy_start_date',
        'policy_termination_date',
        'covered_individuals',
        'coverages',
    ]

    def __init__(self,
                 tax_year=APIHelper.SKIP,
                 corrected=APIHelper.SKIP,
                 account_id=APIHelper.SKIP,
                 tax_form_id=APIHelper.SKIP,
                 tax_form_date=APIHelper.SKIP,
                 additional_information=APIHelper.SKIP,
                 tax_form_type=APIHelper.SKIP,
                 issuer=APIHelper.SKIP,
                 recipient=APIHelper.SKIP,
                 attributes=APIHelper.SKIP,
                 error=APIHelper.SKIP,
                 links=APIHelper.SKIP,
                 marketplace_id=APIHelper.SKIP,
                 marketplace_policy_number=APIHelper.SKIP,
                 policy_issuer_name=APIHelper.SKIP,
                 recipient_date_of_birth=APIHelper.SKIP,
                 spouse_name=APIHelper.SKIP,
                 spouse_tin=APIHelper.SKIP,
                 spouse_date_of_birth=APIHelper.SKIP,
                 policy_start_date=APIHelper.SKIP,
                 policy_termination_date=APIHelper.SKIP,
                 covered_individuals=APIHelper.SKIP,
                 coverages=APIHelper.SKIP):
        """Constructor for the Form1095A class"""

        # Initialize members of the class
        if tax_year is not APIHelper.SKIP:
            self.tax_year = tax_year 
        if corrected is not APIHelper.SKIP:
            self.corrected = corrected 
        if account_id is not APIHelper.SKIP:
            self.account_id = account_id 
        if tax_form_id is not APIHelper.SKIP:
            self.tax_form_id = tax_form_id 
        if tax_form_date is not APIHelper.SKIP:
            self.tax_form_date = tax_form_date 
        if additional_information is not APIHelper.SKIP:
            self.additional_information = additional_information 
        if tax_form_type is not APIHelper.SKIP:
            self.tax_form_type = tax_form_type 
        if issuer is not APIHelper.SKIP:
            self.issuer = issuer 
        if recipient is not APIHelper.SKIP:
            self.recipient = recipient 
        if attributes is not APIHelper.SKIP:
            self.attributes = attributes 
        if error is not APIHelper.SKIP:
            self.error = error 
        if links is not APIHelper.SKIP:
            self.links = links 
        if marketplace_id is not APIHelper.SKIP:
            self.marketplace_id = marketplace_id 
        if marketplace_policy_number is not APIHelper.SKIP:
            self.marketplace_policy_number = marketplace_policy_number 
        if policy_issuer_name is not APIHelper.SKIP:
            self.policy_issuer_name = policy_issuer_name 
        if recipient_date_of_birth is not APIHelper.SKIP:
            self.recipient_date_of_birth = recipient_date_of_birth 
        if spouse_name is not APIHelper.SKIP:
            self.spouse_name = spouse_name 
        if spouse_tin is not APIHelper.SKIP:
            self.spouse_tin = spouse_tin 
        if spouse_date_of_birth is not APIHelper.SKIP:
            self.spouse_date_of_birth = spouse_date_of_birth 
        if policy_start_date is not APIHelper.SKIP:
            self.policy_start_date = policy_start_date 
        if policy_termination_date is not APIHelper.SKIP:
            self.policy_termination_date = policy_termination_date 
        if covered_individuals is not APIHelper.SKIP:
            self.covered_individuals = covered_individuals 
        if coverages is not APIHelper.SKIP:
            self.coverages = coverages 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        tax_year = dictionary.get("taxYear") if dictionary.get("taxYear") else APIHelper.SKIP
        corrected = dictionary.get("corrected") if "corrected" in dictionary.keys() else APIHelper.SKIP
        account_id = dictionary.get("accountId") if dictionary.get("accountId") else APIHelper.SKIP
        tax_form_id = dictionary.get("taxFormId") if dictionary.get("taxFormId") else APIHelper.SKIP
        tax_form_date = dateutil.parser.parse(dictionary.get('taxFormDate')).date() if dictionary.get('taxFormDate') else APIHelper.SKIP
        additional_information = dictionary.get("additionalInformation") if dictionary.get("additionalInformation") else APIHelper.SKIP
        tax_form_type = dictionary.get("taxFormType") if dictionary.get("taxFormType") else APIHelper.SKIP
        issuer = TaxParty8.from_dictionary(dictionary.get('issuer')) if 'issuer' in dictionary.keys() else APIHelper.SKIP
        recipient = TaxParty1.from_dictionary(dictionary.get('recipient')) if 'recipient' in dictionary.keys() else APIHelper.SKIP
        attributes = None
        if dictionary.get('attributes') is not None:
            attributes = [TaxFormAttribute.from_dictionary(x) for x in dictionary.get('attributes')]
        else:
            attributes = APIHelper.SKIP
        error = Error2.from_dictionary(dictionary.get('error')) if 'error' in dictionary.keys() else APIHelper.SKIP
        links = None
        if dictionary.get('links') is not None:
            links = [HATEOASLink.from_dictionary(x) for x in dictionary.get('links')]
        else:
            links = APIHelper.SKIP
        marketplace_id = dictionary.get("marketplaceId") if dictionary.get("marketplaceId") else APIHelper.SKIP
        marketplace_policy_number = dictionary.get("marketplacePolicyNumber") if dictionary.get("marketplacePolicyNumber") else APIHelper.SKIP
        policy_issuer_name = dictionary.get("policyIssuerName") if dictionary.get("policyIssuerName") else APIHelper.SKIP
        recipient_date_of_birth = dateutil.parser.parse(dictionary.get('recipientDateOfBirth')).date() if dictionary.get('recipientDateOfBirth') else APIHelper.SKIP
        spouse_name = dictionary.get("spouseName") if dictionary.get("spouseName") else APIHelper.SKIP
        spouse_tin = dictionary.get("spouseTin") if dictionary.get("spouseTin") else APIHelper.SKIP
        spouse_date_of_birth = dateutil.parser.parse(dictionary.get('spouseDateOfBirth')).date() if dictionary.get('spouseDateOfBirth') else APIHelper.SKIP
        policy_start_date = dateutil.parser.parse(dictionary.get('policyStartDate')).date() if dictionary.get('policyStartDate') else APIHelper.SKIP
        policy_termination_date = dateutil.parser.parse(dictionary.get('policyTerminationDate')).date() if dictionary.get('policyTerminationDate') else APIHelper.SKIP
        covered_individuals = None
        if dictionary.get('coveredIndividuals') is not None:
            covered_individuals = [HealthInsuranceMarketplaceCoveredIndividual.from_dictionary(x) for x in dictionary.get('coveredIndividuals')]
        else:
            covered_individuals = APIHelper.SKIP
        coverages = None
        if dictionary.get('coverages') is not None:
            coverages = [HealthInsuranceCoverage.from_dictionary(x) for x in dictionary.get('coverages')]
        else:
            coverages = APIHelper.SKIP
        # Return an object of this model
        return cls(tax_year,
                   corrected,
                   account_id,
                   tax_form_id,
                   tax_form_date,
                   additional_information,
                   tax_form_type,
                   issuer,
                   recipient,
                   attributes,
                   error,
                   links,
                   marketplace_id,
                   marketplace_policy_number,
                   policy_issuer_name,
                   recipient_date_of_birth,
                   spouse_name,
                   spouse_tin,
                   spouse_date_of_birth,
                   policy_start_date,
                   policy_termination_date,
                   covered_individuals,
                   coverages)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'tax_year={(self.tax_year if hasattr(self, "tax_year") else None)!r}, '
                f'corrected={(self.corrected if hasattr(self, "corrected") else None)!r}, '
                f'account_id={(self.account_id if hasattr(self, "account_id") else None)!r}, '
                f'tax_form_id={(self.tax_form_id if hasattr(self, "tax_form_id") else None)!r}, '
                f'tax_form_date={(self.tax_form_date if hasattr(self, "tax_form_date") else None)!r}, '
                f'additional_information={(self.additional_information if hasattr(self, "additional_information") else None)!r}, '
                f'tax_form_type={(self.tax_form_type if hasattr(self, "tax_form_type") else None)!r}, '
                f'issuer={(self.issuer if hasattr(self, "issuer") else None)!r}, '
                f'recipient={(self.recipient if hasattr(self, "recipient") else None)!r}, '
                f'attributes={(self.attributes if hasattr(self, "attributes") else None)!r}, '
                f'error={(self.error if hasattr(self, "error") else None)!r}, '
                f'links={(self.links if hasattr(self, "links") else None)!r}, '
                f'marketplace_id={(self.marketplace_id if hasattr(self, "marketplace_id") else None)!r}, '
                f'marketplace_policy_number={(self.marketplace_policy_number if hasattr(self, "marketplace_policy_number") else None)!r}, '
                f'policy_issuer_name={(self.policy_issuer_name if hasattr(self, "policy_issuer_name") else None)!r}, '
                f'recipient_date_of_birth={(self.recipient_date_of_birth if hasattr(self, "recipient_date_of_birth") else None)!r}, '
                f'spouse_name={(self.spouse_name if hasattr(self, "spouse_name") else None)!r}, '
                f'spouse_tin={(self.spouse_tin if hasattr(self, "spouse_tin") else None)!r}, '
                f'spouse_date_of_birth={(self.spouse_date_of_birth if hasattr(self, "spouse_date_of_birth") else None)!r}, '
                f'policy_start_date={(self.policy_start_date if hasattr(self, "policy_start_date") else None)!r}, '
                f'policy_termination_date={(self.policy_termination_date if hasattr(self, "policy_termination_date") else None)!r}, '
                f'covered_individuals={(self.covered_individuals if hasattr(self, "covered_individuals") else None)!r}, '
                f'coverages={(self.coverages if hasattr(self, "coverages") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'tax_year={(self.tax_year if hasattr(self, "tax_year") else None)!s}, '
                f'corrected={(self.corrected if hasattr(self, "corrected") else None)!s}, '
                f'account_id={(self.account_id if hasattr(self, "account_id") else None)!s}, '
                f'tax_form_id={(self.tax_form_id if hasattr(self, "tax_form_id") else None)!s}, '
                f'tax_form_date={(self.tax_form_date if hasattr(self, "tax_form_date") else None)!s}, '
                f'additional_information={(self.additional_information if hasattr(self, "additional_information") else None)!s}, '
                f'tax_form_type={(self.tax_form_type if hasattr(self, "tax_form_type") else None)!s}, '
                f'issuer={(self.issuer if hasattr(self, "issuer") else None)!s}, '
                f'recipient={(self.recipient if hasattr(self, "recipient") else None)!s}, '
                f'attributes={(self.attributes if hasattr(self, "attributes") else None)!s}, '
                f'error={(self.error if hasattr(self, "error") else None)!s}, '
                f'links={(self.links if hasattr(self, "links") else None)!s}, '
                f'marketplace_id={(self.marketplace_id if hasattr(self, "marketplace_id") else None)!s}, '
                f'marketplace_policy_number={(self.marketplace_policy_number if hasattr(self, "marketplace_policy_number") else None)!s}, '
                f'policy_issuer_name={(self.policy_issuer_name if hasattr(self, "policy_issuer_name") else None)!s}, '
                f'recipient_date_of_birth={(self.recipient_date_of_birth if hasattr(self, "recipient_date_of_birth") else None)!s}, '
                f'spouse_name={(self.spouse_name if hasattr(self, "spouse_name") else None)!s}, '
                f'spouse_tin={(self.spouse_tin if hasattr(self, "spouse_tin") else None)!s}, '
                f'spouse_date_of_birth={(self.spouse_date_of_birth if hasattr(self, "spouse_date_of_birth") else None)!s}, '
                f'policy_start_date={(self.policy_start_date if hasattr(self, "policy_start_date") else None)!s}, '
                f'policy_termination_date={(self.policy_termination_date if hasattr(self, "policy_termination_date") else None)!s}, '
                f'covered_individuals={(self.covered_individuals if hasattr(self, "covered_individuals") else None)!s}, '
                f'coverages={(self.coverages if hasattr(self, "coverages") else None)!s})')
