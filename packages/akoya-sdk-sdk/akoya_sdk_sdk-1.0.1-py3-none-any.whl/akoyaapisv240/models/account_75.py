# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoyaapisv240.api_helper import APIHelper
from akoyaapisv240.models.annuity_balances import AnnuityBalances


class Account75(object):

    """Implementation of the 'Account75' model.

    Attributes:
        annuity_account (AnnuityBalances): Data elements included with
            balances specific to annuity accounts

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "annuity_account": 'annuityAccount'
    }

    _optionals = [
        'annuity_account',
    ]

    def __init__(self,
                 annuity_account=APIHelper.SKIP):
        """Constructor for the Account75 class"""

        # Initialize members of the class
        if annuity_account is not APIHelper.SKIP:
            self.annuity_account = annuity_account 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        annuity_account = AnnuityBalances.from_dictionary(dictionary.get('annuityAccount')) if 'annuityAccount' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(annuity_account)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'annuity_account={(self.annuity_account if hasattr(self, "annuity_account") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'annuity_account={(self.annuity_account if hasattr(self, "annuity_account") else None)!s})')
