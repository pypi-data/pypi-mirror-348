# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoyaapisv240.api_helper import APIHelper
from akoyaapisv240.models.links import Links


class AnArrayOfStatements(object):

    """Implementation of the 'An array of statements' model.

    A paginated array of account statements

    Attributes:
        links (Links): The model property of type Links.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "links": 'links'
    }

    _optionals = [
        'links',
    ]

    def __init__(self,
                 links=APIHelper.SKIP):
        """Constructor for the AnArrayOfStatements class"""

        # Initialize members of the class
        if links is not APIHelper.SKIP:
            self.links = links 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        links = Links.from_dictionary(dictionary.get('links')) if 'links' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(links)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'links={(self.links if hasattr(self, "links") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'links={(self.links if hasattr(self, "links") else None)!s})')
