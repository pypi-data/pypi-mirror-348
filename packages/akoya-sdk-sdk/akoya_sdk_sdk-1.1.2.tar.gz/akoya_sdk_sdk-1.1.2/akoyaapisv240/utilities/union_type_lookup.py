# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from akoyaapisv240.models.account import Account
from akoyaapisv240.models.account_1 import Account1
from akoyaapisv240.models.account_2 import Account2
from akoyaapisv240.models.account_3 import Account3
from akoyaapisv240.models.account_4 import Account4
from akoyaapisv240.models.account_5 import Account5
from akoyaapisv240.models.account_7 import Account7
from akoyaapisv240.models.account_71 import Account71
from akoyaapisv240.models.account_72 import Account72
from akoyaapisv240.models.account_73 import Account73
from akoyaapisv240.models.account_74 import Account74
from akoyaapisv240.models.account_75 import Account75
from akoyaapisv240.models.account_9 import Account9
from akoyaapisv240.models.transaction_1 import Transaction1
from akoyaapisv240.models.transaction_11 import Transaction11
from akoyaapisv240.models.transaction_12 import Transaction12
from akoyaapisv240.models.transaction_13 import Transaction13
from akoyaapisv240.models.transaction_14 import Transaction14
from apimatic_core.types.union_types.any_of import AnyOf
from apimatic_core.types.union_types.leaf_type import LeafType
from apimatic_core.types.union_types.union_type_context import UnionTypeContext as Context


class UnionTypeLookUp:

    """The `UnionTypeLookUp` class serves as a utility class for 
    storing and managing type combinator templates.It acts as a container for the templates 
    used in handling various data types within the application.

    """
    _templates = {
        'TransactionsEntityTransactions': AnyOf(
            [
                LeafType(Transaction1),
                LeafType(Transaction11),
                LeafType(Transaction12),
                LeafType(Transaction13),
                LeafType(Transaction14)
            ],
            Context.create(
               is_array=True,
               is_optional=True
            )
        ),
        'AkoyaAccountInfoProductAccounts': AnyOf(
            [
                LeafType(Account),
                LeafType(Account1),
                LeafType(Account2),
                LeafType(Account3),
                LeafType(Account4),
                LeafType(Account5)
            ],
            Context.create(
               is_array=True,
               is_optional=True
            )
        ),
        'BalancesAccounts': AnyOf(
            [
                LeafType(Account7),
                LeafType(Account71),
                LeafType(Account72),
                LeafType(Account73),
                LeafType(Account74),
                LeafType(Account75)
            ],
            Context.create(
               is_array=True,
               is_optional=True
            )
        ),
        'InvestmentsAccounts': AnyOf(
            [
                LeafType(Account9),
                LeafType(Account7),
                LeafType(Account71),
                LeafType(Account72),
                LeafType(Account74),
                LeafType(Account75)
            ],
            Context.create(
               is_array=True,
               is_optional=True
            )
        )
    }

    @staticmethod
    def get(name):
        return UnionTypeLookUp._templates[name]

