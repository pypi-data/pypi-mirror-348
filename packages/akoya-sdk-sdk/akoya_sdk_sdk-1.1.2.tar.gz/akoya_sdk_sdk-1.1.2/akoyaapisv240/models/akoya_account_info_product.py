# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoyaapisv240.api_helper import APIHelper


class AkoyaAccountInfoProduct(object):

    """Implementation of the 'Akoya Account Info product' model.

    Attributes:
        accounts (List[Account | Account1 | Account2 | Account3 | Account4 |
            Account5] | None): An array of accounts with entity types
            dependent on the account type (deposit, investment, loan, line of
            credit, annuity or insurance)

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "accounts": 'accounts'
    }

    _optionals = [
        'accounts',
    ]

    def __init__(self,
                 accounts=APIHelper.SKIP):
        """Constructor for the AkoyaAccountInfoProduct class"""

        # Initialize members of the class
        if accounts is not APIHelper.SKIP:
            self.accounts = accounts 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        from akoyaapisv240.utilities.union_type_lookup import UnionTypeLookUp

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        accounts = APIHelper.deserialize_union_type(UnionTypeLookUp.get('AkoyaAccountInfoProductAccounts'), dictionary.get('accounts'), False) if dictionary.get('accounts') is not None else APIHelper.SKIP
        # Return an object of this model
        return cls(accounts)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'accounts={(self.accounts if hasattr(self, "accounts") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'accounts={(self.accounts if hasattr(self, "accounts") else None)!s})')
