# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoyaapisv240.api_helper import APIHelper
from akoyaapisv240.models.fi_attribute_entity import FiAttributeEntity
from akoyaapisv240.models.hateoas_link import HATEOASLink
from akoyaapisv240.models.line_item import LineItem


class InvestmentTransaction(object):

    """Implementation of the 'investmentTransaction' model.

    Investment Transactions

    Attributes:
        account_id (str): Corresponds to AccountId in Account
        amount (float): The amount of money in the account currency.  If
            balanceType is `ASSET`:    1. If `debitCreditMemo` = `DEBIT`, sign
            is "+" or not present   2. If `CREDIT`, sign is "-"  If
            balanceType is `LIABILITY`:    1. If `debitCreditMemo` = `DEBIT`,
            sign is "-"   2. If `CREDIT`, sign is "+" or not present
        category (str): Transaction category, preferably MCC or SIC.
        debit_credit_memo (DebitCreditMemoEnum): Akoya will ensure that this
            is correctly populated with one of DEBIT or CREDIT and matches the
            sign of the status field.
        description (str): The description of the transaction
        image_ids (List[str]): Array of image identifiers (unique to
            transaction) used to retrieve images of check or transaction
            receipt.
        fi_attributes (List[FiAttributeEntity]): Array of FI-specific
            attributes
        foreign_amount (float): The amount of money in the foreign currency
        foreign_currency (str): The ISO 4217 code of the foreign currency
        line_item (List[LineItem]): Breakdown of the transaction details
        links (List[HATEOASLink]): Links (unique to this Transaction) used to
            retrieve images of checks or transaction receipts, or invoke other
            APIs
        memo (str): Secondary transaction description
        posted_timestamp (datetime): The date and time that the transaction
            was posted to the account. If not provided then
            TransactionTimestamp can be used as PostedTimeStamp.
        reference (str): A tracking reference identifier
        reference_transaction_id (str): Akoya ensures that this field is
            populated for all transactions which are reversals, otherwise it
            is null. Either way it is always present.  For reverse postings,
            the identity of the transaction being reversed. For the correction
            transaction, the identity of the reversing post. For credit card
            posting transactions, the identity of the authorization
            transaction.
        status (Status1Enum): AUTHORIZATION, MEMO, PENDING, or POSTED
        sub_category (str): Transaction category detail
        transaction_id (str): Long term persistent identity of the transaction
            (unique to account).  Transaction IDs should:     1. be the same
            for pending and posted    2. be different for reversed
            transactions    3. `referenceTransactionId` should be present for
            reversed transactions'
        transaction_timestamp (datetime): The date and time that the
            transaction was added to the server backend systems.  Akoya
            ensures that this field is populated for all transactions to which
            it applies, otherwise it is null. Either way it is always present.
        accrued_interest (float): Accrued Interest.
        commission (float): Transaction commission.
        confirmation_number (str): Confirmation number of the transaction.
        face_value (float): Cash value for bonds.
        fees (float): Fees applied to the trade.
        fractional_cash (float): Cash for fractional units (used for stock
            splits).
        gain (float): For sales.
        income_type (IncomeTypeEnum): Type of investment income. CGLONG
            (capital gains-long term), CGSHORT (capital gains-short term),
            MISC.
        inv_401_k_source (Inv401kSource1Enum): Source of money.
        load (float): Load on the transaction.
        loan_id (str): For 401k accounts only. This indicates the transaction
            was due to a loan or a loan repayment.
        loan_interest (float): How much loan pre-payment is interest.
        loan_principal (float): How much loan pre-payment is principal.
        markup (float): Portion of unit price that is attributed to the dealer
            markup.
        new_units (float): Number of shares after split.
        old_units (float): Number of shares before split.
        payroll_date (str): The date for the 401k transaction was obtained in
            payroll.
        penalty (float): Indicates amount withheld due to a penalty.
        position_type (PositionTypeEnum): The model property of type
            PositionTypeEnum.
        price (float): Unit purchase price.
        prior_year_contrib (bool): Indicates this buy was made using prior
            years contribution. TRUE or FALSE.
        running_balance (float): Running balance of the position.
        security_id (str): Unique identifier of security.
        security_id_type (SecurityIdType3Enum): Security identifier type.
        security_type (SecurityTypeEnum): The model property of type
            SecurityTypeEnum.
        shares (float): Number of shares (with decimals). Negative numbers
            indicate securities are being removed from the account.
        split_ratio_denominator (float): Split ratio denominator.
        split_ratio_numerator (float): Split ratio numerator.
        state_withholding (float): State tax withholding.
        sub_account_fund (SubAccountFundEnum): From which account money came
            in.
        sub_account_sec (SubAccountSecEnum): Sub-account security type.
        symbol (str): Ticker symbol.
        taxes (float): Taxes on the trade.
        tax_exempt (bool): Tax-exempt transaction TRUE or FALSE.
        transaction_reason (TransactionReasonEnum): Reason for this
            transaction; CALL (the debt was called), SELL (the debt was sold),
            MATURITY (the debt reached maturity)
        transaction_type (TransactionType2Enum): InvestmentTransaction Type
        transfer_action (TransferActionEnum): Transfer direction.
        unit_price (float): Price per commonly-quoted unit. Does not include
            markup/markdown, unitprice. Share price for stocks, mutual funds,
            and others. Percentage of par for bonds. Per share (not contract)
            for options.
        units (float): For security-based actions other than stock splits,
            quantity. Shares for stocks, mutual funds, and others. Face value
            for bonds. Contracts for options.
        unit_type (UnitType1Enum): The model property of type UnitType1Enum.
        withholding (float): Federal tax withholding.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_id": 'accountId',
        "amount": 'amount',
        "category": 'category',
        "debit_credit_memo": 'debitCreditMemo',
        "description": 'description',
        "image_ids": 'imageIds',
        "fi_attributes": 'fiAttributes',
        "foreign_amount": 'foreignAmount',
        "foreign_currency": 'foreignCurrency',
        "line_item": 'lineItem',
        "links": 'links',
        "memo": 'memo',
        "posted_timestamp": 'postedTimestamp',
        "reference": 'reference',
        "reference_transaction_id": 'referenceTransactionId',
        "status": 'status',
        "sub_category": 'subCategory',
        "transaction_id": 'transactionId',
        "transaction_timestamp": 'transactionTimestamp',
        "accrued_interest": 'accruedInterest',
        "commission": 'commission',
        "confirmation_number": 'confirmationNumber',
        "face_value": 'faceValue',
        "fees": 'fees',
        "fractional_cash": 'fractionalCash',
        "gain": 'gain',
        "income_type": 'incomeType',
        "inv_401_k_source": 'inv401kSource',
        "load": 'load',
        "loan_id": 'loanId',
        "loan_interest": 'loanInterest',
        "loan_principal": 'loanPrincipal',
        "markup": 'markup',
        "new_units": 'newUnits',
        "old_units": 'oldUnits',
        "payroll_date": 'payrollDate',
        "penalty": 'penalty',
        "position_type": 'positionType',
        "price": 'price',
        "prior_year_contrib": 'priorYearContrib',
        "running_balance": 'runningBalance',
        "security_id": 'securityId',
        "security_id_type": 'securityIdType',
        "security_type": 'securityType',
        "shares": 'shares',
        "split_ratio_denominator": 'splitRatioDenominator',
        "split_ratio_numerator": 'splitRatioNumerator',
        "state_withholding": 'stateWithholding',
        "sub_account_fund": 'subAccountFund',
        "sub_account_sec": 'subAccountSec',
        "symbol": 'symbol',
        "taxes": 'taxes',
        "tax_exempt": 'taxExempt',
        "transaction_reason": 'transactionReason',
        "transaction_type": 'transactionType',
        "transfer_action": 'transferAction',
        "unit_price": 'unitPrice',
        "units": 'units',
        "unit_type": 'unitType',
        "withholding": 'withholding'
    }

    _optionals = [
        'account_id',
        'amount',
        'category',
        'debit_credit_memo',
        'description',
        'image_ids',
        'fi_attributes',
        'foreign_amount',
        'foreign_currency',
        'line_item',
        'links',
        'memo',
        'posted_timestamp',
        'reference',
        'reference_transaction_id',
        'status',
        'sub_category',
        'transaction_id',
        'transaction_timestamp',
        'accrued_interest',
        'commission',
        'confirmation_number',
        'face_value',
        'fees',
        'fractional_cash',
        'gain',
        'income_type',
        'inv_401_k_source',
        'load',
        'loan_id',
        'loan_interest',
        'loan_principal',
        'markup',
        'new_units',
        'old_units',
        'payroll_date',
        'penalty',
        'position_type',
        'price',
        'prior_year_contrib',
        'running_balance',
        'security_id',
        'security_id_type',
        'security_type',
        'shares',
        'split_ratio_denominator',
        'split_ratio_numerator',
        'state_withholding',
        'sub_account_fund',
        'sub_account_sec',
        'symbol',
        'taxes',
        'tax_exempt',
        'transaction_reason',
        'transaction_type',
        'transfer_action',
        'unit_price',
        'units',
        'unit_type',
        'withholding',
    ]

    def __init__(self,
                 account_id=APIHelper.SKIP,
                 amount=APIHelper.SKIP,
                 category=APIHelper.SKIP,
                 debit_credit_memo=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 image_ids=APIHelper.SKIP,
                 fi_attributes=APIHelper.SKIP,
                 foreign_amount=APIHelper.SKIP,
                 foreign_currency=APIHelper.SKIP,
                 line_item=APIHelper.SKIP,
                 links=APIHelper.SKIP,
                 memo=APIHelper.SKIP,
                 posted_timestamp=APIHelper.SKIP,
                 reference=APIHelper.SKIP,
                 reference_transaction_id=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 sub_category=APIHelper.SKIP,
                 transaction_id=APIHelper.SKIP,
                 transaction_timestamp=APIHelper.SKIP,
                 accrued_interest=APIHelper.SKIP,
                 commission=APIHelper.SKIP,
                 confirmation_number=APIHelper.SKIP,
                 face_value=APIHelper.SKIP,
                 fees=APIHelper.SKIP,
                 fractional_cash=APIHelper.SKIP,
                 gain=APIHelper.SKIP,
                 income_type=APIHelper.SKIP,
                 inv_401_k_source=APIHelper.SKIP,
                 load=APIHelper.SKIP,
                 loan_id=APIHelper.SKIP,
                 loan_interest=APIHelper.SKIP,
                 loan_principal=APIHelper.SKIP,
                 markup=APIHelper.SKIP,
                 new_units=APIHelper.SKIP,
                 old_units=APIHelper.SKIP,
                 payroll_date=APIHelper.SKIP,
                 penalty=APIHelper.SKIP,
                 position_type=APIHelper.SKIP,
                 price=APIHelper.SKIP,
                 prior_year_contrib=APIHelper.SKIP,
                 running_balance=APIHelper.SKIP,
                 security_id=APIHelper.SKIP,
                 security_id_type=APIHelper.SKIP,
                 security_type=APIHelper.SKIP,
                 shares=APIHelper.SKIP,
                 split_ratio_denominator=APIHelper.SKIP,
                 split_ratio_numerator=APIHelper.SKIP,
                 state_withholding=APIHelper.SKIP,
                 sub_account_fund=APIHelper.SKIP,
                 sub_account_sec=APIHelper.SKIP,
                 symbol=APIHelper.SKIP,
                 taxes=APIHelper.SKIP,
                 tax_exempt=APIHelper.SKIP,
                 transaction_reason=APIHelper.SKIP,
                 transaction_type=APIHelper.SKIP,
                 transfer_action=APIHelper.SKIP,
                 unit_price=APIHelper.SKIP,
                 units=APIHelper.SKIP,
                 unit_type=APIHelper.SKIP,
                 withholding=APIHelper.SKIP):
        """Constructor for the InvestmentTransaction class"""

        # Initialize members of the class
        if account_id is not APIHelper.SKIP:
            self.account_id = account_id 
        if amount is not APIHelper.SKIP:
            self.amount = amount 
        if category is not APIHelper.SKIP:
            self.category = category 
        if debit_credit_memo is not APIHelper.SKIP:
            self.debit_credit_memo = debit_credit_memo 
        if description is not APIHelper.SKIP:
            self.description = description 
        if image_ids is not APIHelper.SKIP:
            self.image_ids = image_ids 
        if fi_attributes is not APIHelper.SKIP:
            self.fi_attributes = fi_attributes 
        if foreign_amount is not APIHelper.SKIP:
            self.foreign_amount = foreign_amount 
        if foreign_currency is not APIHelper.SKIP:
            self.foreign_currency = foreign_currency 
        if line_item is not APIHelper.SKIP:
            self.line_item = line_item 
        if links is not APIHelper.SKIP:
            self.links = links 
        if memo is not APIHelper.SKIP:
            self.memo = memo 
        if posted_timestamp is not APIHelper.SKIP:
            self.posted_timestamp = APIHelper.apply_datetime_converter(posted_timestamp, APIHelper.RFC3339DateTime) if posted_timestamp else None 
        if reference is not APIHelper.SKIP:
            self.reference = reference 
        if reference_transaction_id is not APIHelper.SKIP:
            self.reference_transaction_id = reference_transaction_id 
        if status is not APIHelper.SKIP:
            self.status = status 
        if sub_category is not APIHelper.SKIP:
            self.sub_category = sub_category 
        if transaction_id is not APIHelper.SKIP:
            self.transaction_id = transaction_id 
        if transaction_timestamp is not APIHelper.SKIP:
            self.transaction_timestamp = APIHelper.apply_datetime_converter(transaction_timestamp, APIHelper.RFC3339DateTime) if transaction_timestamp else None 
        if accrued_interest is not APIHelper.SKIP:
            self.accrued_interest = accrued_interest 
        if commission is not APIHelper.SKIP:
            self.commission = commission 
        if confirmation_number is not APIHelper.SKIP:
            self.confirmation_number = confirmation_number 
        if face_value is not APIHelper.SKIP:
            self.face_value = face_value 
        if fees is not APIHelper.SKIP:
            self.fees = fees 
        if fractional_cash is not APIHelper.SKIP:
            self.fractional_cash = fractional_cash 
        if gain is not APIHelper.SKIP:
            self.gain = gain 
        if income_type is not APIHelper.SKIP:
            self.income_type = income_type 
        if inv_401_k_source is not APIHelper.SKIP:
            self.inv_401_k_source = inv_401_k_source 
        if load is not APIHelper.SKIP:
            self.load = load 
        if loan_id is not APIHelper.SKIP:
            self.loan_id = loan_id 
        if loan_interest is not APIHelper.SKIP:
            self.loan_interest = loan_interest 
        if loan_principal is not APIHelper.SKIP:
            self.loan_principal = loan_principal 
        if markup is not APIHelper.SKIP:
            self.markup = markup 
        if new_units is not APIHelper.SKIP:
            self.new_units = new_units 
        if old_units is not APIHelper.SKIP:
            self.old_units = old_units 
        if payroll_date is not APIHelper.SKIP:
            self.payroll_date = payroll_date 
        if penalty is not APIHelper.SKIP:
            self.penalty = penalty 
        if position_type is not APIHelper.SKIP:
            self.position_type = position_type 
        if price is not APIHelper.SKIP:
            self.price = price 
        if prior_year_contrib is not APIHelper.SKIP:
            self.prior_year_contrib = prior_year_contrib 
        if running_balance is not APIHelper.SKIP:
            self.running_balance = running_balance 
        if security_id is not APIHelper.SKIP:
            self.security_id = security_id 
        if security_id_type is not APIHelper.SKIP:
            self.security_id_type = security_id_type 
        if security_type is not APIHelper.SKIP:
            self.security_type = security_type 
        if shares is not APIHelper.SKIP:
            self.shares = shares 
        if split_ratio_denominator is not APIHelper.SKIP:
            self.split_ratio_denominator = split_ratio_denominator 
        if split_ratio_numerator is not APIHelper.SKIP:
            self.split_ratio_numerator = split_ratio_numerator 
        if state_withholding is not APIHelper.SKIP:
            self.state_withholding = state_withholding 
        if sub_account_fund is not APIHelper.SKIP:
            self.sub_account_fund = sub_account_fund 
        if sub_account_sec is not APIHelper.SKIP:
            self.sub_account_sec = sub_account_sec 
        if symbol is not APIHelper.SKIP:
            self.symbol = symbol 
        if taxes is not APIHelper.SKIP:
            self.taxes = taxes 
        if tax_exempt is not APIHelper.SKIP:
            self.tax_exempt = tax_exempt 
        if transaction_reason is not APIHelper.SKIP:
            self.transaction_reason = transaction_reason 
        if transaction_type is not APIHelper.SKIP:
            self.transaction_type = transaction_type 
        if transfer_action is not APIHelper.SKIP:
            self.transfer_action = transfer_action 
        if unit_price is not APIHelper.SKIP:
            self.unit_price = unit_price 
        if units is not APIHelper.SKIP:
            self.units = units 
        if unit_type is not APIHelper.SKIP:
            self.unit_type = unit_type 
        if withholding is not APIHelper.SKIP:
            self.withholding = withholding 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_id = dictionary.get("accountId") if dictionary.get("accountId") else APIHelper.SKIP
        amount = dictionary.get("amount") if dictionary.get("amount") else APIHelper.SKIP
        category = dictionary.get("category") if dictionary.get("category") else APIHelper.SKIP
        debit_credit_memo = dictionary.get("debitCreditMemo") if dictionary.get("debitCreditMemo") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        image_ids = dictionary.get("imageIds") if dictionary.get("imageIds") else APIHelper.SKIP
        fi_attributes = None
        if dictionary.get('fiAttributes') is not None:
            fi_attributes = [FiAttributeEntity.from_dictionary(x) for x in dictionary.get('fiAttributes')]
        else:
            fi_attributes = APIHelper.SKIP
        foreign_amount = dictionary.get("foreignAmount") if dictionary.get("foreignAmount") else APIHelper.SKIP
        foreign_currency = dictionary.get("foreignCurrency") if dictionary.get("foreignCurrency") else APIHelper.SKIP
        line_item = None
        if dictionary.get('lineItem') is not None:
            line_item = [LineItem.from_dictionary(x) for x in dictionary.get('lineItem')]
        else:
            line_item = APIHelper.SKIP
        links = None
        if dictionary.get('links') is not None:
            links = [HATEOASLink.from_dictionary(x) for x in dictionary.get('links')]
        else:
            links = APIHelper.SKIP
        memo = dictionary.get("memo") if dictionary.get("memo") else APIHelper.SKIP
        posted_timestamp = APIHelper.RFC3339DateTime.from_value(dictionary.get("postedTimestamp")).datetime if dictionary.get("postedTimestamp") else APIHelper.SKIP
        reference = dictionary.get("reference") if dictionary.get("reference") else APIHelper.SKIP
        reference_transaction_id = dictionary.get("referenceTransactionId") if dictionary.get("referenceTransactionId") else APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        sub_category = dictionary.get("subCategory") if dictionary.get("subCategory") else APIHelper.SKIP
        transaction_id = dictionary.get("transactionId") if dictionary.get("transactionId") else APIHelper.SKIP
        transaction_timestamp = APIHelper.RFC3339DateTime.from_value(dictionary.get("transactionTimestamp")).datetime if dictionary.get("transactionTimestamp") else APIHelper.SKIP
        accrued_interest = dictionary.get("accruedInterest") if dictionary.get("accruedInterest") else APIHelper.SKIP
        commission = dictionary.get("commission") if dictionary.get("commission") else APIHelper.SKIP
        confirmation_number = dictionary.get("confirmationNumber") if dictionary.get("confirmationNumber") else APIHelper.SKIP
        face_value = dictionary.get("faceValue") if dictionary.get("faceValue") else APIHelper.SKIP
        fees = dictionary.get("fees") if dictionary.get("fees") else APIHelper.SKIP
        fractional_cash = dictionary.get("fractionalCash") if dictionary.get("fractionalCash") else APIHelper.SKIP
        gain = dictionary.get("gain") if dictionary.get("gain") else APIHelper.SKIP
        income_type = dictionary.get("incomeType") if dictionary.get("incomeType") else APIHelper.SKIP
        inv_401_k_source = dictionary.get("inv401kSource") if dictionary.get("inv401kSource") else APIHelper.SKIP
        load = dictionary.get("load") if dictionary.get("load") else APIHelper.SKIP
        loan_id = dictionary.get("loanId") if dictionary.get("loanId") else APIHelper.SKIP
        loan_interest = dictionary.get("loanInterest") if dictionary.get("loanInterest") else APIHelper.SKIP
        loan_principal = dictionary.get("loanPrincipal") if dictionary.get("loanPrincipal") else APIHelper.SKIP
        markup = dictionary.get("markup") if dictionary.get("markup") else APIHelper.SKIP
        new_units = dictionary.get("newUnits") if dictionary.get("newUnits") else APIHelper.SKIP
        old_units = dictionary.get("oldUnits") if dictionary.get("oldUnits") else APIHelper.SKIP
        payroll_date = dictionary.get("payrollDate") if dictionary.get("payrollDate") else APIHelper.SKIP
        penalty = dictionary.get("penalty") if dictionary.get("penalty") else APIHelper.SKIP
        position_type = dictionary.get("positionType") if dictionary.get("positionType") else APIHelper.SKIP
        price = dictionary.get("price") if dictionary.get("price") else APIHelper.SKIP
        prior_year_contrib = dictionary.get("priorYearContrib") if "priorYearContrib" in dictionary.keys() else APIHelper.SKIP
        running_balance = dictionary.get("runningBalance") if dictionary.get("runningBalance") else APIHelper.SKIP
        security_id = dictionary.get("securityId") if dictionary.get("securityId") else APIHelper.SKIP
        security_id_type = dictionary.get("securityIdType") if dictionary.get("securityIdType") else APIHelper.SKIP
        security_type = dictionary.get("securityType") if dictionary.get("securityType") else APIHelper.SKIP
        shares = dictionary.get("shares") if dictionary.get("shares") else APIHelper.SKIP
        split_ratio_denominator = dictionary.get("splitRatioDenominator") if dictionary.get("splitRatioDenominator") else APIHelper.SKIP
        split_ratio_numerator = dictionary.get("splitRatioNumerator") if dictionary.get("splitRatioNumerator") else APIHelper.SKIP
        state_withholding = dictionary.get("stateWithholding") if dictionary.get("stateWithholding") else APIHelper.SKIP
        sub_account_fund = dictionary.get("subAccountFund") if dictionary.get("subAccountFund") else APIHelper.SKIP
        sub_account_sec = dictionary.get("subAccountSec") if dictionary.get("subAccountSec") else APIHelper.SKIP
        symbol = dictionary.get("symbol") if dictionary.get("symbol") else APIHelper.SKIP
        taxes = dictionary.get("taxes") if dictionary.get("taxes") else APIHelper.SKIP
        tax_exempt = dictionary.get("taxExempt") if "taxExempt" in dictionary.keys() else APIHelper.SKIP
        transaction_reason = dictionary.get("transactionReason") if dictionary.get("transactionReason") else APIHelper.SKIP
        transaction_type = dictionary.get("transactionType") if dictionary.get("transactionType") else APIHelper.SKIP
        transfer_action = dictionary.get("transferAction") if dictionary.get("transferAction") else APIHelper.SKIP
        unit_price = dictionary.get("unitPrice") if dictionary.get("unitPrice") else APIHelper.SKIP
        units = dictionary.get("units") if dictionary.get("units") else APIHelper.SKIP
        unit_type = dictionary.get("unitType") if dictionary.get("unitType") else APIHelper.SKIP
        withholding = dictionary.get("withholding") if dictionary.get("withholding") else APIHelper.SKIP
        # Return an object of this model
        return cls(account_id,
                   amount,
                   category,
                   debit_credit_memo,
                   description,
                   image_ids,
                   fi_attributes,
                   foreign_amount,
                   foreign_currency,
                   line_item,
                   links,
                   memo,
                   posted_timestamp,
                   reference,
                   reference_transaction_id,
                   status,
                   sub_category,
                   transaction_id,
                   transaction_timestamp,
                   accrued_interest,
                   commission,
                   confirmation_number,
                   face_value,
                   fees,
                   fractional_cash,
                   gain,
                   income_type,
                   inv_401_k_source,
                   load,
                   loan_id,
                   loan_interest,
                   loan_principal,
                   markup,
                   new_units,
                   old_units,
                   payroll_date,
                   penalty,
                   position_type,
                   price,
                   prior_year_contrib,
                   running_balance,
                   security_id,
                   security_id_type,
                   security_type,
                   shares,
                   split_ratio_denominator,
                   split_ratio_numerator,
                   state_withholding,
                   sub_account_fund,
                   sub_account_sec,
                   symbol,
                   taxes,
                   tax_exempt,
                   transaction_reason,
                   transaction_type,
                   transfer_action,
                   unit_price,
                   units,
                   unit_type,
                   withholding)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_id={(self.account_id if hasattr(self, "account_id") else None)!r}, '
                f'amount={(self.amount if hasattr(self, "amount") else None)!r}, '
                f'category={(self.category if hasattr(self, "category") else None)!r}, '
                f'debit_credit_memo={(self.debit_credit_memo if hasattr(self, "debit_credit_memo") else None)!r}, '
                f'description={(self.description if hasattr(self, "description") else None)!r}, '
                f'image_ids={(self.image_ids if hasattr(self, "image_ids") else None)!r}, '
                f'fi_attributes={(self.fi_attributes if hasattr(self, "fi_attributes") else None)!r}, '
                f'foreign_amount={(self.foreign_amount if hasattr(self, "foreign_amount") else None)!r}, '
                f'foreign_currency={(self.foreign_currency if hasattr(self, "foreign_currency") else None)!r}, '
                f'line_item={(self.line_item if hasattr(self, "line_item") else None)!r}, '
                f'links={(self.links if hasattr(self, "links") else None)!r}, '
                f'memo={(self.memo if hasattr(self, "memo") else None)!r}, '
                f'posted_timestamp={(self.posted_timestamp if hasattr(self, "posted_timestamp") else None)!r}, '
                f'reference={(self.reference if hasattr(self, "reference") else None)!r}, '
                f'reference_transaction_id={(self.reference_transaction_id if hasattr(self, "reference_transaction_id") else None)!r}, '
                f'status={(self.status if hasattr(self, "status") else None)!r}, '
                f'sub_category={(self.sub_category if hasattr(self, "sub_category") else None)!r}, '
                f'transaction_id={(self.transaction_id if hasattr(self, "transaction_id") else None)!r}, '
                f'transaction_timestamp={(self.transaction_timestamp if hasattr(self, "transaction_timestamp") else None)!r}, '
                f'accrued_interest={(self.accrued_interest if hasattr(self, "accrued_interest") else None)!r}, '
                f'commission={(self.commission if hasattr(self, "commission") else None)!r}, '
                f'confirmation_number={(self.confirmation_number if hasattr(self, "confirmation_number") else None)!r}, '
                f'face_value={(self.face_value if hasattr(self, "face_value") else None)!r}, '
                f'fees={(self.fees if hasattr(self, "fees") else None)!r}, '
                f'fractional_cash={(self.fractional_cash if hasattr(self, "fractional_cash") else None)!r}, '
                f'gain={(self.gain if hasattr(self, "gain") else None)!r}, '
                f'income_type={(self.income_type if hasattr(self, "income_type") else None)!r}, '
                f'inv_401_k_source={(self.inv_401_k_source if hasattr(self, "inv_401_k_source") else None)!r}, '
                f'load={(self.load if hasattr(self, "load") else None)!r}, '
                f'loan_id={(self.loan_id if hasattr(self, "loan_id") else None)!r}, '
                f'loan_interest={(self.loan_interest if hasattr(self, "loan_interest") else None)!r}, '
                f'loan_principal={(self.loan_principal if hasattr(self, "loan_principal") else None)!r}, '
                f'markup={(self.markup if hasattr(self, "markup") else None)!r}, '
                f'new_units={(self.new_units if hasattr(self, "new_units") else None)!r}, '
                f'old_units={(self.old_units if hasattr(self, "old_units") else None)!r}, '
                f'payroll_date={(self.payroll_date if hasattr(self, "payroll_date") else None)!r}, '
                f'penalty={(self.penalty if hasattr(self, "penalty") else None)!r}, '
                f'position_type={(self.position_type if hasattr(self, "position_type") else None)!r}, '
                f'price={(self.price if hasattr(self, "price") else None)!r}, '
                f'prior_year_contrib={(self.prior_year_contrib if hasattr(self, "prior_year_contrib") else None)!r}, '
                f'running_balance={(self.running_balance if hasattr(self, "running_balance") else None)!r}, '
                f'security_id={(self.security_id if hasattr(self, "security_id") else None)!r}, '
                f'security_id_type={(self.security_id_type if hasattr(self, "security_id_type") else None)!r}, '
                f'security_type={(self.security_type if hasattr(self, "security_type") else None)!r}, '
                f'shares={(self.shares if hasattr(self, "shares") else None)!r}, '
                f'split_ratio_denominator={(self.split_ratio_denominator if hasattr(self, "split_ratio_denominator") else None)!r}, '
                f'split_ratio_numerator={(self.split_ratio_numerator if hasattr(self, "split_ratio_numerator") else None)!r}, '
                f'state_withholding={(self.state_withholding if hasattr(self, "state_withholding") else None)!r}, '
                f'sub_account_fund={(self.sub_account_fund if hasattr(self, "sub_account_fund") else None)!r}, '
                f'sub_account_sec={(self.sub_account_sec if hasattr(self, "sub_account_sec") else None)!r}, '
                f'symbol={(self.symbol if hasattr(self, "symbol") else None)!r}, '
                f'taxes={(self.taxes if hasattr(self, "taxes") else None)!r}, '
                f'tax_exempt={(self.tax_exempt if hasattr(self, "tax_exempt") else None)!r}, '
                f'transaction_reason={(self.transaction_reason if hasattr(self, "transaction_reason") else None)!r}, '
                f'transaction_type={(self.transaction_type if hasattr(self, "transaction_type") else None)!r}, '
                f'transfer_action={(self.transfer_action if hasattr(self, "transfer_action") else None)!r}, '
                f'unit_price={(self.unit_price if hasattr(self, "unit_price") else None)!r}, '
                f'units={(self.units if hasattr(self, "units") else None)!r}, '
                f'unit_type={(self.unit_type if hasattr(self, "unit_type") else None)!r}, '
                f'withholding={(self.withholding if hasattr(self, "withholding") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_id={(self.account_id if hasattr(self, "account_id") else None)!s}, '
                f'amount={(self.amount if hasattr(self, "amount") else None)!s}, '
                f'category={(self.category if hasattr(self, "category") else None)!s}, '
                f'debit_credit_memo={(self.debit_credit_memo if hasattr(self, "debit_credit_memo") else None)!s}, '
                f'description={(self.description if hasattr(self, "description") else None)!s}, '
                f'image_ids={(self.image_ids if hasattr(self, "image_ids") else None)!s}, '
                f'fi_attributes={(self.fi_attributes if hasattr(self, "fi_attributes") else None)!s}, '
                f'foreign_amount={(self.foreign_amount if hasattr(self, "foreign_amount") else None)!s}, '
                f'foreign_currency={(self.foreign_currency if hasattr(self, "foreign_currency") else None)!s}, '
                f'line_item={(self.line_item if hasattr(self, "line_item") else None)!s}, '
                f'links={(self.links if hasattr(self, "links") else None)!s}, '
                f'memo={(self.memo if hasattr(self, "memo") else None)!s}, '
                f'posted_timestamp={(self.posted_timestamp if hasattr(self, "posted_timestamp") else None)!s}, '
                f'reference={(self.reference if hasattr(self, "reference") else None)!s}, '
                f'reference_transaction_id={(self.reference_transaction_id if hasattr(self, "reference_transaction_id") else None)!s}, '
                f'status={(self.status if hasattr(self, "status") else None)!s}, '
                f'sub_category={(self.sub_category if hasattr(self, "sub_category") else None)!s}, '
                f'transaction_id={(self.transaction_id if hasattr(self, "transaction_id") else None)!s}, '
                f'transaction_timestamp={(self.transaction_timestamp if hasattr(self, "transaction_timestamp") else None)!s}, '
                f'accrued_interest={(self.accrued_interest if hasattr(self, "accrued_interest") else None)!s}, '
                f'commission={(self.commission if hasattr(self, "commission") else None)!s}, '
                f'confirmation_number={(self.confirmation_number if hasattr(self, "confirmation_number") else None)!s}, '
                f'face_value={(self.face_value if hasattr(self, "face_value") else None)!s}, '
                f'fees={(self.fees if hasattr(self, "fees") else None)!s}, '
                f'fractional_cash={(self.fractional_cash if hasattr(self, "fractional_cash") else None)!s}, '
                f'gain={(self.gain if hasattr(self, "gain") else None)!s}, '
                f'income_type={(self.income_type if hasattr(self, "income_type") else None)!s}, '
                f'inv_401_k_source={(self.inv_401_k_source if hasattr(self, "inv_401_k_source") else None)!s}, '
                f'load={(self.load if hasattr(self, "load") else None)!s}, '
                f'loan_id={(self.loan_id if hasattr(self, "loan_id") else None)!s}, '
                f'loan_interest={(self.loan_interest if hasattr(self, "loan_interest") else None)!s}, '
                f'loan_principal={(self.loan_principal if hasattr(self, "loan_principal") else None)!s}, '
                f'markup={(self.markup if hasattr(self, "markup") else None)!s}, '
                f'new_units={(self.new_units if hasattr(self, "new_units") else None)!s}, '
                f'old_units={(self.old_units if hasattr(self, "old_units") else None)!s}, '
                f'payroll_date={(self.payroll_date if hasattr(self, "payroll_date") else None)!s}, '
                f'penalty={(self.penalty if hasattr(self, "penalty") else None)!s}, '
                f'position_type={(self.position_type if hasattr(self, "position_type") else None)!s}, '
                f'price={(self.price if hasattr(self, "price") else None)!s}, '
                f'prior_year_contrib={(self.prior_year_contrib if hasattr(self, "prior_year_contrib") else None)!s}, '
                f'running_balance={(self.running_balance if hasattr(self, "running_balance") else None)!s}, '
                f'security_id={(self.security_id if hasattr(self, "security_id") else None)!s}, '
                f'security_id_type={(self.security_id_type if hasattr(self, "security_id_type") else None)!s}, '
                f'security_type={(self.security_type if hasattr(self, "security_type") else None)!s}, '
                f'shares={(self.shares if hasattr(self, "shares") else None)!s}, '
                f'split_ratio_denominator={(self.split_ratio_denominator if hasattr(self, "split_ratio_denominator") else None)!s}, '
                f'split_ratio_numerator={(self.split_ratio_numerator if hasattr(self, "split_ratio_numerator") else None)!s}, '
                f'state_withholding={(self.state_withholding if hasattr(self, "state_withholding") else None)!s}, '
                f'sub_account_fund={(self.sub_account_fund if hasattr(self, "sub_account_fund") else None)!s}, '
                f'sub_account_sec={(self.sub_account_sec if hasattr(self, "sub_account_sec") else None)!s}, '
                f'symbol={(self.symbol if hasattr(self, "symbol") else None)!s}, '
                f'taxes={(self.taxes if hasattr(self, "taxes") else None)!s}, '
                f'tax_exempt={(self.tax_exempt if hasattr(self, "tax_exempt") else None)!s}, '
                f'transaction_reason={(self.transaction_reason if hasattr(self, "transaction_reason") else None)!s}, '
                f'transaction_type={(self.transaction_type if hasattr(self, "transaction_type") else None)!s}, '
                f'transfer_action={(self.transfer_action if hasattr(self, "transfer_action") else None)!s}, '
                f'unit_price={(self.unit_price if hasattr(self, "unit_price") else None)!s}, '
                f'units={(self.units if hasattr(self, "units") else None)!s}, '
                f'unit_type={(self.unit_type if hasattr(self, "unit_type") else None)!s}, '
                f'withholding={(self.withholding if hasattr(self, "withholding") else None)!s})')
