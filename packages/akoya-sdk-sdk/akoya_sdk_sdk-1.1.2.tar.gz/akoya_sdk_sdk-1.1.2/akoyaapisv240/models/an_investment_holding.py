# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoyaapisv240.api_helper import APIHelper
from akoyaapisv240.models.asset_class import AssetClass
from akoyaapisv240.models.currency_entity import CurrencyEntity
from akoyaapisv240.models.debt_security_entity import DebtSecurityEntity
from akoyaapisv240.models.fi_asset_class import FiAssetClass
from akoyaapisv240.models.fi_attribute_entity import FiAttributeEntity
from akoyaapisv240.models.mutual_fund_security_entity import MutualFundSecurityEntity
from akoyaapisv240.models.option_security_entity import OptionSecurityEntity
from akoyaapisv240.models.other_security_entity import OtherSecurityEntity
from akoyaapisv240.models.stock_security_entity import StockSecurityEntity
from akoyaapisv240.models.sweep_security_entity import SweepSecurityEntity
from akoyaapisv240.models.tax_lot import TaxLot


class AnInvestmentHolding(object):

    """Implementation of the 'An investment holding' model.

    Attributes:
        asset_classes (List[AssetClass]): Percent breakdown by asset class.
        average_cost (bool): Cost is average of all purchases for holding.
        cash_account (bool): If true, indicates that this holding is used to
            maintain proceeds from sales, dividends, and other cash postings
            to the investment account.
        change_in_price (float): Change in current price compared to previous
            day's close
        currency (CurrencyEntity): Indicates the currency code used by the
            account. May also include currency rate.
        current_unit_price (float): The model property of type float.
        current_unit_price_date (datetime): Current unit price as of date
        description (str): Description of the holding
        expiration_date (datetime): For CDs, bonds, and other time-based
            holdings.
        face_value (float): Face value at the time of data retrieved.
        fi_asset_classes (List[FiAssetClass]): Percent breakdown by
            FI-specific asset class percentage breakdown
        fi_attributes (List[FiAttributeEntity]): The model property of type
            List[FiAttributeEntity].
        held_in_account (HeldInAccountEnum): Sub-account
        holding_id (str): Long term persistent identity of the holding
        holding_name (str): Holding name or security name
        holding_sub_type (HoldingSubTypeEnum): The model property of type
            HoldingSubTypeEnum.
        holding_type (HoldingTypeEnum): The model property of type
            HoldingTypeEnum.
        inv_401_k_surce (Inv401kSurceEnum): Source for money for this security.
        market_value (float): Market value at the time of data retrieved
        original_purchase_date (datetime): Date of original purchase
        position_type (PositionTypeEnum): The model property of type
            PositionTypeEnum.
        purchased_price (float): Price of holding at the time of purchase
        rate (float): For CDs, bonds, and other rate based holdings.
        security_id (str): Unique identifier of security
        security_id_type (SecurityIdTypeEnum): Security identifier type
        symbol (str): Ticker / Market symbol
        tax_lots (List[TaxLot]): Breakdown by tax lot.
        units (float): Number of shares (with decimals).
        mutual_fund_security (MutualFundSecurityEntity): Information about the
            mutual fund security specific to the type of security
        option_security (OptionSecurityEntity): Information about the option
            security specific to the type of security
        other_security (OtherSecurityEntity): Information about the security
            specific to the type of security
        stock_security (StockSecurityEntity): Information about the stock
            security specific to the type of security
        sweep_security (SweepSecurityEntity): Information about the sweep
            security specific to the type of security
        debt_security (DebtSecurityEntity): Information about the debt
            security specific to the type of security

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "asset_classes": 'assetClasses',
        "average_cost": 'averageCost',
        "cash_account": 'cashAccount',
        "change_in_price": 'changeInPrice',
        "currency": 'currency',
        "current_unit_price": 'currentUnitPrice',
        "current_unit_price_date": 'currentUnitPriceDate',
        "description": 'description',
        "expiration_date": 'expirationDate',
        "face_value": 'faceValue',
        "fi_asset_classes": 'fiAssetClasses',
        "fi_attributes": 'fiAttributes',
        "held_in_account": 'heldInAccount',
        "holding_id": 'holdingId',
        "holding_name": 'holdingName',
        "holding_sub_type": 'holdingSubType',
        "holding_type": 'holdingType',
        "inv_401_k_surce": 'inv401kSurce',
        "market_value": 'marketValue',
        "original_purchase_date": 'originalPurchaseDate',
        "position_type": 'positionType',
        "purchased_price": 'purchasedPrice',
        "rate": 'rate',
        "security_id": 'securityId',
        "security_id_type": 'securityIdType',
        "symbol": 'symbol',
        "tax_lots": 'taxLots',
        "units": 'units',
        "mutual_fund_security": 'mutualFundSecurity',
        "option_security": 'optionSecurity',
        "other_security": 'otherSecurity',
        "stock_security": 'stockSecurity',
        "sweep_security": 'sweepSecurity',
        "debt_security": 'debtSecurity'
    }

    _optionals = [
        'asset_classes',
        'average_cost',
        'cash_account',
        'change_in_price',
        'currency',
        'current_unit_price',
        'current_unit_price_date',
        'description',
        'expiration_date',
        'face_value',
        'fi_asset_classes',
        'fi_attributes',
        'held_in_account',
        'holding_id',
        'holding_name',
        'holding_sub_type',
        'holding_type',
        'inv_401_k_surce',
        'market_value',
        'original_purchase_date',
        'position_type',
        'purchased_price',
        'rate',
        'security_id',
        'security_id_type',
        'symbol',
        'tax_lots',
        'units',
        'mutual_fund_security',
        'option_security',
        'other_security',
        'stock_security',
        'sweep_security',
        'debt_security',
    ]

    def __init__(self,
                 asset_classes=APIHelper.SKIP,
                 average_cost=APIHelper.SKIP,
                 cash_account=APIHelper.SKIP,
                 change_in_price=APIHelper.SKIP,
                 currency=APIHelper.SKIP,
                 current_unit_price=APIHelper.SKIP,
                 current_unit_price_date=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 expiration_date=APIHelper.SKIP,
                 face_value=APIHelper.SKIP,
                 fi_asset_classes=APIHelper.SKIP,
                 fi_attributes=APIHelper.SKIP,
                 held_in_account=APIHelper.SKIP,
                 holding_id=APIHelper.SKIP,
                 holding_name=APIHelper.SKIP,
                 holding_sub_type=APIHelper.SKIP,
                 holding_type=APIHelper.SKIP,
                 inv_401_k_surce=APIHelper.SKIP,
                 market_value=APIHelper.SKIP,
                 original_purchase_date=APIHelper.SKIP,
                 position_type=APIHelper.SKIP,
                 purchased_price=APIHelper.SKIP,
                 rate=APIHelper.SKIP,
                 security_id=APIHelper.SKIP,
                 security_id_type=APIHelper.SKIP,
                 symbol=APIHelper.SKIP,
                 tax_lots=APIHelper.SKIP,
                 units=APIHelper.SKIP,
                 mutual_fund_security=APIHelper.SKIP,
                 option_security=APIHelper.SKIP,
                 other_security=APIHelper.SKIP,
                 stock_security=APIHelper.SKIP,
                 sweep_security=APIHelper.SKIP,
                 debt_security=APIHelper.SKIP):
        """Constructor for the AnInvestmentHolding class"""

        # Initialize members of the class
        if asset_classes is not APIHelper.SKIP:
            self.asset_classes = asset_classes 
        if average_cost is not APIHelper.SKIP:
            self.average_cost = average_cost 
        if cash_account is not APIHelper.SKIP:
            self.cash_account = cash_account 
        if change_in_price is not APIHelper.SKIP:
            self.change_in_price = change_in_price 
        if currency is not APIHelper.SKIP:
            self.currency = currency 
        if current_unit_price is not APIHelper.SKIP:
            self.current_unit_price = current_unit_price 
        if current_unit_price_date is not APIHelper.SKIP:
            self.current_unit_price_date = APIHelper.apply_datetime_converter(current_unit_price_date, APIHelper.RFC3339DateTime) if current_unit_price_date else None 
        if description is not APIHelper.SKIP:
            self.description = description 
        if expiration_date is not APIHelper.SKIP:
            self.expiration_date = APIHelper.apply_datetime_converter(expiration_date, APIHelper.RFC3339DateTime) if expiration_date else None 
        if face_value is not APIHelper.SKIP:
            self.face_value = face_value 
        if fi_asset_classes is not APIHelper.SKIP:
            self.fi_asset_classes = fi_asset_classes 
        if fi_attributes is not APIHelper.SKIP:
            self.fi_attributes = fi_attributes 
        if held_in_account is not APIHelper.SKIP:
            self.held_in_account = held_in_account 
        if holding_id is not APIHelper.SKIP:
            self.holding_id = holding_id 
        if holding_name is not APIHelper.SKIP:
            self.holding_name = holding_name 
        if holding_sub_type is not APIHelper.SKIP:
            self.holding_sub_type = holding_sub_type 
        if holding_type is not APIHelper.SKIP:
            self.holding_type = holding_type 
        if inv_401_k_surce is not APIHelper.SKIP:
            self.inv_401_k_surce = inv_401_k_surce 
        if market_value is not APIHelper.SKIP:
            self.market_value = market_value 
        if original_purchase_date is not APIHelper.SKIP:
            self.original_purchase_date = APIHelper.apply_datetime_converter(original_purchase_date, APIHelper.RFC3339DateTime) if original_purchase_date else None 
        if position_type is not APIHelper.SKIP:
            self.position_type = position_type 
        if purchased_price is not APIHelper.SKIP:
            self.purchased_price = purchased_price 
        if rate is not APIHelper.SKIP:
            self.rate = rate 
        if security_id is not APIHelper.SKIP:
            self.security_id = security_id 
        if security_id_type is not APIHelper.SKIP:
            self.security_id_type = security_id_type 
        if symbol is not APIHelper.SKIP:
            self.symbol = symbol 
        if tax_lots is not APIHelper.SKIP:
            self.tax_lots = tax_lots 
        if units is not APIHelper.SKIP:
            self.units = units 
        if mutual_fund_security is not APIHelper.SKIP:
            self.mutual_fund_security = mutual_fund_security 
        if option_security is not APIHelper.SKIP:
            self.option_security = option_security 
        if other_security is not APIHelper.SKIP:
            self.other_security = other_security 
        if stock_security is not APIHelper.SKIP:
            self.stock_security = stock_security 
        if sweep_security is not APIHelper.SKIP:
            self.sweep_security = sweep_security 
        if debt_security is not APIHelper.SKIP:
            self.debt_security = debt_security 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        asset_classes = None
        if dictionary.get('assetClasses') is not None:
            asset_classes = [AssetClass.from_dictionary(x) for x in dictionary.get('assetClasses')]
        else:
            asset_classes = APIHelper.SKIP
        average_cost = dictionary.get("averageCost") if "averageCost" in dictionary.keys() else APIHelper.SKIP
        cash_account = dictionary.get("cashAccount") if "cashAccount" in dictionary.keys() else APIHelper.SKIP
        change_in_price = dictionary.get("changeInPrice") if dictionary.get("changeInPrice") else APIHelper.SKIP
        currency = CurrencyEntity.from_dictionary(dictionary.get('currency')) if 'currency' in dictionary.keys() else APIHelper.SKIP
        current_unit_price = dictionary.get("currentUnitPrice") if dictionary.get("currentUnitPrice") else APIHelper.SKIP
        current_unit_price_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("currentUnitPriceDate")).datetime if dictionary.get("currentUnitPriceDate") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        expiration_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("expirationDate")).datetime if dictionary.get("expirationDate") else APIHelper.SKIP
        face_value = dictionary.get("faceValue") if dictionary.get("faceValue") else APIHelper.SKIP
        fi_asset_classes = None
        if dictionary.get('fiAssetClasses') is not None:
            fi_asset_classes = [FiAssetClass.from_dictionary(x) for x in dictionary.get('fiAssetClasses')]
        else:
            fi_asset_classes = APIHelper.SKIP
        fi_attributes = None
        if dictionary.get('fiAttributes') is not None:
            fi_attributes = [FiAttributeEntity.from_dictionary(x) for x in dictionary.get('fiAttributes')]
        else:
            fi_attributes = APIHelper.SKIP
        held_in_account = dictionary.get("heldInAccount") if dictionary.get("heldInAccount") else APIHelper.SKIP
        holding_id = dictionary.get("holdingId") if dictionary.get("holdingId") else APIHelper.SKIP
        holding_name = dictionary.get("holdingName") if dictionary.get("holdingName") else APIHelper.SKIP
        holding_sub_type = dictionary.get("holdingSubType") if dictionary.get("holdingSubType") else APIHelper.SKIP
        holding_type = dictionary.get("holdingType") if dictionary.get("holdingType") else APIHelper.SKIP
        inv_401_k_surce = dictionary.get("inv401kSurce") if dictionary.get("inv401kSurce") else APIHelper.SKIP
        market_value = dictionary.get("marketValue") if dictionary.get("marketValue") else APIHelper.SKIP
        original_purchase_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("originalPurchaseDate")).datetime if dictionary.get("originalPurchaseDate") else APIHelper.SKIP
        position_type = dictionary.get("positionType") if dictionary.get("positionType") else APIHelper.SKIP
        purchased_price = dictionary.get("purchasedPrice") if dictionary.get("purchasedPrice") else APIHelper.SKIP
        rate = dictionary.get("rate") if dictionary.get("rate") else APIHelper.SKIP
        security_id = dictionary.get("securityId") if dictionary.get("securityId") else APIHelper.SKIP
        security_id_type = dictionary.get("securityIdType") if dictionary.get("securityIdType") else APIHelper.SKIP
        symbol = dictionary.get("symbol") if dictionary.get("symbol") else APIHelper.SKIP
        tax_lots = None
        if dictionary.get('taxLots') is not None:
            tax_lots = [TaxLot.from_dictionary(x) for x in dictionary.get('taxLots')]
        else:
            tax_lots = APIHelper.SKIP
        units = dictionary.get("units") if dictionary.get("units") else APIHelper.SKIP
        mutual_fund_security = MutualFundSecurityEntity.from_dictionary(dictionary.get('mutualFundSecurity')) if 'mutualFundSecurity' in dictionary.keys() else APIHelper.SKIP
        option_security = OptionSecurityEntity.from_dictionary(dictionary.get('optionSecurity')) if 'optionSecurity' in dictionary.keys() else APIHelper.SKIP
        other_security = OtherSecurityEntity.from_dictionary(dictionary.get('otherSecurity')) if 'otherSecurity' in dictionary.keys() else APIHelper.SKIP
        stock_security = StockSecurityEntity.from_dictionary(dictionary.get('stockSecurity')) if 'stockSecurity' in dictionary.keys() else APIHelper.SKIP
        sweep_security = SweepSecurityEntity.from_dictionary(dictionary.get('sweepSecurity')) if 'sweepSecurity' in dictionary.keys() else APIHelper.SKIP
        debt_security = DebtSecurityEntity.from_dictionary(dictionary.get('debtSecurity')) if 'debtSecurity' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(asset_classes,
                   average_cost,
                   cash_account,
                   change_in_price,
                   currency,
                   current_unit_price,
                   current_unit_price_date,
                   description,
                   expiration_date,
                   face_value,
                   fi_asset_classes,
                   fi_attributes,
                   held_in_account,
                   holding_id,
                   holding_name,
                   holding_sub_type,
                   holding_type,
                   inv_401_k_surce,
                   market_value,
                   original_purchase_date,
                   position_type,
                   purchased_price,
                   rate,
                   security_id,
                   security_id_type,
                   symbol,
                   tax_lots,
                   units,
                   mutual_fund_security,
                   option_security,
                   other_security,
                   stock_security,
                   sweep_security,
                   debt_security)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'asset_classes={(self.asset_classes if hasattr(self, "asset_classes") else None)!r}, '
                f'average_cost={(self.average_cost if hasattr(self, "average_cost") else None)!r}, '
                f'cash_account={(self.cash_account if hasattr(self, "cash_account") else None)!r}, '
                f'change_in_price={(self.change_in_price if hasattr(self, "change_in_price") else None)!r}, '
                f'currency={(self.currency if hasattr(self, "currency") else None)!r}, '
                f'current_unit_price={(self.current_unit_price if hasattr(self, "current_unit_price") else None)!r}, '
                f'current_unit_price_date={(self.current_unit_price_date if hasattr(self, "current_unit_price_date") else None)!r}, '
                f'description={(self.description if hasattr(self, "description") else None)!r}, '
                f'expiration_date={(self.expiration_date if hasattr(self, "expiration_date") else None)!r}, '
                f'face_value={(self.face_value if hasattr(self, "face_value") else None)!r}, '
                f'fi_asset_classes={(self.fi_asset_classes if hasattr(self, "fi_asset_classes") else None)!r}, '
                f'fi_attributes={(self.fi_attributes if hasattr(self, "fi_attributes") else None)!r}, '
                f'held_in_account={(self.held_in_account if hasattr(self, "held_in_account") else None)!r}, '
                f'holding_id={(self.holding_id if hasattr(self, "holding_id") else None)!r}, '
                f'holding_name={(self.holding_name if hasattr(self, "holding_name") else None)!r}, '
                f'holding_sub_type={(self.holding_sub_type if hasattr(self, "holding_sub_type") else None)!r}, '
                f'holding_type={(self.holding_type if hasattr(self, "holding_type") else None)!r}, '
                f'inv_401_k_surce={(self.inv_401_k_surce if hasattr(self, "inv_401_k_surce") else None)!r}, '
                f'market_value={(self.market_value if hasattr(self, "market_value") else None)!r}, '
                f'original_purchase_date={(self.original_purchase_date if hasattr(self, "original_purchase_date") else None)!r}, '
                f'position_type={(self.position_type if hasattr(self, "position_type") else None)!r}, '
                f'purchased_price={(self.purchased_price if hasattr(self, "purchased_price") else None)!r}, '
                f'rate={(self.rate if hasattr(self, "rate") else None)!r}, '
                f'security_id={(self.security_id if hasattr(self, "security_id") else None)!r}, '
                f'security_id_type={(self.security_id_type if hasattr(self, "security_id_type") else None)!r}, '
                f'symbol={(self.symbol if hasattr(self, "symbol") else None)!r}, '
                f'tax_lots={(self.tax_lots if hasattr(self, "tax_lots") else None)!r}, '
                f'units={(self.units if hasattr(self, "units") else None)!r}, '
                f'mutual_fund_security={(self.mutual_fund_security if hasattr(self, "mutual_fund_security") else None)!r}, '
                f'option_security={(self.option_security if hasattr(self, "option_security") else None)!r}, '
                f'other_security={(self.other_security if hasattr(self, "other_security") else None)!r}, '
                f'stock_security={(self.stock_security if hasattr(self, "stock_security") else None)!r}, '
                f'sweep_security={(self.sweep_security if hasattr(self, "sweep_security") else None)!r}, '
                f'debt_security={(self.debt_security if hasattr(self, "debt_security") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'asset_classes={(self.asset_classes if hasattr(self, "asset_classes") else None)!s}, '
                f'average_cost={(self.average_cost if hasattr(self, "average_cost") else None)!s}, '
                f'cash_account={(self.cash_account if hasattr(self, "cash_account") else None)!s}, '
                f'change_in_price={(self.change_in_price if hasattr(self, "change_in_price") else None)!s}, '
                f'currency={(self.currency if hasattr(self, "currency") else None)!s}, '
                f'current_unit_price={(self.current_unit_price if hasattr(self, "current_unit_price") else None)!s}, '
                f'current_unit_price_date={(self.current_unit_price_date if hasattr(self, "current_unit_price_date") else None)!s}, '
                f'description={(self.description if hasattr(self, "description") else None)!s}, '
                f'expiration_date={(self.expiration_date if hasattr(self, "expiration_date") else None)!s}, '
                f'face_value={(self.face_value if hasattr(self, "face_value") else None)!s}, '
                f'fi_asset_classes={(self.fi_asset_classes if hasattr(self, "fi_asset_classes") else None)!s}, '
                f'fi_attributes={(self.fi_attributes if hasattr(self, "fi_attributes") else None)!s}, '
                f'held_in_account={(self.held_in_account if hasattr(self, "held_in_account") else None)!s}, '
                f'holding_id={(self.holding_id if hasattr(self, "holding_id") else None)!s}, '
                f'holding_name={(self.holding_name if hasattr(self, "holding_name") else None)!s}, '
                f'holding_sub_type={(self.holding_sub_type if hasattr(self, "holding_sub_type") else None)!s}, '
                f'holding_type={(self.holding_type if hasattr(self, "holding_type") else None)!s}, '
                f'inv_401_k_surce={(self.inv_401_k_surce if hasattr(self, "inv_401_k_surce") else None)!s}, '
                f'market_value={(self.market_value if hasattr(self, "market_value") else None)!s}, '
                f'original_purchase_date={(self.original_purchase_date if hasattr(self, "original_purchase_date") else None)!s}, '
                f'position_type={(self.position_type if hasattr(self, "position_type") else None)!s}, '
                f'purchased_price={(self.purchased_price if hasattr(self, "purchased_price") else None)!s}, '
                f'rate={(self.rate if hasattr(self, "rate") else None)!s}, '
                f'security_id={(self.security_id if hasattr(self, "security_id") else None)!s}, '
                f'security_id_type={(self.security_id_type if hasattr(self, "security_id_type") else None)!s}, '
                f'symbol={(self.symbol if hasattr(self, "symbol") else None)!s}, '
                f'tax_lots={(self.tax_lots if hasattr(self, "tax_lots") else None)!s}, '
                f'units={(self.units if hasattr(self, "units") else None)!s}, '
                f'mutual_fund_security={(self.mutual_fund_security if hasattr(self, "mutual_fund_security") else None)!s}, '
                f'option_security={(self.option_security if hasattr(self, "option_security") else None)!s}, '
                f'other_security={(self.other_security if hasattr(self, "other_security") else None)!s}, '
                f'stock_security={(self.stock_security if hasattr(self, "stock_security") else None)!s}, '
                f'sweep_security={(self.sweep_security if hasattr(self, "sweep_security") else None)!s}, '
                f'debt_security={(self.debt_security if hasattr(self, "debt_security") else None)!s})')
