# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoyaapisv240.api_helper import APIHelper
from akoyaapisv240.models.next import Next
from akoyaapisv240.models.prev import Prev


class Links(object):

    """Implementation of the 'Links' model.

    Attributes:
        next (Next): The model property of type Next.
        prev (Prev): The model property of type Prev.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "next": 'next',
        "prev": 'prev'
    }

    _optionals = [
        'next',
        'prev',
    ]

    def __init__(self,
                 next=APIHelper.SKIP,
                 prev=APIHelper.SKIP):
        """Constructor for the Links class"""

        # Initialize members of the class
        if next is not APIHelper.SKIP:
            self.next = next 
        if prev is not APIHelper.SKIP:
            self.prev = prev 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        next = Next.from_dictionary(dictionary.get('next')) if 'next' in dictionary.keys() else APIHelper.SKIP
        prev = Prev.from_dictionary(dictionary.get('prev')) if 'prev' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(next,
                   prev)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'next={(self.next if hasattr(self, "next") else None)!r}, '
                f'prev={(self.prev if hasattr(self, "prev") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'next={(self.next if hasattr(self, "next") else None)!s}, '
                f'prev={(self.prev if hasattr(self, "prev") else None)!s})')
