# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoyaapisv240.api_helper import APIHelper
from akoyaapisv240.models.account_information import AccountInformation


class Account2(object):

    """Implementation of the 'Account2' model.

    Attributes:
        loc_account (AccountInformation): Line of Credit Account

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "loc_account": 'locAccount'
    }

    _optionals = [
        'loc_account',
    ]

    def __init__(self,
                 loc_account=APIHelper.SKIP):
        """Constructor for the Account2 class"""

        # Initialize members of the class
        if loc_account is not APIHelper.SKIP:
            self.loc_account = loc_account 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        loc_account = AccountInformation.from_dictionary(dictionary.get('locAccount')) if 'locAccount' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(loc_account)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'loc_account={(self.loc_account if hasattr(self, "loc_account") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'loc_account={(self.loc_account if hasattr(self, "loc_account") else None)!s})')
