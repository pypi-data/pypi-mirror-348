# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoyaapisv240.api_helper import APIHelper
from akoyaapisv240.models.account_information import AccountInformation
from akoyaapisv240.models.annuity_account import AnnuityAccount
from akoyaapisv240.models.deposit_account import DepositAccount
from akoyaapisv240.models.insurance_account import InsuranceAccount
from akoyaapisv240.models.investment_account import InvestmentAccount
from akoyaapisv240.models.loan_account import LoanAccount


class Account6(object):

    """Implementation of the 'Account6' model.

    Attributes:
        deposit_account (DepositAccount): Deposit Account
        loan_account (LoanAccount): Loan Account
        loc_account (AccountInformation): Line of Credit Account
        investment_account (InvestmentAccount): Investment Account
        insurance_account (InsuranceAccount): Insurance Account
        annuity_account (AnnuityAccount): Annuity Account

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "deposit_account": 'depositAccount',
        "loan_account": 'loanAccount',
        "loc_account": 'locAccount',
        "investment_account": 'investmentAccount',
        "insurance_account": 'insuranceAccount',
        "annuity_account": 'annuityAccount'
    }

    _optionals = [
        'deposit_account',
        'loan_account',
        'loc_account',
        'investment_account',
        'insurance_account',
        'annuity_account',
    ]

    def __init__(self,
                 deposit_account=APIHelper.SKIP,
                 loan_account=APIHelper.SKIP,
                 loc_account=APIHelper.SKIP,
                 investment_account=APIHelper.SKIP,
                 insurance_account=APIHelper.SKIP,
                 annuity_account=APIHelper.SKIP):
        """Constructor for the Account6 class"""

        # Initialize members of the class
        if deposit_account is not APIHelper.SKIP:
            self.deposit_account = deposit_account 
        if loan_account is not APIHelper.SKIP:
            self.loan_account = loan_account 
        if loc_account is not APIHelper.SKIP:
            self.loc_account = loc_account 
        if investment_account is not APIHelper.SKIP:
            self.investment_account = investment_account 
        if insurance_account is not APIHelper.SKIP:
            self.insurance_account = insurance_account 
        if annuity_account is not APIHelper.SKIP:
            self.annuity_account = annuity_account 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        deposit_account = DepositAccount.from_dictionary(dictionary.get('depositAccount')) if 'depositAccount' in dictionary.keys() else APIHelper.SKIP
        loan_account = LoanAccount.from_dictionary(dictionary.get('loanAccount')) if 'loanAccount' in dictionary.keys() else APIHelper.SKIP
        loc_account = AccountInformation.from_dictionary(dictionary.get('locAccount')) if 'locAccount' in dictionary.keys() else APIHelper.SKIP
        investment_account = InvestmentAccount.from_dictionary(dictionary.get('investmentAccount')) if 'investmentAccount' in dictionary.keys() else APIHelper.SKIP
        insurance_account = InsuranceAccount.from_dictionary(dictionary.get('insuranceAccount')) if 'insuranceAccount' in dictionary.keys() else APIHelper.SKIP
        annuity_account = AnnuityAccount.from_dictionary(dictionary.get('annuityAccount')) if 'annuityAccount' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(deposit_account,
                   loan_account,
                   loc_account,
                   investment_account,
                   insurance_account,
                   annuity_account)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'deposit_account={(self.deposit_account if hasattr(self, "deposit_account") else None)!r}, '
                f'loan_account={(self.loan_account if hasattr(self, "loan_account") else None)!r}, '
                f'loc_account={(self.loc_account if hasattr(self, "loc_account") else None)!r}, '
                f'investment_account={(self.investment_account if hasattr(self, "investment_account") else None)!r}, '
                f'insurance_account={(self.insurance_account if hasattr(self, "insurance_account") else None)!r}, '
                f'annuity_account={(self.annuity_account if hasattr(self, "annuity_account") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'deposit_account={(self.deposit_account if hasattr(self, "deposit_account") else None)!s}, '
                f'loan_account={(self.loan_account if hasattr(self, "loan_account") else None)!s}, '
                f'loc_account={(self.loc_account if hasattr(self, "loc_account") else None)!s}, '
                f'investment_account={(self.investment_account if hasattr(self, "investment_account") else None)!s}, '
                f'insurance_account={(self.insurance_account if hasattr(self, "insurance_account") else None)!s}, '
                f'annuity_account={(self.annuity_account if hasattr(self, "annuity_account") else None)!s})')
