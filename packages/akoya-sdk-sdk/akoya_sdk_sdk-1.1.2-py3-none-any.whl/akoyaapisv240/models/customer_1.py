# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoyaapisv240.api_helper import APIHelper
from akoyaapisv240.models.account_8 import Account8
from akoyaapisv240.models.address_2 import Address2
from akoyaapisv240.models.name import Name
from akoyaapisv240.models.telephone import Telephone


class Customer1(object):

    """Implementation of the 'Customer1' model.

    Represents a customer (end-user)

    Attributes:
        customer_id (str): Long-term persistent identity of the end-user. This
            identity must be unique to the owning institution
        name (Name): The end-user's name
        addresses (List[Address2]): An array of the end-user's physical mail
            addresses
        telephones (List[Telephone]): The model property of type
            List[Telephone].
        email (List[str]): An array of the end-user's electronic mail addresses
        accounts (List[Account8]): List of accounts related to this end-user

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "customer_id": 'customerId',
        "name": 'name',
        "addresses": 'addresses',
        "telephones": 'telephones',
        "email": 'email',
        "accounts": 'accounts'
    }

    _optionals = [
        'customer_id',
        'name',
        'addresses',
        'telephones',
        'email',
        'accounts',
    ]

    def __init__(self,
                 customer_id=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 addresses=APIHelper.SKIP,
                 telephones=APIHelper.SKIP,
                 email=APIHelper.SKIP,
                 accounts=APIHelper.SKIP):
        """Constructor for the Customer1 class"""

        # Initialize members of the class
        if customer_id is not APIHelper.SKIP:
            self.customer_id = customer_id 
        if name is not APIHelper.SKIP:
            self.name = name 
        if addresses is not APIHelper.SKIP:
            self.addresses = addresses 
        if telephones is not APIHelper.SKIP:
            self.telephones = telephones 
        if email is not APIHelper.SKIP:
            self.email = email 
        if accounts is not APIHelper.SKIP:
            self.accounts = accounts 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        customer_id = dictionary.get("customerId") if dictionary.get("customerId") else APIHelper.SKIP
        name = Name.from_dictionary(dictionary.get('name')) if 'name' in dictionary.keys() else APIHelper.SKIP
        addresses = None
        if dictionary.get('addresses') is not None:
            addresses = [Address2.from_dictionary(x) for x in dictionary.get('addresses')]
        else:
            addresses = APIHelper.SKIP
        telephones = None
        if dictionary.get('telephones') is not None:
            telephones = [Telephone.from_dictionary(x) for x in dictionary.get('telephones')]
        else:
            telephones = APIHelper.SKIP
        email = dictionary.get("email") if dictionary.get("email") else APIHelper.SKIP
        accounts = None
        if dictionary.get('accounts') is not None:
            accounts = [Account8.from_dictionary(x) for x in dictionary.get('accounts')]
        else:
            accounts = APIHelper.SKIP
        # Return an object of this model
        return cls(customer_id,
                   name,
                   addresses,
                   telephones,
                   email,
                   accounts)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'customer_id={(self.customer_id if hasattr(self, "customer_id") else None)!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'addresses={(self.addresses if hasattr(self, "addresses") else None)!r}, '
                f'telephones={(self.telephones if hasattr(self, "telephones") else None)!r}, '
                f'email={(self.email if hasattr(self, "email") else None)!r}, '
                f'accounts={(self.accounts if hasattr(self, "accounts") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'customer_id={(self.customer_id if hasattr(self, "customer_id") else None)!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'addresses={(self.addresses if hasattr(self, "addresses") else None)!s}, '
                f'telephones={(self.telephones if hasattr(self, "telephones") else None)!s}, '
                f'email={(self.email if hasattr(self, "email") else None)!s}, '
                f'accounts={(self.accounts if hasattr(self, "accounts") else None)!s})')
