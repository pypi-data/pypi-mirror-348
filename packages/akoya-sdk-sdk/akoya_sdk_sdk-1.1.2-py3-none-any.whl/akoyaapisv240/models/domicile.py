# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoyaapisv240.api_helper import APIHelper


class Domicile(object):

    """Implementation of the 'Domicile' model.

    The country and region of the business customer's location

    Attributes:
        region (str): The model property of type str.
        country (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "region": 'region',
        "country": 'country'
    }

    _optionals = [
        'region',
        'country',
    ]

    def __init__(self,
                 region=APIHelper.SKIP,
                 country=APIHelper.SKIP):
        """Constructor for the Domicile class"""

        # Initialize members of the class
        if region is not APIHelper.SKIP:
            self.region = region 
        if country is not APIHelper.SKIP:
            self.country = country 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        region = dictionary.get("region") if dictionary.get("region") else APIHelper.SKIP
        country = dictionary.get("country") if dictionary.get("country") else APIHelper.SKIP
        # Return an object of this model
        return cls(region,
                   country)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'region={(self.region if hasattr(self, "region") else None)!r}, '
                f'country={(self.country if hasattr(self, "country") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'region={(self.region if hasattr(self, "region") else None)!s}, '
                f'country={(self.country if hasattr(self, "country") else None)!s})')
