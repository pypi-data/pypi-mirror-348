# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoyaapisv240.api_helper import APIHelper
from akoyaapisv240.models.deposit_transaction import DepositTransaction
from akoyaapisv240.models.insurance_transaction import InsuranceTransaction
from akoyaapisv240.models.investment_transaction import InvestmentTransaction
from akoyaapisv240.models.loan_transaction import LoanTransaction
from akoyaapisv240.models.loc_transaction import LocTransaction


class Transaction15(object):

    """Implementation of the 'Transaction15' model.

    Attributes:
        deposit_transaction (DepositTransaction): Deposit transaction
        loan_transaction (LoanTransaction): Loan Transaction
        loc_transaction (LocTransaction): A line of credit transaction of type
        investment_transaction (InvestmentTransaction): Investment Transactions
        insurance_transaction (InsuranceTransaction): Insurance transactions

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "deposit_transaction": 'depositTransaction',
        "loan_transaction": 'loanTransaction',
        "loc_transaction": 'locTransaction',
        "investment_transaction": 'investmentTransaction',
        "insurance_transaction": 'insuranceTransaction'
    }

    _optionals = [
        'deposit_transaction',
        'loan_transaction',
        'loc_transaction',
        'investment_transaction',
        'insurance_transaction',
    ]

    def __init__(self,
                 deposit_transaction=APIHelper.SKIP,
                 loan_transaction=APIHelper.SKIP,
                 loc_transaction=APIHelper.SKIP,
                 investment_transaction=APIHelper.SKIP,
                 insurance_transaction=APIHelper.SKIP):
        """Constructor for the Transaction15 class"""

        # Initialize members of the class
        if deposit_transaction is not APIHelper.SKIP:
            self.deposit_transaction = deposit_transaction 
        if loan_transaction is not APIHelper.SKIP:
            self.loan_transaction = loan_transaction 
        if loc_transaction is not APIHelper.SKIP:
            self.loc_transaction = loc_transaction 
        if investment_transaction is not APIHelper.SKIP:
            self.investment_transaction = investment_transaction 
        if insurance_transaction is not APIHelper.SKIP:
            self.insurance_transaction = insurance_transaction 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        deposit_transaction = DepositTransaction.from_dictionary(dictionary.get('depositTransaction')) if 'depositTransaction' in dictionary.keys() else APIHelper.SKIP
        loan_transaction = LoanTransaction.from_dictionary(dictionary.get('loanTransaction')) if 'loanTransaction' in dictionary.keys() else APIHelper.SKIP
        loc_transaction = LocTransaction.from_dictionary(dictionary.get('locTransaction')) if 'locTransaction' in dictionary.keys() else APIHelper.SKIP
        investment_transaction = InvestmentTransaction.from_dictionary(dictionary.get('investmentTransaction')) if 'investmentTransaction' in dictionary.keys() else APIHelper.SKIP
        insurance_transaction = InsuranceTransaction.from_dictionary(dictionary.get('insuranceTransaction')) if 'insuranceTransaction' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(deposit_transaction,
                   loan_transaction,
                   loc_transaction,
                   investment_transaction,
                   insurance_transaction)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'deposit_transaction={(self.deposit_transaction if hasattr(self, "deposit_transaction") else None)!r}, '
                f'loan_transaction={(self.loan_transaction if hasattr(self, "loan_transaction") else None)!r}, '
                f'loc_transaction={(self.loc_transaction if hasattr(self, "loc_transaction") else None)!r}, '
                f'investment_transaction={(self.investment_transaction if hasattr(self, "investment_transaction") else None)!r}, '
                f'insurance_transaction={(self.insurance_transaction if hasattr(self, "insurance_transaction") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'deposit_transaction={(self.deposit_transaction if hasattr(self, "deposit_transaction") else None)!s}, '
                f'loan_transaction={(self.loan_transaction if hasattr(self, "loan_transaction") else None)!s}, '
                f'loc_transaction={(self.loc_transaction if hasattr(self, "loc_transaction") else None)!s}, '
                f'investment_transaction={(self.investment_transaction if hasattr(self, "investment_transaction") else None)!s}, '
                f'insurance_transaction={(self.insurance_transaction if hasattr(self, "insurance_transaction") else None)!s})')
