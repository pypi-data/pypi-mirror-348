# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoyaapisv240.api_helper import APIHelper
from akoyaapisv240.models.currency_entity import CurrencyEntity


class InvestmentBalanceList(object):

    """Implementation of the 'Investment Balance List' model.

    Attributes:
        balance_name (str): Name of the balance.
        balance_description (str): Description of balance.
        balance_type (BalanceType1Enum): The type of an investment balance.
            AMOUNT or PERCENTAGE.
        balance_value (float): Value of balance name.
        balance_date (datetime): Date as of this balance.
        currency (CurrencyEntity): Indicates the currency code used by the
            account. May also include currency rate.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "balance_name": 'balanceName',
        "balance_description": 'balanceDescription',
        "balance_type": 'balanceType',
        "balance_value": 'balanceValue',
        "balance_date": 'balanceDate',
        "currency": 'currency'
    }

    _optionals = [
        'balance_name',
        'balance_description',
        'balance_type',
        'balance_value',
        'balance_date',
        'currency',
    ]

    def __init__(self,
                 balance_name=APIHelper.SKIP,
                 balance_description=APIHelper.SKIP,
                 balance_type=APIHelper.SKIP,
                 balance_value=APIHelper.SKIP,
                 balance_date=APIHelper.SKIP,
                 currency=APIHelper.SKIP):
        """Constructor for the InvestmentBalanceList class"""

        # Initialize members of the class
        if balance_name is not APIHelper.SKIP:
            self.balance_name = balance_name 
        if balance_description is not APIHelper.SKIP:
            self.balance_description = balance_description 
        if balance_type is not APIHelper.SKIP:
            self.balance_type = balance_type 
        if balance_value is not APIHelper.SKIP:
            self.balance_value = balance_value 
        if balance_date is not APIHelper.SKIP:
            self.balance_date = APIHelper.apply_datetime_converter(balance_date, APIHelper.RFC3339DateTime) if balance_date else None 
        if currency is not APIHelper.SKIP:
            self.currency = currency 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        balance_name = dictionary.get("balanceName") if dictionary.get("balanceName") else APIHelper.SKIP
        balance_description = dictionary.get("balanceDescription") if dictionary.get("balanceDescription") else APIHelper.SKIP
        balance_type = dictionary.get("balanceType") if dictionary.get("balanceType") else APIHelper.SKIP
        balance_value = dictionary.get("balanceValue") if dictionary.get("balanceValue") else APIHelper.SKIP
        balance_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("balanceDate")).datetime if dictionary.get("balanceDate") else APIHelper.SKIP
        currency = CurrencyEntity.from_dictionary(dictionary.get('currency')) if 'currency' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(balance_name,
                   balance_description,
                   balance_type,
                   balance_value,
                   balance_date,
                   currency)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'balance_name={(self.balance_name if hasattr(self, "balance_name") else None)!r}, '
                f'balance_description={(self.balance_description if hasattr(self, "balance_description") else None)!r}, '
                f'balance_type={(self.balance_type if hasattr(self, "balance_type") else None)!r}, '
                f'balance_value={(self.balance_value if hasattr(self, "balance_value") else None)!r}, '
                f'balance_date={(self.balance_date if hasattr(self, "balance_date") else None)!r}, '
                f'currency={(self.currency if hasattr(self, "currency") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'balance_name={(self.balance_name if hasattr(self, "balance_name") else None)!s}, '
                f'balance_description={(self.balance_description if hasattr(self, "balance_description") else None)!s}, '
                f'balance_type={(self.balance_type if hasattr(self, "balance_type") else None)!s}, '
                f'balance_value={(self.balance_value if hasattr(self, "balance_value") else None)!s}, '
                f'balance_date={(self.balance_date if hasattr(self, "balance_date") else None)!s}, '
                f'currency={(self.currency if hasattr(self, "currency") else None)!s})')
