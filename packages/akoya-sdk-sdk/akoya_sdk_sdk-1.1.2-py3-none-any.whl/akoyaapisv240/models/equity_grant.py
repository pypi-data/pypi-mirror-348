# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoyaapisv240.api_helper import APIHelper
from akoyaapisv240.models.vesting import Vesting


class EquityGrant(object):

    """Implementation of the 'equityGrant' model.

    Attributes:
        grant_id (str): Unique identifier of grant
        grant_date (datetime): Date grant was given
        grant_type (str): Type of grant
        seq_num (float): The model property of type float.
        grant_price (float): Grant price
        grant_currency_code (str): Indicates the currency of grant USD vs AUD
            vs EUR etc (for share awards, you will still get a USD)
        quantity_granted (float): Number of options
        quantity_outstanding (float): The model property of type float.
        expiration_date (datetime): Date grant expires
        vestings (List[Vesting]): An array of equityGrant vestings. Provides
            the past, present, and future vesting schedule and percentages.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "grant_id": 'grantId',
        "grant_date": 'grantDate',
        "grant_type": 'grantType',
        "seq_num": 'seqNum',
        "grant_price": 'grantPrice',
        "grant_currency_code": 'grantCurrencyCode',
        "quantity_granted": 'quantityGranted',
        "quantity_outstanding": 'quantityOutstanding',
        "expiration_date": 'expirationDate',
        "vestings": 'vestings'
    }

    _optionals = [
        'grant_id',
        'grant_date',
        'grant_type',
        'seq_num',
        'grant_price',
        'grant_currency_code',
        'quantity_granted',
        'quantity_outstanding',
        'expiration_date',
        'vestings',
    ]

    def __init__(self,
                 grant_id=APIHelper.SKIP,
                 grant_date=APIHelper.SKIP,
                 grant_type=APIHelper.SKIP,
                 seq_num=APIHelper.SKIP,
                 grant_price=APIHelper.SKIP,
                 grant_currency_code=APIHelper.SKIP,
                 quantity_granted=APIHelper.SKIP,
                 quantity_outstanding=APIHelper.SKIP,
                 expiration_date=APIHelper.SKIP,
                 vestings=APIHelper.SKIP):
        """Constructor for the EquityGrant class"""

        # Initialize members of the class
        if grant_id is not APIHelper.SKIP:
            self.grant_id = grant_id 
        if grant_date is not APIHelper.SKIP:
            self.grant_date = APIHelper.apply_datetime_converter(grant_date, APIHelper.RFC3339DateTime) if grant_date else None 
        if grant_type is not APIHelper.SKIP:
            self.grant_type = grant_type 
        if seq_num is not APIHelper.SKIP:
            self.seq_num = seq_num 
        if grant_price is not APIHelper.SKIP:
            self.grant_price = grant_price 
        if grant_currency_code is not APIHelper.SKIP:
            self.grant_currency_code = grant_currency_code 
        if quantity_granted is not APIHelper.SKIP:
            self.quantity_granted = quantity_granted 
        if quantity_outstanding is not APIHelper.SKIP:
            self.quantity_outstanding = quantity_outstanding 
        if expiration_date is not APIHelper.SKIP:
            self.expiration_date = APIHelper.apply_datetime_converter(expiration_date, APIHelper.RFC3339DateTime) if expiration_date else None 
        if vestings is not APIHelper.SKIP:
            self.vestings = vestings 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        grant_id = dictionary.get("grantId") if dictionary.get("grantId") else APIHelper.SKIP
        grant_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("grantDate")).datetime if dictionary.get("grantDate") else APIHelper.SKIP
        grant_type = dictionary.get("grantType") if dictionary.get("grantType") else APIHelper.SKIP
        seq_num = dictionary.get("seqNum") if dictionary.get("seqNum") else APIHelper.SKIP
        grant_price = dictionary.get("grantPrice") if dictionary.get("grantPrice") else APIHelper.SKIP
        grant_currency_code = dictionary.get("grantCurrencyCode") if dictionary.get("grantCurrencyCode") else APIHelper.SKIP
        quantity_granted = dictionary.get("quantityGranted") if dictionary.get("quantityGranted") else APIHelper.SKIP
        quantity_outstanding = dictionary.get("quantityOutstanding") if dictionary.get("quantityOutstanding") else APIHelper.SKIP
        expiration_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("expirationDate")).datetime if dictionary.get("expirationDate") else APIHelper.SKIP
        vestings = None
        if dictionary.get('vestings') is not None:
            vestings = [Vesting.from_dictionary(x) for x in dictionary.get('vestings')]
        else:
            vestings = APIHelper.SKIP
        # Return an object of this model
        return cls(grant_id,
                   grant_date,
                   grant_type,
                   seq_num,
                   grant_price,
                   grant_currency_code,
                   quantity_granted,
                   quantity_outstanding,
                   expiration_date,
                   vestings)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'grant_id={(self.grant_id if hasattr(self, "grant_id") else None)!r}, '
                f'grant_date={(self.grant_date if hasattr(self, "grant_date") else None)!r}, '
                f'grant_type={(self.grant_type if hasattr(self, "grant_type") else None)!r}, '
                f'seq_num={(self.seq_num if hasattr(self, "seq_num") else None)!r}, '
                f'grant_price={(self.grant_price if hasattr(self, "grant_price") else None)!r}, '
                f'grant_currency_code={(self.grant_currency_code if hasattr(self, "grant_currency_code") else None)!r}, '
                f'quantity_granted={(self.quantity_granted if hasattr(self, "quantity_granted") else None)!r}, '
                f'quantity_outstanding={(self.quantity_outstanding if hasattr(self, "quantity_outstanding") else None)!r}, '
                f'expiration_date={(self.expiration_date if hasattr(self, "expiration_date") else None)!r}, '
                f'vestings={(self.vestings if hasattr(self, "vestings") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'grant_id={(self.grant_id if hasattr(self, "grant_id") else None)!s}, '
                f'grant_date={(self.grant_date if hasattr(self, "grant_date") else None)!s}, '
                f'grant_type={(self.grant_type if hasattr(self, "grant_type") else None)!s}, '
                f'seq_num={(self.seq_num if hasattr(self, "seq_num") else None)!s}, '
                f'grant_price={(self.grant_price if hasattr(self, "grant_price") else None)!s}, '
                f'grant_currency_code={(self.grant_currency_code if hasattr(self, "grant_currency_code") else None)!s}, '
                f'quantity_granted={(self.quantity_granted if hasattr(self, "quantity_granted") else None)!s}, '
                f'quantity_outstanding={(self.quantity_outstanding if hasattr(self, "quantity_outstanding") else None)!s}, '
                f'expiration_date={(self.expiration_date if hasattr(self, "expiration_date") else None)!s}, '
                f'vestings={(self.vestings if hasattr(self, "vestings") else None)!s})')
