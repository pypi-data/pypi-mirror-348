# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoyaapisv240.api_helper import APIHelper
from akoyaapisv240.models.deposit_transaction import DepositTransaction


class Transaction1(object):

    """Implementation of the 'Transaction1' model.

    Attributes:
        deposit_transaction (DepositTransaction): Deposit transaction

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "deposit_transaction": 'depositTransaction'
    }

    _optionals = [
        'deposit_transaction',
    ]

    def __init__(self,
                 deposit_transaction=APIHelper.SKIP):
        """Constructor for the Transaction1 class"""

        # Initialize members of the class
        if deposit_transaction is not APIHelper.SKIP:
            self.deposit_transaction = deposit_transaction 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        deposit_transaction = DepositTransaction.from_dictionary(dictionary.get('depositTransaction')) if 'depositTransaction' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(deposit_transaction)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'deposit_transaction={(self.deposit_transaction if hasattr(self, "deposit_transaction") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'deposit_transaction={(self.deposit_transaction if hasattr(self, "deposit_transaction") else None)!s})')
