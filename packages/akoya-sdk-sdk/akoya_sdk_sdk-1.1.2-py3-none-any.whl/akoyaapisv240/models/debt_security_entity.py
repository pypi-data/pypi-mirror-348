# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoyaapisv240.api_helper import APIHelper


class DebtSecurityEntity(object):

    """Implementation of the 'DebtSecurity Entity' model.

    Information about the debt security specific to the type of security

    Attributes:
        par_value (float): Par value amount
        debt_type (DebtTypeEnum): Debt type
        debt_class (DebtClassEnum): Classification of debt
        coupon_rate (float): Bond coupon rate for next closest call date
        coupon_date (datetime): Maturity date for next coupon
        coupon_mature_frequency (CouponMatureFrequencyEnum): When coupons
            mature
        call_price (float): Bond call price
        yield_to_call (float): Yield to next call
        call_date (datetime): Next call date
        call_type (CallTypeEnum): Type of next call
        yield_to_maturity (float): Yield to maturity
        bond_maturity_date (datetime): Bond Maturity date

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "par_value": 'parValue',
        "debt_type": 'debtType',
        "debt_class": 'debtClass',
        "coupon_rate": 'couponRate',
        "coupon_date": 'couponDate',
        "coupon_mature_frequency": 'couponMatureFrequency',
        "call_price": 'callPrice',
        "yield_to_call": 'yieldToCall',
        "call_date": 'callDate',
        "call_type": 'callType',
        "yield_to_maturity": 'yieldToMaturity',
        "bond_maturity_date": 'bondMaturityDate'
    }

    _optionals = [
        'par_value',
        'debt_type',
        'debt_class',
        'coupon_rate',
        'coupon_date',
        'coupon_mature_frequency',
        'call_price',
        'yield_to_call',
        'call_date',
        'call_type',
        'yield_to_maturity',
        'bond_maturity_date',
    ]

    def __init__(self,
                 par_value=APIHelper.SKIP,
                 debt_type=APIHelper.SKIP,
                 debt_class=APIHelper.SKIP,
                 coupon_rate=APIHelper.SKIP,
                 coupon_date=APIHelper.SKIP,
                 coupon_mature_frequency=APIHelper.SKIP,
                 call_price=APIHelper.SKIP,
                 yield_to_call=APIHelper.SKIP,
                 call_date=APIHelper.SKIP,
                 call_type=APIHelper.SKIP,
                 yield_to_maturity=APIHelper.SKIP,
                 bond_maturity_date=APIHelper.SKIP):
        """Constructor for the DebtSecurityEntity class"""

        # Initialize members of the class
        if par_value is not APIHelper.SKIP:
            self.par_value = par_value 
        if debt_type is not APIHelper.SKIP:
            self.debt_type = debt_type 
        if debt_class is not APIHelper.SKIP:
            self.debt_class = debt_class 
        if coupon_rate is not APIHelper.SKIP:
            self.coupon_rate = coupon_rate 
        if coupon_date is not APIHelper.SKIP:
            self.coupon_date = APIHelper.apply_datetime_converter(coupon_date, APIHelper.RFC3339DateTime) if coupon_date else None 
        if coupon_mature_frequency is not APIHelper.SKIP:
            self.coupon_mature_frequency = coupon_mature_frequency 
        if call_price is not APIHelper.SKIP:
            self.call_price = call_price 
        if yield_to_call is not APIHelper.SKIP:
            self.yield_to_call = yield_to_call 
        if call_date is not APIHelper.SKIP:
            self.call_date = APIHelper.apply_datetime_converter(call_date, APIHelper.RFC3339DateTime) if call_date else None 
        if call_type is not APIHelper.SKIP:
            self.call_type = call_type 
        if yield_to_maturity is not APIHelper.SKIP:
            self.yield_to_maturity = yield_to_maturity 
        if bond_maturity_date is not APIHelper.SKIP:
            self.bond_maturity_date = APIHelper.apply_datetime_converter(bond_maturity_date, APIHelper.RFC3339DateTime) if bond_maturity_date else None 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        par_value = dictionary.get("parValue") if dictionary.get("parValue") else APIHelper.SKIP
        debt_type = dictionary.get("debtType") if dictionary.get("debtType") else APIHelper.SKIP
        debt_class = dictionary.get("debtClass") if dictionary.get("debtClass") else APIHelper.SKIP
        coupon_rate = dictionary.get("couponRate") if dictionary.get("couponRate") else APIHelper.SKIP
        coupon_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("couponDate")).datetime if dictionary.get("couponDate") else APIHelper.SKIP
        coupon_mature_frequency = dictionary.get("couponMatureFrequency") if dictionary.get("couponMatureFrequency") else APIHelper.SKIP
        call_price = dictionary.get("callPrice") if dictionary.get("callPrice") else APIHelper.SKIP
        yield_to_call = dictionary.get("yieldToCall") if dictionary.get("yieldToCall") else APIHelper.SKIP
        call_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("callDate")).datetime if dictionary.get("callDate") else APIHelper.SKIP
        call_type = dictionary.get("callType") if dictionary.get("callType") else APIHelper.SKIP
        yield_to_maturity = dictionary.get("yieldToMaturity") if dictionary.get("yieldToMaturity") else APIHelper.SKIP
        bond_maturity_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("bondMaturityDate")).datetime if dictionary.get("bondMaturityDate") else APIHelper.SKIP
        # Return an object of this model
        return cls(par_value,
                   debt_type,
                   debt_class,
                   coupon_rate,
                   coupon_date,
                   coupon_mature_frequency,
                   call_price,
                   yield_to_call,
                   call_date,
                   call_type,
                   yield_to_maturity,
                   bond_maturity_date)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'par_value={(self.par_value if hasattr(self, "par_value") else None)!r}, '
                f'debt_type={(self.debt_type if hasattr(self, "debt_type") else None)!r}, '
                f'debt_class={(self.debt_class if hasattr(self, "debt_class") else None)!r}, '
                f'coupon_rate={(self.coupon_rate if hasattr(self, "coupon_rate") else None)!r}, '
                f'coupon_date={(self.coupon_date if hasattr(self, "coupon_date") else None)!r}, '
                f'coupon_mature_frequency={(self.coupon_mature_frequency if hasattr(self, "coupon_mature_frequency") else None)!r}, '
                f'call_price={(self.call_price if hasattr(self, "call_price") else None)!r}, '
                f'yield_to_call={(self.yield_to_call if hasattr(self, "yield_to_call") else None)!r}, '
                f'call_date={(self.call_date if hasattr(self, "call_date") else None)!r}, '
                f'call_type={(self.call_type if hasattr(self, "call_type") else None)!r}, '
                f'yield_to_maturity={(self.yield_to_maturity if hasattr(self, "yield_to_maturity") else None)!r}, '
                f'bond_maturity_date={(self.bond_maturity_date if hasattr(self, "bond_maturity_date") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'par_value={(self.par_value if hasattr(self, "par_value") else None)!s}, '
                f'debt_type={(self.debt_type if hasattr(self, "debt_type") else None)!s}, '
                f'debt_class={(self.debt_class if hasattr(self, "debt_class") else None)!s}, '
                f'coupon_rate={(self.coupon_rate if hasattr(self, "coupon_rate") else None)!s}, '
                f'coupon_date={(self.coupon_date if hasattr(self, "coupon_date") else None)!s}, '
                f'coupon_mature_frequency={(self.coupon_mature_frequency if hasattr(self, "coupon_mature_frequency") else None)!s}, '
                f'call_price={(self.call_price if hasattr(self, "call_price") else None)!s}, '
                f'yield_to_call={(self.yield_to_call if hasattr(self, "yield_to_call") else None)!s}, '
                f'call_date={(self.call_date if hasattr(self, "call_date") else None)!s}, '
                f'call_type={(self.call_type if hasattr(self, "call_type") else None)!s}, '
                f'yield_to_maturity={(self.yield_to_maturity if hasattr(self, "yield_to_maturity") else None)!s}, '
                f'bond_maturity_date={(self.bond_maturity_date if hasattr(self, "bond_maturity_date") else None)!s})')
