# -*- coding: utf-8 -*-

"""
akoyaapisv240

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from akoyaapisv240.api_helper import APIHelper


class StateTaxWithholding2(object):

    """Implementation of the 'State Tax Withholding2' model.

    Amount of state income tax withheld

    Attributes:
        tax_withheld (float): Amount of state income tax withheld
        tax_id (str): Filer's state tax id
        income (float): Income amount for state tax purposes

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "tax_withheld": 'taxWithheld',
        "tax_id": 'taxId',
        "income": 'income'
    }

    _optionals = [
        'tax_withheld',
        'tax_id',
        'income',
    ]

    def __init__(self,
                 tax_withheld=APIHelper.SKIP,
                 tax_id=APIHelper.SKIP,
                 income=APIHelper.SKIP):
        """Constructor for the StateTaxWithholding2 class"""

        # Initialize members of the class
        if tax_withheld is not APIHelper.SKIP:
            self.tax_withheld = tax_withheld 
        if tax_id is not APIHelper.SKIP:
            self.tax_id = tax_id 
        if income is not APIHelper.SKIP:
            self.income = income 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        tax_withheld = dictionary.get("taxWithheld") if dictionary.get("taxWithheld") else APIHelper.SKIP
        tax_id = dictionary.get("taxId") if dictionary.get("taxId") else APIHelper.SKIP
        income = dictionary.get("income") if dictionary.get("income") else APIHelper.SKIP
        # Return an object of this model
        return cls(tax_withheld,
                   tax_id,
                   income)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'tax_withheld={(self.tax_withheld if hasattr(self, "tax_withheld") else None)!r}, '
                f'tax_id={(self.tax_id if hasattr(self, "tax_id") else None)!r}, '
                f'income={(self.income if hasattr(self, "income") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'tax_withheld={(self.tax_withheld if hasattr(self, "tax_withheld") else None)!s}, '
                f'tax_id={(self.tax_id if hasattr(self, "tax_id") else None)!s}, '
                f'income={(self.income if hasattr(self, "income") else None)!s})')
