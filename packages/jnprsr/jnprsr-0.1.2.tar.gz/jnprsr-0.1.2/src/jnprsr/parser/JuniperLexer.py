# Generated from JuniperLexer.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,13,142,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,5,5,67,8,5,10,5,12,5,70,9,
        5,1,5,4,5,73,8,5,11,5,12,5,74,1,5,1,5,1,6,1,6,1,6,1,6,5,6,83,8,6,
        10,6,12,6,86,9,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,
        1,10,1,11,1,11,1,11,4,11,104,8,11,11,11,12,11,105,3,11,108,8,11,
        1,12,4,12,111,8,12,11,12,12,12,112,1,12,1,12,1,13,1,13,1,14,1,14,
        1,15,1,15,5,15,123,8,15,10,15,12,15,126,9,15,1,15,1,15,1,16,1,16,
        5,16,132,8,16,10,16,12,16,135,9,16,1,16,1,16,1,17,1,17,1,18,1,18,
        1,84,0,19,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,0,29,0,31,0,33,0,35,0,37,0,1,0,6,2,0,33,33,35,35,2,0,
        10,10,13,13,1,0,41,41,1,0,34,34,3,0,9,10,12,13,32,32,10,0,9,10,12,
        13,32,32,34,35,40,41,59,59,91,91,93,93,123,123,125,125,144,0,1,1,
        0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
        0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,
        0,0,23,1,0,0,0,0,25,1,0,0,0,1,39,1,0,0,0,3,48,1,0,0,0,5,50,1,0,0,
        0,7,52,1,0,0,0,9,54,1,0,0,0,11,64,1,0,0,0,13,78,1,0,0,0,15,92,1,
        0,0,0,17,94,1,0,0,0,19,96,1,0,0,0,21,98,1,0,0,0,23,107,1,0,0,0,25,
        110,1,0,0,0,27,116,1,0,0,0,29,118,1,0,0,0,31,120,1,0,0,0,33,129,
        1,0,0,0,35,138,1,0,0,0,37,140,1,0,0,0,39,40,5,114,0,0,40,41,5,101,
        0,0,41,42,5,112,0,0,42,43,5,108,0,0,43,44,5,97,0,0,44,45,5,99,0,
        0,45,46,5,101,0,0,46,47,5,58,0,0,47,2,1,0,0,0,48,49,5,125,0,0,49,
        4,1,0,0,0,50,51,5,93,0,0,51,6,1,0,0,0,52,53,5,41,0,0,53,8,1,0,0,
        0,54,55,5,105,0,0,55,56,5,110,0,0,56,57,5,97,0,0,57,58,5,99,0,0,
        58,59,5,116,0,0,59,60,5,105,0,0,60,61,5,118,0,0,61,62,5,101,0,0,
        62,63,5,58,0,0,63,10,1,0,0,0,64,68,7,0,0,0,65,67,3,29,14,0,66,65,
        1,0,0,0,67,70,1,0,0,0,68,66,1,0,0,0,68,69,1,0,0,0,69,72,1,0,0,0,
        70,68,1,0,0,0,71,73,3,27,13,0,72,71,1,0,0,0,73,74,1,0,0,0,74,72,
        1,0,0,0,74,75,1,0,0,0,75,76,1,0,0,0,76,77,6,5,0,0,77,12,1,0,0,0,
        78,79,5,47,0,0,79,80,5,42,0,0,80,84,1,0,0,0,81,83,9,0,0,0,82,81,
        1,0,0,0,83,86,1,0,0,0,84,85,1,0,0,0,84,82,1,0,0,0,85,87,1,0,0,0,
        86,84,1,0,0,0,87,88,5,42,0,0,88,89,5,47,0,0,89,90,1,0,0,0,90,91,
        6,6,0,0,91,14,1,0,0,0,92,93,5,123,0,0,93,16,1,0,0,0,94,95,5,91,0,
        0,95,18,1,0,0,0,96,97,5,40,0,0,97,20,1,0,0,0,98,99,5,59,0,0,99,22,
        1,0,0,0,100,108,3,33,16,0,101,108,3,31,15,0,102,104,3,37,18,0,103,
        102,1,0,0,0,104,105,1,0,0,0,105,103,1,0,0,0,105,106,1,0,0,0,106,
        108,1,0,0,0,107,100,1,0,0,0,107,101,1,0,0,0,107,103,1,0,0,0,108,
        24,1,0,0,0,109,111,3,35,17,0,110,109,1,0,0,0,111,112,1,0,0,0,112,
        110,1,0,0,0,112,113,1,0,0,0,113,114,1,0,0,0,114,115,6,12,0,0,115,
        26,1,0,0,0,116,117,7,1,0,0,117,28,1,0,0,0,118,119,8,1,0,0,119,30,
        1,0,0,0,120,124,5,40,0,0,121,123,8,2,0,0,122,121,1,0,0,0,123,126,
        1,0,0,0,124,122,1,0,0,0,124,125,1,0,0,0,125,127,1,0,0,0,126,124,
        1,0,0,0,127,128,5,41,0,0,128,32,1,0,0,0,129,133,5,34,0,0,130,132,
        8,3,0,0,131,130,1,0,0,0,132,135,1,0,0,0,133,131,1,0,0,0,133,134,
        1,0,0,0,134,136,1,0,0,0,135,133,1,0,0,0,136,137,5,34,0,0,137,34,
        1,0,0,0,138,139,7,4,0,0,139,36,1,0,0,0,140,141,8,5,0,0,141,38,1,
        0,0,0,9,0,68,74,84,105,107,112,124,133,1,0,1,0
    ]

class JuniperLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    REPLACE = 1
    CLOSE_BRACE = 2
    CLOSE_BRACKET = 3
    CLOSE_PAREN = 4
    INACTIVE = 5
    LINE_COMMENT = 6
    MULTILINE_COMMENT = 7
    OPEN_BRACE = 8
    OPEN_BRACKET = 9
    OPEN_PAREN = 10
    SEMICOLON = 11
    WORD = 12
    WS = 13

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'replace:'", "'}'", "']'", "')'", "'inactive:'", "'{'", "'['", 
            "'('", "';'" ]

    symbolicNames = [ "<INVALID>",
            "REPLACE", "CLOSE_BRACE", "CLOSE_BRACKET", "CLOSE_PAREN", "INACTIVE", 
            "LINE_COMMENT", "MULTILINE_COMMENT", "OPEN_BRACE", "OPEN_BRACKET", 
            "OPEN_PAREN", "SEMICOLON", "WORD", "WS" ]

    ruleNames = [ "REPLACE", "CLOSE_BRACE", "CLOSE_BRACKET", "CLOSE_PAREN", 
                  "INACTIVE", "LINE_COMMENT", "MULTILINE_COMMENT", "OPEN_BRACE", 
                  "OPEN_BRACKET", "OPEN_PAREN", "SEMICOLON", "WORD", "WS", 
                  "F_NewlineChar", "F_NonNewlineChar", "F_ParenString", 
                  "F_QuotedString", "F_WhitespaceChar", "F_WordChar" ]

    grammarFileName = "JuniperLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


