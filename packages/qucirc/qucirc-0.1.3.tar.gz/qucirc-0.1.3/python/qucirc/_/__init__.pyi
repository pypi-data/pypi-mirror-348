# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import typing
from . import ops

class Bits:
    r"""
    A structure encapsulating a classical wire characterized by an identifier and a bitwidth.
    
    This type represents a classical wire by wrapping a string label with its corresponding number of bits, facilitating its use in contexts where explicit bit specifications and identifier management are required.
    """
    ...

class Circuit:
    r"""
    A structure representing a quantum circuit with its associated components is defined.
    
    This type organizes the circuit’s state by maintaining a vector of wires, a directed acyclic graph where nodes correspond to quantum gates and edges represent connections via wire indices, and a vector that tracks the current output node for each input wire.
    """
    wires: builtins.list[typing.Any]
    r"""
    Returns a vector containing cloned boxed wire trait objects from the circuit's internal collection.
    
    This accessor function retrieves all wires by cloning the internal list, ensuring that the caller receives an independent copy of the wires for inspection or further manipulation.
    """
    def __new__(cls, qubits:builtins.int=0) -> Circuit:
        r"""
        Creates a new circuit instance with a specified number of qubits.
        
        
        Initializes a circuit by delegating to the constructor that sets up the internal qubit wires, allowing the user to immediately work with a circuit configured with the desired number of qubits.
        """
    def new_wire(self, wire:typing.Any) -> builtins.int:
        r"""
        Adds a new wire to the circuit and returns its index.
        This method takes ownership of a boxed wire trait object, appends it to the internal collection of wires, and updates the output tracking vector by inserting a corresponding placeholder.
        """
    def get_wire(self, name:builtins.str) -> typing.Optional[builtins.int]:
        r"""
        Retrieves the index of a wire based on its string representation.
        
        
        Searches through the internal collection of wires and returns the position of the first wire whose debug format matches the provided name, returning None if no match is found.
        """
    def new_qubit(self, name:builtins.str='') -> builtins.int:
        r"""
        Creates and registers a new qubit wire within the circuit.
        
        This function accepts a mutable string for the qubit's name and, if the provided name is empty, automatically generates a unique identifier.
        It appends a new qubit to the circuit's collection of wires and returns the index corresponding to the newly added wire.
        """
    def new_qubits(self, *args) -> builtins.list[builtins.int]:
        r"""
        Creates several new qubit wires from a vector of names and returns their indices.
        This method iterates over each provided name, cloning it as necessary, and calls the routine responsible for initializing a new qubit wire for each entry; the resulting indices are then collected and returned as a vector.
        """
    def new_qubits_n(self, count:builtins.int=1, name:builtins.str='') -> builtins.list[builtins.int]:
        r"""
        Creates a set of new qubits and returns their indices as a vector.
        
        This method accepts a count and a name, and for each qubit to be created, it delegates to the single qubit creation function.
        If the provided name is empty or equals "q", it automatically generates a unique identifier; otherwise, it uses the provided name for every qubit created.
        """
    def new_zerostate(self) -> builtins.int:
        r"""
        Constructs and appends a new zero state wire to the circuit, returning the index of the added wire.
         
        
        Adds a zero state wire by inserting it into the circuit’s collection of wires and initializes its corresponding output placeholder, thereby expanding and managing the circuit’s internal state.
        """
    def new_bits(self, bitwidth:builtins.int=1, name:builtins.str='') -> builtins.int:
        r"""
        Creates and adds a new wire representing bits to the circuit.
        
        
        Adds a wire with a specified bitwidth and name to the circuit.
        If the provided name is empty, a default name is generated automatically to ensure uniqueness.
        The wire is appended to the list of circuit wires, and the corresponding output is initialized to None, returning the index of the newly added wire.
        """
    def to_gates(self) -> builtins.list[Gate]:
        r"""
        Returns a vector containing all the gates that compose the circuit.
        This method extracts the gate entries from the underlying circuit structure, clones each one, and collects them into a list for subsequent use.
        """
    def to_typst(self) -> builtins.str:
        r"""
        Converts the circuit into a typst-formatted string representation.
        
        
        Transforms the circuit's internal state into a typst document string, enabling further rendering or integration into documentation.
        """
    def __repr__(self) -> builtins.str:
        r"""
        Returns a string representation of the circuit using debug formatting.
        This method enables the conversion of the circuit's state into a debug-friendly string, facilitating inspection and logging.
        """
    def __str__(self) -> builtins.str: ...
    def _repr_svg_(self) -> builtins.str:
        r"""
        Returns an SVG representation of the circuit as a string.
        This method converts the circuit into its SVG depiction and returns the resulting string, providing a visual output intended for environments that support SVG format.
        """
    def __iadd__(self, other:Gate) -> None:
        r"""
        Adds a gate to the circuit in place by appending the given gate and updating the circuit's graph structure.
        Returns a successful result upon appending the gate or an error if the operation fails during insertion.
        """
    def __eq__(self, other:Circuit) -> builtins.bool:
        r"""
        Compares two instances for equality.
        This method determines if the current instance is equal to another by delegating to the underlying equality implementation.
        """

class Gate:
    r"""
    Encapsulates a quantum gate that couples an operation with its input wire indices.
    
    This structure holds a boxed operation implementing the required interface for quantum operations and a list of indices that identify the corresponding input wires, allowing for structured management and manipulation within a quantum circuit.
    """
    def __repr__(self) -> builtins.str:
        r"""
        Returns a string representation of the instance using its debug formatting.
        
        
        Formats the current instance with the Debug trait, producing a string that can be used for display or debugging purposes.
        """
    def __str__(self) -> builtins.str: ...

class Qubit:
    r"""
    A simple wrapper type encapsulating a quantum bit identifier using a string.
    
    This type primarily serves to distinguish quantum bits from other wire representations by wrapping a string value that acts as its identifier.
    Its design promotes clear type usage in the context of quantum circuits while supporting the trait object interface defined for wires.
    """
    ...

class ZeroState:
    r"""
    A unit structure representing a quantum wire initialized to a zero state.
    
    
    This item embodies a specialized wire used within quantum circuit implementations, ensuring compatibility with interface expectations for quantum wires while serving as a straightforward, marker-like type.
    It is intended for use in contexts where the initialization of a quantum bit to a zero state is required.
    """
    ...

