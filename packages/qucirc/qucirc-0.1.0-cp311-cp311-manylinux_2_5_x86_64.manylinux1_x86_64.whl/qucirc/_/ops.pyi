# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import qucirc._

class CH:
    r"""
    CH gate (controlled-Hadamard gate)
    """
    def __new__(cls) -> CH: ...
    def __call__(self) -> CH: ...
    def __getitem__(self, qubits:tuple[builtins.int, builtins.int]) -> Gate: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class CNOT:
    r"""
    CNOT gate (controlled-NOT gate)
    """
    def __new__(cls) -> CNOT: ...
    def __call__(self) -> CNOT: ...
    def __getitem__(self, qubits:tuple[builtins.int, builtins.int]) -> Gate: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class CP:
    r"""
    CP gate (controlled-phase gate)
    """
    def __new__(cls, phase:builtins.float) -> CP: ...
    def __call__(self, qubit1:builtins.int, qubit2:builtins.int) -> Gate: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class CRX:
    r"""
    CRX gate (controlled-X gate)
    """
    def __new__(cls, angle:builtins.float) -> CRX: ...
    def __call__(self, qubit1:builtins.int, qubit2:builtins.int) -> Gate: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class CRY:
    r"""
    CRY gate (controlled-Y gate)
    """
    def __new__(cls, angle:builtins.float) -> CRY: ...
    def __call__(self, qubit1:builtins.int, qubit2:builtins.int) -> Gate: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class CRZ:
    r"""
    CRZ gate (controlled-Z gate)
    """
    def __new__(cls, angle:builtins.float) -> CRZ: ...
    def __call__(self, qubit1:builtins.int, qubit2:builtins.int) -> Gate: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class CU:
    r"""
    CU gate (controlled-U gate)
    """
    def __new__(cls, theta:builtins.float, phi:builtins.float, lamda:builtins.float) -> CU: ...
    def __call__(self, qubit1:builtins.int, qubit2:builtins.int) -> Gate: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class CY:
    r"""
    CY gate (controlled-Y gate)
    """
    def __new__(cls) -> CY: ...
    def __call__(self) -> CY: ...
    def __getitem__(self, qubits:tuple[builtins.int, builtins.int]) -> Gate: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class CZ:
    r"""
    CZ gate (controlled-Z gate)
    """
    def __new__(cls) -> CZ: ...
    def __call__(self) -> CZ: ...
    def __getitem__(self, qubits:tuple[builtins.int, builtins.int]) -> Gate: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class H:
    r"""
    Hadamard gate
    """
    def __new__(cls) -> H: ...
    def __call__(self) -> H: ...
    def __getitem__(self, qubit:builtins.int) -> Gate: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class Measure:
    r"""
    Measure a single qubit
    """
    ...

class Nop:
    r"""
    Do nothing
    """
    ...

class P:
    r"""
    Phase gate (diag{1, exp(iÎ¸)})
    """
    def __new__(cls, phase:builtins.float) -> P: ...
    def __call__(self) -> P: ...
    def __getitem__(self, qubit:builtins.int) -> Gate: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class RX:
    r"""
    RX gate (rotation around X axis)
    """
    def __new__(cls, angle:builtins.float) -> RX: ...
    def __call__(self) -> RX: ...
    def __getitem__(self, qubit:builtins.int) -> Gate: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class RY:
    r"""
    RY gate (rotation around Y axis)
    """
    def __new__(cls, angle:builtins.float) -> RY: ...
    def __call__(self) -> RY: ...
    def __getitem__(self, qubit:builtins.int) -> Gate: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class RZ:
    r"""
    RZ gate (rotation around Z axis)
    """
    def __new__(cls, angle:builtins.float) -> RZ: ...
    def __call__(self) -> RZ: ...
    def __getitem__(self, qubit:builtins.int) -> Gate: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class S:
    r"""
    S gate
    """
    def __new__(cls) -> S: ...
    def __call__(self) -> S: ...
    def __getitem__(self, qubit:builtins.int) -> Gate: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class SDG:
    r"""
    SDG gate (conjugate transpose of S gate)
    """
    def __new__(cls) -> SDG: ...
    def __call__(self) -> SDG: ...
    def __getitem__(self, qubit:builtins.int) -> Gate: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class SWAP:
    r"""
    SWAP gate (swap gate)
    """
    def __new__(cls) -> SWAP: ...
    def __call__(self) -> SWAP: ...
    def __getitem__(self, qubits:tuple[builtins.int, builtins.int]) -> Gate: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class SX:
    r"""
    SX gate (square root of X gate)
    """
    def __new__(cls) -> SX: ...
    def __call__(self) -> SX: ...
    def __getitem__(self, qubit:builtins.int) -> Gate: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class T:
    r"""
    T gate
    """
    def __new__(cls) -> T: ...
    def __call__(self) -> T: ...
    def __getitem__(self, qubit:builtins.int) -> Gate: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class TDG:
    r"""
    TDG gate (conjugate transpose of T gate)
    """
    def __new__(cls) -> TDG: ...
    def __call__(self) -> TDG: ...
    def __getitem__(self, qubit:builtins.int) -> Gate: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class U:
    r"""
    U gate (general single-qubit gate)
    """
    def __new__(cls, theta:builtins.float, phi:builtins.float, lamda:builtins.float) -> U: ...
    def __call__(self) -> U: ...
    def __getitem__(self, qubit:builtins.int) -> Gate: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class U1:
    r"""
    U1 gate (phase gate)
    """
    def __new__(cls, lamda:builtins.float) -> U1: ...
    def __call__(self) -> U1: ...
    def __getitem__(self, qubit:builtins.int) -> Gate: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class U2:
    r"""
    U2 gate (two-parameter single-qubit gate)
    """
    def __new__(cls, phi:builtins.float, lamda:builtins.float) -> U2: ...
    def __call__(self) -> U2: ...
    def __getitem__(self, qubit:builtins.int) -> Gate: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class U3:
    r"""
    U3 gate (three-parameter single-qubit gate)
    """
    def __new__(cls, theta:builtins.float, phi:builtins.float, lamda:builtins.float) -> U3: ...
    def __call__(self) -> U3: ...
    def __getitem__(self, qubit:builtins.int) -> Gate: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class X:
    r"""
    Pauli X gate
    """
    def __new__(cls) -> X: ...
    def __call__(self) -> X: ...
    def __getitem__(self, qubit:builtins.int) -> Gate: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class Y:
    r"""
    Pauli Y gate
    """
    def __new__(cls) -> Y: ...
    def __call__(self) -> Y: ...
    def __getitem__(self, qubit:builtins.int) -> Gate: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class Z:
    r"""
    Pauli Z gate
    """
    def __new__(cls) -> Z: ...
    def __call__(self) -> Z: ...
    def __getitem__(self, qubit:builtins.int) -> Gate: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

