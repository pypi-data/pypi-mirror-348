# generated by datamodel-codegen:
#   filename:  friends.json
#   timestamp: 2025-04-26T01:53:39+00:00

from __future__ import annotations

from pydantic import BaseModel, ConfigDict


class ResponseTime(BaseModel):
    model_config = ConfigDict(frozen=True)
    time: float
    measure: str


class InitTime(BaseModel):
    model_config = ConfigDict(frozen=True)
    time: int
    measure: str


class Meta(BaseModel):
    model_config = ConfigDict(frozen=True)
    code: int
    response_time: ResponseTime
    init_time: InitTime


class UnreadCount(BaseModel):
    model_config = ConfigDict(frozen=True)
    comments: int
    toasts: int
    friends: int
    messages: int
    venues: int
    veunes: int
    others: int
    news: int


class Notifications(BaseModel):
    model_config = ConfigDict(frozen=True)
    type: str
    unread_count: UnreadCount


class MutualFriends(BaseModel):
    model_config = ConfigDict(frozen=True)
    count: int
    items: list


class User(BaseModel):
    model_config = ConfigDict(frozen=True)
    uid: int
    user_name: str
    location: str
    bio: str
    is_supporter: int
    first_name: str
    last_name: str
    relationship: str
    user_avatar: str


class Item(BaseModel):
    model_config = ConfigDict(frozen=True)
    friendship_hash: str
    created_at: str
    mutual_friends: MutualFriends
    user: User


class Pagination(BaseModel):
    model_config = ConfigDict(frozen=True)
    next_url: str
    offset: int | None = None
    max_id: bool | str


class Response(BaseModel):
    model_config = ConfigDict(frozen=True)
    found: int
    count: int
    items: list[Item]
    pagination: Pagination


class UserFriends(BaseModel):
    model_config = ConfigDict(frozen=True)
    meta: Meta
    notifications: Notifications
    response: Response
