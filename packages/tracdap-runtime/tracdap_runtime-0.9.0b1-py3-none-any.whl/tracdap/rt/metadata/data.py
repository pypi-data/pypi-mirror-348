# Code generated by TRAC

import typing as _tp  # noqa
import dataclasses as _dc  # noqa
import enum as _enum  # noqa

from .type import *  # noqa
from .object_id import *  # noqa


class SchemaType(_enum.Enum):

    """
    Enumeration of the available types of data schema
    
    Currently only table schemas are supported, other schema types may be added later.
    
    .. seealso::
        :py:obj:`SchemaDefinition <SchemaDefinition>`
    """

    SCHEMA_TYPE_NOT_SET = 0

    TABLE = 1

    """Tabular data"""

    STRUCT = 2

    """Structured objects"""


class PartType(_enum.Enum):

    """Partitioning scheme applied to a dataset"""

    PART_ROOT = 0

    """Dataset has a single partition called the root partition (this is the default)"""

    PART_BY_RANGE = 1

    """Partition by range over an ordered variable (not available yet)"""

    PART_BY_VALUE = 2

    """Partition by value over a categorical variable (not available yet)"""


@_dc.dataclass
class FieldSchema:

    """
    Schema for an individual field in a tabular dataset
    
    .. seealso::
        :py:obj:`TableSchema <TableSchema>`
    """

    fieldName: "str" = ""

    fieldOrder: "int" = 0

    fieldType: "BasicType" = BasicType.BASIC_TYPE_NOT_SET

    label: "str" = ""

    businessKey: "bool" = False

    categorical: "bool" = False

    notNull: "_tp.Optional[bool]" = None

    """This could become mandatory with the next metadata update"""

    formatCode: "_tp.Optional[str]" = None


@_dc.dataclass
class TableSchema:

    """Schema for a tabular dataset"""

    fields: "_tp.List[FieldSchema]" = _dc.field(default_factory=list)


@_dc.dataclass
class StructField:

    """Schema for an individual field in a structured object dataset"""

    fieldType: "TypeDescriptor" = _dc.field(default_factory=lambda: TypeDescriptor())

    label: "str" = ""

    businessKey: "bool" = False

    categorical: "bool" = False

    notNull: "_tp.Optional[bool]" = None

    """This could become mandatory with the next metadata update"""

    formatCode: "_tp.Optional[str]" = None

    defaultValue: "Value" = _dc.field(default_factory=lambda: Value())

    structType: "_tp.Optional[str]" = None


@_dc.dataclass
class StructSchema:

    """Schema for a structured object dataset"""

    fields: "_tp.Dict[str, StructField]" = _dc.field(default_factory=dict)

    namedTypes: "_tp.Dict[str, StructSchema]" = _dc.field(default_factory=dict)


@_dc.dataclass
class SchemaDefinition:

    """
    A schema definition describes the schema of a dataset
    
    Schema definitions can be top level objects (a type of object definition),
    in which case they can be referred to by multiple data definitions. Alternatively
    they can be embedded in a data definition to create datasets with one-off schemas.
    
    A table schema describes the schema of a tabular data set. Other schema types may
    be added later, e.g. for matrices, tensors, curves, surfaces and structured datasets.
    
    .. seealso::
        :py:obj:`DataDefinition <DataDefinition>`
    """

    schemaType: "SchemaType" = SchemaType.SCHEMA_TYPE_NOT_SET

    partType: "PartType" = PartType.PART_ROOT

    table: "_tp.Optional[TableSchema]" = None

    struct: "_tp.Optional[StructSchema]" = None


@_dc.dataclass
class PartKey:

    """Partition key for tabular datasets"""

    opaqueKey: "str" = ""

    partType: "PartType" = PartType.PART_ROOT

    partValues: "_tp.List[Value]" = _dc.field(default_factory=list)

    partRangeMin: "_tp.Optional[Value]" = None

    partRangeMax: "_tp.Optional[Value]" = None


@_dc.dataclass
class DataDefinition:

    """Define a dataset that can be stored and managed in the TRAC platform"""

    @_dc.dataclass
    class Delta:

        deltaIndex: "int" = 0

        dataItem: "str" = ""

    @_dc.dataclass
    class Snap:

        snapIndex: "int" = 0

        deltas: "_tp.List[DataDefinition.Delta]" = _dc.field(default_factory=list)

    @_dc.dataclass
    class Part:

        partKey: "PartKey" = _dc.field(default_factory=lambda: PartKey())

        snap: "DataDefinition.Snap" = _dc.field(default_factory=lambda: DataDefinition.Snap())

    schemaId: "_tp.Optional[TagSelector]" = None

    schema: "_tp.Optional[SchemaDefinition]" = None

    parts: "_tp.Dict[str, DataDefinition.Part]" = _dc.field(default_factory=dict)

    storageId: "TagSelector" = _dc.field(default_factory=lambda: TagSelector())
