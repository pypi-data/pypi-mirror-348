# coding: utf-8

"""
    FiftyTen Service Contracts

    Common API contracts for FiftyTen microservices

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WorkerStatus(BaseModel):
    """
    WorkerStatus
    """ # noqa: E501
    id: StrictStr
    status: StrictStr
    active_tasks: StrictInt = Field(alias="activeTasks")
    completed_tasks: Optional[StrictInt] = Field(default=None, alias="completedTasks")
    exchanges: List[StrictStr]
    last_seen: datetime = Field(alias="lastSeen")
    metadata: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["id", "status", "activeTasks", "completedTasks", "exchanges", "lastSeen", "metadata"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['active', 'busy', 'error']):
            raise ValueError("must be one of enum values ('active', 'busy', 'error')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkerStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkerStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "status": obj.get("status"),
            "activeTasks": obj.get("activeTasks"),
            "completedTasks": obj.get("completedTasks"),
            "exchanges": obj.get("exchanges"),
            "lastSeen": obj.get("lastSeen"),
            "metadata": obj.get("metadata")
        })
        return _obj


