# coding: utf-8

"""
    FiftyTen Service Contracts

    Common API contracts for FiftyTen microservices

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from fiftyten_service_contracts.models.exchange_type import ExchangeType
from fiftyten_service_contracts.models.interval import Interval
from fiftyten_service_contracts.models.load_context import LoadContext
from fiftyten_service_contracts.models.symbol import Symbol
from typing import Optional, Set
from typing_extensions import Self

class Task(BaseModel):
    """
    Data collection task
    """ # noqa: E501
    id: StrictStr = Field(description="Unique task identifier")
    exchange_type: ExchangeType = Field(alias="exchangeType")
    symbol: Symbol
    interval: Interval
    task_type: StrictStr = Field(alias="taskType")
    priority: Optional[StrictInt] = Field(default=1, description="Task priority (higher = more important)")
    limit: Optional[StrictInt] = Field(default=None, description="Data limit for collection")
    start_time: Optional[datetime] = Field(default=None, description="Start time for historical/gap tasks", alias="startTime")
    end_time: Optional[datetime] = Field(default=None, description="End time for historical/gap tasks", alias="endTime")
    created_at: datetime = Field(alias="createdAt")
    load_context: Optional[LoadContext] = Field(default=None, alias="loadContext")
    __properties: ClassVar[List[str]] = ["id", "exchangeType", "symbol", "interval", "taskType", "priority", "limit", "startTime", "endTime", "createdAt", "loadContext"]

    @field_validator('task_type')
    def task_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['collect', 'gap_fill', 'historical_load']):
            raise ValueError("must be one of enum values ('collect', 'gap_fill', 'historical_load')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Task from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of load_context
        if self.load_context:
            _dict['loadContext'] = self.load_context.to_dict()
        # set to None if start_time (nullable) is None
        # and model_fields_set contains the field
        if self.start_time is None and "start_time" in self.model_fields_set:
            _dict['startTime'] = None

        # set to None if end_time (nullable) is None
        # and model_fields_set contains the field
        if self.end_time is None and "end_time" in self.model_fields_set:
            _dict['endTime'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Task from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "exchangeType": obj.get("exchangeType"),
            "symbol": obj.get("symbol"),
            "interval": obj.get("interval"),
            "taskType": obj.get("taskType"),
            "priority": obj.get("priority") if obj.get("priority") is not None else 1,
            "limit": obj.get("limit"),
            "startTime": obj.get("startTime"),
            "endTime": obj.get("endTime"),
            "createdAt": obj.get("createdAt"),
            "loadContext": LoadContext.from_dict(obj["loadContext"]) if obj.get("loadContext") is not None else None
        })
        return _obj


