# coding: utf-8

"""
    FiftyTen Service Contracts

    Common API contracts for FiftyTen microservices

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fiftyten_service_contracts.models.exchange_type import ExchangeType
from fiftyten_service_contracts.models.interval import Interval
from fiftyten_service_contracts.models.symbol import Symbol
from typing import Optional, Set
from typing_extensions import Self

class TaskResult(BaseModel):
    """
    Result of task execution
    """ # noqa: E501
    task_id: StrictStr = Field(alias="taskId")
    parent_id: Optional[StrictStr] = Field(default=None, alias="parentId")
    exchange_type: ExchangeType = Field(alias="exchangeType")
    symbol: Symbol
    interval: Interval
    task_type: Optional[StrictStr] = Field(default=None, alias="taskType")
    completed: StrictBool
    error: Optional[StrictStr] = None
    data: Optional[Dict[str, Any]] = None
    item_count: Optional[StrictInt] = Field(default=None, alias="itemCount")
    worker_id: Optional[StrictStr] = Field(default=None, alias="workerId")
    processed_at: datetime = Field(alias="processedAt")
    __properties: ClassVar[List[str]] = ["taskId", "parentId", "exchangeType", "symbol", "interval", "taskType", "completed", "error", "data", "itemCount", "workerId", "processedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TaskResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if parent_id (nullable) is None
        # and model_fields_set contains the field
        if self.parent_id is None and "parent_id" in self.model_fields_set:
            _dict['parentId'] = None

        # set to None if task_type (nullable) is None
        # and model_fields_set contains the field
        if self.task_type is None and "task_type" in self.model_fields_set:
            _dict['taskType'] = None

        # set to None if error (nullable) is None
        # and model_fields_set contains the field
        if self.error is None and "error" in self.model_fields_set:
            _dict['error'] = None

        # set to None if data (nullable) is None
        # and model_fields_set contains the field
        if self.data is None and "data" in self.model_fields_set:
            _dict['data'] = None

        # set to None if item_count (nullable) is None
        # and model_fields_set contains the field
        if self.item_count is None and "item_count" in self.model_fields_set:
            _dict['itemCount'] = None

        # set to None if worker_id (nullable) is None
        # and model_fields_set contains the field
        if self.worker_id is None and "worker_id" in self.model_fields_set:
            _dict['workerId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TaskResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "taskId": obj.get("taskId"),
            "parentId": obj.get("parentId"),
            "exchangeType": obj.get("exchangeType"),
            "symbol": obj.get("symbol"),
            "interval": obj.get("interval"),
            "taskType": obj.get("taskType"),
            "completed": obj.get("completed"),
            "error": obj.get("error"),
            "data": obj.get("data"),
            "itemCount": obj.get("itemCount"),
            "workerId": obj.get("workerId"),
            "processedAt": obj.get("processedAt")
        })
        return _obj


