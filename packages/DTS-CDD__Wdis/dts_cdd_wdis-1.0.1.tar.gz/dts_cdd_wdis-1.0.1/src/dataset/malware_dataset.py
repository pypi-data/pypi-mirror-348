import os
from io import StringIO

import pandas as pd
from tqdm import tqdm

from src.feature_extraction.config.config import config


class MalwareDatasetBuilder:
    def __init__(self):
        self.__base_dir = os.path.dirname(os.path.abspath(__file__))

    @staticmethod
    def __build_sha_fsd_df(sha_fsd_file_path: str) -> pd.DataFrame:
        """
        Open VT reports and get SHA256 and first_submission_date values for each json (line).
        """
        malwares_first_sub_date = []
        with open(sha_fsd_file_path, "r") as reports:
            sha256_key, first_sub_date_key = "sha256", "first_submission_date"
            # Iterate through all reports
            for report in reports:
                df_report = pd.read_json(StringIO(report))["data"]["attributes"]
                sha256, first_sub_date = (
                    df_report[sha256_key],
                    df_report[first_sub_date_key],
                )
                malwares_first_sub_date.append((sha256, first_sub_date))
        return pd.DataFrame(
            malwares_first_sub_date, columns=[sha256_key, first_sub_date_key]
        )

    @staticmethod
    def __build_sha_family_df(
        malware_dir_path: str, min_samples: int = 100
    ) -> pd.DataFrame:
        """
        Build dataset with malware's id (SHA256) and relative family columns
        """
        families = os.listdir(malware_dir_path)
        datasets = []
        for family in tqdm(families):
            current_samples = os.listdir(os.path.join(malware_dir_path, family))
            if len(current_samples) >= min_samples:
                family_dataset = pd.DataFrame(
                    {"sha256": current_samples, "family": family}
                )
                datasets.append(family_dataset)
        df = pd.concat(datasets, ignore_index=True)
        return df

    def malware_family_fsd_df(
        self,
        vt_reports_path: str = None,
        malware_dir_path: str = None,
        min_samples: int = 100,
    ) -> pd.DataFrame:
        vt_reports_path = (
            config.vt_reports_path if vt_reports_path is None else vt_reports_path
        )
        malware_dir_path = (
            config.malware_directory_path
            if malware_dir_path is None
            else malware_dir_path
        )
        merge_dataset_path = config.merge_dataset_path

        if os.path.exists(merge_dataset_path):
            return pd.read_csv(
                merge_dataset_path, parse_dates=["first_submission_date"]
            )
        else:
            df = pd.merge(
                left=self.__build_sha_family_df(malware_dir_path, min_samples),
                right=self.__build_sha_fsd_df(vt_reports_path),
                on="sha256",
            )
            # df.set_index("sha256", inplace=True)
            df["benign"] = False
            df["first_submission_date"] = df["first_submission_date"].apply(
                lambda t: pd.to_datetime(t, unit="s")
            )
            df.to_csv(merge_dataset_path, index=False)
            return df


class MalwareDataset:
    def __init__(self, split: pd.Timestamp):
        fsd = "first_submission_date"
        self.df_malware_family_fsd = MalwareDatasetBuilder().malware_family_fsd_df()
        training_dataset = self.df_malware_family_fsd[
            self.df_malware_family_fsd[fsd] < split
        ]
        # Filter families with less than three samples
        counts = training_dataset.groupby("family").size().reset_index(name="size")
        counts = counts[counts["size"] > 3]
        self.training_dataset = training_dataset[
            training_dataset["family"].isin(counts["family"])
        ]
        self.testing_dataset = self.df_malware_family_fsd[
            ~self.df_malware_family_fsd["sha256"].isin(self.training_dataset["sha256"])
        ]
