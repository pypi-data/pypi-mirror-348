import base64
import urllib3

from typing import Any, Type, Optional
from pydantic import BaseModel, Field

from codemie_tools.base.codemie_tool import CodeMieTool
from codemie_tools.open_api.models import OpenApiConfig
from codemie_tools.open_api.tools_vars import OPEN_API_TOOL, OPEN_API_SPEC_TOOL
from codemie_tools.base.utils import parse_to_dict


def _get_auth_header_value(config) -> str:
    if config.is_basic_auth:
        credentials = f"{config.username}:{config.api_key}"
        encoded_credentials = base64.b64encode(credentials.encode('utf-8')).decode('utf-8')
        return f"Basic {encoded_credentials}"
    return f"Bearer {config.api_key}"


class OpenApiInput(BaseModel):
    method: str = Field(
        description="""
            String text. It's the verb of a HTTP request generated by LLM which 
            will be used to invoke appropriate REST API to fulfill user request. 
            Important: string formatting and escaping SHOULD NOT be used when passing query to the tool.
            """.strip(),
    )
    url: str = Field(
        description="""
            String text. It's the URL of a HTTP request generated by LLM which 
            will be used to invoke appropriate REST API to fulfill user request. 
            Important: string formatting and escaping SHOULD NOT be used when passing query to the tool.
            """.strip(),
    )
    headers: Optional[str] = Field(
        default="",
        description="""
            MUST be String text. It's the headers of a HTTP request generated by LLM which
            will be used to invoke appropriate REST API to fulfill user request.
            Important: string formatting and escaping SHOULD NOT be used when passing query to the tool.
            """.strip(),
    )
    fields: Optional[str] = Field(
        default="",
        description="""
            MUST be String text. It's the query parameters of a HTTP request generated by LLM which 
            will be used to invoke appropriate REST API to fulfill user request.
            Important: string formatting and escaping SHOULD NOT be used when passing query to the tool.
             """.strip(),
    )
    body: Optional[str] = Field(
        default="",
        description="""
            JSON that should be passed as a string. It's the body of a HTTP request generated by LLM which 
            will be used to invoke appropriate REST API to fulfill user request. 
            Should be passes as an empty string if there is no body. 
            Important: string formatting and escaping SHOULD NOT be used when passing query to the tool.
            """.strip(),
    )
    
class GetOpenApiSpecToolInput(BaseModel):
    query: Optional[str] = Field(
        default="",
        description="User initial request should be passed as a string.",
    )


class InvokeRestApiBySpec(CodeMieTool):
    """Tool for invoking REST APIs based on OpenAPI specifications."""
    openapi_config: OpenApiConfig = Field(exclude=True, default=None)
    name: str = OPEN_API_TOOL.name
    description: str = OPEN_API_TOOL.description
    args_schema: Type[BaseModel] = OpenApiInput
    tokens_size_limit: int = 20000  # Increased token limit to 20000
    
    def _decode_response_data(self, response):
        """Decode response data with proper character encoding handling.
        
        Args:
            response: The HTTP response object
            
        Returns:
            str: Decoded response content as string
        """
        # Handle response data properly to preserve Unicode characters
        content_type = response.headers.get('Content-Type', '')
        charset = 'utf-8'  # Default charset
        
        # Extract charset from Content-Type if available
        if 'charset=' in content_type:
            charset = content_type.split('charset=')[1].split(';')[0].strip()
            
        # If response is not bytes, return as is
        if not isinstance(response.data, bytes):
            return str(response.data)
            
        # Decoding strategies in order of preference
        decoding_strategies = [
            (charset, None),       # Try with detected charset
            ('utf-8', None),       # Try UTF-8
            ('utf-8', 'replace'),  # Try with 'replace' error handler
            ('utf-8', 'ignore')    # Last resort: ignore errors
        ]
        
        for encoding, errors in decoding_strategies:
            try:
                if errors:
                    return response.data.decode(encoding, errors=errors)
                else:
                    return response.data.decode(encoding)
            except (UnicodeDecodeError, LookupError):
                continue
                
        # If all decoding attempts fail, return string representation
        return str(response.data)

    def execute(self, method: str, url: str, headers: Any = "", fields: Any = "", body: str = "", **kwargs: Any) -> Any:
        manager = urllib3.PoolManager()
        encoded_data = body.encode('utf-8') if body else None
        headers_param = parse_to_dict(headers) if headers else {}
        fields_param = parse_to_dict(fields) if fields else None

        if self.openapi_config.api_key:
            headers_param['Authorization'] = _get_auth_header_value(config=self.openapi_config)

        response = manager.request(method=method, url=url, fields=fields_param, headers=headers_param,
                                   body=encoded_data)
        
        return self._decode_response_data(response)


class GetOpenApiSpec(CodeMieTool):
    openapi_spec: str = Field(exclude=True, default=None)
    name: str = OPEN_API_SPEC_TOOL.name
    description: str = OPEN_API_SPEC_TOOL.description
    args_schema: Type[BaseModel] = GetOpenApiSpecToolInput

    def __init__(self, openapi_config: OpenApiConfig):
        super().__init__()
        self.openapi_spec = openapi_config.spec

    def execute(self, *args, **kwargs: Any) -> Any:
        return self.openapi_spec
