# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from openobd_protocol.Configuration.Messages import BusConfiguration_pb2 as openobd__protocol_dot_Configuration_dot_Messages_dot_BusConfiguration__pb2
from openobd_protocol.Messages import Empty_pb2 as openobd__protocol_dot_Messages_dot_Empty__pb2


class configStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.configureBus = channel.stream_unary(
                '/openOBD.v1.config/configureBus',
                request_serializer=openobd__protocol_dot_Configuration_dot_Messages_dot_BusConfiguration__pb2.BusConfiguration.SerializeToString,
                response_deserializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
                )


class configServicer(object):
    """Missing associated documentation comment in .proto file."""

    def configureBus(self, request_iterator, context):
        """
        The `configureBus` rpc service opens an outgoing stream where `BusConfiguration` messages can be send. Depending on the hardware version
        up to four busses may be configured at a time.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_configServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'configureBus': grpc.stream_unary_rpc_method_handler(
                    servicer.configureBus,
                    request_deserializer=openobd__protocol_dot_Configuration_dot_Messages_dot_BusConfiguration__pb2.BusConfiguration.FromString,
                    response_serializer=openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'openOBD.v1.config', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class config(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def configureBus(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/openOBD.v1.config/configureBus',
            openobd__protocol_dot_Configuration_dot_Messages_dot_BusConfiguration__pb2.BusConfiguration.SerializeToString,
            openobd__protocol_dot_Messages_dot_Empty__pb2.EmptyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
