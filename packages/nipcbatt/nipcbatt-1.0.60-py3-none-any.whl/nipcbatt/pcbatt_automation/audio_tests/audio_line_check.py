"""Example demonstrates Frequency domain measurements(extraction of tones) of captured
   Analog(Audio) signal generated by Analog Output(generates sine wave tones) module 
   with Hardware Trigger"""  


# Note to run with Hardware: Update Virtual/Physical Channels Info based on NI MAX
# in the below Initialize Steps

import nidaqmx
import nidaqmx.constants

import nipcbatt
from nipcbatt.pcbatt_utilities.pcbatt_logger import PcbattLogger

# Default channels
GEN_CHANNEL = "TS_AudioLineIn0"  # Virtual Channel for TS Analog Out
MEAS_CHANNEL = "TP_AudioLineOut0"  # Virtual Channel for Test Points

# Set the default file path to save the acquired waveforms and measurement analysis results.
DEFAULT_FILEPATH = "C:\\Windows\\Temp\\audio_line_check_test_results.txt"

# region initialize
############################### INITIALIZATION FUNCTION ############################################


def setup():
    """Creates the necessary objects for signal generation and measurement"""  

    # Create the instances of generation and measurement classes required for the test
    generation_instance = nipcbatt.SignalVoltageGeneration()
    measurement_instance = nipcbatt.FrequencyDomainMeasurement()

    # Initialize generation
    generation_instance.initialize(channel_expression=GEN_CHANNEL)

    # Initialize measurement
    measurement_instance.initialize(analog_input_channel_expression=MEAS_CHANNEL)

    # return initialized objects
    return generation_instance, measurement_instance


####################################################################################################
# endregion initialize


# region configure_and_generate
###################  MAIN TEST FUNCTION : CONFIGURE AND GENERATE/MEASURE ###########################

"""Note to run with Hardware: Review the configuration & update Trigger Source settings 
   based on NI MAX"""


def main(
    generation_instance: nipcbatt.SignalVoltageGeneration,
    measurement_instance: nipcbatt.FrequencyDomainMeasurement,
    write_to_file=True,
    filepath=DEFAULT_FILEPATH,
):
    """If you wish to write your results to a file use the following commands
    Make sure the write_to_file option is set to True when calling audio_test()
    Change the file path to desired location on your drive
    The default file path is C:\\Windows\\Temp\\audio_line_check_test_results.txt""" 

    # if write_to_file is True, call write_results_to_file in order to output the results to a file
    if write_to_file:
        logger = PcbattLogger(file=filepath)
        logger.attach(generation_instance)
        logger.attach(measurement_instance)

    """Configure Freq Domain Measurement setting to wait for Hardware Trigger"""
    glob_chan_params = nipcbatt.VoltageRangeAndTerminalParameters(
        terminal_configuration=nidaqmx.constants.TerminalConfiguration.RSE,
        range_min_volts=-10.0,
        range_max_volts=10.0,
    )

    spec_chan_params = []
    meas_options = nipcbatt.MeasurementOptions(
        execution_option=nipcbatt.MeasurementExecutionType.CONFIGURE_ONLY,
        measurement_analysis_requirement=nipcbatt.MeasurementAnalysisRequirement.SKIP_ANALYSIS,
    )

    timing_params = nipcbatt.SampleClockTimingParameters(
        sample_clock_source="OnboardClock",
        sampling_rate_hertz=10000,
        number_of_samples_per_channel=1000,
        sample_timing_engine=nipcbatt.SampleTimingEngine.AUTO,
    )

    trigger_params = nipcbatt.DigitalStartTriggerParameters(
        trigger_select=nipcbatt.StartTriggerType.DIGITAL_TRIGGER,
        digital_start_trigger_source="/Sim_PC_basedDAQ/ao/StartTrigger",
        digital_start_trigger_edge=nidaqmx.constants.Edge.RISING,
    )

    meas_config_configure_only = nipcbatt.FrequencyDomainMeasurementConfiguration(
        global_channel_parameters=glob_chan_params,
        specific_channels_parameters=spec_chan_params,
        measurement_options=meas_options,
        sample_clock_timing_parameters=timing_params,
        digital_start_trigger_parameters=trigger_params,
    )

    # configure measurement and wait for generation
    measurement_instance.configure_and_measure(configuration=meas_config_configure_only)

    # generate sine wave and trigger to initiate measurement
    vol_gen_range_params = nipcbatt.VoltageGenerationChannelParameters(
        range_min_volts=-2.0, range_max_volts=2.0
    )

    tone_params = nipcbatt.ToneParameters(
        tone_frequency_hertz=1000.0, tone_amplitude_volts=1.0, tone_phase_radians=0.0
    )

    waveform_params = nipcbatt.SignalVoltageGenerationSineWaveParameters(
        generated_signal_offset_volts=0.0, generated_signal_tone_parameters=tone_params
    )

    gen_timing_params = nipcbatt.SignalVoltageGenerationTimingParameters(
        sample_clock_source="OnboardClock",
        sampling_rate_hertz=100000,
        generated_signal_duration_seconds=0.1,
    )

    gen_trigger_params = nipcbatt.DigitalStartTriggerParameters(
        trigger_select=nipcbatt.StartTriggerType.NO_TRIGGER,
        digital_start_trigger_source="/Sim_PC_basedDAQ/PFI0",
        digital_start_trigger_edge=nidaqmx.constants.Edge.RISING,
    )

    gen_config = nipcbatt.SignalVoltageGenerationSineWaveConfiguration(
        voltage_generation_range_parameters=vol_gen_range_params,
        waveform_parameters=waveform_params,
        timing_parameters=gen_timing_params,
        digital_start_trigger_parameters=gen_trigger_params,
    )

    # start generation
    generation_instance.configure_and_generate_sine_waveform(configuration=gen_config)

    # Measures the analog input voltage waveforms (Started measure when signal voltage generation
    # sends Trigger after source) and returns Freq Domain

    meas_options_measure_only = nipcbatt.MeasurementOptions(
        execution_option=nipcbatt.MeasurementExecutionType.MEASURE_ONLY,
        measurement_analysis_requirement=nipcbatt.MeasurementAnalysisRequirement.PROCEED_TO_ANALYSIS,
    )

    trigger_params_measure_only = nipcbatt.DigitalStartTriggerParameters(
        trigger_select=nipcbatt.StartTriggerType.NO_TRIGGER,
        digital_start_trigger_source="/Sim_PC_basedDAQ/ao/StartTrigger",
        digital_start_trigger_edge=nidaqmx.constants.Edge.RISING,
    )

    meas_config_postgen = nipcbatt.FrequencyDomainMeasurementConfiguration(
        global_channel_parameters=glob_chan_params,
        specific_channels_parameters=spec_chan_params,
        measurement_options=meas_options_measure_only,
        sample_clock_timing_parameters=timing_params,
        digital_start_trigger_parameters=trigger_params_measure_only,
    )

    # fetch TP measurements
    audio_data = measurement_instance.configure_and_measure(configuration=meas_config_postgen)

    """Storing results -- create both a Python dictionary (hashmap) 
       A dictionary will store values with a key provided by the user"""
    results_map = {}  # this structure will hold results in key-value pairs

    # record result
    results_map["FREQ DATA"] = audio_data

    # return results
    return results_map


####################################################################################################
# endregion configure_and_generate


# region close
############################# CLEAN UP FUNCTION: CLOSE ALL TASKS ###################################


# Close all tasks
def cleanup(generation_instance, measurement_instance):
    """Closes out the created objects used in the generation and measurement""" 
    generation_instance.close()  # Close generation
    measurement_instance.close()  # Close measurement


####################################################################################################
# endregion close


# region test
############# USE THIS FUNCTION TO CALL THE WHOLE SEQUENCE #########################################
def audio_line_check(
    write_to_file=True,
    filepath=DEFAULT_FILEPATH,
):
    """Execute all steps in the sequence"""  

    # Run setup function
    generation_instance, measurement_instance = setup()

    # Run main function
    main(generation_instance, measurement_instance, write_to_file, filepath)

    # Run cleanup function
    cleanup(generation_instance, measurement_instance)


####################################################################################################
# endregion test
