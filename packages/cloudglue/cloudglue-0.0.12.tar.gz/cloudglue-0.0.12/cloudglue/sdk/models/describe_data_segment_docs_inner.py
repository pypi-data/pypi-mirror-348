# coding: utf-8

############################################################################
# TODO: TO BE REMOVED - manually overriding while transitioning collections API to use new abstractions for transcription/description
############################################################################

"""
    cloudglue API

    API for cloudglue

    The version of the OpenAPI document: 0.0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from cloudglue.sdk.models.describe_data_segment_docs_inner_scene_text_inner import DescribeDataSegmentDocsInnerSceneTextInner
from cloudglue.sdk.models.describe_data_segment_docs_inner_speech_inner import DescribeDataSegmentDocsInnerSpeechInner
from cloudglue.sdk.models.describe_data_segment_docs_inner_visual_description_inner import DescribeDataSegmentDocsInnerVisualDescriptionInner
from cloudglue.sdk.models.extract_data_segment_entities_inner_segment_id import ExtractDataSegmentEntitiesInnerSegmentId
from typing import Optional, Set
from typing_extensions import Self

class DescribeDataSegmentDocsInner(BaseModel):
    """
    DescribeDataSegmentDocsInner
    """ # noqa: E501
    segment_id: Optional[ExtractDataSegmentEntitiesInnerSegmentId] = None
    start_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Start time of the segment in seconds")
    end_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="End time of the segment in seconds")
    title: Optional[StrictStr] = Field(default=None, description="Generated title for the segment")
    summary: Optional[StrictStr] = Field(default=None, description="Generated summary for the segment")
    visual_description: Optional[List[DescribeDataSegmentDocsInnerVisualDescriptionInner]] = Field(default=None, description="Description of visual content in the segment")
    scene_text: Optional[List[DescribeDataSegmentDocsInnerSceneTextInner]] = Field(default=None, description="Text detected on screen in the segment")
    speech: Optional[List[DescribeDataSegmentDocsInnerSpeechInner]] = Field(default=None, description="Transcription of speech in the segment")
    __properties: ClassVar[List[str]] = ["segment_id", "start_time", "end_time", "title", "summary", "visual_description", "scene_text", "speech"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DescribeDataSegmentDocsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of segment_id
        if self.segment_id:
            _dict['segment_id'] = self.segment_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in visual_description (list)
        _items = []
        if self.visual_description:
            for _item_visual_description in self.visual_description:
                if _item_visual_description:
                    _items.append(_item_visual_description.to_dict())
            _dict['visual_description'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in scene_text (list)
        _items = []
        if self.scene_text:
            for _item_scene_text in self.scene_text:
                if _item_scene_text:
                    _items.append(_item_scene_text.to_dict())
            _dict['scene_text'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in speech (list)
        _items = []
        if self.speech:
            for _item_speech in self.speech:
                if _item_speech:
                    _items.append(_item_speech.to_dict())
            _dict['speech'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DescribeDataSegmentDocsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "segment_id": ExtractDataSegmentEntitiesInnerSegmentId.from_dict(obj["segment_id"]) if obj.get("segment_id") is not None else None,
            "start_time": obj.get("start_time"),
            "end_time": obj.get("end_time"),
            "title": obj.get("title"),
            "summary": obj.get("summary"),
            "visual_description": [DescribeDataSegmentDocsInnerVisualDescriptionInner.from_dict(_item) for _item in obj["visual_description"]] if obj.get("visual_description") is not None else None,
            "scene_text": [DescribeDataSegmentDocsInnerSceneTextInner.from_dict(_item) for _item in obj["scene_text"]] if obj.get("scene_text") is not None else None,
            "speech": [DescribeDataSegmentDocsInnerSpeechInner.from_dict(_item) for _item in obj["speech"]] if obj.get("speech") is not None else None
        })
        return _obj


