# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: entry.proto
# plugin: python-betterproto
# This file has been @generated

__all__ = (
    "Test",
    "ExportEntry",
)


from dataclasses import dataclass
from typing import (
    List,
)

import betterproto


@dataclass(eq=False, repr=False)
class Test(betterproto.Message):
    """
    This is a minimal example of a repeated message field that caused issues when
    checking whether a message is a map.

    During the check wheter a field is a "map", the string "entry" is added to
    the field name, checked against the type name and then further checks are
    made against the nested type of a parent message. In this edge-case, the
    first check would pass even though it shouldn't and that would cause an
    error because the parent type does not have a "nested_type" attribute.
    """

    export: List["ExportEntry"] = betterproto.message_field(1)
    """
    
    """


@dataclass(eq=False, repr=False)
class ExportEntry(betterproto.Message):
    """ """

    name: str = betterproto.string_field(1)
    """
    
    """
